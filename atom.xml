<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>windCrain</title>
  
  
  <link href="https://windcrain.top/atom.xml" rel="self"/>
  
  <link href="https://windcrain.top/"/>
  <updated>2022-06-19T05:34:18.794Z</updated>
  <id>https://windcrain.top/</id>
  
  <author>
    <name>麦子落</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云盘挂载到本地硬盘</title>
    <link href="https://windcrain.top/post/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%A1%AC%E7%9B%98/"/>
    <id>https://windcrain.top/post/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%A1%AC%E7%9B%98/</id>
    <published>2022-06-17T13:02:38.137Z</published>
    <updated>2022-06-19T05:34:18.794Z</updated>
    
    <content type="html"><![CDATA[<p>​    这款开源的工具，支持的网盘特别多，有阿里、天翼、蓝奏、Onedrive、夸克、某大厂、123、迅雷云盘等等23种网盘之多。而这么多的网盘，操作方法基本相同，不同之处，可以查看作者官方网址：</p><p><a href="https://alist-doc.nn.ci/docs/driver/aliyundrive">https://alist-doc.nn.ci/docs/driver/aliyundrive</a></p><h2 id="安装Alist"><a href="#安装Alist" class="headerlink" title="安装Alist"></a>安装Alist</h2><p>打开<a href="https://github.com/Xhofe/alist/releases">AList Release</a>下载要部署的系统对应的文件。</p><p>直接解压获取到的 zip 压缩包，启动 alist-xxxx.exe 即可。</p><p>当看到输出<code>start server @ 0.0.0.0:5244</code>且之后没有报错后，就表示运行成功了，首次运行会输出初始密码，程序默认监听5244端口。<u><em>（移动程序目录，会改变初始密码）</em></u></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172121978.png" alt="image-20220617212115468"></p><h2 id="打开网址"><a href="#打开网址" class="headerlink" title="打开网址"></a>打开网址</h2><p>现在打开<code>http://127.0.0.1:5244</code>就可以看见登陆页面了，使用上图Your password的密码登录。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172122809.png" alt="image-20220617212250721"></p><p>登录成功后的界面。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172124374.png" alt="image-20220617212433256"></p><h2 id="添加账号"><a href="#添加账号" class="headerlink" title="添加账号"></a>添加账号</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172126137.png" alt="image-20220617212617024"></p><p>选择阿里云盘</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172136276.png" alt="image-20220617213649181"></p><h2 id="令牌获取"><a href="#令牌获取" class="headerlink" title="令牌获取"></a>令牌获取</h2><p>打开下面的网址</p><p><a href="https://alist-doc.nn.ci/docs/driver/aliyundrive">https://alist-doc.nn.ci/docs/driver/aliyundrive</a></p><p>然后点击【Get Token】。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172128444.png" alt="image-20220617212856347"></p><p>先点击上面的按钮，然后用手机端的阿里客户端扫描二维码，扫描以后，再点击上面的按钮。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172133628.png" alt="image-20220617213349569"></p><p>然后在二维码下面就有一串的口令，复制这段口令。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172132155.png" alt="image-20220617213209059"></p><h2 id="填写令牌"><a href="#填写令牌" class="headerlink" title="填写令牌"></a>填写令牌</h2><p>将令牌填入，点击保存。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172137573.png" alt="image-20220617213748488"></p><p>接着，我们进入到<a href="http://127.0.0.1:5244/页面，在这里，我们的网盘就加载进来了。">http://127.0.0.1:5244/页面，在这里，我们的网盘就加载进来了。</a></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172141564.png" alt="image-20220617214112491"></p><h2 id="安装RaiDrive"><a href="#安装RaiDrive" class="headerlink" title="安装RaiDrive"></a><strong>安装RaiDrive</strong></h2><p>可以从官网下载<a href="https://www.raidrive.com/">RaiDrive</a>，速度较慢。</p><p>也可以从这里下载</p><p><a href="https://wwb.lanzouj.com/b03j1mo1g">https://wwb.lanzouj.com/b03j1mo1g</a><br>密码:4xa3</p><p>下载完，直接安装即可。</p><h2 id="配置挂载参数"><a href="#配置挂载参数" class="headerlink" title="配置挂载参数"></a><strong>配置挂载参数</strong></h2><p>运行软件，点击Add。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172201830.png" alt="image-20220617220111734"></p><p>然后在这里依次选：NAS，WebDAV，去掉Address后面方框的勾，地址填：127.0.0.1，端口填：5244，路径填：dav。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172203843.png![image-20220617220927579](https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172209703.png" alt="图片"></p><p>上图中的7和8处，是用户名和密码，这里需要到Alist管理中(<a href="http://127.0.0.1:5244/@manage/settings/0)的“**设置-后端**”处，找到用户名和密码，复制粘贴到上图的7和8处，最后点“Connect”">http://127.0.0.1:5244/@manage/settings/0)的“**设置-后端**”处，找到用户名和密码，复制粘贴到上图的7和8处，最后点“Connect”</a></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172205825.png" alt="image-20220617220524666"></p><p>然后可以在电脑中看到已经成功挂载。</p><p><em>网盘的大小显示错误，但并不影响使用</em></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172211815.png" alt="image-20220617221119763"></p>]]></content>
    
    
    <summary type="html">网盘挂载到本地硬盘</summary>
    
    
    
    <category term="技术分享" scheme="https://windcrain.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="网盘" scheme="https://windcrain.top/tags/%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>This request has been blocked； the content must be served over HTTPS.</title>
    <link href="https://windcrain.top/post/this-request-has-been-blocked-the-content-must-be-served-over-https/"/>
    <id>https://windcrain.top/post/this-request-has-been-blocked-the-content-must-be-served-over-https/</id>
    <published>2022-06-08T05:31:54.000Z</published>
    <updated>2022-06-17T03:28:02.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This request has been blocked; the <span class="attribute">content</span> must be served over HTTPS.</span><br></pre></td></tr></table></figure><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>1、Http与Https混合使用<br>        项目生产环境使用的是https协议，某页面嵌入第三方连接，通过ajax调用相关接口获取信息实现登陆第三方系统，第三方系统暂未升级使用https，故在页面点击链接时出现上述错误信息。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1、将所有系统的协议都升级为https协议；</p><p>2、在引入第三方url的页面添加如下信息：</p><p>通过在网页 head 中添加标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;<span class="attribute">Content</span>-Security-Policy&quot; <span class="attribute">content</span>=&quot;upgrade-insecure-requests&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">This request has been blocked； the content must be served over HTTPS.</summary>
    
    
    
    <category term="疑难杂症" scheme="https://windcrain.top/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
    <category term="http" scheme="https://windcrain.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+GitHub搭建个人博客</title>
    <link href="https://windcrain.top/post/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://windcrain.top/post/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-06-07T06:35:56.000Z</published>
    <updated>2022-06-17T03:27:06.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装相关工具"><a href="#安装相关工具" class="headerlink" title="安装相关工具"></a>安装相关工具</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>打开cmd命令行(win+r 输入cmd回车)分别执行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>如果都可以成功运行出现版本信息证明安装成功。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>必须按照步骤来，因为hexo需要使用node.js的npm命令。<br>在合适的地方新建一个文件夹，用来存放自己的博客文件，在目录下右键点击<code>Git Bash Here</code>，然后输入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure><p>等待安装hexo完成后，输入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>检查是否安装成功。</p><h3 id="在github上创建并设置远程库"><a href="#在github上创建并设置远程库" class="headerlink" title="在github上创建并设置远程库"></a>在github上创建并设置远程库</h3><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init C:/hexo </span><br><span class="line">cd C:/hexo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>依次输入上面三条语句</p><p>接着输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/，效果如下：">http://localhost:4000/，效果如下：</a></p><p><a href="https://imgtu.com/i/X0L9pD"><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071437977.png" alt="X0L9pD.png"></a></p><h2 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h2><p>回到你的git bash中，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p><a href="https://imgtu.com/i/X0X8YV"><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071437978.png" alt="X0X8YV.png"></a></p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p><a href="https://imgtu.com/i/X0jQje"><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071437979.png" alt="X0jQje.png"></a></p><p>在gitbash中，查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://yourname.github.io">http://yourname.github.io</a> 这个网站看到你的博客了！！</p><p><a href="https://imgtu.com/i/X0v12T"><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071437980.png" alt="X0v12T.png"></a></p><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><p>现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点解析进去，添加解析。</p><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。<br>解析线路选择默认。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071146026.png" alt="image-20220607114636904"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071148365.png" alt="image-20220607114800278"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071149229.png" alt="image-20220607114907178"></p><p>最后，在gitbash中，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>就可以看到更新了。</p>]]></content>
    
    
    <summary type="html">使用Hexo+Github搭建个人博客</summary>
    
    
    
    <category term="技术分享" scheme="https://windcrain.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="GitHub" scheme="https://windcrain.top/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://windcrain.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用 PicGo+GitHub 搭建免费图床</title>
    <link href="https://windcrain.top/post/%E4%BD%BF%E7%94%A8%20PicGo+GitHub%20%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
    <id>https://windcrain.top/post/%E4%BD%BF%E7%94%A8%20PicGo+GitHub%20%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</id>
    <published>2022-06-07T06:02:38.000Z</published>
    <updated>2022-06-17T03:24:55.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登录GitHub，创建一个新的仓库（public）；"><a href="#登录GitHub，创建一个新的仓库（public）；" class="headerlink" title="登录GitHub，创建一个新的仓库（public）；"></a>登录GitHub，创建一个新的仓库（public）；</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071400466.png" alt="picgo01"></p><h2 id="安装开源图床工具-PicGo"><a href="#安装开源图床工具-PicGo" class="headerlink" title="安装开源图床工具 PicGo"></a>安装开源图床工具 <a href="https://molunerfinn.com/PicGo/">PicGo</a></h2><p>打开官网，点击免费下载，在Assets下面选择合适的版本下载安装。<br><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071401336.png" alt="picgo02"></p><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><h3 id="Github-创建一个-token"><a href="#Github-创建一个-token" class="headerlink" title="Github 创建一个 token"></a>Github 创建一个 token</h3><p>在GitHub头像处打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code>；</p><h3 id="填写及勾选相关信息"><a href="#填写及勾选相关信息" class="headerlink" title="填写及勾选相关信息"></a>填写及勾选相关信息</h3><p>然后点击 <code>Genetate token</code> 即可</p><p>==勾选repo==</p><h3 id="token生成后自行保存"><a href="#token生成后自行保存" class="headerlink" title="token生成后自行保存"></a>token生成后自行保存</h3><p>注意它只会显示一次</p><h3 id="配置PicGo-1"><a href="#配置PicGo-1" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p>依次打开 图床设置 -&gt; Github 图床；<br>填写相关信息，最后点击 <code>确定</code>即可，要将其作为默认图床的话，点击设为默认图床；<br><u><strong><em>分支名填master</em></strong></u>（若后续出现问题，可改成main试试）<br><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071401531.png" alt="picgo03"></p><h3 id="上传图片，通过上传区上传即可"><a href="#上传图片，通过上传区上传即可" class="headerlink" title="上传图片，通过上传区上传即可"></a>上传图片，通过上传区上传即可</h3><p>Ctrl V 或者将图片拖拽都可以，也可以通过快捷键的方式上传（默认上传键为 <code>Ctrl + Shift + P</code>）</p><h2 id="加速访问（貌似失效）"><a href="#加速访问（貌似失效）" class="headerlink" title="加速访问（貌似失效）"></a><del>加速访问</del>（貌似失效）</h2><p>用 <a href="https://www.jsdelivr.com/">jsDelivr</a> 进行免费加速，在我们 PicGo 图床配置中添加如下自定义域名即可；</p><hr><p>​          <a href="https://cdn.jsdelivr.net/gh/用户名/仓库名@master">https://cdn.jsdelivr.net/gh/用户名/仓库名@master</a></p><hr><h2 id="快捷键修改"><a href="#快捷键修改" class="headerlink" title="快捷键修改"></a>快捷键修改</h2><p>推荐改成 <code>Ctrl + shift +c</code>。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071402109.png" alt="picgo快捷键"></p>]]></content>
    
    
    <summary type="html">使用 PicGo+GitHub 搭建免费图床</summary>
    
    
    
    <category term="技术分享" scheme="https://windcrain.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="图床" scheme="https://windcrain.top/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="GitHub" scheme="https://windcrain.top/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>CPlusPlusThings-practical_exercises</title>
    <link href="https://windcrain.top/post/CPlusPlusThings/"/>
    <id>https://windcrain.top/post/CPlusPlusThings/</id>
    <published>2022-05-08T11:57:55.000Z</published>
    <updated>2022-06-10T12:01:07.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h2><h4 id="联合体union"><a href="#联合体union" class="headerlink" title="联合体union"></a>联合体union</h4><p>结构体和共用体的<code>区别</code>在于：结构体的各个成员会占用不同的内存，互相之间没有影响；而共用体的所有成员占用同一段内存，修改一个成员会影响其余所有成员。</p><h4 id="一种条件编译指令注释"><a href="#一种条件编译指令注释" class="headerlink" title="一种条件编译指令注释"></a>一种条件编译指令注释</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;world&quot;</span> &lt;&lt; endl; <span class="comment">// 该行代码被注释掉</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h2><h4 id="enum枚举"><a href="#enum枚举" class="headerlink" title="enum枚举"></a>enum枚举</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Roster</span> &#123;Tom, Sharon, Bill, Teresa, John&#125;;<span class="comment">//该语句将创建一个名为 Roster 的数据类型。</span></span><br></pre></td></tr></table></figure><p>默认情况下，编译器设置第一个枚举量为 0，下一个为 1，以此类推。在上述示例中，Tom 的值将是 0，Sharon 的值为 1，等等。最后一个枚举量 John 的值为 4。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Roster student;</span><br><span class="line">student = Sharon;</span><br><span class="line"><span class="keyword">if</span> (student == Sharon)  <span class="comment">//Sharon 周围没有引号。因为它是一个命名常量，而不是字符串常数。</span></span><br></pre></td></tr></table></figure><p>即使枚举数据类型中的值实际存储为整数，也不能总是将整数值替换为符号名称。例如，不能使用下面的语句将 Sharon 赋值给 student：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student = <span class="number">1</span>; <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><p>但是，可以使用整数值而不是符号名称来测试枚举变量。例如，以下两个 if 语句是等效的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (student == Bill)</span><br><span class="line"><span class="keyword">if</span> (student == <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>【示例 1】</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Colors</span> &#123; red, orange, yellow = <span class="number">9</span>, green, blue &#125;;</span><br></pre></td></tr></table></figure><p>在该示例中，命名常量 red 将被赋值为 0，orange 将为 1，yellow 将为 9，green 将为 10，blue 将为 11。</p><p>【示例 2】</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Rooms</span> &#123; livingroom = <span class="number">1</span>, den, bedroom, kitchen &#125;;</span><br></pre></td></tr></table></figure><p>在该示例中，livingroom 被赋值为 1，den 将为 2，bedroom 将为 3，kitchen 将为 4。</p><h2 id="day3"><a href="#day3" class="headerlink" title="day3"></a>day3</h2><h4 id="inline内联函数"><a href="#inline内联函数" class="headerlink" title="inline内联函数"></a>inline内联函数</h4><p>关键字inline 必须与函数定义体放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用。</p><p><strong>建议把inline函数的定义放到头文件中。在每个调用该inline函数的文件中包含该头文件。</strong></p><h4 id="前向引用声明"><a href="#前向引用声明" class="headerlink" title="前向引用声明"></a>前向引用声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用前向引用声明虽然可以解决一些问题，但它并不是万能的。需要注意的是，</span></span><br><span class="line"><span class="comment">尽管使用了前向引用声明，但是在提供一个完整的类声明之前，不能声明该类的对象，</span></span><br><span class="line"><span class="comment">也不能在内联成员函数中使用该类的对象。请看下面的程序段：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fred</span>;<span class="comment">//前向引用声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Barney</span> &#123;</span><br><span class="line">   Fred x;<span class="comment">//错误：类Fred的声明尚不完善</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fred</span> &#123;</span><br><span class="line">   Barney y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fred</span>;<span class="comment">//前向引用声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Barney</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">     x-&gt;<span class="built_in">yabbaDabbaDo</span>();<span class="comment">//错误：Fred类的对象在定义之前被使用</span></span><br><span class="line">   &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">   Fred* x;   <span class="comment">//正确，经过前向引用声明，可以声明Fred类的对象指针</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fred</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">yabbaDabbaDo</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">   Barney* y;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h4 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">学习知识：</span></span><br><span class="line"><span class="comment">静态数据成员</span></span><br><span class="line"><span class="comment">用关键字static声明</span></span><br><span class="line"><span class="comment">该类的所有对象维护该成员的同一个拷贝</span></span><br><span class="line"><span class="comment">必须在类外定义和初始化，用(::)来指明所属的类。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Point</span>(<span class="type">int</span> xx=<span class="number">0</span>, <span class="type">int</span> yy=<span class="number">0</span>) &#123;X=xx; Y=yy; countP++; &#125; </span><br><span class="line">    <span class="built_in">Point</span>(Point &amp;p);</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetX</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> X;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetY</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> Y;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetC</span><span class="params">()</span> </span>&#123;cout&lt;&lt;<span class="string">&quot; Object id=&quot;</span>&lt;&lt;countP&lt;&lt;endl;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> X,Y;</span><br><span class="line">    <span class="comment">//静态数据成员，必须在外部定义和初始化，内部不能直接初始化！</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> countP;</span><br><span class="line">&#125;;</span><br><span class="line">Point::<span class="built_in">Point</span>(Point &amp;p)</span><br><span class="line">&#123;X=p.X;</span><br><span class="line">Y=p.Y;</span><br><span class="line">countP++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//必须在类外定义和初始化，用(::)来指明所属的类。</span></span><br><span class="line"><span class="type">int</span> Point::countP=<span class="number">0</span>; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="function">Point <span class="title">A</span><span class="params">(<span class="number">4</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Point A,&quot;</span>&lt;&lt;A.<span class="built_in">GetX</span>()&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;A.<span class="built_in">GetY</span>();</span><br><span class="line">A.<span class="built_in">GetC</span>();</span><br><span class="line"><span class="function">Point <span class="title">B</span><span class="params">(A)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Point B,&quot;</span>&lt;&lt;B.<span class="built_in">GetX</span>()&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;B.<span class="built_in">GetY</span>();</span><br><span class="line">B.<span class="built_in">GetC</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">知识点：</span></span><br><span class="line"><span class="comment">静态成员函数</span></span><br><span class="line"><span class="comment">类外代码可以使用类名和作用域操作符来调用静态成员函数。</span></span><br><span class="line"><span class="comment">静态成员函数只能引用属于该类的静态数据成员或静态成员函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">f</span><span class="params">(A a)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> global;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//静态数据成员必须在类外定义和初始化，用(::)来指明所属的类。</span></span><br><span class="line"><span class="type">int</span> A::global = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::f</span><span class="params">(A a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态成员函数只能引用属于该类的静态数据成员或静态成员函数。</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;x; //对x的引用是错误的</span></span><br><span class="line">    cout &lt;&lt; a.x;  <span class="comment">//正确</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    global = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; global &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    a.<span class="built_in">g</span>();<span class="comment">//5</span></span><br><span class="line">    a.<span class="built_in">f</span>(<span class="built_in">A</span>());<span class="comment">//0</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数综合练习题"><a href="#函数综合练习题" class="headerlink" title="函数综合练习题"></a>函数综合练习题</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一圆型游泳池如图所示，现在需在其周围建一圆型过道，并在其四周围上栅栏。栅栏价格为35元/米，过道造价为20元/平方米。</span></span><br><span class="line"><span class="comment">过道宽度为3米，游泳池半径由键盘输入。要求编程计算并输出过道和栅栏的造价。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">图形描述：大圆嵌套小圆：</span></span><br><span class="line"><span class="comment">小圆在大圆中间，小圆为游泳池，大圆与小圆间隔为过道。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> PI = <span class="number">3.14159</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> FencePrice = <span class="number">35</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> ConcretePrice = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Price</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Price</span>(<span class="type">float</span> bj);</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">zhouchang</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">mianji</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">float</span> r;<span class="comment">//半径</span></span><br><span class="line">&#125;;</span><br><span class="line">Price::<span class="built_in">Price</span>(<span class="type">float</span> bj) &#123;</span><br><span class="line">    r = bj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Price::zhouchang</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * PI * r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Price::mianji</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PI * r * r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> bj;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入游泳池半径： &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; bj;</span><br><span class="line">    <span class="function">Price <span class="title">p1</span><span class="params">(bj)</span></span>;</span><br><span class="line">    <span class="function">Price <span class="title">p2</span><span class="params">(bj + <span class="number">3</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;过道造价为： &quot;</span> &lt;&lt; (ConcretePrice * (p2.<span class="built_in">mianji</span>() - p1.<span class="built_in">mianji</span>())) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栅栏造价为： &quot;</span> &lt;&lt; (FencePrice * p2.<span class="built_in">zhouchang</span>()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h2><h4 id="const用法"><a href="#const用法" class="headerlink" title="const用法"></a>const用法</h4><p>常类型的对象必须进行初始化，而且不能被更新。<br>常引用：被引用的对象不能被更新。<br>const  类型说明符  &amp;引用名<br>常对象：必须进行初始化,不能被更新。<br>类名  const  对象名<br>常数组：数组元素不能被更新。<br>类型说明符  const  数组名[大小]…<br>常指针：指向常量的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">R</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">R</span>(<span class="type">int</span> r1, <span class="type">int</span> r2) &#123; R1 = r1; R2 = r2; &#125;</span><br><span class="line">    <span class="comment">//const区分成员重载函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> R1, R2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">常成员函数说明格式：类型说明符  函数名（参数表）const;</span></span><br><span class="line"><span class="comment">这里，const是函数类型的一个组成部分，因此在实现部分也要带const关键字。</span></span><br><span class="line"><span class="comment">const关键字可以被用于参与对重载函数的区分</span></span><br><span class="line"><span class="comment">！！！通过常对象只能调用它的常成员函数！！！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R::print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;普通调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; R1 &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; R2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化也需要带上</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R::print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;常对象调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; R1 &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; R2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">a</span><span class="params">(<span class="number">5</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    a.<span class="built_in">print</span>();  <span class="comment">//调用void print()</span></span><br><span class="line">    <span class="comment">//!!!通过常对象只能调用它的常成员函数!!!</span></span><br><span class="line">    <span class="function"><span class="type">const</span> R <span class="title">b</span><span class="params">(<span class="number">20</span>, <span class="number">52</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">print</span>();  <span class="comment">//调用void print() const</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ifndef"><a href="#ifndef" class="headerlink" title="ifndef"></a>ifndef</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#ifndef   标识符</span></span><br><span class="line"><span class="comment">       程序段1</span></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"><span class="comment">       程序段2</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">如果“标识符”未被定义过，则编译程序段1，否则编译程序段2。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h2><h4 id="构造函数和析构函数的构造规则"><a href="#构造函数和析构函数的构造规则" class="headerlink" title="构造函数和析构函数的构造规则"></a>构造函数和析构函数的构造规则</h4><p>1、派生类可以不定义构造函数的情况<br>当具有下述情况之一时，派生类可以不定义构造函数。<br>基类没有定义任何构造函数。<br>基类具有缺省参数的构造函数。<br>基类具有无参构造函数。<br>2、派生类必须定义构造函数的情况<br>当基类或成员对象所属类只含有带参数的构造函数时，即使派生类本身没有数据成员要初始化，它也必须定义构造函数，并以构造函数初始化列表的方式向基类和成员对象的构造函数传递参数，以实现基类子对象和成员对象的初始化。<br>3、派生类的构造函数只负责直接基类的初始化 </p><h4 id="派生类对象的构造"><a href="#派生类对象的构造" class="headerlink" title="派生类对象的构造"></a>派生类对象的构造</h4><ul><li>先构造基类</li><li>再构造成员</li><li>最后构造自身（调用构造函数）</li></ul><p>基类构造顺序由派生层次决定：<strong>最远的基类最先构造</strong><br>成员构造顺序和定义顺序符合<br>析构函数的析构顺序与构造相反</p><h4 id="基类与派生类对象的关系"><a href="#基类与派生类对象的关系" class="headerlink" title="基类与派生类对象的关系"></a>基类与派生类对象的关系</h4><p>基类对象与派生类对象之间存在赋值相容性。包括以下几种情况：<br>把派生类对象赋值给基类对象。即用派生类对象中从基类继承来的数据成员逐个赋值给基类对象的数据成员。</p><p>把派生类对象的地址赋值给基类指针。</p><p>用派生类对象初始化基类对象的引用。</p><p>如果函数的形参是基类对象或基类对象的引用，在调用函数时可以用派生类对象作为实参。</p><p>反之则不行，即不能把基类对象赋值给派生类对象；不能把基类对象的地址赋值给派生类对象的指针；也不能把基类对象作为派生对象的引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setA</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; a = x; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> :<span class="keyword">public</span> A &#123;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setB</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; b = x; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> b; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(A a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a.<span class="built_in">setA</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">(A* pA, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pA-&gt;<span class="built_in">setA</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f3</span><span class="params">(A&amp; rA, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rA.<span class="built_in">setA</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1, * pA;</span><br><span class="line">    B b1, * pB;</span><br><span class="line">    a1.<span class="built_in">setA</span>(<span class="number">1</span>);</span><br><span class="line">    b1.<span class="built_in">setA</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//把派生类对象赋值给基类对象。</span></span><br><span class="line">    a1 = b1;</span><br><span class="line">    cout &lt;&lt; a1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//2</span></span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//2</span></span><br><span class="line">    a1.<span class="built_in">setA</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; a1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//10</span></span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//2</span></span><br><span class="line">    <span class="comment">//把派生类对象的地址赋值给基类指针。 </span></span><br><span class="line">    pA = &amp;b1;</span><br><span class="line">    pA-&gt;<span class="built_in">setA</span>(<span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; pA-&gt;<span class="built_in">getA</span>() &lt;&lt; endl; <span class="comment">//20</span></span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//20</span></span><br><span class="line">    <span class="comment">//用派生类对象初始化基类对象的引用。</span></span><br><span class="line">    A&amp; ra = b1;</span><br><span class="line">    ra.<span class="built_in">setA</span>(<span class="number">30</span>);</span><br><span class="line">    cout &lt;&lt; pA-&gt;<span class="built_in">getA</span>() &lt;&lt; endl; <span class="comment">//30</span></span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//30</span></span><br><span class="line">    b1.<span class="built_in">setA</span>(<span class="number">7</span>);</span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//7</span></span><br><span class="line">    <span class="built_in">f1</span>(b1, <span class="number">100</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1111111111&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;<span class="comment">//7    </span></span><br><span class="line">    <span class="built_in">f2</span>(&amp;b1, <span class="number">200</span>);</span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//200</span></span><br><span class="line">    <span class="built_in">f3</span>(b1, <span class="number">300</span>);</span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//300</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承访问权限"><a href="#继承访问权限" class="headerlink" title="继承访问权限"></a>继承访问权限</h4><p>一、公有继承<br>1.基类中protected的成员<br>类内部：可以访问<br>类的使用者：不能访问<br>类的派生类成员：可以访问<br>2.派生类不可访问基类的private成员<br>3.派生类可访问基类的protected成员<br>4.派生类可访问基类的public成员</p><p>二、私有继承<br>派生类不可访问基类的任何成员与函数</p><p>三、保护继承<br>派生方式为protected的继承称为保护继承，在这种继承方式下，<br>基类的public成员在派生类中会变成protected成员，<br>基类的protected和private成员在派生类中保持原来的访问权限<br><em>注意点：当采用保护继承的时候，由于public成员变为protected成员，因此类的使用者不可访问！而派生类可访问！</em></p><p>四、派生类对基类成员的访问形式<br>1.通过派生类对象直接访问基类成员<br>2.在派生类成员函数中直接访问基类成员<br>3.通过基类名字限定访问被重载的基类成员名  </p><h4 id="虚基类调用次序"><a href="#虚基类调用次序" class="headerlink" title="虚基类调用次序"></a>虚基类调用次序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;Constructing A&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;Constructing B&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>() &#123; cout &lt;&lt; <span class="string">&quot;Constructing C&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B1</span> : <span class="keyword">public</span> C ,<span class="keyword">virtual</span> <span class="keyword">public</span> B, <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B1</span>(<span class="type">int</span> i) &#123; cout &lt;&lt; <span class="string">&quot;Constructing B1&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B2</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> C ,<span class="keyword">public</span> A, <span class="keyword">virtual</span> <span class="keyword">public</span> B  &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B2</span>(<span class="type">int</span> j) &#123; cout &lt;&lt; <span class="string">&quot;Constructing B2&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B1, <span class="keyword">public</span> B2 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">D</span>(<span class="type">int</span> m, <span class="type">int</span> n) : <span class="built_in">B1</span>(m), <span class="built_in">B2</span>(n) &#123; cout &lt;&lt; <span class="string">&quot;Constructing D&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">D <span class="title">d</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Constructing B</span></span><br><span class="line"><span class="comment">Constructing A</span></span><br><span class="line"><span class="comment">Constructing C</span></span><br><span class="line"><span class="comment">Constructing C</span></span><br><span class="line"><span class="comment">Constructing B1</span></span><br><span class="line"><span class="comment">Constructing A</span></span><br><span class="line"><span class="comment">Constructing B2</span></span><br><span class="line"><span class="comment">Constructing A</span></span><br><span class="line"><span class="comment">Constructing D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//被虚拟继承的基类,在其所有的派生类中，仅出现一次//</span></span><br></pre></td></tr></table></figure><p>调用顺序的规定：</p><p>先调用虚基类的构造函数，再调用非虚基类的构造函数<br>若同一层次中包含多个虚基类,这些虚基类的构造函数按它们的说明的次序调用<br>若虚基类由非基类派生而来,则仍然先调用基类构造函数,再调用派生类构造函数</p><h2 id="day6"><a href="#day6" class="headerlink" title="day6"></a>day6</h2><h4 id="C-对抽象类具有以下限定"><a href="#C-对抽象类具有以下限定" class="headerlink" title="C++对抽象类具有以下限定"></a>C++对抽象类具有以下限定</h4><ul><li>抽象类中含有纯虚函数，由于纯虚函数没有实现代码，所以不能建立抽象类的对象。</li><li>抽象类只能作为其他类的基类，可以通过抽象类对象的指针或引用访问到它的派生类对象，实现运行时的多态性。</li><li>如果派生类只是简单地继承了抽象类的纯虚函数，而没有重新定义基类的纯虚函数，则派生类也是一个抽象类。</li></ul><h2 id="day7"><a href="#day7" class="headerlink" title="day7"></a>day7</h2><h4 id="重载二元运算符"><a href="#重载二元运算符" class="headerlink" title="重载二元运算符"></a>重载二元运算符</h4><p>（1）非静态成员运算符重载</p><p>以类成员形式重载的运算符参数比实际参数少一个，第1个参数是以this指针隐式传递的。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="type">double</span> real,image;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Complex <span class="keyword">operator</span>+(Complex b)&#123;……&#125;</span><br><span class="line">......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>（2） 友元运算符重载</p><p>如果将运算符函数作为类的友元重载，它需要的参数个数就与运算符实际需要的参数个数相同。比如，若用友元函数重载Complex类的加法运算符，则形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(Complex a,Complex b);<span class="comment">//声明</span></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex  <span class="keyword">operator</span>+(Complex a,Complex b)&#123;……&#125;     <span class="comment">//定义</span></span><br></pre></td></tr></table></figure><p><em>对于不要求左值且可以交换参数次序的运算符（如+、-、</em>、/ 等运算符），最好用非成员形式（包括友元和普通函数）的重载运算符函数实现。*</p><h4 id="重载一元运算符"><a href="#重载一元运算符" class="headerlink" title="重载一元运算符"></a>重载一元运算符</h4><p>一元运算符只需要一个运算参数，如取地址运算符（&amp;）、负数（?）、自增加（++）等。</p><p>前自增(减)与后自增(减)：C++编译器可以通过在运算符函数参数表中是否插入关键字int 来区分这两种方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前缀</span></span><br><span class="line"><span class="keyword">operator</span> -- ();</span><br><span class="line"><span class="keyword">operator</span> -- (X &amp; x);</span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line"><span class="keyword">operator</span> -- (<span class="type">int</span>);</span><br><span class="line"><span class="keyword">operator</span> -- (X &amp; x, <span class="type">int</span>);</span><br></pre></td></tr></table></figure><h4 id="重载赋值运算符"><a href="#重载赋值运算符" class="headerlink" title="重载赋值运算符="></a>重载赋值运算符=</h4><p>1、赋值运算符“=”的重载特殊性</p><p>赋值运算进行时将调用此运算符</p><p>只能用成员函数重载</p><p>如果需要而没有定义时，编译器自动生成，该版本进行bit-by-bit拷贝</p><h4 id="重载赋值运算符-1"><a href="#重载赋值运算符-1" class="headerlink" title="重载赋值运算符[]"></a>重载赋值运算符[]</h4><p>1、[ ]是一个二元运算符，其重载形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>&#123;</span><br><span class="line">……</span><br><span class="line">X&amp; <span class="keyword">operator</span>[](<span class="type">int</span> n);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、重载[]需要注意的问题</p><ul><li>[]是一个二元运算符，其第1个参数是通过对象的this指针传递的，第2个参数代表数组的下标</li><li>由于[]既可以出现在赋值符“=”的左边，也可以出现在赋值符“=”的右边，所以重载运算符[]时常返回引用。</li><li><strong>[]只能被重载为类的非静态成员函数，不能被重载为友元和普通函数</strong>。</li></ul><h4 id="重载"><a href="#重载" class="headerlink" title="重载( )"></a>重载( )</h4><p>1、运算符( )是函数调用运算符，也能被重载。且只能被重载为类的成员函数。</p><p>2、运算符( )的重载形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>&#123;</span><br><span class="line">……</span><br><span class="line"><span class="function">X&amp; <span class="title">operator</span><span class="params">( )</span><span class="params">(参数表)</span></span>;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>其中的参数表可以包括任意多个参数。</p><p>3、运算符( )的调用形式如下：</p><p>X Obj;                      //对象定义</p><p>Obj()(参数表);          //调用形式1</p><p>Obj(参数表);               //调用形式2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> i = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;X::operator(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl; <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;X::operator(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="keyword">operator</span>[] (<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;X::operator[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl; <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="keyword">operator</span>[] (<span class="type">char</span>* cp)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;X::operator[&quot;</span> &lt;&lt; cp &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">X obj;<span class="type">int</span> i = <span class="built_in">obj</span>(<span class="built_in">obj</span>(<span class="number">1</span>), <span class="number">2</span>);</span><br><span class="line"><span class="type">char</span>* c=<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"><span class="type">int</span> a = obj[i];<span class="type">int</span> b = obj[c];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">//设计一个字符串类String，通过运算符重载实现字符串的输入、输出以及+=、==、!=、&lt;、&gt;、&gt;=、[ ]等运算。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> length; <span class="comment">//字符串长度</span></span><br><span class="line">    <span class="type">char</span>* sPtr; <span class="comment">//存放字符串的指针</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setString</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s2)</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> String&amp; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; s.sPtr;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, String&amp; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> is &gt;&gt; s.sPtr;</span><br><span class="line">    &#125;; <span class="comment">//重载输入运算符</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* = <span class="string">&quot;&quot;</span>);</span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; R)</span><br><span class="line">    &#123;</span><br><span class="line">        length = R.length;</span><br><span class="line">        <span class="built_in">strcpy</span>(sPtr, R.sPtr);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;;                                         <span class="comment">//重载赋值运算符 =</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> String&amp; R);       <span class="comment">//字符串的连接 +=</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String&amp; R);          <span class="comment">//字符串的相等比较 ==</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> String&amp; R);          <span class="comment">//字符串的不等比较 !=</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!();                          <span class="comment">//判定字符串是否为空</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> String&amp; R) <span class="type">const</span>;     <span class="comment">//字符串的小于比较 &lt;</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> String&amp; R);           <span class="comment">//字符串的大于比较 &gt;</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> String&amp; R);          <span class="comment">//字符串的大于等于比较</span></span><br><span class="line">    <span class="type">char</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span>);                     <span class="comment">//字符串的下标运算</span></span><br><span class="line">    ~<span class="built_in">String</span>() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">String&amp; String::<span class="keyword">operator</span>+=(<span class="type">const</span> String&amp; R)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* temp = sPtr;</span><br><span class="line">    length += R.length;</span><br><span class="line">    sPtr = <span class="keyword">new</span> <span class="type">char</span>[length + <span class="number">2</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(sPtr, temp);</span><br><span class="line">    <span class="built_in">strcat</span>(sPtr, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(sPtr, R.sPtr);</span><br><span class="line">    <span class="keyword">delete</span>[] temp;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str)</span><br><span class="line">&#123;</span><br><span class="line">    sPtr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(sPtr, str);</span><br><span class="line">    length = <span class="built_in">strlen</span>(str);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>==(<span class="type">const</span> String&amp; R) &#123; <span class="keyword">return</span> <span class="built_in">strcmp</span>(sPtr, R.sPtr) == <span class="number">0</span>; &#125;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>!=(<span class="type">const</span> String&amp; R) &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == R); &#125;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>!() &#123; <span class="keyword">return</span> length == <span class="number">0</span>; &#125;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>&lt;(<span class="type">const</span> String&amp; R) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">strcmp</span>(sPtr, R.sPtr) &lt; <span class="number">0</span>; &#125;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>&gt;(<span class="type">const</span> String&amp; R) &#123; <span class="keyword">return</span> R &lt; *<span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>&gt;=(<span class="type">const</span> String&amp; R) &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; R); &#125;</span><br><span class="line"><span class="type">char</span>&amp; String::<span class="keyword">operator</span>[](<span class="type">int</span> subscript) &#123; <span class="keyword">return</span> sPtr[subscript]; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;happy&quot;</span>)</span>, <span class="title">s2</span><span class="params">(<span class="string">&quot;new year&quot;</span>)</span>, s3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 is &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&quot;\ns2 is &quot;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&quot;\ns3 is &quot;</span> &lt;&lt; s3</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\n比较s2和s1:&quot;</span></span><br><span class="line">        &lt;&lt; <span class="string">&quot;\ns2 ==s1结果是 &quot;</span> &lt;&lt; (s2 == s1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>)</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\ns2 != s1结果是 &quot;</span> &lt;&lt; (s2 != s1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>)</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\ns2 &gt;  s1结果是 &quot;</span> &lt;&lt; (s2 &gt; s1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>)</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\ns2 &lt;  s1结果是 &quot;</span> &lt;&lt; (s2 &lt; s1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>)</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\ns2 &gt;= s1结果是 &quot;</span> &lt;&lt; (s2 &gt;= s1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n测试s3是否为空: &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!s3)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s3是空串&quot;</span> &lt;&lt; endl; <span class="comment">//L3</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;把s1赋给s3的结果是：&quot;</span>;</span><br><span class="line">        s3 = s1;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s3=&quot;</span> &lt;&lt; s3 &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//L5</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 += s2 的结果是：s1=&quot;</span>; <span class="comment">//L6</span></span><br><span class="line">    s1 += s2;</span><br><span class="line">    cout &lt;&lt; s1; <span class="comment">//L7</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\ns1 += to you 的结果是：&quot;</span>; <span class="comment">//L8</span></span><br><span class="line">    s1 += <span class="string">&quot;to you&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl; <span class="comment">//L9</span></span><br><span class="line">    s1[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    s1[<span class="number">6</span>] = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">    s1[<span class="number">10</span>] = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//L10</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">s1 is happy</span></span><br><span class="line"><span class="comment">s2 is new year</span></span><br><span class="line"><span class="comment">s3 is</span></span><br><span class="line"><span class="comment">比较s2和s1:</span></span><br><span class="line"><span class="comment">s2 ==s1结果是 false</span></span><br><span class="line"><span class="comment">s2 != s1结果是 true</span></span><br><span class="line"><span class="comment">s2 &gt;  s1结果是 true</span></span><br><span class="line"><span class="comment">s2 &lt;  s1结果是 false</span></span><br><span class="line"><span class="comment">s2 &gt;= s1结果是 true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">测试s3是否为空: s3是空串</span></span><br><span class="line"><span class="comment">把s1赋给s3的结果是：s3=happy</span></span><br><span class="line"><span class="comment">s1 += s2 的结果是：s1=happy new year</span></span><br><span class="line"><span class="comment">s1 += to you 的结果是：s1 = happy new year to you</span></span><br><span class="line"><span class="comment">s1 = Happy New Year to you</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="day8"><a href="#day8" class="headerlink" title="day8"></a>day8</h2><h4 id="函数模板的特化"><a href="#函数模板的特化" class="headerlink" title="函数模板的特化"></a>函数模板的特化</h4><ul><li>特化的原因<br>但在某些情况下，模板描述的通用算法不适合特定的场合（数据类型等）<br>比如：如max函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * cp = <span class="built_in">max</span> (“abcd”, “<span class="number">1234</span>”);</span><br><span class="line">实例化为：<span class="function"><span class="type">char</span> * <span class="title">max</span> <span class="params">(<span class="type">char</span> * a, <span class="type">char</span> * b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</span><br></pre></td></tr></table></figure><p>这肯定是有问题的，因为字符串的比较为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> * <span class="title">max</span> <span class="params">(<span class="type">char</span> * a, <span class="type">char</span> * b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> <span class="built_in">strcmp</span>(a, b)&gt;<span class="number">0</span> ? a : b;   &#125;</span><br></pre></td></tr></table></figure><ul><li>特化<br>所谓特化，就是针对模板不能处理的特殊数据类型，编写与模板同名的特殊函数专门处理这些数据类型。<br>模板特化的定义形式：<br>template &lt;&gt; 返回类型 函数名&lt;特化的数据类型&gt;(参数表) {<pre><code>……                             </code></pre>}<br>说明：<br>① template &lt; &gt;是模板特化的关键字，&lt; &gt;中不需要任何内容；<br>② 函数名后的&lt; &gt;中是需要特化处理的数据类型。</li></ul><p>说明<br>① 当程序中同时存在模板和它的特化时，<strong>特化将被优先调用</strong>；<br>② 在同一个程序中，除了函数模板和它的特化外，还可以有同名的普通函数。其区别在于C++会对普通函数的调用实参进行隐式的类型转换，但不会对模板函数及特化函数的参数进行任何形式的类型转换。<br>调用顺序<br>当同一程序中具有模板与普通函数时，其匹配顺序如下：<br>完全匹配的非模板函数<br>完全匹配的模板函数<br>类型相容的非模板函数</p><h2 id="day9"><a href="#day9" class="headerlink" title="day9"></a>day9</h2><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>1.catch捕获异常时，不会进行数据类型的默认转换。<br>2.限制异常的方法</p><ul><li>当一个函数声明中不带任何异常描述时，它可以抛出任何异常。例如：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span>,<span class="type">char</span>)</span></span>;                 <span class="comment">//函数f可以抛出任何异常</span></span><br></pre></td></tr></table></figure><ul><li>在函数声明的后面添加一个throw参数表，在其中指定函数可以抛出的异常类型。例如：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">g</span><span class="params">(<span class="type">int</span>,<span class="type">char</span>)</span>  <span class="title">throw</span><span class="params">(<span class="type">int</span>,<span class="type">char</span>)</span></span>;  <span class="comment">//只允许抛出int和char异常。</span></span><br></pre></td></tr></table></figure><ul><li>指定throw限制表为不包括任何类型的空表，不允许函数抛出任何异常。如：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">h</span><span class="params">(<span class="type">int</span>,<span class="type">char</span>)</span> <span class="title">throw</span><span class="params">()</span></span>;<span class="comment">//不允许抛出任何异常</span></span><br></pre></td></tr></table></figure><p>3.捕获所有异常<br>在多数情况下，catch都只用于捕获某种特定类型的异常，但它也具有捕获全部异常的能力。其形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">catch</span>(…) &#123;</span><br><span class="line">    ……                        <span class="comment">//异常处理代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.再次抛出异常<br>如是catch块无法处理捕获的异常，它可以将该异常再次抛出，使异常能够在恰当的地方被处理。再次抛出的异常不会再被同一个catch块所捕获，它将被传递给外部的catch块处理。要在catch块中再次抛出同一异常，只需在该catch块中添加不带任何参数的throw语句即可。<br>5.异常的嵌套调用<br>try块可以嵌套，即一个try块中可以包括另一个try块，这种嵌套可能形成一个异常处理的调用链。</p><h4 id="异常类的捕获"><a href="#异常类的捕获" class="headerlink" title="异常类的捕获"></a>异常类的捕获</h4><p>派生异常类无法捕获基类异常，基类异常类可捕获派生类异常。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">string <span class="title">Where</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;BasicException...&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSysException</span>:<span class="keyword">public</span> BasicException&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">string <span class="title">Where</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;FileSysException...&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileNotFound</span>:<span class="keyword">public</span> FileSysException&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">string <span class="title">Where</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;FileNotFound...&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiskNotFound</span>:<span class="keyword">public</span> FileSysException&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">string <span class="title">Where</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;DiskNotFound...&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//       //派生异常类无法捕获基类异常</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="built_in">FileSysException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(DiskNotFound p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(FileNotFound p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(FileSysException p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(BasicException p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//        .....  //基类异常类可捕获派生类异常</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="built_in">DiskNotFound</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(BasicException p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(FileSysException p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(DiskNotFound p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(FileNotFound p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FileSysException...</span><br><span class="line">BasicException...</span><br></pre></td></tr></table></figure><h4 id="异常类多态"><a href="#异常类多态" class="headerlink" title="异常类多态"></a>异常类多态</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicException</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">Where</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;BasicException...&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSysException</span> : <span class="keyword">public</span> BasicException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">Where</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;FileSysException...&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileNotFound</span> : <span class="keyword">public</span> FileSysException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">Where</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;FileNotFound...&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiskNotFound</span> : <span class="keyword">public</span> FileSysException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">Where</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;DiskNotFound...&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DiskNotFound err;</span><br><span class="line">        <span class="keyword">throw</span> &amp;err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (BasicException *p)           <span class="comment">//可捕获派生类异常</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;<span class="built_in">Where</span>() &lt;&lt; endl;     <span class="comment">//多态调用异常类方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DiskNotFound...</span><br></pre></td></tr></table></figure><h4 id="调用异常类成员函数"><a href="#调用异常类成员函数" class="headerlink" title="调用异常类成员函数"></a>调用异常类成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Eg10-11.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Full</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Full</span>(<span class="type">int</span> i) :<span class="built_in">a</span>(i) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> s[MAX];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stack</span>() &#123; top = <span class="number">-1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top &gt;= MAX - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Full</span>(a);</span><br><span class="line">        s[++top] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Empty</span>();</span><br><span class="line">        <span class="keyword">return</span> s[top--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stack s;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (Full e) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Exception: Stack Full...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The value not push in stack:&quot;</span> &lt;&lt; e.<span class="built_in">getValue</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exception: Stack Full...</span><br><span class="line">The value <span class="keyword">not</span> push in stack:<span class="number">40</span></span><br></pre></td></tr></table></figure><h2 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h2><h4 id="get读取数据"><a href="#get读取数据" class="headerlink" title="get读取数据"></a>get读取数据</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> a, b, c, d;</span><br><span class="line">cin.<span class="built_in">get</span>(a);</span><br><span class="line">cin.<span class="built_in">get</span>(b);</span><br><span class="line">c = cin.<span class="built_in">get</span>();</span><br><span class="line">d = cin.<span class="built_in">get</span>();</span><br><span class="line">cout &lt;&lt; <span class="built_in">int</span>(a) &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="built_in">int</span>(b) &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="built_in">int</span>(c) &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="built_in">int</span>(d) &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用法：a = cin.get() ?或者 ?cin.get(a)</span></span><br><span class="line"><span class="comment">结束条件：输入字符足够后回车</span></span><br><span class="line"><span class="comment">说明：这个是单字符的输入，用途是输入一个字符，把它的ASCALL码存入到a中</span></span><br><span class="line"><span class="comment">处理方法：与cin不同，cin.get()在缓冲区遇到[enter]，[space]，[tab]不会作为舍弃，而是继续留在缓冲区中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cin.get(arrayname,size)  把字符输入到arrayname中，长度不超过size</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//get()两个参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.输入串长&lt;size，输入串长&gt;arraylength，会自动扩张arrayname大小，使能保存所有数据</span></span><br><span class="line"><span class="comment">// char a[10];</span></span><br><span class="line"><span class="comment">// cin.get(a,20);</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;sizeof(a)&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//输入：123456789012[enter]</span></span><br><span class="line"><span class="comment">//输出a数组：123456789012 可以发现，输入12个字符到a[10]中，系统自动扩充a[10]，此时实际数组长  为13（‘123456789012’\0’’）。但当计算sizeof(a)时，还是现实为10</span></span><br><span class="line">    <span class="comment">//2.输入串长&lt;size，输入串长&lt;arraylength，把串全部输入，后面补‘\0’</span></span><br><span class="line">    <span class="comment">// char b[10];</span></span><br><span class="line"><span class="comment">// cin.get(b,20);</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;b&lt;&lt;endl;//12345，此时数组内数据为‘12345&#x27;\0’</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;sizeof(b)&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//3.输入串长&gt;size，先截取size个字符，若还是大于arraylength，则输入前arraylength-1个字符，最后补充‘\0’</span></span><br><span class="line">    <span class="comment">// char c[5];</span></span><br><span class="line"><span class="comment">// cin.get(c,10);</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;c&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;sizeof(c)&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//4.输入串长&gt;size，先截取size个字符，若小于arraylength，则把截取串放入数组中，最后补充‘\0’</span></span><br><span class="line">    <span class="comment">// char d[10];</span></span><br><span class="line"><span class="comment">// cin.get(d,5);</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;d&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;sizeof(d)&lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get()三个参数</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        用法：cin.get(arrayname,size,s) ?把数据输入到arrayname字符数组中，当到达长度size时结束或者遇到字符s时结束</span></span><br><span class="line"><span class="comment">        注释：a必须是字符数组，即char a[]l类型，不可为string类型；size为最大的输入长度；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> e[<span class="number">10</span>];</span><br><span class="line">    cin.<span class="built_in">get</span>(e,<span class="number">8</span>,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    cout&lt;&lt;e;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getline"><a href="#getline" class="headerlink" title="getline"></a>getline</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">（1）cin.getline(arrayname,size)与cin.get(arrayname,size)的区别</span></span><br><span class="line"><span class="comment">cin.get(arrayname,size)当遇到[enter]时会结束目前输入，他不会删除缓冲区中的[enter]</span></span><br><span class="line"><span class="comment">cin.getline(arrayname,size)当遇到[enter]时会结束当前输入，但是会删除缓冲区中的[enter]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    char a[10];</span></span><br><span class="line"><span class="comment">    char b;</span></span><br><span class="line"><span class="comment">    cin.get(a,10);</span></span><br><span class="line"><span class="comment">    cin.get(b);</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;a&lt;&lt;endl&lt;&lt;int(b);//输入：12345[enter] 输出：12345 【换行】 10*/</span></span><br><span class="line">    <span class="comment">/*char c[10];</span></span><br><span class="line"><span class="comment">    char d;</span></span><br><span class="line"><span class="comment">    cin.getline(c,10);</span></span><br><span class="line"><span class="comment">    cin.get(d);</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;c&lt;&lt;endl&lt;&lt;int(d);//输入：12345[enter]a[enter] 输出：12345【换行】97*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//cin.getline(arrayname,size,s)与cin.gei(arrayname,size,s)的区别</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cin.getline(arrayname,size,s)当遇到s时会结束输入，并把s从缓冲区中删除</span></span><br><span class="line"><span class="comment">    cin.get（arrayname,size,s）当遇到s时会结束输入，但不会删除缓冲区中的s</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> e[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> f;</span><br><span class="line">    cin.<span class="built_in">get</span>(e, <span class="number">10</span>, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    cin.<span class="built_in">get</span>(f);</span><br><span class="line">    cout &lt;&lt; e &lt;&lt; endl &lt;&lt; f;<span class="comment">//输入：12345,[enter] 输出：12345【换行】，说明：cin,get不会删除缓冲区的，</span></span><br><span class="line">    <span class="type">char</span> e1[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> f1;</span><br><span class="line">    cin.<span class="built_in">getline</span>(e1, <span class="number">10</span>, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    cin.<span class="built_in">get</span>(f1);</span><br><span class="line">    cout &lt;&lt; e1 &lt;&lt; endl &lt;&lt; f1;<span class="comment">//输入：asd,wqe 输出：asd【换行】w</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="put-write"><a href="#put-write" class="headerlink" title="put write"></a>put write</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="comment">//put(char c)</span></span><br><span class="line"><span class="comment">//write(const char*c, int n)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">50</span>] = <span class="string">&quot;this is a string...&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;use get() input char:&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = cin.<span class="built_in">get</span>()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        cout.<span class="built_in">put</span>(c);</span><br><span class="line">        cout.<span class="built_in">put</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        cout.<span class="built_in">put</span>(<span class="string">&#x27;t&#x27;</span>).<span class="built_in">put</span>(<span class="string">&#x27;h&#x27;</span>).<span class="built_in">put</span>(<span class="string">&#x27;i&#x27;</span>).<span class="built_in">put</span>(<span class="string">&#x27;s&#x27;</span>).<span class="built_in">put</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        cout.<span class="built_in">write</span>(a, <span class="number">12</span>).<span class="built_in">put</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;look&quot;</span> &lt;&lt; <span class="string">&quot;\t here!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">use get() input char:good</span></span><br><span class="line"><span class="comment">g</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">this is a st</span></span><br><span class="line"><span class="comment">look     here!</span></span><br><span class="line"><span class="comment">o</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">this is a st</span></span><br><span class="line"><span class="comment">look     here!</span></span><br><span class="line"><span class="comment">o</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">this is a st</span></span><br><span class="line"><span class="comment">look     here!</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">this is a st</span></span><br><span class="line"><span class="comment">look     here!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p><strong>setf()的第一原型：</strong></p><p><img src="D:\Typora\图片\image-20220505194212664.png" alt="image-20220505194212664"></p><p><strong>setf()的第二原型：</strong><br>第二原型包含两个参数，第一个参数和第一原型里的参数一样，第二个参数指出要清除第一参数中的哪些位，也就是说，在第二原型中，第一个参数指出要设置哪些位，第二个参数指出要清除哪些位。</p><p><img src="D:\Typora\图片\image-20220505194144432.png" alt="image-20220505194144432"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">30</span>] = <span class="string">&quot;this is string&quot;</span>;</span><br><span class="line">    <span class="type">double</span> d = <span class="number">-1231.232</span>;</span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">    cout.<span class="built_in">fill</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::left);</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; <span class="string">&quot;----L1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">    cout.<span class="built_in">fill</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::right);</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; <span class="string">&quot;----L2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::dec | ios::showbase | ios::showpoint);</span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">    cout &lt;&lt; d &lt;&lt; <span class="string">&quot;----L3&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::showpoint);</span><br><span class="line">    cout.<span class="built_in">precision</span>(<span class="number">10</span>);<span class="comment">//有效数字？</span></span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">    cout &lt;&lt; d &lt;&lt; <span class="string">&quot;----L4&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::oct, ios::basefield);</span><br><span class="line">    cout &lt;&lt; <span class="number">100</span> &lt;&lt; <span class="string">&quot;----L5&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this is string****************----L1</span></span><br><span class="line"><span class="comment">----------------this is string----L2</span></span><br><span class="line"><span class="comment">-----------------------1231.23----L3</span></span><br><span class="line"><span class="comment">-------------------1231.232000----L4</span></span><br><span class="line"><span class="comment">--------------------------0144----L5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:\Typora\图片\image-20220505194539668.png" alt="image-20220505194539668"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Eg12-5.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">30</span>] = <span class="string">&quot;this is string&quot;</span>;</span><br><span class="line">    <span class="type">double</span> d = <span class="number">-1234.8976</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">30</span>) &lt;&lt; left &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;*&#x27;</span>) &lt;&lt; c &lt;&lt; <span class="string">&quot;----L1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">30</span>) &lt;&lt; right &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;*&#x27;</span>) &lt;&lt; c &lt;&lt; <span class="string">&quot;----L2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//showbase显示数值的基数前缀</span></span><br><span class="line">    cout &lt;&lt; dec &lt;&lt; showbase &lt;&lt; showpoint &lt;&lt; <span class="built_in">setw</span>(<span class="number">30</span>) &lt;&lt; d &lt;&lt; <span class="string">&quot;----L3&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">//showpoint显示小数点</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">30</span>) &lt;&lt; showpoint &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>) &lt;&lt; d &lt;&lt; <span class="string">&quot;----L4&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">//setbase(8)设置八进制</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">30</span>) &lt;&lt; <span class="built_in">setbase</span>(<span class="number">16</span>) &lt;&lt; <span class="number">100</span> &lt;&lt; <span class="string">&quot;----L5&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this is string****************----L1</span></span><br><span class="line"><span class="comment">****************this is string----L2</span></span><br><span class="line"><span class="comment">**********************-1234.90----L3</span></span><br><span class="line"><span class="comment">******************-1234.897600----L4</span></span><br><span class="line"><span class="comment">**************************0x64----L5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">CPlusPlusThings-practical_exercises</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer(第15章 面向对象程序设计)</title>
    <link href="https://windcrain.top/post/c-primer-di-15-zhang/"/>
    <id>https://windcrain.top/post/c-primer-di-15-zhang/</id>
    <published>2022-04-01T05:57:30.000Z</published>
    <updated>2022-06-10T06:42:25.267Z</updated>
    
    <content type="html"><![CDATA[<h5 id="15-1"><a href="#15-1" class="headerlink" title="15.1"></a>15.1</h5><p><strong>什么是虚成员？</strong></p><p>对于某些函数，基类希望它的派生类各自定义适合自身的版本，此时基类就将这些函数声明成虚函数。</p><h5 id="15-2"><a href="#15-2" class="headerlink" title="15.2"></a>15.2</h5><p><strong>protected 访问说明符与 private 有何区别？</strong></p><ul><li>protected ： 基类和和其派生类还有友元可以访问。</li><li>private ： 只有基类本身和友元可以访问。</li></ul><h5 id="15-3"><a href="#15-3" class="headerlink" title="15.3"></a>15.3</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Quote</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Quote</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Quote</span>(<span class="type">const</span> std::string &amp;book,<span class="type">double</span> sales_price):<span class="built_in">bookNo</span>(book),<span class="built_in">price</span>(sales_price)&#123;&#125;</span><br><span class="line"><span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span> n)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n * price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Quote</span>() = <span class="keyword">default</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">debug</span><span class="params">()</span><span class="type">const</span></span>;<span class="comment">//15.11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string bookNo;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">double</span> price = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Quote.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">print_total</span><span class="params">(std::ostream&amp; os, <span class="type">const</span> Quote&amp; item, std::<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> ret = item.<span class="built_in">net_price</span>(n);</span><br><span class="line"></span><br><span class="line">    os &lt;&lt; <span class="string">&quot;ISBN: &quot;</span> &lt;&lt; item.<span class="built_in">isbn</span>()</span><br><span class="line">        &lt;&lt; <span class="string">&quot; # sold: &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; total due: &quot;</span> &lt;&lt; ret &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-5"><a href="#15-5" class="headerlink" title="15.5"></a>15.5</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bulk_quote</span> :<span class="keyword">public</span> Quote &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Bulk_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Bulk_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> sales_price,std::<span class="type">size_t</span> qty,<span class="type">double</span> disc)</span><br><span class="line">:<span class="built_in">Quote</span>(book,sales_price),<span class="built_in">min_qty</span>(qty),<span class="built_in">discount</span>(disc)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span><span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;<span class="comment">//15.11</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::<span class="type">size_t</span> min_qty = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> discount = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Bulk_quote::net_price</span><span class="params">(std::<span class="type">size_t</span> cnt)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt;= min_qty)    <span class="keyword">return</span> cnt * (<span class="number">1</span> - discount) * price;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> cnt * price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-6"><a href="#15-6" class="headerlink" title="15.6"></a>15.6</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Quote <span class="title">q</span><span class="params">(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Bulk_quote <span class="title">bq</span><span class="params">(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0.2</span>)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> t1 = <span class="built_in">print_total</span>(std::cout, q, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">auto</span> t2 = <span class="built_in">print_total</span>(std::cout, bq, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ISBN: 123 # sold: 4 total due: 40</span></span><br><span class="line"><span class="comment">//ISBN: 123 # sold: 8 total due: 80</span></span><br></pre></td></tr></table></figure><h5 id="15-7"><a href="#15-7" class="headerlink" title="15.7"></a>15.7</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Limit_quote</span> :<span class="keyword">public</span> Quote &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Limit_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Limit_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> sales_price, std::<span class="type">size_t</span> max, <span class="type">double</span> disc)</span><br><span class="line">:<span class="built_in">Quote</span>(book,sales_price),<span class="built_in">max_qty</span>(max),<span class="built_in">discount</span>(disc) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span><span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;<span class="comment">//15.11</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::<span class="type">size_t</span> max_qty = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> discount = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Limit_quote::net_price</span><span class="params">(std::<span class="type">size_t</span> cnt)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt;= max_qty)    <span class="keyword">return</span> cnt * (<span class="number">1</span> - discount) * price;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> max_qty * (<span class="number">1</span> - discount) * price + (cnt - max_qty) * price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Limit_quote <span class="title">lq</span><span class="params">(<span class="string">&quot;159&quot;</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0.2</span>)</span></span>;</span><br><span class="line">    <span class="comment">//ISBN: 159 # sold: 4 total due: 32 </span></span><br><span class="line">    <span class="built_in">print_total</span>(std::cout, lq, <span class="number">4</span>); </span><br><span class="line">    <span class="comment">//ISBN: 159 # sold: 10 total due: 90</span></span><br><span class="line">    <span class="built_in">print_total</span>(std::cout, lq, <span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-11"><a href="#15-11" class="headerlink" title="15.11"></a>15.11</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Quote::debug</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ISBN: &quot;</span> &lt;&lt; bookNo &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bulk_quote::debug</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Bulk_quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;min_qty: &quot;</span> &lt;&lt; min_qty &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;discount: &quot;</span> &lt;&lt; discount &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Limit_quote::debug</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Bulk_quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;max_qty: &quot;</span> &lt;&lt; max_qty &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;discount: &quot;</span> &lt;&lt; discount &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-12"><a href="#15-12" class="headerlink" title="15.12"></a>15.12</h5><blockquote><p>有必要将一个成员函数同时声明成 override 和 final 吗？为什么？</p></blockquote><p>有必要。override 的含义是重写基类中相同名称的虚函数，final 是阻止它的派生类重写当前虚函数。</p><h5 id="15-15-15-16"><a href="#15-15-15-16" class="headerlink" title="15.15-15.16"></a>15.15-15.16</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Quote</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> !=(<span class="type">const</span> Quote&amp; lhs, <span class="type">const</span> Quote&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Quote</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;default constructing Quote\n&quot;</span>; &#125;</span><br><span class="line">    <span class="built_in">Quote</span>(<span class="type">const</span> std::string&amp; b, <span class="type">double</span> p) :</span><br><span class="line">        <span class="built_in">bookNo</span>(b), <span class="built_in">price</span>(p) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Quote : constructor taking 2 parameters\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy constructor</span></span><br><span class="line">    <span class="built_in">Quote</span>(<span class="type">const</span> Quote&amp; q) : <span class="built_in">bookNo</span>(q.bookNo), <span class="built_in">price</span>(q.price)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Quote: copy constructing\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// move constructor</span></span><br><span class="line">    <span class="built_in">Quote</span>(Quote&amp;&amp; q) <span class="keyword">noexcept</span> : <span class="built_in">bookNo</span>(std::<span class="built_in">move</span>(q.bookNo)), <span class="built_in">price</span>(std::<span class="built_in">move</span>(q.price))</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Quote: move constructing\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy =</span></span><br><span class="line">    Quote&amp; <span class="keyword">operator</span> =(<span class="type">const</span> Quote&amp; rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*<span class="keyword">this</span> != rhs)</span><br><span class="line">        &#123;</span><br><span class="line">            bookNo = rhs.bookNo;</span><br><span class="line">            price = rhs.price;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Quote: copy =() \n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// move =</span></span><br><span class="line">    Quote&amp; <span class="keyword">operator</span> =(Quote&amp;&amp; rhs)  <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*<span class="keyword">this</span> != rhs)</span><br><span class="line">        &#123;</span><br><span class="line">            bookNo = std::<span class="built_in">move</span>(rhs.bookNo);</span><br><span class="line">            price = std::<span class="built_in">move</span>(rhs.price);</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Quote: move =!!!!!!!!! \n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string     <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span>  <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span> n)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> n * price; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span>    <span class="title">debug</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Quote</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;destructing Quote\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string bookNo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span>  price = <span class="number">10.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">inline</span></span><br><span class="line"><span class="keyword">operator</span> !=(<span class="type">const</span> Quote&amp; lhs, <span class="type">const</span> Quote&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.bookNo != rhs.bookNo</span><br><span class="line">        &amp;&amp;</span><br><span class="line">        lhs.price != rhs.price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Disc_quote</span>:<span class="keyword">public</span> Quote &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Disc_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Disc_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> sales_price, std::<span class="type">size_t</span> qty, <span class="type">double</span> disc)</span><br><span class="line">:<span class="built_in">Quote</span>(book,sales_price),<span class="built_in">quantity</span>(qty),<span class="built_in">discount</span>(disc) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">std::<span class="type">size_t</span> quantity = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> discount = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bulk_quote</span> : <span class="keyword">public</span> Disc_quote</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Bulk_quote</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;default constructing Bulk_quote\n&quot;</span>; &#125;</span><br><span class="line">    <span class="comment">//Bulk_quote(const std::string&amp; b, double p, std::size_t q, double disc) :</span></span><br><span class="line">    <span class="comment">//    Disc_quote(b, p, q, disc) &#123;</span></span><br><span class="line">    <span class="comment">//    std::cout &lt;&lt; &quot;Bulk_quote : constructor taking 4 parameters\n&quot;;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> Disc_quote::Disc_quote;<span class="comment">//15.27</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy constructor</span></span><br><span class="line">    <span class="built_in">Bulk_quote</span>(<span class="type">const</span> Bulk_quote&amp; bq) : <span class="built_in">Disc_quote</span>(bq)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bulk_quote : copy constructor\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// move constructor</span></span><br><span class="line">    <span class="comment">//page 535, &quot; In a constructor, noexcept appears between the parameter list and the : that begins the constructor initializer list&quot;</span></span><br><span class="line">    <span class="built_in">Bulk_quote</span>(Bulk_quote&amp;&amp; bq) <span class="keyword">noexcept</span> : <span class="built_in">Disc_quote</span>(std::<span class="built_in">move</span>(bq))</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bulk_quote : move constructor\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy =()</span></span><br><span class="line">    Bulk_quote&amp; <span class="keyword">operator</span> =(<span class="type">const</span> Bulk_quote&amp; rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        Disc_quote::<span class="keyword">operator</span> =(rhs);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bulk_quote : copy =()\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// move =()</span></span><br><span class="line">    Bulk_quote&amp; <span class="keyword">operator</span> =(Bulk_quote&amp;&amp; rhs) <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        Disc_quote::<span class="keyword">operator</span> =(std::<span class="built_in">move</span>(rhs));</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bulk_quote : move =()\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span> n)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span>  <span class="title">debug</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Bulk_quote</span>() <span class="keyword">override</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;destructing Bulk_quote\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Limit_quote</span> :<span class="keyword">public</span> Disc_quote &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Limit_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Limit_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> sales_price, std::<span class="type">size_t</span> qty, <span class="type">double</span> disc)</span><br><span class="line">:<span class="built_in">Disc_quote</span>(book, sales_price, qty, disc) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span><span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Bulk_quote::net_price</span><span class="params">(std::<span class="type">size_t</span> cnt)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt;= quantity)    <span class="keyword">return</span> cnt * (<span class="number">1</span> - discount) * price;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> cnt * price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Limit_quote::net_price</span><span class="params">(std::<span class="type">size_t</span> cnt)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt;= quantity)    <span class="keyword">return</span> cnt * (<span class="number">1</span> - discount) * price;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> quantity * (<span class="number">1</span> - discount) * price + (cnt - quantity) * price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Quote::debug</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ISBN: &quot;</span> &lt;&lt; bookNo &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bulk_quote::debug</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Bulk_quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;min_qty: &quot;</span> &lt;&lt; quantity &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;discount: &quot;</span> &lt;&lt; discount &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Limit_quote::debug</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Bulk_quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;max_qty: &quot;</span> &lt;&lt; quantity &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;discount: &quot;</span> &lt;&lt; discount &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-17"><a href="#15-17" class="headerlink" title="15.17"></a>15.17</h5><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071358199.png" alt="image-20220327173806133"></p><h5 id="15-23"><a href="#15-23" class="headerlink" title="15.23"></a>15.23</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pub_mem</span><span class="params">()</span></span>;   <span class="comment">// public member</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> prot_mem;     <span class="comment">// protected member</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> priv_mem;    <span class="comment">// private member</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pub_Derv</span> : <span class="keyword">public</span>    Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">memfcn</span><span class="params">(Base&amp; b)</span> </span>&#123; b = *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Priv_Derv</span> : <span class="keyword">private</span>   Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">memfcn</span><span class="params">(Base&amp; b)</span> </span>&#123; b = *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Prot_Derv</span> : <span class="keyword">protected</span> Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">memfcn</span><span class="params">(Base&amp; b)</span> </span>&#123; b = *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived_from_Public</span> : <span class="keyword">public</span> Pub_Derv</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">memfcn</span><span class="params">(Base&amp; b)</span> </span>&#123; b = *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived_from_Private</span> : <span class="keyword">public</span> Priv_Derv</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//void memfcn(Base &amp;b) &#123; b = *this; &#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived_from_Protected</span> : <span class="keyword">public</span> Prot_Derv</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">memfcn</span><span class="params">(Base&amp; b)</span> </span>&#123; b = *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Pub_Derv d1;</span><br><span class="line">    Base* p = &amp;d1;</span><br><span class="line"></span><br><span class="line">    Priv_Derv d2;</span><br><span class="line">    <span class="comment">//p = &amp;d2;</span></span><br><span class="line"></span><br><span class="line">    Prot_Derv d3;</span><br><span class="line">    <span class="comment">//p = &amp;d3;</span></span><br><span class="line"></span><br><span class="line">    Derived_from_Public dd1;</span><br><span class="line">    p = &amp;dd1;</span><br><span class="line"></span><br><span class="line">    Derived_from_Private dd2;</span><br><span class="line">    <span class="comment">//p =&amp; dd2;</span></span><br><span class="line"></span><br><span class="line">    Derived_from_Protected dd3;</span><br><span class="line">    <span class="comment">//p = &amp;dd3;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-28"><a href="#12-28" class="headerlink" title="12.28"></a>12.28</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    vector&lt;Quote&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="built_in">Bulk_quote</span>(<span class="string">&quot;!23&quot;</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0.2</span>));</span><br><span class="line">    cout &lt;&lt; vec.<span class="built_in">back</span>().<span class="built_in">net_price</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//100</span></span><br></pre></td></tr></table></figure><h5 id="15-29"><a href="#15-29" class="headerlink" title="15.29"></a>15.29</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;shared_ptr&lt;Quote&gt;&gt; basket;</span><br><span class="line"></span><br><span class="line">    basket.<span class="built_in">push_back</span>(<span class="built_in">make_shared</span>&lt;Quote&gt;(<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>));<span class="comment">//100</span></span><br><span class="line">    basket.<span class="built_in">push_back</span>(<span class="built_in">make_shared</span>&lt;Bulk_quote&gt;(<span class="string">&quot;world&quot;</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">0.2</span>));<span class="comment">//160</span></span><br><span class="line">    basket.<span class="built_in">push_back</span>(<span class="built_in">make_shared</span>&lt;Limit_quote&gt;(<span class="string">&quot;good&quot;</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">0.2</span>));<span class="comment">//135</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> all = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="type">const</span>&amp; i : basket) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;<span class="built_in">net_price</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">        all += i-&gt;<span class="built_in">net_price</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; all &lt;&lt; endl;<span class="comment">//395</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-30"><a href="#15-30" class="headerlink" title="15.30"></a>15.30</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//***********h***********</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Basket</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//clone是一个虚函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_item</span><span class="params">(<span class="type">const</span> Quote&amp; sale)</span> </span>&#123;</span><br><span class="line">        items.<span class="built_in">insert</span>(<span class="built_in">shared_ptr</span>&lt;Quote&gt;(sale.<span class="built_in">clone</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_item</span><span class="params">(Quote&amp;&amp; sale)</span> </span>&#123;</span><br><span class="line">        items.<span class="built_in">insert</span>(<span class="built_in">shared_ptr</span>&lt;Quote&gt;(<span class="built_in">move</span>(sale).<span class="built_in">clone</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">total_receipt</span><span class="params">(ostream&amp;)</span><span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> shared_ptr &lt;Quote&gt;&amp; lhs, <span class="type">const</span> shared_ptr &lt;Quote&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lhs-&gt;<span class="built_in">isbn</span>() &lt; rhs-&gt;<span class="built_in">isbn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    multiset&lt;shared_ptr&lt;Quote&gt;, <span class="keyword">decltype</span>(compare)*&gt; items&#123; compare &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//***********cpp***********</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Basket::total_receipt</span><span class="params">(ostream&amp; os)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = items.<span class="built_in">cbegin</span>(); iter != items.<span class="built_in">cend</span>(); iter = items.<span class="built_in">upper_bound</span>(*iter)) &#123;</span><br><span class="line">sum += <span class="built_in">print_total</span>(os, **iter, items.<span class="built_in">count</span>(*iter));</span><br><span class="line">&#125;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;Total Sale: &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//***********main***********</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Basket basket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">        basket.<span class="built_in">add_item</span>(<span class="built_in">Bulk_quote</span>(<span class="string">&quot;Bible&quot;</span>, <span class="number">20.6</span>, <span class="number">20</span>, <span class="number">0.3</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">        basket.<span class="built_in">add_item</span>(<span class="built_in">Bulk_quote</span>(<span class="string">&quot;C++Primer&quot;</span>, <span class="number">30.9</span>, <span class="number">5</span>, <span class="number">0.4</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">        basket.<span class="built_in">add_item</span>(<span class="built_in">Quote</span>(<span class="string">&quot;CLRS&quot;</span>, <span class="number">40.1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function">ofstream <span class="title">log</span><span class="params">(<span class="string">&quot;log.txt&quot;</span>, std::ios_base::app | std::ios_base::out)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; basket.<span class="built_in">total_receipt</span>(log) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-32"><a href="#15-32" class="headerlink" title="15.32"></a>15.32</h5><blockquote><p>当一个 Query 类型的对象被拷贝、移动、赋值或销毁时，将分别发生什么？</p></blockquote><ul><li><strong>拷贝：</strong>当被拷贝时，合成的拷贝构造函数被调用。它将拷贝两个数据成员至新的对象。而在这种情况下，数据成员是一个智能指针，当拷贝时，相应的智能指针指向相同的地址，计数器增加1.</li><li><strong>移动：</strong>当移动时，合成的移动构造函数被调用。它将移动数据成员至新的对象。这时新对象的智能指针将会指向原对象的地址，而原对象的智能指针为 nullptr，新对象的智能指针的引用计数为 1.</li><li><strong>赋值：</strong>合成的赋值运算符被调用，结果和拷贝的相同的。</li><li><strong>销毁：</strong>合成的析构函数被调用。对象的智能指针的引用计数递减，当引用计数为 0 时，对象被销毁。</li></ul><h5 id="15-36"><a href="#15-36" class="headerlink" title="15.36"></a>15.36</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Query q = <span class="built_in">Query</span>(<span class="string">&quot;fiery&quot;</span>) &amp; <span class="built_in">Query</span>(<span class="string">&quot;bird&quot;</span>) | <span class="built_in">Query</span>(<span class="string">&quot;wind&quot;</span>);</span><br><span class="line"></span><br><span class="line">WordQuery::<span class="built_in">WordQuery</span>(wind)</span><br><span class="line">Query::<span class="built_in">Query</span>(<span class="type">const</span> std::string&amp; s) where s=wind</span><br><span class="line">WordQuery::<span class="built_in">WordQuery</span>(bird)</span><br><span class="line">Query::<span class="built_in">Query</span>(<span class="type">const</span> std::string&amp; s) where s=bird</span><br><span class="line">WordQuery::<span class="built_in">WordQuery</span>(fiery)</span><br><span class="line">Query::<span class="built_in">Query</span>(<span class="type">const</span> std::string&amp; s) where s=fiery</span><br><span class="line">BinaryQuery::<span class="built_in">BinaryQuery</span>()  where s=&amp;</span><br><span class="line">AndQuery::<span class="built_in">AndQuery</span>()</span><br><span class="line">Query::<span class="built_in">Query</span>(std::shared_ptr&lt;Query_base&gt; query)</span><br><span class="line">BinaryQuery::<span class="built_in">BinaryQuery</span>()  where s=|</span><br><span class="line">OrQuery::OrQuery</span><br><span class="line">Query::<span class="built_in">Query</span>(std::shared_ptr&lt;Query_base&gt; query)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; q &lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">Query::<span class="built_in">rep</span>()</span><br><span class="line">BinaryQuery::<span class="built_in">rep</span>()</span><br><span class="line">Query::<span class="built_in">rep</span>()</span><br><span class="line">WodQuery::<span class="built_in">rep</span>()</span><br><span class="line">Query::<span class="built_in">rep</span>()</span><br><span class="line">BinaryQuery::<span class="built_in">rep</span>()</span><br><span class="line">Query::<span class="built_in">rep</span>()</span><br><span class="line">WodQuery::<span class="built_in">rep</span>()</span><br><span class="line">Query::<span class="built_in">rep</span>()</span><br><span class="line">WodQuery::<span class="built_in">rep</span>()</span><br><span class="line">((fiery &amp; bird) | wind)</span><br></pre></td></tr></table></figure><h5 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">friend</span> QueryResult;</span><br><span class="line"><span class="keyword">using</span> line_no = vector&lt;string&gt;::size_type;</span><br><span class="line"><span class="built_in">TextQuery</span>(ifstream&amp;);</span><br><span class="line"><span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="type">const</span> string&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; file;</span><br><span class="line">map&lt;string, shared_ptr&lt;set&lt;line_no&gt;&gt;&gt;wm;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> ostream&amp; <span class="title">print</span><span class="params">(ostream&amp;, <span class="type">const</span> QueryResult&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">QueryResult</span>(string s, shared_ptr&lt;set&lt;TextQuery::line_no&gt;&gt;p, shared_ptr&lt;vector&lt;string&gt;&gt; f) :<span class="built_in">sought</span>(s), <span class="built_in">lines</span>(p), <span class="built_in">file</span>(f) &#123;&#125;</span><br><span class="line"><span class="keyword">using</span> line_no = TextQuery::line_no;</span><br><span class="line"><span class="keyword">using</span> Iter = std::set&lt;line_no&gt;::iterator;</span><br><span class="line"><span class="function">Iter <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> lines-&gt;<span class="built_in">begin</span>(); &#125;</span><br><span class="line"><span class="function">Iter <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> lines-&gt;<span class="built_in">end</span>(); &#125;</span><br><span class="line">shared_ptr&lt;std::vector&lt;std::string&gt;&gt; <span class="built_in">get_file</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> std::make_shared&lt;std::vector&lt;std::string&gt;&gt;(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string sought;</span><br><span class="line">shared_ptr&lt;set&lt;TextQuery::line_no&gt;&gt;lines;</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; file;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query_base</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">using</span> line_no = TextQuery::line_no;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Query_base</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//eval返回与当前Query匹配的QueryResult</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span><span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//rep 是表示查询的一个string</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">rep</span><span class="params">()</span><span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>~(<span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>|(<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>&amp;(<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Query</span>(<span class="type">const</span> string&amp;);</span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; t)</span> <span class="type">const</span></span>&#123; <span class="keyword">return</span> q-&gt;<span class="built_in">eval</span>(t); &#125;</span><br><span class="line"><span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span> </span>&#123; </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Query::rep() \n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> q-&gt;<span class="built_in">rep</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Query</span>(shared_ptr&lt;Query_base&gt;query):<span class="built_in">q</span>(query)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Query::Query(std::shared_ptr&lt;Query_base&gt; query)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&lt;Query_base&gt;q;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordQuery</span> :<span class="keyword">public</span> Query_base &#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="built_in">WordQuery</span>(<span class="type">const</span> string&amp; s) :<span class="built_in">query_word</span>(s)&#123;&#125;</span><br><span class="line"><span class="comment">//定义继承来的纯虚函数</span></span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; t)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> t.<span class="built_in">query</span>(query_word);&#125;</span><br><span class="line"><span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span> </span>&#123;<span class="keyword">return</span> query_word;&#125;</span><br><span class="line"></span><br><span class="line">string query_word;        <span class="comment">//要查找的单词</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NotQuery</span> :<span class="keyword">public</span> Query_base &#123;</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>~(<span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="built_in">NotQuery</span>(<span class="type">const</span> Query&amp;q):<span class="built_in">query</span>(q) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;~(&quot;</span> + query.<span class="built_in">rep</span>() + <span class="string">&quot;)&quot;</span>; &#125;</span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span><span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">Query query;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryQuery</span> :<span class="keyword">public</span> Query_base &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">BinaryQuery</span>(<span class="type">const</span> Query&amp;l,<span class="type">const</span> Query&amp;r,string s):<span class="built_in">lhs</span>(l),<span class="built_in">rhs</span>(r),<span class="built_in">opSym</span>(s)&#123;&#125;</span><br><span class="line"><span class="comment">// 不定义 eval</span></span><br><span class="line"><span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + lhs.<span class="built_in">rep</span>() + <span class="string">&quot; &quot;</span> + opSym + <span class="string">&quot; &quot;</span> + rhs.<span class="built_in">rep</span>() + <span class="string">&quot;)&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">Query lhs, rhs;  <span class="comment">//运算对象</span></span><br><span class="line">string opSym;     <span class="comment">//运算符的名字</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndQuery</span> :<span class="keyword">public</span> BinaryQuery &#123;</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>&amp;(<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="built_in">AndQuery</span>(<span class="type">const</span> Query&amp;left,<span class="type">const</span> Query&amp; right):<span class="built_in">BinaryQuery</span>(left,right,<span class="string">&quot;&amp;&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrQuery</span> :<span class="keyword">public</span> BinaryQuery &#123;</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>|(<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="built_in">OrQuery</span>(<span class="type">const</span> Query&amp; left, <span class="type">const</span> Query&amp; right) :<span class="built_in">BinaryQuery</span>(left, right, <span class="string">&quot;|&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;TextQuery.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">TextQuery::<span class="built_in">TextQuery</span>(ifstream&amp; is) :<span class="built_in">file</span>(<span class="keyword">new</span> vector&lt;string&gt;) &#123;</span><br><span class="line">string text;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(is, text)) &#123;</span><br><span class="line">file-&gt;<span class="built_in">push_back</span>(text);</span><br><span class="line"><span class="type">int</span> n = file-&gt;<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"><span class="function">istringstream <span class="title">line</span><span class="params">(text)</span></span>;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (line &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; lines = wm[word];</span><br><span class="line"><span class="keyword">if</span> (!lines)</span><br><span class="line">lines.<span class="built_in">reset</span>(<span class="keyword">new</span> set&lt;line_no&gt;);</span><br><span class="line">lines-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">TextQuery::query</span><span class="params">(<span class="type">const</span> string&amp; sought)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="type">static</span> shared_ptr&lt;set&lt;line_no&gt;&gt; <span class="built_in">nodata</span>(<span class="keyword">new</span> set&lt;line_no &gt;);</span><br><span class="line"><span class="keyword">auto</span> loc = wm.<span class="built_in">find</span>(sought);</span><br><span class="line"><span class="keyword">if</span> (loc == wm.<span class="built_in">end</span>())</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, nodata, file);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, loc-&gt;second, file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream&amp; <span class="title">print</span><span class="params">(ostream&amp; os, <span class="type">const</span> QueryResult&amp; qr)</span> </span>&#123;</span><br><span class="line">os &lt;&lt; qr.sought &lt;&lt; <span class="string">&quot; occurs &quot;</span> &lt;&lt; qr.lines-&gt;<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> num : *qr.lines) &#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;\t(line &quot;</span> &lt;&lt; num + <span class="number">1</span> &lt;&lt; <span class="string">&quot;)&quot;</span></span><br><span class="line">&lt;&lt; *(qr.file-&gt;<span class="built_in">begin</span>() + num) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">runQueries</span><span class="params">(ifstream&amp; infile)</span> </span>&#123;</span><br><span class="line"><span class="function">TextQuery <span class="title">tq</span><span class="params">(infile)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;enter word to look for,or q to quit: &quot;</span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">if</span> (!(cin &gt;&gt; s) || s == <span class="string">&quot;q&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">print</span>(cout, tq.<span class="built_in">query</span>(s)) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">Query::Query</span><span class="params">(<span class="type">const</span> string&amp;s)</span>:q(new WordQuery(s)) &#123;</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Query::Query(const std::string&amp; s) where s=&quot;</span> + s + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Query <span class="keyword">operator</span>~(<span class="type">const</span> Query&amp; operand)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">NotQuery</span>(operand));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Query <span class="keyword">operator</span>&amp;(<span class="type">const</span> Query&amp;lhs, <span class="type">const</span> Query&amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">AndQuery</span>(lhs, rhs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Query <span class="keyword">operator</span>|(<span class="type">const</span> Query&amp;lhs, <span class="type">const</span> Query&amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">OrQuery</span>(lhs, rhs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> std::ostream&amp;</span><br><span class="line"><span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Query&amp; query)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// make a virtual call through its Query_base pointer to rep();</span></span><br><span class="line"><span class="keyword">return</span> os &lt;&lt; query.<span class="built_in">rep</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">OrQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; text)</span><span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> right = rhs.<span class="built_in">eval</span>(text), left = lhs.<span class="built_in">eval</span>(text);</span><br><span class="line"><span class="keyword">auto</span> ret_lines = make_shared&lt;set&lt;line_no&gt;&gt;(left.<span class="built_in">begin</span>(), left.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">ret_lines-&gt;<span class="built_in">insert</span>(right.<span class="built_in">begin</span>(), right.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, left.<span class="built_in">get_file</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">AndQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;text)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> right = rhs.<span class="built_in">eval</span>(text), left = lhs.<span class="built_in">eval</span>(text);</span><br><span class="line"><span class="keyword">auto</span> ret_lines = make_shared&lt;set&lt;line_no&gt;&gt;();</span><br><span class="line"><span class="built_in">set_intersection</span>(left.<span class="built_in">begin</span>(), left.<span class="built_in">end</span>(), right.<span class="built_in">begin</span>(), right.<span class="built_in">end</span>(), </span><br><span class="line"><span class="built_in">inserter</span>(*ret_lines, ret_lines-&gt;<span class="built_in">begin</span>()));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, left.<span class="built_in">get_file</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">NotQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; text)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> result = query.<span class="built_in">eval</span>(text);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> ret_lines= make_shared&lt;set&lt;line_no&gt;&gt;();</span><br><span class="line"><span class="keyword">auto</span> beg = result.<span class="built_in">begin</span>(), end = result.<span class="built_in">end</span>();</span><br><span class="line"><span class="keyword">auto</span> sz = result.<span class="built_in">get_file</span>()-&gt;<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> n = <span class="number">0</span>; n != sz; ++n) &#123;</span><br><span class="line"><span class="keyword">if</span> (beg == end || *beg != n) &#123;</span><br><span class="line">ret_lines-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (beg != end)</span><br><span class="line">++beg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, result.<span class="built_in">get_file</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第15章 面向对象程序设计</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer(第14章 重载运算与类型转换)</title>
    <link href="https://windcrain.top/post/c-primer-di-14-zhang/"/>
    <id>https://windcrain.top/post/c-primer-di-14-zhang/</id>
    <published>2022-03-28T11:57:55.000Z</published>
    <updated>2022-06-10T06:42:14.553Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Sales-data"><a href="#Sales-data" class="headerlink" title="Sales_data"></a>Sales_data</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////****************h****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp;, Sales_data&amp;);</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;);</span><br><span class="line">    <span class="keyword">friend</span> Sales_data <span class="keyword">operator</span>+(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string&amp; s, <span class="type">unsigned</span> n, <span class="type">double</span> p) :<span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(n* p) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>() : <span class="built_in">Sales_data</span>(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0.0f</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string&amp; s) : <span class="built_in">Sales_data</span>(s, <span class="number">0</span>, <span class="number">0.0f</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream&amp; is);</span><br><span class="line"></span><br><span class="line">    Sales_data&amp; <span class="keyword">operator</span>=(<span class="type">const</span> std::string&amp;);</span><br><span class="line">    Sales_data&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> Sales_data&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">std::string</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">avg_price</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp;, Sales_data&amp;);</span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;);</span><br><span class="line">Sales_data <span class="keyword">operator</span>+(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Sales_data::avg_price</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> units_sold ? revenue / units_sold : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////****************cpp****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Sales_data.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Sales_data::<span class="built_in">Sales_data</span>(std::istream&amp; is) : <span class="built_in">Sales_data</span>()</span><br><span class="line">&#123;</span><br><span class="line">    is &gt;&gt; *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sales_data&amp; Sales_data::<span class="keyword">operator</span>+=(<span class="type">const</span> Sales_data&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    units_sold += rhs.units_sold;</span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp; is, Sales_data&amp; item)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> price = <span class="number">0.0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    <span class="keyword">if</span> (is)</span><br><span class="line">        item.revenue = price * item.units_sold;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        item = <span class="built_in">Sales_data</span>();</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Sales_data&amp; item)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; item.<span class="built_in">isbn</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.<span class="built_in">avg_price</span>();</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sales_data <span class="keyword">operator</span>+(<span class="type">const</span> Sales_data&amp; lhs, <span class="type">const</span> Sales_data&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum += rhs;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sales_data&amp; Sales_data::<span class="keyword">operator</span>=(<span class="type">const</span> std::string&amp; isbn)</span><br><span class="line">&#123;</span><br><span class="line">    *<span class="keyword">this</span> = <span class="built_in">Sales_data</span>(isbn);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//****************h****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT noexcept</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//===================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//|s|t|r|i|n|g|\0|-------------------|</span></span><br><span class="line"><span class="comment">// ^ ^  ^ first_free       ^</span></span><br><span class="line"><span class="comment">//elements last_elem   cap</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp;, String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>() : <span class="built_in">String</span>(<span class="string">&quot;&quot;</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>*);</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp;);</span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp;) NOEXCEPT;</span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp;)NOEXCEPT;</span><br><span class="line">    ~<span class="built_in">String</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> elements; &#125;</span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> last_elem; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> elements; &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> last_elem - elements; &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> cap - elements; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reserve</span><span class="params">(<span class="type">size_t</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span>, <span class="type">char</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> n) &#123; <span class="keyword">return</span> elements[n]; &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> n) <span class="type">const</span> &#123; <span class="keyword">return</span> elements[n]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">std::pair&lt;<span class="type">char</span>*, <span class="type">char</span>*&gt; <span class="title">alloc_n_copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*, <span class="type">const</span> <span class="type">char</span>*)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">range_initializer</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*, <span class="type">const</span> <span class="type">char</span>*)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reallocate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">chk_n_alloc</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span> (first_free == cap) <span class="built_in">reallocate</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* elements;</span><br><span class="line">    <span class="type">char</span>* last_elem;</span><br><span class="line">    <span class="type">char</span>* first_free;</span><br><span class="line">    <span class="type">char</span>* cap;</span><br><span class="line">    std::allocator&lt;<span class="type">char</span>&gt; alloc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp;, String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//****************cpp****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//operator - friend</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> String&amp; lhs)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; lhs.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp; is, String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c; (c = is.<span class="built_in">get</span>()) != <span class="string">&#x27;\n&#x27;</span>;) &#123;</span><br><span class="line">        rhs.<span class="built_in">push_back</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> (lhs.<span class="built_in">size</span>() == rhs.<span class="built_in">size</span>() &amp;&amp; std::<span class="built_in">equal</span>(lhs.<span class="built_in">begin</span>(), lhs.<span class="built_in">end</span>(), rhs.<span class="built_in">begin</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt;(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">lexicographical_compare</span>(lhs.<span class="built_in">begin</span>(), lhs.<span class="built_in">end</span>(), rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> rhs &lt; lhs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(rhs &lt; lhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs &lt; rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Constructors</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* sl = <span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(s);</span><br><span class="line">    <span class="keyword">while</span> (*sl)</span><br><span class="line">        ++sl;</span><br><span class="line">    <span class="built_in">range_initializer</span>(s, ++sl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Big 5</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">range_initializer</span>(rhs.elements, rhs.first_free);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String&amp; String::<span class="keyword">operator</span> = (<span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> newstr = <span class="built_in">alloc_n_copy</span>(rhs.elements, rhs.first_free);</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">    elements = newstr.first;</span><br><span class="line">    first_free = cap = newstr.second;</span><br><span class="line">    last_elem = first_free - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(String&amp;&amp; s) NOEXCEPT : <span class="built_in">elements</span>(s.elements), <span class="built_in">last_elem</span>(s.last_elem), <span class="built_in">first_free</span>(s.first_free), <span class="built_in">cap</span>(s.cap)</span><br><span class="line">&#123;</span><br><span class="line">    s.elements = s.last_elem = s.first_free = s.cap = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String&amp; String::<span class="keyword">operator</span> = (String&amp;&amp; rhs) NOEXCEPT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;rhs) &#123;</span><br><span class="line">        <span class="built_in">free</span>();</span><br><span class="line">        elements = rhs.elements;</span><br><span class="line">        last_elem = rhs.last_elem;</span><br><span class="line">        first_free = rhs.first_free;</span><br><span class="line">        cap = rhs.cap;</span><br><span class="line">        rhs.elements = rhs.last_elem = rhs.first_free = rhs.cap = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::~<span class="built_in">String</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//members</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::push_back</span><span class="params">(<span class="type">const</span> <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">chk_n_alloc</span>();</span><br><span class="line">    *last_elem = c;</span><br><span class="line">    last_elem = first_free;</span><br><span class="line">    alloc.<span class="built_in">construct</span>(first_free++, <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::reallocate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//\0    |    -</span></span><br><span class="line">    <span class="comment">//  ^          ^</span></span><br><span class="line">    <span class="comment">// elements    first_free</span></span><br><span class="line">    <span class="comment">// last_elem   cap</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> newcapacity = <span class="built_in">size</span>() ? <span class="number">2</span> * (<span class="built_in">size</span>() + <span class="number">1</span>) : <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">alloc_n_move</span>(newcapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> newdata = alloc.<span class="built_in">allocate</span>(new_cap);</span><br><span class="line">    <span class="keyword">auto</span> dest = newdata;</span><br><span class="line">    <span class="keyword">auto</span> elem = elements;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="built_in">size</span>() + <span class="number">1</span>; ++i)</span><br><span class="line">        alloc.<span class="built_in">construct</span>(dest++, std::<span class="built_in">move</span>(*elem++));</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">    elements = newdata;</span><br><span class="line">    last_elem = dest - <span class="number">1</span>;</span><br><span class="line">    first_free = dest;</span><br><span class="line">    cap = elements + new_cap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::free</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elements) &#123;</span><br><span class="line">        std::for_each(elements, first_free, [<span class="keyword">this</span>](<span class="type">char</span>&amp; c) &#123; alloc.<span class="built_in">destroy</span>(&amp;c); &#125;);</span><br><span class="line">        alloc.<span class="built_in">deallocate</span>(elements, cap - elements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;<span class="type">char</span>*, <span class="type">char</span>*&gt;</span></span><br><span class="line"><span class="function"><span class="title">String::alloc_n_copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* b, <span class="type">const</span> <span class="type">char</span>* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> str = alloc.<span class="built_in">allocate</span>(e - b);</span><br><span class="line">    <span class="keyword">return</span>&#123; str, std::<span class="built_in">uninitialized_copy</span>(b, e, str) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::range_initializer</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* first, <span class="type">const</span> <span class="type">char</span>* last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> newstr = <span class="built_in">alloc_n_copy</span>(first, last);</span><br><span class="line">    elements = newstr.first;</span><br><span class="line">    first_free = cap = newstr.second;</span><br><span class="line">    last_elem = first_free - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (new_cap &lt;= <span class="built_in">capacity</span>()) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">alloc_n_move</span>(new_cap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::resize</span><span class="params">(<span class="type">size_t</span> count, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="built_in">capacity</span>()) <span class="built_in">reserve</span>(count * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="built_in">size</span>(); i != count; ++i) &#123;</span><br><span class="line">            *last_elem++ = c;</span><br><span class="line">            alloc.<span class="built_in">construct</span>(first_free++, <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (count &lt; <span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (last_elem != elements + count) &#123;</span><br><span class="line">            --last_elem;</span><br><span class="line">            alloc.<span class="built_in">destroy</span>(--first_free);</span><br><span class="line">        &#125;</span><br><span class="line">        *last_elem = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::resize</span><span class="params">(<span class="type">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">resize</span>(count, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="StrBlob-StrBlodPtr"><a href="#StrBlob-StrBlodPtr" class="headerlink" title="StrBlob  StrBlodPtr"></a>StrBlob  StrBlodPtr</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//****************h****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::initializer_list;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::make_shared; <span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT noexcept</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrBlobPtr</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConstStrBlobPtr</span>;</span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//StrBlob - custom vector&lt;string&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrBlob</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> size_type = vector&lt;string&gt;::size_type;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">ConstStrBlobPtr</span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">StrBlobPtr</span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StrBlob</span>() : <span class="built_in">data</span>(make_shared&lt;vector&lt;string&gt;&gt;()) &#123; &#125;</span><br><span class="line">    <span class="built_in">StrBlob</span>(initializer_list&lt;string&gt; il) : <span class="built_in">data</span>(make_shared&lt;vector&lt;string&gt;&gt;(il)) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StrBlob</span>(<span class="type">const</span> StrBlob&amp; sb) : <span class="built_in">data</span>(make_shared&lt;vector&lt;string&gt;&gt;(*sb.data)) &#123; &#125;</span><br><span class="line">    StrBlob&amp; <span class="keyword">operator</span>=(<span class="type">const</span> StrBlob&amp;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StrBlob</span>(StrBlob&amp;&amp; rhs) NOEXCEPT : <span class="built_in">data</span>(std::<span class="built_in">move</span>(rhs.data)) &#123; &#125;</span><br><span class="line">    StrBlob&amp; <span class="keyword">operator</span>=(StrBlob&amp;&amp;)NOEXCEPT;</span><br><span class="line"></span><br><span class="line">    <span class="function">StrBlobPtr <span class="title">begin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">StrBlobPtr <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ConstStrBlobPtr <span class="title">cbegin</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">ConstStrBlobPtr <span class="title">cend</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    string&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> n);</span><br><span class="line">    <span class="type">const</span> string&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;<span class="built_in">size</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;<span class="built_in">empty</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> string&amp; t)</span> </span>&#123; data-&gt;<span class="built_in">push_back</span>(t); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(string&amp;&amp; s)</span> </span>&#123; data-&gt;<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(s)); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">string&amp; <span class="title">front</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">string&amp; <span class="title">back</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> string&amp; <span class="title">front</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> string&amp; <span class="title">back</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(size_type, <span class="type">const</span> string&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    shared_ptr&lt;vector&lt;string&gt;&gt; data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">StrBlob::pop_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;pop_back on empty StrBlob&quot;</span>);</span><br><span class="line">    data-&gt;<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> string&amp; <span class="title">StrBlob::front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;front on empty StrBlob&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> string&amp; <span class="title">StrBlob::back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;back on empty StrBlob&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> string&amp; <span class="title">StrBlob::front</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;front on empty StrBlob&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> string&amp; <span class="title">StrBlob::back</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;back on empty StrBlob&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">StrBlob::check</span><span class="params">(size_type i, <span class="type">const</span> string&amp; msg)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= data-&gt;<span class="built_in">size</span>()) <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> string&amp; StrBlob::<span class="keyword">operator</span>[](<span class="type">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">check</span>(n, <span class="string">&quot;out of range&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">at</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> string&amp; StrBlob::<span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">check</span>(n, <span class="string">&quot;out of range&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">at</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//StrBlobPtr - custom iterator of StrBlob</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrBlobPtr</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StrBlobPtr</span>() : <span class="built_in">curr</span>(<span class="number">0</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">StrBlobPtr</span>(StrBlob&amp; s, <span class="type">size_t</span> sz = <span class="number">0</span>) : <span class="built_in">wptr</span>(s.data), <span class="built_in">curr</span>(sz) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string&amp; <span class="title">deref</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">StrBlobPtr&amp; <span class="title">incr</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    string&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> n);</span><br><span class="line">    <span class="type">const</span> string&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    shared_ptr&lt;vector&lt;string&gt;&gt; <span class="built_in">check</span>(<span class="type">size_t</span>, <span class="type">const</span> string&amp;) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    std::weak_ptr&lt;vector&lt;string&gt;&gt; wptr;</span><br><span class="line">    <span class="type">size_t</span> curr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> string&amp; <span class="title">StrBlobPtr::deref</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">check</span>(curr, <span class="string">&quot;dereference past end&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (*p)[curr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> StrBlobPtr&amp; <span class="title">StrBlobPtr::incr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(curr, <span class="string">&quot;increment past end of StrBlobPtr&quot;</span>);</span><br><span class="line">    ++curr;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> shared_ptr&lt;vector&lt;string&gt;&gt; StrBlobPtr::<span class="built_in">check</span>(<span class="type">size_t</span> i, <span class="type">const</span> string&amp; msg) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> ret = wptr.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (!ret) <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;unbound StrBlobPtr&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= ret-&gt;<span class="built_in">size</span>()) <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(msg);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> string&amp; StrBlobPtr::<span class="keyword">operator</span>[](<span class="type">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">check</span>(n, <span class="string">&quot;dereference out of range.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (*p)[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> string&amp; StrBlobPtr::<span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">check</span>(n, <span class="string">&quot;dereference out of range.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (*p)[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//ConstStrBlobPtr - custom const_iterator of StrBlob</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConstStrBlobPtr</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConstStrBlobPtr</span>() : <span class="built_in">curr</span>(<span class="number">0</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">ConstStrBlobPtr</span>(<span class="type">const</span> StrBlob&amp; s, <span class="type">size_t</span> sz = <span class="number">0</span>) : <span class="built_in">wptr</span>(s.data), <span class="built_in">curr</span>(sz) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> string&amp; <span class="title">deref</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">ConstStrBlobPtr&amp; <span class="title">incr</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> string&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;vector&lt;string&gt;&gt; <span class="built_in">check</span>(<span class="type">size_t</span>, <span class="type">const</span> string&amp;) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    std::weak_ptr&lt;vector&lt;string&gt;&gt; wptr;</span><br><span class="line">    <span class="type">size_t</span> curr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> string&amp; <span class="title">ConstStrBlobPtr::deref</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">check</span>(curr, <span class="string">&quot;dereference past end&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (*p)[curr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ConstStrBlobPtr&amp; <span class="title">ConstStrBlobPtr::incr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(curr, <span class="string">&quot;increment past end of StrBlobPtr&quot;</span>);</span><br><span class="line">    ++curr;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> std::shared_ptr&lt;vector&lt;string&gt;&gt; ConstStrBlobPtr::<span class="built_in">check</span>(<span class="type">size_t</span> i, <span class="type">const</span> string&amp; msg) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> ret = wptr.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (!ret) <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;unbound StrBlobPtr&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= ret-&gt;<span class="built_in">size</span>()) <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(msg);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> string&amp; ConstStrBlobPtr::<span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">check</span>(n, <span class="string">&quot;dereference out of range.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (*p)[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//****************cpp****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;StrBlob StrBlodPtr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//StrBlob - operators</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *lhs.data == *rhs.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">lexicographical_compare</span>(lhs.data-&gt;<span class="built_in">begin</span>(), lhs.data-&gt;<span class="built_in">end</span>(), rhs.data-&gt;<span class="built_in">begin</span>(), rhs.data-&gt;<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> rhs &lt; lhs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(rhs &lt; lhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs &lt; rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//StrBlobPtr - operators</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlobPtr&amp; lhs, <span class="type">const</span> StrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr == rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlobPtr&amp; lhs, <span class="type">const</span> StrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> StrBlobPtr&amp; x, <span class="type">const</span> StrBlobPtr&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.curr &lt; y.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> StrBlobPtr&amp; x, <span class="type">const</span> StrBlobPtr&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.curr &gt; y.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlobPtr&amp; x, <span class="type">const</span> StrBlobPtr&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.curr &lt;= y.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlobPtr&amp; x, <span class="type">const</span> StrBlobPtr&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.curr &gt;= y.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//ConstStrBlobPtr - operators</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr == rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr &lt; rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr &gt; rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr &lt;= rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr &gt;= rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//copy assignment operator and move assignment operator.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"></span><br><span class="line">StrBlob&amp; StrBlob::<span class="keyword">operator</span>=(<span class="type">const</span> StrBlob&amp; lhs)</span><br><span class="line">&#123;</span><br><span class="line">    data = make_shared&lt;vector&lt;string&gt;&gt;(*lhs.data);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrBlob&amp; StrBlob::<span class="keyword">operator</span>=(StrBlob&amp;&amp; rhs) NOEXCEPT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;rhs) &#123;</span><br><span class="line">        data = std::<span class="built_in">move</span>(rhs.data);</span><br><span class="line">        rhs.data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//members</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function">StrBlobPtr <span class="title">StrBlob::begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">StrBlobPtr</span>(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">StrBlobPtr <span class="title">StrBlob::end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">StrBlobPtr</span>(*<span class="keyword">this</span>, data-&gt;<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ConstStrBlobPtr <span class="title">StrBlob::cbegin</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ConstStrBlobPtr</span>(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ConstStrBlobPtr <span class="title">StrBlob::cend</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ConstStrBlobPtr</span>(*<span class="keyword">this</span>, data-&gt;<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="StrVec"><a href="#StrVec" class="headerlink" title="StrVec"></a>StrVec</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//****************h****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT noexcept</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrVec</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StrVec</span>() : <span class="built_in">elements</span>(<span class="literal">nullptr</span>), <span class="built_in">first_free</span>(<span class="literal">nullptr</span>), <span class="built_in">cap</span>(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">StrVec</span>(std::initializer_list&lt;std::string&gt;);</span><br><span class="line">    <span class="built_in">StrVec</span>(<span class="type">const</span> StrVec&amp;);</span><br><span class="line">    StrVec&amp; <span class="keyword">operator</span>=(<span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="built_in">StrVec</span>(StrVec&amp;&amp;) NOEXCEPT;</span><br><span class="line">    StrVec&amp; <span class="keyword">operator</span>=(StrVec&amp;&amp;)NOEXCEPT;</span><br><span class="line">    ~<span class="built_in">StrVec</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> std::string&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> first_free - elements; &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> cap - elements; &#125;</span><br><span class="line">    <span class="function">std::string* <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> elements; &#125;</span><br><span class="line">    <span class="function">std::string* <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> first_free; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string&amp; <span class="title">at</span><span class="params">(<span class="type">size_t</span> pos)</span> </span>&#123; <span class="keyword">return</span> *(elements + pos); &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> std::string&amp; <span class="title">at</span><span class="params">(<span class="type">size_t</span> pos)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> *(elements + pos); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span> count)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span> count, <span class="type">const</span> std::string&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">    StrVec&amp; <span class="keyword">operator</span>=(std::initializer_list&lt;std::string&gt;);</span><br><span class="line">    std::string&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> n) &#123; <span class="keyword">return</span> elements[n]; &#125;</span><br><span class="line">    <span class="type">const</span> std::string&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> n) <span class="type">const</span> &#123; <span class="keyword">return</span> elements[n]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">std::pair&lt;std::string*, std::string*&gt; <span class="title">alloc_n_copy</span><span class="params">(<span class="type">const</span> std::string*, <span class="type">const</span> std::string*)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">chk_n_alloc</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span> (<span class="built_in">size</span>() == <span class="built_in">capacity</span>()) <span class="built_in">reallocate</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reallocate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">range_initialize</span><span class="params">(<span class="type">const</span> std::string*, <span class="type">const</span> std::string*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string* elements;</span><br><span class="line">    std::string* first_free;</span><br><span class="line">    std::string* cap;</span><br><span class="line">    std::allocator&lt;std::string&gt; alloc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//****************cpp****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;StrVec.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::push_back</span><span class="params">(<span class="type">const</span> std::string&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">chk_n_alloc</span>();</span><br><span class="line">    alloc.<span class="built_in">construct</span>(first_free++, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;std::string*, std::string*&gt;</span></span><br><span class="line"><span class="function"><span class="title">StrVec::alloc_n_copy</span><span class="params">(<span class="type">const</span> std::string* b, <span class="type">const</span> std::string* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> data = alloc.<span class="built_in">allocate</span>(e - b);</span><br><span class="line">    <span class="keyword">return</span>&#123; data, std::<span class="built_in">uninitialized_copy</span>(b, e, data) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::free</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elements) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = first_free; p != elements;)</span><br><span class="line">            alloc.<span class="built_in">destroy</span>(--p);</span><br><span class="line">        alloc.<span class="built_in">deallocate</span>(elements, cap - elements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec::<span class="built_in">StrVec</span>(<span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> newdata = <span class="built_in">alloc_n_copy</span>(rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line">    elements = newdata.first;</span><br><span class="line">    first_free = cap = newdata.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec::~<span class="built_in">StrVec</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec&amp; StrVec::<span class="keyword">operator</span> = (<span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> data = <span class="built_in">alloc_n_copy</span>(rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">    elements = data.first;</span><br><span class="line">    first_free = cap = data.second;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> newdata = alloc.<span class="built_in">allocate</span>(new_cap);</span><br><span class="line">    <span class="keyword">auto</span> dest = newdata;</span><br><span class="line">    <span class="keyword">auto</span> elem = elements;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="built_in">size</span>(); ++i)</span><br><span class="line">        alloc.<span class="built_in">construct</span>(dest++, std::<span class="built_in">move</span>(*elem++));</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">    elements = newdata;</span><br><span class="line">    first_free = dest;</span><br><span class="line">    cap = elements + new_cap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::reallocate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> newcapacity = <span class="built_in">size</span>() ? <span class="number">2</span> * <span class="built_in">size</span>() : <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">alloc_n_move</span>(newcapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (new_cap &lt;= <span class="built_in">capacity</span>()) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">alloc_n_move</span>(new_cap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::resize</span><span class="params">(<span class="type">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">resize</span>(count, std::<span class="built_in">string</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::resize</span><span class="params">(<span class="type">size_t</span> count, <span class="type">const</span> std::string&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="built_in">capacity</span>()) <span class="built_in">reserve</span>(count * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="built_in">size</span>(); i != count; ++i)</span><br><span class="line">            alloc.<span class="built_in">construct</span>(first_free++, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (count &lt; <span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (first_free != elements + count)</span><br><span class="line">            alloc.<span class="built_in">destroy</span>(--first_free);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec&amp; StrVec::<span class="keyword">operator</span>=(std::initializer_list&lt;std::string&gt;il)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> data = <span class="built_in">alloc_n_copy</span>(il.<span class="built_in">begin</span>(), il.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">    elements = data.first;</span><br><span class="line">    first_free = cap = data.second;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrVec&amp;lhs, <span class="type">const</span> StrVec&amp;rhs) &#123;</span><br><span class="line">    <span class="built_in">return</span> (lhs.<span class="built_in">size</span>() == rhs.<span class="built_in">size</span>()) &amp;&amp; (std::<span class="built_in">equal</span>(lhs.<span class="built_in">begin</span>(), lhs.<span class="built_in">end</span>(), rhs.<span class="built_in">begin</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrVec&amp; lhs, <span class="type">const</span> StrVec&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt;(<span class="type">const</span> StrVec&amp; lhs, <span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">lexicographical_compare</span>(lhs.<span class="built_in">begin</span>(), lhs.<span class="built_in">end</span>(), rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> StrVec&amp; lhs, <span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> rhs &lt; lhs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrVec&amp; lhs, <span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(rhs &lt; lhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrVec&amp; lhs, <span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs &lt; rhs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-34"><a href="#14-34" class="headerlink" title="14.34"></a>14.34</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ITE</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">bool</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a ? b : c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="13-36"><a href="#13-36" class="headerlink" title="13.36"></a>13.36</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GetInput</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GetInput</span>(std::istream&amp; i = std::cin) : <span class="built_in">is</span>(i) &#123; &#125;</span><br><span class="line"><span class="function">std::string <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">std::string str;</span><br><span class="line">std::<span class="built_in">getline</span>(is, str);</span><br><span class="line"><span class="keyword">return</span> is ? str : std::<span class="built_in">string</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::istream&amp; is;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">GetInput getInput;</span><br><span class="line">std::vector&lt;std::string&gt; vec;</span><br><span class="line"><span class="keyword">for</span> (std::string tmp; !(tmp = <span class="built_in">getInput</span>()).<span class="built_in">empty</span>(); ) vec.<span class="built_in">push_back</span>(tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; str : vec) std::cout &lt;&lt; str &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-37"><a href="#14-37" class="headerlink" title="14.37"></a>14.37</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IsEqual</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">IsEqual</span>(<span class="type">int</span> num):<span class="built_in">value</span>(num)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> elem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value == elem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec&#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="function">IsEqual <span class="title">ie</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">std::<span class="built_in">replace_if</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="built_in">IsEqual</span>(<span class="number">5</span>), <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : vec)</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-39"><a href="#14-39" class="headerlink" title="14.39"></a>14.39</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IsInRange</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">IsInRange</span>(<span class="type">int</span> lower,<span class="type">int</span> upper):_lower(lower),_upper(upper)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string str)</span><span class="type">const</span>  </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str.<span class="built_in">size</span>() &gt;= _lower &amp;&amp; str.<span class="built_in">size</span>() &lt;= _upper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _lower;</span><br><span class="line"><span class="type">int</span> _upper;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;14.39.txt&quot;</span>)</span></span>;</span><br><span class="line">string word;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count10 = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsInRange</span>(<span class="number">1</span>, <span class="number">9</span>)(word))</span><br><span class="line">++count;</span><br><span class="line"><span class="keyword">else</span> ++count10;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; count10 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-42"><a href="#14-42" class="headerlink" title="14.42"></a>14.42</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="built_in">count_if</span>(ivec.<span class="built_in">cbegin</span>(), ivec.<span class="built_in">cend</span>(), std::<span class="built_in">bind</span>(std::<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;(), _1, <span class="number">1024</span>));</span><br><span class="line">std::<span class="built_in">find_if</span>(svec.<span class="built_in">cbegin</span>(), svec.<span class="built_in">cend</span>(), std::<span class="built_in">bind</span>(std::<span class="built_in">not_equal_to</span>&lt;std::string&gt;(), _1, <span class="string">&quot;pooh&quot;</span>));</span><br><span class="line">std::<span class="built_in">transform</span>(ivec.<span class="built_in">begin</span>(), ivec.<span class="built_in">end</span>(), ivec.<span class="built_in">begin</span>(), std::<span class="built_in">bind</span>(std::<span class="built_in">multiplies</span>&lt;<span class="type">int</span>&gt;(), _1, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h5 id="14-43"><a href="#14-43" class="headerlink" title="14.43"></a>14.43</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> data = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    std::cin &gt;&gt; input;</span><br><span class="line">    std::modulus&lt;<span class="type">int</span>&gt; mod;</span><br><span class="line">    <span class="keyword">auto</span> predicator = [&amp;](<span class="type">int</span> i)&#123; <span class="keyword">return</span> <span class="number">0</span> == <span class="built_in">mod</span>(input, i); &#125;;</span><br><span class="line">    <span class="keyword">auto</span> is_divisible = std::<span class="built_in">any_of</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), predicator);</span><br><span class="line">    std::cout &lt;&lt; (is_divisible ? <span class="string">&quot;Yes!&quot;</span> : <span class="string">&quot;No!&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-44"><a href="#14-44" class="headerlink" title="14.44"></a>14.44</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123; <span class="keyword">return</span> i + j; &#125;</span><br><span class="line"><span class="keyword">auto</span> mod = [](<span class="type">int</span> i, <span class="type">int</span> j) &#123; <span class="keyword">return</span> i % j; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Div</span> &#123; <span class="function"><span class="type">int</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> i / j; &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> binops = std::map&lt;std::string, std::function&lt;<span class="built_in">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#123; <span class="string">&quot;+&quot;</span>, add &#125;,                               <span class="comment">// function pointer </span></span><br><span class="line">    &#123; <span class="string">&quot;-&quot;</span>, std::<span class="built_in">minus</span>&lt;<span class="type">int</span>&gt;() &#125;,                 <span class="comment">// library functor </span></span><br><span class="line">    &#123; <span class="string">&quot;/&quot;</span>, <span class="built_in">Div</span>() &#125;,                             <span class="comment">// user-defined functor </span></span><br><span class="line">    &#123; <span class="string">&quot;*&quot;</span>, [](<span class="type">int</span> i, <span class="type">int</span> j) &#123; <span class="keyword">return</span> i * j; &#125; &#125;,  <span class="comment">// unnamed lambda </span></span><br><span class="line">    &#123; <span class="string">&quot;%&quot;</span>, mod &#125;                                <span class="comment">// named lambda object </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第14章 重载运算与类型转换</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer(第13章 拷贝控制)</title>
    <link href="https://windcrain.top/post/c-primer-di-13-zhang/"/>
    <id>https://windcrain.top/post/c-primer-di-13-zhang/</id>
    <published>2022-03-24T08:02:13.000Z</published>
    <updated>2022-06-10T12:02:28.319Z</updated>
    
    <content type="html"><![CDATA[<h5 id="13-5"><a href="#13-5" class="headerlink" title="13.5"></a>13.5</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HasPtr</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> string &amp;s=<span class="built_in">string</span>()):<span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>()),<span class="built_in">i</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> HasPtr&amp; hp): <span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps)),<span class="built_in">i</span>(hp.i)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string* ps;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="13-8"><a href="#13-8" class="headerlink" title="13.8"></a>13.8</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HasPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> HasPtr&amp; hp) &#123;</span><br><span class="line">string* temp_ps = <span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps);</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br><span class="line">ps = temp_ps;</span><br><span class="line">i = hp.i;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-17"><a href="#13-17" class="headerlink" title="13.17"></a>13.17</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">numbered</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">numbered</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;numbered()&quot;</span> &lt;&lt; endl;</span><br><span class="line">mysn = unique++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">numbered</span>(<span class="type">const</span> numbered&amp; n)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;numbered(const numbered&amp; n)&quot;</span> &lt;&lt; endl;</span><br><span class="line">mysn = unique++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mysn;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> unique;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> numbered::unique = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">const</span> numbered&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; s.mysn &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">numbered a, b = a, c = b;</span><br><span class="line"><span class="built_in">f</span>(a);</span><br><span class="line"><span class="built_in">f</span>(b);</span><br><span class="line"><span class="built_in">f</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-18"><a href="#13-18" class="headerlink" title="13.18"></a>13.18</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Employee</span>() &#123;</span><br><span class="line">m_Id = num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Employee</span>(string name) &#123;</span><br><span class="line">m_Name = name;</span><br><span class="line">m_Id = num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Employee</span>(<span class="type">const</span> Employee&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Employee <span class="keyword">operator</span>=(<span class="type">const</span> Employee&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">id</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_Id; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num;</span><br><span class="line">string m_Name;</span><br><span class="line"><span class="type">int</span> m_Id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Employee::num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="13-22"><a href="#13-22" class="headerlink" title="13.22"></a>13.22</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HasPtr</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HasPtr</span>(<span class="type">const</span> std::string &amp;s = std::<span class="built_in">string</span>()) : <span class="built_in">ps</span>(<span class="keyword">new</span> std::<span class="built_in">string</span>(s)), <span class="built_in">i</span>(<span class="number">0</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">HasPtr</span>(<span class="type">const</span> HasPtr &amp;hp) : <span class="built_in">ps</span>(<span class="keyword">new</span> std::<span class="built_in">string</span>(*hp.ps)), <span class="built_in">i</span>(hp.i) &#123; &#125;</span><br><span class="line">    HasPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> HasPtr &amp;hp) &#123;</span><br><span class="line">        <span class="keyword">auto</span> new_p = <span class="keyword">new</span> std::<span class="built_in">string</span>(*hp.ps);</span><br><span class="line">        <span class="keyword">delete</span> ps;</span><br><span class="line">        ps = new_p;</span><br><span class="line">        i = hp.i;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">HasPtr</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span> ps;</span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string *ps;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="13-27"><a href="#13-27" class="headerlink" title="13.27"></a>13.27</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HasPtr</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> string &amp;s=<span class="built_in">string</span>()):<span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>()),<span class="built_in">i</span>(<span class="number">0</span>),<span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">size_t</span>(<span class="number">1</span>)) &#123;&#125;</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> HasPtr&amp; hp) : <span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps)), <span class="built_in">i</span>(hp.i), <span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">size_t</span>(*hp.use)) &#123; ++* use; &#125;</span><br><span class="line">HasPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> HasPtr&amp; hp) &#123;</span><br><span class="line">++*hp.use;</span><br><span class="line"><span class="keyword">if</span> (-- * use == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br><span class="line"><span class="keyword">delete</span> use;</span><br><span class="line">&#125;</span><br><span class="line">ps = hp.ps;</span><br><span class="line">i = hp.i;</span><br><span class="line">use = hp.use;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">HasPtr</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (-- * use == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br><span class="line"><span class="keyword">delete</span> use;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string* ps;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">size_t</span>* use;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="13-28"><a href="#13-28" class="headerlink" title="13.28"></a>13.28</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TreeNode</span>():<span class="built_in">value</span>(<span class="built_in">string</span>()),<span class="built_in">count</span>(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>)),<span class="built_in">left</span>(<span class="literal">nullptr</span>),<span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">TreeNode</span>(<span class="type">const</span> TreeNode&amp; rhs) :<span class="built_in">value</span>(rhs.value), <span class="built_in">count</span>(<span class="keyword">new</span> <span class="built_in">int</span>(*rhs.count)),<span class="built_in">left</span>(rhs.left),<span class="built_in">right</span>(rhs.right) &#123; ++* count; &#125;</span><br><span class="line">TreeNode&amp; <span class="keyword">operator</span>=(<span class="type">const</span> TreeNode&amp; rhs);</span><br><span class="line">~<span class="built_in">TreeNode</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (-- * count == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> left;</span><br><span class="line"><span class="keyword">delete</span> right;</span><br><span class="line"><span class="keyword">delete</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string value;</span><br><span class="line"><span class="type">int</span>* count;</span><br><span class="line">TreeNode* left;</span><br><span class="line">TreeNode* right;</span><br><span class="line">&#125;;</span><br><span class="line">TreeNode&amp; TreeNode::<span class="keyword">operator</span>=(<span class="type">const</span> TreeNode&amp; rhs) &#123;</span><br><span class="line">++* rhs.count;</span><br><span class="line"><span class="keyword">if</span> (-- * count == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> left;</span><br><span class="line"><span class="keyword">delete</span> right;</span><br><span class="line"><span class="keyword">delete</span> count;</span><br><span class="line">&#125;</span><br><span class="line">value = rhs.value;</span><br><span class="line">count = rhs.count;</span><br><span class="line">left = rhs.left;</span><br><span class="line">right = rhs.right;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinStrTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BinStrTree</span>():<span class="built_in">root</span>(<span class="keyword">new</span> <span class="built_in">TreeNode</span>())&#123;&#125;</span><br><span class="line"><span class="built_in">BinStrTree</span>(<span class="type">const</span> BinStrTree&amp;bst):<span class="built_in">root</span>(<span class="keyword">new</span> <span class="built_in">TreeNode</span>(*bst.root))&#123;&#125;</span><br><span class="line">BinStrTree&amp; <span class="keyword">operator</span>=(<span class="type">const</span> BinStrTree&amp; bst);</span><br><span class="line">~<span class="built_in">BinStrTree</span>() &#123;</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TreeNode* root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BinStrTree&amp; BinStrTree::<span class="keyword">operator</span>=(<span class="type">const</span> BinStrTree&amp; bst) &#123;</span><br><span class="line">TreeNode* temp_r = bst.root;</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line">root = temp_r;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-30"><a href="#13-30" class="headerlink" title="13.30"></a>13.30</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HasPtr</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(HasPtr&amp;, HasPtr&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> string &amp;s=<span class="built_in">string</span>()):<span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>(s)),<span class="built_in">i</span>(<span class="number">0</span>),<span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">size_t</span>(<span class="number">1</span>)) &#123;&#125;</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> HasPtr&amp; hp) : <span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps)), <span class="built_in">i</span>(hp.i), <span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">size_t</span>(*hp.use)) &#123; ++* use; &#125;</span><br><span class="line">HasPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> HasPtr&amp; hp) &#123;</span><br><span class="line">++*hp.use;</span><br><span class="line"><span class="keyword">if</span> (-- * use == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br><span class="line"><span class="keyword">delete</span> use;</span><br><span class="line">&#125;</span><br><span class="line">ps = hp.ps;</span><br><span class="line">i = hp.i;</span><br><span class="line">use = hp.use;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">HasPtr</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (-- * use == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br><span class="line"><span class="keyword">delete</span> use;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; cout &lt;&lt; *ps &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string* ps;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">size_t</span>* use;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(HasPtr&amp;lhs, HasPtr&amp;rhs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> std::swap;</span><br><span class="line"><span class="built_in">swap</span>(lhs.ps, rhs.ps);</span><br><span class="line"><span class="built_in">swap</span>(lhs.i, lhs.i);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call swap(HasPtr&amp; lhs, HasPtr&amp; rhs)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">HasPtr <span class="title">a</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">HasPtr <span class="title">b</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">a.<span class="built_in">show</span>();</span><br><span class="line">b.<span class="built_in">show</span>();</span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line">a.<span class="built_in">show</span>();</span><br><span class="line">b.<span class="built_in">show</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-31"><a href="#10-31" class="headerlink" title="10.31"></a>10.31</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (HasPtr&amp;lhs, HasPtr&amp;rhs) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call operator &lt; (HasPtr&amp;lhs, HasPtr&amp;rhs) &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> lhs.ps &lt; rhs.ps;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">HasPtr s&#123; <span class="string">&quot;s&quot;</span> &#125;, a&#123; <span class="string">&quot;a&quot;</span> &#125;, c&#123; <span class="string">&quot;c&quot;</span> &#125;;</span><br><span class="line">vector&lt;HasPtr&gt; vec&#123; s, a, c &#125;;</span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : vec) &#123;</span><br><span class="line">v.<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-37"><a href="#13-37" class="headerlink" title="13.37"></a>13.37</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Folder</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(Message&amp;, Message&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(Folder&amp;, Folder&amp;)</span></span>;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Folder</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Message</span><span class="params">(<span class="type">const</span> std::string&amp; s = <span class="string">&quot;&quot;</span>)</span> :contents(s) &#123;</span>&#125;</span><br><span class="line"><span class="built_in">Message</span>(<span class="type">const</span> Message&amp;);</span><br><span class="line">Message&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Message&amp;);</span><br><span class="line">~<span class="built_in">Message</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(Folder&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(Folder&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_debug</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string contents;</span><br><span class="line">std::set&lt;Folder*&gt; folders;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_Folders</span><span class="params">(<span class="type">const</span> Message&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove_from_Folders</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addFldr</span><span class="params">(Folder* f)</span> </span>&#123; folders.<span class="built_in">insert</span>(f); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remFlddr</span><span class="params">(Folder* f)</span> </span>&#123; folders.<span class="built_in">erase</span>(f); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Message&amp;, Message&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Folder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(Message&amp;, Message&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(Folder&amp;, Folder&amp;)</span></span>;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Message</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Folder</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Folder</span>(<span class="type">const</span> Folder&amp;);</span><br><span class="line">Folder&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Folder&amp;);</span><br><span class="line">~<span class="built_in">Folder</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_debug</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::set&lt;Message*&gt; msgs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_Message</span><span class="params">(<span class="type">const</span> Folder&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove_from_Message</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addMsg</span><span class="params">(Message* m)</span> </span>&#123; msgs.<span class="built_in">insert</span>(m); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remMsg</span><span class="params">(Message* m)</span> </span>&#123; msgs.<span class="built_in">erase</span>(m); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Folder&amp;, Folder&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Message&amp; lhs, Message&amp; rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> std::swap;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : lhs.folders)</span><br><span class="line">f-&gt;<span class="built_in">remMsg</span>(&amp;lhs);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : rhs.folders)</span><br><span class="line">f-&gt;<span class="built_in">remMsg</span>(&amp;rhs);</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(lhs.folders, rhs.folders);</span><br><span class="line"><span class="built_in">swap</span>(lhs.contents, rhs.contents);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : lhs.folders)</span><br><span class="line">f-&gt;<span class="built_in">addMsg</span>(&amp;lhs);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : rhs.folders)</span><br><span class="line">f-&gt;<span class="built_in">addMsg</span>(&amp;rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Message::save</span><span class="params">(Folder&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">folders.<span class="built_in">insert</span>(&amp;f);</span><br><span class="line">f.<span class="built_in">addMsg</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Message::remove</span><span class="params">(Folder&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">folders.<span class="built_in">erase</span>(&amp;f);</span><br><span class="line">f.<span class="built_in">remMsg</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Message::add_to_Folders</span><span class="params">(<span class="type">const</span> Message&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : m.folders)</span><br><span class="line">f-&gt;<span class="built_in">addMsg</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Message::<span class="built_in">Message</span>(<span class="type">const</span> Message&amp; m) :<span class="built_in">contents</span>(m.contents), <span class="built_in">folders</span>(m.folders)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add_to_Folders</span>(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Message::remove_from_Folders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : folders)</span><br><span class="line">f-&gt;<span class="built_in">remMsg</span>(<span class="keyword">this</span>);</span><br><span class="line">folders.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Message::~<span class="built_in">Message</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">remove_from_Folders</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Message&amp; Message::<span class="keyword">operator</span>=(<span class="type">const</span> Message&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">remove_from_Folders</span>();</span><br><span class="line">contents = rhs.contents;</span><br><span class="line">folders = rhs.folders;</span><br><span class="line"><span class="built_in">add_to_Folders</span>(rhs);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Message::print_debug</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; contents &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Folder&amp; lhs, Folder&amp; rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> std::swap;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : lhs.msgs)</span><br><span class="line">m-&gt;<span class="built_in">remFlddr</span>(&amp;lhs);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : rhs.msgs)</span><br><span class="line">m-&gt;<span class="built_in">remFlddr</span>(&amp;rhs);</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(lhs.msgs, rhs.msgs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : lhs.msgs)</span><br><span class="line">m-&gt;<span class="built_in">addFldr</span>(&amp;lhs);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : rhs.msgs)</span><br><span class="line">m-&gt;<span class="built_in">addFldr</span>(&amp;rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Folder::add_to_Message</span><span class="params">(<span class="type">const</span> Folder&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : f.msgs)</span><br><span class="line">m-&gt;<span class="built_in">addFldr</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Folder::<span class="built_in">Folder</span>(<span class="type">const</span> Folder&amp; f) :<span class="built_in">msgs</span>(f.msgs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add_to_Message</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Folder::remove_from_Message</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : msgs)</span><br><span class="line">m-&gt;<span class="built_in">remFlddr</span>(<span class="keyword">this</span>);</span><br><span class="line">msgs.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Folder::~<span class="built_in">Folder</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">remove_from_Message</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Folder&amp; Folder::<span class="keyword">operator</span>=(<span class="type">const</span> Folder&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">remove_from_Message</span>();</span><br><span class="line">msgs = rhs.msgs;</span><br><span class="line"><span class="built_in">add_to_Message</span>(rhs);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Folder::print_debug</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : msgs)</span><br><span class="line">std::cout &lt;&lt; m-&gt;contents &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-39"><a href="#10-39" class="headerlink" title="10.39"></a>10.39</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StrVec</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">StrVec</span>() : <span class="built_in">elements</span>(<span class="literal">nullptr</span>), <span class="built_in">first_free</span>(<span class="literal">nullptr</span>), <span class="built_in">cap</span>(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line"><span class="built_in">StrVec</span>(<span class="type">const</span> StrVec&amp;);</span><br><span class="line">StrVec&amp; <span class="keyword">operator</span>=(<span class="type">const</span> StrVec&amp;);</span><br><span class="line">~<span class="built_in">StrVec</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> std::string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> first_free - elements; &#125;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> cap - elements; &#125;</span><br><span class="line"><span class="function">std::string* <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> elements; &#125;</span><br><span class="line"><span class="function">std::string* <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> first_free; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span> count, <span class="type">const</span> std::string&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function">std::pair&lt;std::string*, std::string*&gt; <span class="title">alloc_n_copy</span><span class="params">(<span class="type">const</span> std::string*, <span class="type">const</span> std::string*)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chk_n_alloc</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span> (<span class="built_in">size</span>() == <span class="built_in">capacity</span>()) <span class="built_in">reallocate</span>(); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reallocate</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string* elements;</span><br><span class="line">std::string* first_free;</span><br><span class="line">std::string* cap;</span><br><span class="line">std::allocator&lt;std::string&gt; alloc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::push_back</span><span class="params">(<span class="type">const</span> std::string&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">chk_n_alloc</span>();</span><br><span class="line">alloc.<span class="built_in">construct</span>(first_free++, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;std::string*, std::string*&gt;</span></span><br><span class="line"><span class="function"><span class="title">StrVec::alloc_n_copy</span><span class="params">(<span class="type">const</span> std::string* b, <span class="type">const</span> std::string* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> data = alloc.<span class="built_in">allocate</span>(e - b);</span><br><span class="line"><span class="keyword">return</span>&#123; data, std::<span class="built_in">uninitialized_copy</span>(b, e, data) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::free</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (elements) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = first_free; p != elements;)</span><br><span class="line">alloc.<span class="built_in">destroy</span>(--p);</span><br><span class="line">alloc.<span class="built_in">deallocate</span>(elements, cap - elements);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec::<span class="built_in">StrVec</span>(<span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> newdata = <span class="built_in">alloc_n_copy</span>(rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line">elements = newdata.first;</span><br><span class="line">first_free = cap = newdata.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec::~<span class="built_in">StrVec</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec&amp; StrVec::<span class="keyword">operator</span> = (<span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> data = <span class="built_in">alloc_n_copy</span>(rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">elements = data.first;</span><br><span class="line">first_free = cap = data.second;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> newdata = alloc.<span class="built_in">allocate</span>(new_cap);</span><br><span class="line"><span class="keyword">auto</span> dest = newdata;</span><br><span class="line"><span class="keyword">auto</span> elem = elements;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="built_in">size</span>(); ++i)</span><br><span class="line">alloc.<span class="built_in">construct</span>(dest++, std::<span class="built_in">move</span>(*elem++));</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">elements = newdata;</span><br><span class="line">first_free = dest;</span><br><span class="line">cap = elements + new_cap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::reallocate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> newcapacity = <span class="built_in">size</span>() ? <span class="number">2</span> * <span class="built_in">size</span>() : <span class="number">1</span>;</span><br><span class="line"><span class="built_in">alloc_n_move</span>(newcapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (new_cap &lt;= <span class="built_in">capacity</span>()) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">alloc_n_move</span>(new_cap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::resize</span><span class="params">(<span class="type">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">resize</span>(count, std::<span class="built_in">string</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::resize</span><span class="params">(<span class="type">size_t</span> count, <span class="type">const</span> std::string&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="built_in">capacity</span>()) <span class="built_in">reserve</span>(count * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="built_in">size</span>(); i != count; ++i)</span><br><span class="line">alloc.<span class="built_in">construct</span>(first_free++, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (count &lt; <span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">while</span> (first_free != elements + count)</span><br><span class="line">alloc.<span class="built_in">destroy</span>(--first_free);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-40"><a href="#13-40" class="headerlink" title="13.40"></a>13.40</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::range_initialize</span><span class="params">(<span class="type">const</span> std::string* first, <span class="type">const</span> std::string* last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> newdata = <span class="built_in">alloc_n_copy</span>(first, last);</span><br><span class="line">elements = newdata.first;</span><br><span class="line">first_free = cap = newdata.second;</span><br><span class="line">&#125;</span><br><span class="line">StrVec::<span class="built_in">StrVec</span>(std::initializer_list&lt;std::string&gt; il)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">range_initialize</span>(il.<span class="built_in">begin</span>(), il.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-43"><a href="#13-43" class="headerlink" title="13.43"></a>13.43</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for_each(elements, first_free, [<span class="keyword">this</span>](string&amp; rhs) &#123;alloc.<span class="built_in">destroy</span>(&amp;rhs); &#125;);</span><br><span class="line">alloc.<span class="built_in">deallocate</span>(elements,cap-elements);</span><br></pre></td></tr></table></figure><h5 id="13-44"><a href="#13-44" class="headerlink" title="13.44"></a>13.44</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">String</span>()=<span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>*);</span><br><span class="line"><span class="built_in">String</span>(<span class="type">const</span> String&amp;);</span><br><span class="line">String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp;);</span><br><span class="line">~<span class="built_in">String</span>() &#123; <span class="built_in">free</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">allocator&lt;<span class="type">char</span>&gt;alloc;</span><br><span class="line"><span class="type">char</span>* elements;</span><br><span class="line"><span class="type">char</span>* end;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">char</span>*, <span class="type">char</span>*&gt; <span class="title">alloc_n_copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* b, <span class="type">const</span> <span class="type">char</span>* e)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">range_initializer</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* b, <span class="type">const</span> <span class="type">char</span>* e)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">char</span>*, <span class="type">char</span>*&gt; <span class="title">String::alloc_n_copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* b, <span class="type">const</span> <span class="type">char</span>* e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> data = alloc.<span class="built_in">allocate</span>(e - b);</span><br><span class="line"><span class="keyword">return</span> &#123; data,<span class="built_in">uninitialized_copy</span>(b,e,data) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::range_initializer</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* b, <span class="type">const</span> <span class="type">char</span>* e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> newdata = <span class="built_in">alloc_n_copy</span>(b, e);</span><br><span class="line">elements = newdata.first;</span><br><span class="line">end = newdata.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受c风格字符串参数的构造函数，s为指向字符串的指针(首位置)</span></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* s) &#123;</span><br><span class="line"><span class="keyword">auto</span> s1 = <span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(s);<span class="comment">//转化为非常量的指针</span></span><br><span class="line"><span class="keyword">while</span> (*s1) &#123;</span><br><span class="line">++s1;<span class="comment">//使其指向最后一个位置的尾部</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">alloc_n_copy</span>(s, s1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> String&amp; rhs) &#123;</span><br><span class="line"><span class="keyword">auto</span> newdata = <span class="built_in">alloc_n_copy</span>(rhs.elements, rhs.end);</span><br><span class="line">elements = newdata.first;</span><br><span class="line">end = newdata.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::free</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (elements) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = end; p != elements;) &#123;</span><br><span class="line">alloc.<span class="built_in">destroy</span>(--p);</span><br><span class="line">&#125;</span><br><span class="line">alloc.<span class="built_in">deallocate</span>(elements, end - elements);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>=(<span class="type">const</span> String&amp;rhs) &#123;</span><br><span class="line"><span class="keyword">auto</span> data = <span class="built_in">alloc_n_copy</span>(rhs.elements, rhs.end);</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">elements = data.first;</span><br><span class="line">end = data.second;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-48"><a href="#13-48" class="headerlink" title="13.48"></a>13.48</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> text[] = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String s0;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">s2</span><span class="params">(s0)</span></span>;<span class="comment">//1</span></span><br><span class="line">    String s3 = s1;<span class="comment">//2 拷贝构造</span></span><br><span class="line">    <span class="function">String <span class="title">s4</span><span class="params">(text)</span></span>;</span><br><span class="line">    s2 = s1;<span class="comment">//3 拷贝赋值运算符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    std::vector&lt;String&gt; svec;</span><br><span class="line">    svec.<span class="built_in">reserve</span>(<span class="number">5</span>);</span><br><span class="line">    svec.<span class="built_in">push_back</span>(s0);<span class="comment">//4  拷贝构造</span></span><br><span class="line">    svec.<span class="built_in">push_back</span>(s1);<span class="comment">//5  </span></span><br><span class="line">    svec.<span class="built_in">push_back</span>(s2);<span class="comment">//6</span></span><br><span class="line">    svec.<span class="built_in">push_back</span>(s3);<span class="comment">//7</span></span><br><span class="line">    svec.<span class="built_in">push_back</span>(s4);<span class="comment">//8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-49"><a href="#13-49" class="headerlink" title="13.49"></a>13.49</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">StrVec</span>(StrVec&amp;&amp; s) <span class="keyword">noexcept</span> :<span class="built_in">elements</span>(s.elements), <span class="built_in">first_free</span>(s.first_free), <span class="built_in">cap</span>(s.cap) &#123;</span><br><span class="line">s.elements = s.first_free = s.cap = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">StrVec&amp; <span class="keyword">operator</span>=(StrVec&amp;&amp; rhs)<span class="keyword">noexcept</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != &amp;rhs) &#123;</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">elements = rhs.elements;</span><br><span class="line">first_free = rhs.first_free;</span><br><span class="line">cap = rhs.cap;</span><br><span class="line">rhs.elements = rhs.first_free = rhs.cap = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(String&amp;&amp; s)<span class="keyword">noexcept</span> :<span class="built_in">elements</span>(s.elements), <span class="built_in">end</span>(s.end) &#123; s.elements = s.end = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">String&amp; <span class="keyword">operator</span>=(String&amp;&amp; rhs) <span class="keyword">noexcept</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != &amp;rhs) &#123;</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">elements = rhs.elements;</span><br><span class="line">end = rhs.end;</span><br><span class="line">rhs.elements = rhs.end = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-58"><a href="#13-58" class="headerlink" title="13.58"></a>13.58</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Foo <span class="title">sorted</span><span class="params">()</span>&amp;&amp;</span>;</span><br><span class="line">    <span class="function">Foo <span class="title">sorted</span><span class="params">()</span> <span class="type">const</span>&amp;</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Foo <span class="title">Foo::sorted</span><span class="params">()</span>&amp;&amp; </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>());</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&amp;&amp;&quot;</span> &lt;&lt; std::endl; <span class="comment">// debug</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Foo <span class="title">Foo::sorted</span><span class="params">()</span> <span class="type">const</span>&amp; </span>&#123;</span><br><span class="line">    <span class="comment">//    Foo ret(*this);</span></span><br><span class="line">    <span class="comment">//    sort(ret.data.begin(), ret.data.end());</span></span><br><span class="line">    <span class="comment">//    return ret;</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;const &amp;&quot;</span> &lt;&lt; std::endl; <span class="comment">// debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    Foo ret(*this);</span></span><br><span class="line"><span class="comment">//    ret.sorted();     // Exercise 13.56</span></span><br><span class="line"><span class="comment">//    return ret;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Foo</span>(*<span class="keyword">this</span>).<span class="built_in">sorted</span>(); <span class="comment">// Exercise 13.57</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Foo</span>().<span class="built_in">sorted</span>(); <span class="comment">// call &quot;&amp;&amp;&quot;</span></span><br><span class="line">    Foo f;</span><br><span class="line">    f.<span class="built_in">sorted</span>(); <span class="comment">// call &quot;const &amp;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第13章 拷贝控制</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer(第12章 动态内存)</title>
    <link href="https://windcrain.top/post/c-primer-di-12-zhang/"/>
    <id>https://windcrain.top/post/c-primer-di-12-zhang/</id>
    <published>2022-03-15T06:27:37.000Z</published>
    <updated>2022-06-10T12:03:05.269Z</updated>
    
    <content type="html"><![CDATA[<h5 id="12-2"><a href="#12-2" class="headerlink" title="12.2"></a>12.2</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrBlob</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> size_type = vector&lt;string&gt;::size_type;</span><br><span class="line"></span><br><span class="line"><span class="built_in">StrBlob</span>() :<span class="built_in">data</span>(make_shared&lt;vector&lt;string&gt;&gt;()) &#123;&#125;</span><br><span class="line"><span class="built_in">StrBlob</span>(initializer_list&lt;string&gt; il) : <span class="built_in">data</span>(make_shared&lt;vector&lt;string&gt;&gt;(il)) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> string&amp; s)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">data-&gt;<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;pop_back on empty StrBlob&quot;</span>);</span><br><span class="line">data-&gt;<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string&amp; <span class="title">front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;front on empty StrBlob&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string&amp; <span class="title">back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;back on empty StrBlob&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">front</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;front on empty StrBlob&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">back</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;back on empty StrBlob&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(size_type i, <span class="type">const</span> string&amp; msg)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= data-&gt;<span class="built_in">size</span>())</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">out_of_range</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-6"><a href="#12-6" class="headerlink" title="12.6"></a>12.6</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt;* <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> vector&lt;<span class="type">int</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt;* <span class="title">func2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;* v_ptr)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; a) &#123;</span><br><span class="line">v_ptr-&gt;<span class="built_in">push_back</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v_ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(vector&lt;<span class="type">int</span>&gt;* v_ptr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : (*v_ptr)) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> p = <span class="built_in">func1</span>();</span><br><span class="line">p = <span class="built_in">func2</span>(p);</span><br><span class="line"><span class="built_in">func3</span>(p);</span><br><span class="line"><span class="built_in">delete</span>(p);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-7"><a href="#12-7" class="headerlink" title="12.7"></a>12.7</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">shared_ptr&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">func1</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> make_shared&lt;vector&lt;<span class="type">int</span>&gt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">func2</span>(shared_ptr&lt;vector&lt;<span class="type">int</span>&gt;&gt; p) &#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; a) &#123;</span><br><span class="line">p-&gt;<span class="built_in">push_back</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(shared_ptr&lt;vector&lt;<span class="type">int</span>&gt;&gt; p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : (*p)) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> p = <span class="built_in">func1</span>();</span><br><span class="line">p = <span class="built_in">func2</span>(p);</span><br><span class="line"><span class="built_in">func3</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="智能指针规范"><a href="#智能指针规范" class="headerlink" title="智能指针规范"></a>智能指针规范</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1：不使用相同的内置指针值初始化（或reset）多个智能指针</span><br><span class="line"></span><br><span class="line">2：不delete get()返回的指针</span><br><span class="line"></span><br><span class="line">3：不使用get()初始化或reset另一个只能指针</span><br><span class="line"></span><br><span class="line">4：当你使用的智能指针管理的资源不是new分配的内存，记住传递一个删除器</span><br></pre></td></tr></table></figure><h5 id="12-15"><a href="#12-15" class="headerlink" title="12.15"></a>12.15</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">destination</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">connection</span>;</span><br><span class="line"><span class="function">connection <span class="title">connect</span><span class="params">(destination*)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">disconnect</span><span class="params">(connection)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">end_connection</span><span class="params">(destination* p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">disconnect</span>(*p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(destination&amp; d)</span> </span>&#123;</span><br><span class="line">connection c = <span class="built_in">connect</span>(&amp;d);</span><br><span class="line">shared_ptr&lt;connection&gt;<span class="built_in">p</span>(&amp;c, [](connection* p)&#123;<span class="built_in">disconnect</span>(*p)&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-16"><a href="#12-16" class="headerlink" title="12.16"></a>12.16</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;pezy&quot;</span>))</span></span>;</span><br><span class="line"><span class="comment">// unique_ptr&lt;string&gt; p2(p1); // copy</span></span><br><span class="line"><span class="comment">//                      ^</span></span><br><span class="line"><span class="comment">// Error: Call to implicitly-deleted copy constructor of &#x27;unique_ptr&lt;string&gt;&#x27;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// unique_ptr&lt;string&gt; p3 = p1; // assign</span></span><br><span class="line"><span class="comment">//                      ^</span></span><br><span class="line"><span class="comment">// Error: Call to implicitly-deleted copy constructor of &#x27;unique_ptr&lt;string&gt;&#x27;</span></span><br><span class="line">std::cout &lt;&lt; *p1 &lt;&lt; std::endl;</span><br><span class="line">p1.<span class="built_in">reset</span>(<span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure><h5 id="12-17"><a href="#12-17" class="headerlink" title="12.17"></a>12.17</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(a) 不合法。在定义一个 unique_ptr 时，需要将其绑定到一个new 返回的指针上。</span><br><span class="line">(b) 合法。但是可能会有后续的程序错误。当 p1 被释放时，p1 所指向的对象也被释放，所以导致 pi 成为一个空悬指针。</span><br><span class="line">(c) 合法。但是也可能会使得 pi2 成为空悬指针。</span><br><span class="line">(d) 不合法。当 p3 被销毁时，它试图释放一个栈空间的对象。</span><br><span class="line">(e) 合法。</span><br><span class="line">(f) 不合法。p5 和 p2 指向同一个对象，当 p5 和 p2 被销毁时，会使得同一个指针被释放两次。</span><br></pre></td></tr></table></figure><h5 id="12-23"><a href="#12-23" class="headerlink" title="12.23"></a>12.23</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">char</span>* p = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(<span class="string">&quot;hello&quot;</span><span class="string">&quot;world&quot;</span>) + <span class="number">1</span>]();</span><br><span class="line"><span class="built_in">strcat</span>(p, <span class="string">&quot;hello &quot;</span>);</span><br><span class="line"><span class="built_in">strcat</span>(p, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">cout &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">string str1&#123; <span class="string">&quot;hello &quot;</span> &#125;, str2&#123; <span class="string">&quot;world&quot;</span> &#125;;</span><br><span class="line">cout &lt;&lt; str1 + str2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-24"><a href="#12-24" class="headerlink" title="12.24"></a>12.24</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">char</span>* input = <span class="keyword">new</span> <span class="type">char</span>[s.<span class="built_in">size</span>() + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(input, s.<span class="built_in">c_str</span>());</span><br><span class="line">cout &lt;&lt; input &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[]input;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-26"><a href="#12-26" class="headerlink" title="12.26"></a>12.26</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> n=<span class="number">100</span>;</span><br><span class="line">allocator&lt;string&gt;alloc;</span><br><span class="line"><span class="keyword">auto</span> p = alloc.<span class="built_in">allocate</span>(n);</span><br><span class="line"><span class="keyword">auto</span> q = p;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s &amp;&amp; q != p + n) &#123;</span><br><span class="line">alloc.<span class="built_in">construct</span>(q++, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> size = q - p;</span><br><span class="line">cout &lt;&lt; size &lt;&lt; endl;</span><br><span class="line"><span class="keyword">while</span> (q != p) &#123;</span><br><span class="line">cout &lt;&lt; *--q &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">alloc.<span class="built_in">destroy</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">alloc.<span class="built_in">deallocate</span>(p, n);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-28"><a href="#12-28" class="headerlink" title="12.28"></a>12.28</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> line_no = vector&lt;string&gt;::size_type;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;12.30.txt&quot;</span>)</span></span>;</span><br><span class="line">vector&lt;string&gt; file;</span><br><span class="line">map&lt;string, set&lt;line_no&gt;&gt;wm;</span><br><span class="line">string text;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(ifs, text)) &#123;</span><br><span class="line">file.<span class="built_in">push_back</span>(text);</span><br><span class="line"><span class="function">istringstream <span class="title">line</span><span class="params">(text)</span></span>;</span><br><span class="line">string word;</span><br><span class="line"><span class="type">int</span> n = file.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (line &gt;&gt; word) &#123;</span><br><span class="line">wm[word].<span class="built_in">insert</span>(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;enter word to look for,or q to quit: &quot;</span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">if</span> (!(cin &gt;&gt; s) || s == <span class="string">&quot;q&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">auto</span> loc = wm.<span class="built_in">find</span>(s);</span><br><span class="line"><span class="keyword">if</span> (loc == wm.<span class="built_in">end</span>())</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;don&#x27;t find&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; <span class="string">&quot; occur &quot;</span> &lt;&lt; wm[s].<span class="built_in">size</span>()  &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> num : wm[s]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t(line &quot;</span> &lt;&lt; num + <span class="number">1</span> &lt;&lt; <span class="string">&quot;)&quot;</span></span><br><span class="line">&lt;&lt; file[num] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-30"><a href="#12-30" class="headerlink" title="12.30"></a>12.30</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">friend</span> QueryResult;</span><br><span class="line"><span class="keyword">using</span> line_no = vector&lt;string&gt;::size_type;</span><br><span class="line"><span class="built_in">TextQuery</span>(ifstream&amp;);</span><br><span class="line"><span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="type">const</span> string&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; file;</span><br><span class="line">map&lt;string, shared_ptr&lt;set&lt;line_no&gt;&gt;&gt;wm;</span><br><span class="line">&#125;;</span><br><span class="line">TextQuery::<span class="built_in">TextQuery</span>(ifstream&amp; is):<span class="built_in">file</span>(<span class="keyword">new</span> vector&lt;string&gt;) &#123;</span><br><span class="line">string text;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(is, text)) &#123;</span><br><span class="line">file-&gt;<span class="built_in">push_back</span>(text);</span><br><span class="line"><span class="type">int</span> n = file-&gt;<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"><span class="function">istringstream <span class="title">line</span><span class="params">(text)</span></span>;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (line &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; lines = wm[word];</span><br><span class="line"><span class="keyword">if</span> (!lines)</span><br><span class="line">lines.<span class="built_in">reset</span>(<span class="keyword">new</span> set&lt;line_no&gt;);</span><br><span class="line">lines-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> ostream&amp; <span class="title">print</span><span class="params">(ostream&amp;, <span class="type">const</span> QueryResult&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">QueryResult</span>(string s,shared_ptr&lt;set&lt;TextQuery::line_no&gt;&gt;p,shared_ptr&lt;vector&lt;string&gt;&gt; f):<span class="built_in">sought</span>(s),<span class="built_in">lines</span>(p),<span class="built_in">file</span>(f)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string sought;</span><br><span class="line">shared_ptr&lt;set&lt;TextQuery::line_no&gt;&gt;lines;</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; file;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">QueryResult <span class="title">TextQuery::query</span><span class="params">(<span class="type">const</span> string&amp; sought)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="type">static</span> shared_ptr&lt;set&lt;line_no&gt;&gt; <span class="built_in">nodata</span>(<span class="keyword">new</span> set&lt;line_no &gt;);</span><br><span class="line"><span class="keyword">auto</span> loc = wm.<span class="built_in">find</span>(sought);</span><br><span class="line"><span class="keyword">if</span> (loc == wm.<span class="built_in">end</span>())</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, nodata, file);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, loc-&gt;second, file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream&amp; <span class="title">print</span><span class="params">(ostream&amp; os, <span class="type">const</span> QueryResult&amp; qr)</span> </span>&#123;</span><br><span class="line">os &lt;&lt; qr.sought &lt;&lt; <span class="string">&quot; occurs &quot;</span> &lt;&lt; qr.lines-&gt;<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> num : *qr.lines) &#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;\y(line &quot;</span> &lt;&lt; num + <span class="number">1</span> &lt;&lt; <span class="string">&quot;)&quot;</span></span><br><span class="line">&lt;&lt; *(qr.file-&gt;<span class="built_in">begin</span>() + num) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">runQueries</span><span class="params">(ifstream&amp; infile)</span> </span>&#123;</span><br><span class="line"><span class="function">TextQuery <span class="title">tq</span><span class="params">(infile)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;enter word to look for,or q to quit: &quot;</span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">if</span> (!(cin &gt;&gt; s) || s == <span class="string">&quot;q&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">print</span>(cout, tq.<span class="built_in">query</span>(s)) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;12.30.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">runQueries</span>(ifs);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第12章 动态内存</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer(第11章 关联容器)</title>
    <link href="https://windcrain.top/post/c-primer-di-11-zhang/"/>
    <id>https://windcrain.top/post/c-primer-di-11-zhang/</id>
    <published>2022-03-14T10:17:43.000Z</published>
    <updated>2022-06-10T12:03:25.952Z</updated>
    
    <content type="html"><![CDATA[<h5 id="11-3"><a href="#11-3" class="headerlink" title="11.3"></a>11.3</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">size_t</span>&gt;word_count;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word) &#123;</span><br><span class="line">++word_count[word];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; m : word_count) &#123;</span><br><span class="line">cout &lt;&lt; m.first &lt;&lt; <span class="string">&quot; 出现了 &quot;</span> &lt;&lt; m.second &lt;&lt; <span class="string">&quot; 次&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-4"><a href="#11-4" class="headerlink" title="11.4"></a>11.4</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">size_t</span>&gt;word_count;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : word) &#123;</span><br><span class="line">c = <span class="built_in">tolower</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">word.<span class="built_in">erase</span>(<span class="built_in">find_if</span>(word.<span class="built_in">begin</span>(), word.<span class="built_in">end</span>(), ispunct),word.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; word &lt;&lt; endl;</span><br><span class="line">++word_count[word];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; m : word_count) &#123;</span><br><span class="line">cout &lt;&lt; m.first &lt;&lt; <span class="string">&quot; 出现了 &quot;</span> &lt;&lt; m.second &lt;&lt; <span class="string">&quot; 次&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-7"><a href="#11-7" class="headerlink" title="11.7"></a>11.7</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">map&lt;string, vector&lt;string&gt;&gt;family;</span><br><span class="line">string s1;</span><br><span class="line">while (cin &gt;&gt; s1) &#123;</span><br><span class="line">if (family.count(s1)) &#123;</span><br><span class="line">cout &lt;&lt; &quot; 已存在家庭,添加孩子 &quot; &lt;&lt; endl;</span><br><span class="line">string s2;</span><br><span class="line">cin &gt;&gt; s2;</span><br><span class="line">family[s1].push_back(s2);</span><br><span class="line">&#125;</span><br><span class="line">family[s1];</span><br><span class="line">&#125;</span><br><span class="line">for (auto&amp; f : family) &#123;</span><br><span class="line">cout &lt;&lt; f.first &lt;&lt; endl;</span><br><span class="line">for (auto i : f.second) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; &quot;  &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-8"><a href="#11-8" class="headerlink" title="11.8"></a>11.8</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt;vec;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), word) == vec.<span class="built_in">end</span>()) &#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(word);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加成功：&quot;</span> &lt;&lt; word &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;已存在该单词&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : vec) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-12-11-13"><a href="#11-12-11-13" class="headerlink" title="11.12-11.13"></a>11.12-11.13</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;pair&lt;string, <span class="type">int</span>&gt;&gt;vec;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; s &gt;&gt; i) &#123;</span><br><span class="line"><span class="comment">//vec.push_back(make_pair(s, i));</span></span><br><span class="line"><span class="comment">//vec.push_back(&#123; s,i &#125;);</span></span><br><span class="line">vec.<span class="built_in">emplace_back</span>(s, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-14"><a href="#11-14" class="headerlink" title="11.14"></a>11.14</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, vector&lt;pair&lt;string,string&gt;&gt;&gt;family;</span><br><span class="line">string s1;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s1) &#123;</span><br><span class="line"><span class="keyword">if</span> (family.<span class="built_in">count</span>(s1)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; 已存在家庭,添加孩子 &quot;</span> &lt;&lt; endl;</span><br><span class="line">string s2, s3;</span><br><span class="line">cin &gt;&gt; s2 &gt;&gt; s3;</span><br><span class="line">family[s1].<span class="built_in">emplace_back</span>(s2,s3);</span><br><span class="line">&#125;</span><br><span class="line">family[s1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-16"><a href="#11-16" class="headerlink" title="11.16"></a>11.16</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>, string&gt;m&#123; &#123;<span class="number">5</span>,<span class="string">&quot;good&quot;</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">auto</span> vt = m.<span class="built_in">begin</span>();</span><br><span class="line">vt-&gt;second = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="11-22"><a href="#11-22" class="headerlink" title="11.22"></a>11.22</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;std::string, std::vector&lt;<span class="type">int</span>&gt;&gt;    <span class="comment">// argument</span></span><br><span class="line">std::pair&lt;std::map&lt;std::string, std::vector&lt;<span class="type">int</span>&gt;&gt;::iterator, <span class="type">bool</span>&gt; <span class="comment">// return</span></span><br></pre></td></tr></table></figure><h5 id="11-31"><a href="#11-31" class="headerlink" title="11.31"></a>11.31</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">multimap&lt;string, string&gt;authors&#123;</span><br><span class="line">&#123; <span class="string">&quot;alan&quot;</span>, <span class="string">&quot;DMA&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;pezy&quot;</span>, <span class="string">&quot;LeetCode&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;alan&quot;</span>, <span class="string">&quot;CLRS&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;FTP&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;pezy&quot;</span>, <span class="string">&quot;CP5&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;CPP-Concurrency&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> it = authors.<span class="built_in">find</span>(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line"><span class="keyword">auto</span> num = authors.<span class="built_in">count</span>(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line">string work = <span class="string">&quot;CP5&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (num) &#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second == work) &#123;</span><br><span class="line">authors.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">++it;</span><br><span class="line">--num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; author : authors)</span><br><span class="line">std::cout &lt;&lt; author.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; author.second &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-32"><a href="#11-32" class="headerlink" title="11.32"></a>11.32</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">multimap&lt;string, string&gt;authors&#123;</span><br><span class="line">&#123; <span class="string">&quot;alan&quot;</span>, <span class="string">&quot;DMA&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;pezy&quot;</span>, <span class="string">&quot;LeetCode&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;alan&quot;</span>, <span class="string">&quot;CLRS&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;FTP&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;pezy&quot;</span>, <span class="string">&quot;CP5&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;CPP-Concurrency&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">map&lt;string, multiset&lt;string&gt;&gt; order_authors;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; author : authors)</span><br><span class="line">order_authors[author.first].<span class="built_in">insert</span>(author.second);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; author : order_authors)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; author.first &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; work : author.second)</span><br><span class="line">cout &lt;&lt; work &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-33"><a href="#11-33" class="headerlink" title="11.33"></a>11.33</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">map&lt;string, string&gt; <span class="title">buildMap</span><span class="params">(ifstream&amp; map_file)</span> </span>&#123;</span><br><span class="line">map&lt;string, string&gt;trans_map;</span><br><span class="line">string key;<span class="comment">//转换前</span></span><br><span class="line">string value;<span class="comment">//替换后</span></span><br><span class="line"><span class="comment">// 第一个单词存入 key， 剩余存入value</span></span><br><span class="line"><span class="keyword">while</span> (map_file &gt;&gt; key &amp;&amp; <span class="built_in">getline</span>(map_file, value)) &#123;</span><br><span class="line"><span class="keyword">if</span> (value.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">trans_map[key] = value.<span class="built_in">substr</span>(<span class="number">1</span>); <span class="comment">//getline 读取了空格 要跳过前导空格</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;no rule for&quot;</span> + key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> trans_map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">transform</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">const</span> map&lt;string, string&gt;&amp; m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> map_it = m.<span class="built_in">find</span>(s);</span><br><span class="line"><span class="keyword">if</span> (map_it != m.<span class="built_in">end</span>())</span><br><span class="line"><span class="keyword">return</span> map_it-&gt;second;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">word_trans</span><span class="params">(ifstream&amp; map_file, ifstream&amp; input)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> trans_map = <span class="built_in">buildMap</span>(map_file);<span class="comment">// 保存转换规则</span></span><br><span class="line">string text;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(input, text)) &#123;</span><br><span class="line"><span class="function">istringstream <span class="title">stream</span><span class="params">(text)</span></span>;</span><br><span class="line">string word;</span><br><span class="line"><span class="type">bool</span> firstword = <span class="literal">true</span>;<span class="comment">//控制是否打印空格</span></span><br><span class="line"><span class="keyword">while</span> (stream &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">if</span> (firstword)</span><br><span class="line">firstword = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">transform</span>(word, trans_map);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">ifs1</span><span class="params">(<span class="string">&quot;11.33-1.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs2</span><span class="params">(<span class="string">&quot;11.33-2.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">word_trans</span>(ifs1, ifs2);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第11章 关联容器</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer(第10章 泛型容器)</title>
    <link href="https://windcrain.top/post/c-primer-di-10-zhang/"/>
    <id>https://windcrain.top/post/c-primer-di-10-zhang/</id>
    <published>2022-03-13T06:45:47.000Z</published>
    <updated>2022-06-10T12:04:07.397Z</updated>
    
    <content type="html"><![CDATA[<h5 id="10-1"><a href="#10-1" class="headerlink" title="10.1"></a>10.1</h5><p>1：知识点：泛型算法：算法是因为其实现了一些经典算法的公共接口，排序和搜索。泛型是因为他们可以作用于不同类型的元素和多种容器类型甚至是内置数组。故称泛型算法</p><p>知识点2：基本上都定义在algorithm和numeric两个头文件中</p><p>知识点3：这些算法一般情况下只作用于迭代器之上，不对容器进行直接操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; i) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> val = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">res = <span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), val);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;val: &quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; 出现&quot;</span> &lt;&lt; res &lt;&lt; <span class="string">&quot;次&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-2"><a href="#10-2" class="headerlink" title="10.2"></a>10.2</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">list&lt;string&gt;li;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">li.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line">string val = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">res = <span class="built_in">count</span>(li.<span class="built_in">begin</span>(), li.<span class="built_in">end</span>(), val);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;val: &quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; 出现&quot;</span> &lt;&lt; res &lt;&lt; <span class="string">&quot;次&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-6"><a href="#10-6" class="headerlink" title="10.6"></a>10.6</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="built_in">fill_n</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">size</span>(),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-9"><a href="#10-9" class="headerlink" title="10.9"></a>10.9</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printV</span><span class="params">(vector&lt;string&gt;v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">elimDups</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printV</span>(words);</span><br><span class="line"><span class="keyword">auto</span> end_unique = <span class="built_in">unique</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printV</span>(words);</span><br><span class="line">words.<span class="built_in">erase</span>(end_unique,words.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printV</span>(words);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-12"><a href="#10-12" class="headerlink" title="10.12"></a>10.12</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string bn;</span><br><span class="line"><span class="built_in">Sales_data</span>(string s) :<span class="built_in">bn</span>(s) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">isbn</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compareIsbn</span><span class="params">(Sales_data s1, Sales_data s2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.<span class="built_in">isbn</span>() &lt; s2.<span class="built_in">isbn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_Sa</span><span class="params">(vector&lt;Sales_data&gt;v)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stable_sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), compareIsbn);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">cout &lt;&lt; i.<span class="built_in">isbn</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">vector&lt;Sales_data&gt;v;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">Sales_data</span>(s));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort_Sa</span>(v);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-13"><a href="#10-13" class="headerlink" title="10.13"></a>10.13</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func5</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt; <span class="number">5</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">vector&lt;string&gt;words;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">words.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> it = <span class="built_in">partition</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), func5);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = words.<span class="built_in">begin</span>(); i != it; ++i) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h5><p>知识点1：我们希望对算法进行更多参数的操作，衍生出lambda表达式，一个lambda表达式表示一个可调用代码单元，它可以定义在函数的内部。表达式的形式：f = <a href="参数列表">捕获列表</a>{函数体}，参数列表为空时，()可省略。<br>知识点2：如果未指定返回内容，则lambda返回void。</p><p>知识点3：lambda只有在捕获列表中捕获一个它所在函数的局部变量才能在函数体中使用该变量，lambda可以直接使用定义在函数之外的名字或者局部static变量</p><h5 id="10-14"><a href="#10-14" class="headerlink" title="10.14"></a>10.14</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> f = [](<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b) &#123;<span class="keyword">return</span>  a + b; &#125;;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">cout &lt;&lt; <span class="built_in">f</span>(a, b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-15"><a href="#10-15" class="headerlink" title="10.15"></a>10.15</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [a](<span class="type">int</span> b) &#123;<span class="keyword">return</span> a + b; &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">f</span>(<span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-17"><a href="#10-17" class="headerlink" title="10.17"></a>10.17</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stable_sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [](Sales_data s1, Sales_data s2) &#123;<span class="keyword">return</span> s1.<span class="built_in">isbn</span>() &lt; s2.<span class="built_in">isbn</span>(); &#125;);</span><br></pre></td></tr></table></figure><p>partition()返回的是最后一个使谓词为true的元素的后一个位置的迭代器</p><p>find_if()返回的是第一个使谓词返回非0值的元素，若不存在这样的元素，则返回尾迭代器</p><h5 id="10-20"><a href="#10-20" class="headerlink" title="10.20"></a>10.20</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt;v;</span><br><span class="line">string s;</span><br><span class="line">string::size_type sz=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> wc = <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [=](<span class="type">const</span> string&amp; a) &#123;<span class="keyword">return</span> a.<span class="built_in">size</span>() &gt; sz; &#125;);</span><br><span class="line">cout &lt;&lt; wc &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-21"><a href="#10-21" class="headerlink" title="10.21"></a>10.21</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [&amp;n]()-&gt;<span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123; --n; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">f</span>()) &#123;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-22"><a href="#10-22" class="headerlink" title="10.22"></a>10.22</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func6</span><span class="params">(<span class="type">const</span> string&amp; s, string::size_type sz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">size</span>() &lt;= sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt;v;</span><br><span class="line">string s;</span><br><span class="line">string::size_type sz=<span class="number">0</span> ;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> wc = <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">bind</span>(func6, _1, <span class="number">6</span>));</span><br><span class="line">cout &lt;&lt; wc &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-24"><a href="#10-24" class="headerlink" title="10.24"></a>10.24</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check_size</span><span class="params">(<span class="type">int</span> sz, string s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz &gt; s.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">string s&#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> wc = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">bind</span>(check_size, _1, s));</span><br><span class="line">cout &lt;&lt; *wc &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-27"><a href="#10-27" class="headerlink" title="10.27"></a>10.27</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>&#125;;</span><br><span class="line">list&lt;<span class="type">int</span>&gt;lst;</span><br><span class="line"><span class="built_in">unique_copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">back_inserter</span>(lst));</span><br></pre></td></tr></table></figure><h5 id="10-28"><a href="#10-28" class="headerlink" title="10.28"></a>10.28</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v3;</span><br><span class="line"><span class="built_in">copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">inserter</span>(v1,v1.<span class="built_in">begin</span>()));</span><br><span class="line"><span class="built_in">copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">back_inserter</span>(v2));</span><br><span class="line"><span class="built_in">copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">front_inserter</span>(v3));<span class="comment">//不支持</span></span><br></pre></td></tr></table></figure><h5 id="10-29"><a href="#10-29" class="headerlink" title="10.29"></a>10.29</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">&quot;10_29.txt&quot;</span>)</span></span>;</span><br><span class="line">vector&lt;string&gt;v;</span><br><span class="line"><span class="function">istream_iterator&lt;string&gt; <span class="title">it</span><span class="params">(in)</span>, end</span>;</span><br><span class="line"><span class="comment">//while (it != end) &#123;</span></span><br><span class="line"><span class="comment">//v.push_back(*it++);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="built_in">copy</span>(it, end, <span class="built_in">back_inserter</span>(v));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-30"><a href="#10-30" class="headerlink" title="10.30"></a>10.30</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">istream_iterator&lt;<span class="type">int</span>&gt;<span class="built_in">str</span>(cin), end;</span><br><span class="line"><span class="built_in">copy</span>(str, end, <span class="built_in">back_inserter</span>(v));</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-31"><a href="#10-31" class="headerlink" title="10.31"></a>10.31</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">istream_iterator&lt;<span class="type">int</span>&gt;<span class="built_in">str</span>(cin), end;</span><br><span class="line"><span class="built_in">copy</span>(str, end, <span class="built_in">back_inserter</span>(v));</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="built_in">unique_copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">back_inserter</span>(v1));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v1) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-33"><a href="#10-33" class="headerlink" title="10.33"></a>10.33</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">&quot;1.txt&quot;</span>)</span></span>;<span class="comment">//导入第一个参数，作为输入文件</span></span><br><span class="line"><span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">it1</span><span class="params">(in)</span>, end</span>;<span class="comment">//定义流迭代器，输入流，和输入流的尾迭代器</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec1;<span class="comment">//存储用vector</span></span><br><span class="line"><span class="comment">/*copy(it1,end,back_inserter(vec1));//将流中数据存入vector*/</span></span><br><span class="line"><span class="keyword">while</span> (it1 != end)</span><br><span class="line">&#123;</span><br><span class="line">vec1.<span class="built_in">push_back</span>(*it1);</span><br><span class="line">++it1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">&quot;even.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out2</span><span class="params">(<span class="string">&quot;odd.txt&quot;</span>)</span></span>;<span class="comment">//目标写文件</span></span><br><span class="line"><span class="function">ostream_iterator&lt;<span class="type">int</span>&gt; <span class="title">it2</span><span class="params">(out, <span class="string">&quot;\n&quot;</span>)</span></span>;<span class="comment">//定义流迭代器，输出流，每行结尾换行</span></span><br><span class="line"><span class="function">ostream_iterator&lt;<span class="type">int</span>&gt; <span class="title">it3</span><span class="params">(out2, <span class="string">&quot; &quot;</span>)</span></span>;<span class="comment">//定义流迭代器，输出流</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vec1.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vec1[i] % <span class="number">2</span> == <span class="number">0</span>)<span class="comment">//偶数</span></span><br><span class="line">&#123;</span><br><span class="line">*it2++ = vec1[i];<span class="comment">//偶数放在even.txt中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*it3++ = vec1[i];<span class="comment">//奇数放在odd.txt中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-34"><a href="#10-34" class="headerlink" title="10.34"></a>10.34</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> r_it = vec.<span class="built_in">rbegin</span>(); r_it != vec.<span class="built_in">rend</span>(); ++r_it) &#123;</span><br><span class="line">cout &lt;&lt; *r_it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-35"><a href="#10-35" class="headerlink" title="10.35"></a>10.35</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">end</span>(); it != vec.<span class="built_in">begin</span>(); --it) &#123;</span><br><span class="line">cout &lt;&lt; *(it - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-36"><a href="#10-36" class="headerlink" title="10.36"></a>10.36</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find(lst.begin(), lst.end(), 0);</span><br></pre></td></tr></table></figure><h5 id="10-37"><a href="#10-37" class="headerlink" title="10.37"></a>10.37</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">list&lt;<span class="type">int</span>&gt;lst;</span><br><span class="line"><span class="built_in">copy</span>( vec.<span class="built_in">rbegin</span>()+<span class="number">3</span>, vec.<span class="built_in">rend</span>() - <span class="number">2</span>, <span class="built_in">back_inserter</span>(lst));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : lst) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-42"><a href="#10-42" class="headerlink" title="10.42"></a>10.42</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1.<span class="built_in">sort</span>();<span class="comment">//使用其成员函数版本的算法，排序</span></span><br><span class="line">list1.<span class="built_in">unique</span>();<span class="comment">//删除相同元素</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第10章 泛型容器</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer(第9章 顺序容器)</title>
    <link href="https://windcrain.top/post/c-primer-di-9-zhang/"/>
    <id>https://windcrain.top/post/c-primer-di-9-zhang/</id>
    <published>2022-03-11T08:48:00.000Z</published>
    <updated>2022-06-10T12:04:21.005Z</updated>
    
    <content type="html"><![CDATA[<h5 id="9-2"><a href="#9-2" class="headerlink" title="9.2"></a>9.2</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list&lt;deque&lt;<span class="type">int</span>&gt;&gt;;</span><br></pre></td></tr></table></figure><h5 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a>9.4</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;::iterator begin, vector&lt;<span class="type">int</span>&gt;::iterator end, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (begin != end) &#123;</span><br><span class="line"><span class="keyword">if</span> (*begin == n)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">++begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-7-9-8"><a href="#9-7-9-8" class="headerlink" title="9.7-9.8"></a>9.7-9.8</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::size_type <span class="comment">//size_type指的是无符号整数类型</span></span><br><span class="line">list&lt;string&gt;::iterator || list&lt;string&gt;::const_iterator <span class="comment">//读操作</span></span><br><span class="line">list&lt;string&gt;::iterator<span class="comment">//写操作</span></span><br></pre></td></tr></table></figure><h5 id="9-13"><a href="#9-13" class="headerlink" title="9.13"></a>9.13</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt;li;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec;</span><br><span class="line">vector&lt;<span class="type">double</span>&gt;<span class="built_in">vec1</span>(li.<span class="built_in">begin</span>(), li.<span class="built_in">end</span>());</span><br><span class="line">vector&lt;<span class="type">double</span>&gt;<span class="built_in">vec2</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//容器之间的拷贝，容器的类型和其中元素的类型都必须相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用迭代器进行拷贝，只需要其元素的范围，利用的是迭代器范围的对应元素进行初始化</span></span><br></pre></td></tr></table></figure><h5 id="9-15"><a href="#9-15" class="headerlink" title="9.15"></a>9.15</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func3</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;v1, vector&lt;<span class="type">int</span>&gt;&amp;v2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v1 == v2)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-16"><a href="#9-16" class="headerlink" title="9.16"></a>9.16</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func3</span><span class="params">(list&lt;<span class="type">int</span>&gt;&amp;v1, vector&lt;<span class="type">int</span>&gt;&amp;v2)</span> </span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">v3</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">if</span> (v3 == v2)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-18"><a href="#9-18" class="headerlink" title="9.18"></a>9.18</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;string&gt;dq;<span class="comment">//9.19 将deque改成list</span></span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">dq.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = dq.<span class="built_in">begin</span>(); it != dq.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-20"><a href="#9-20" class="headerlink" title="9.20"></a>9.20</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt;li&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;odd;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;even;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : li) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">odd.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">even.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-22"><a href="#9-22" class="headerlink" title="9.22"></a>9.22</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;iv&#123;<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span> some_val = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator iter = iv.<span class="built_in">begin</span>(), mid = iv.<span class="built_in">begin</span>() + iv.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (iter != mid) &#123;</span><br><span class="line"><span class="keyword">if</span> (*iter == some_val)</span><br><span class="line">&#123;</span><br><span class="line">iter = iv.<span class="built_in">insert</span>(iter, <span class="number">2</span> * some_val);</span><br><span class="line">mid = iv.<span class="built_in">begin</span>() + iv.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">iter++;</span><br><span class="line">&#125;</span><br><span class="line">iter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : iv) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;<span class="comment">//0 20 10 10 30 10</span></span><br></pre></td></tr></table></figure><h5 id="9-26"><a href="#9-26" class="headerlink" title="9.26"></a>9.26</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//erase()操作返回的是最后一个被删元素的后一个位置</span></span><br><span class="line"><span class="type">int</span> ia[] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">55</span>,<span class="number">89</span> &#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">vec</span>(ia, <span class="built_in">end</span>(ia));</span><br><span class="line">list&lt;<span class="type">int</span>&gt;<span class="built_in">li</span>(ia, <span class="built_in">end</span>(ia));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); ) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it % <span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">it = vec.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">++it;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>();) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it % <span class="number">2</span>)</span><br><span class="line">it = li.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">++it;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-27"><a href="#9-27" class="headerlink" title="9.27"></a>9.27</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ia[] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">55</span>,<span class="number">89</span> &#125;;</span><br><span class="line">forward_list&lt;<span class="type">int</span>&gt;<span class="built_in">fl</span>(ia, <span class="built_in">end</span>(ia));</span><br><span class="line"><span class="keyword">auto</span> prev = fl.<span class="built_in">before_begin</span>();</span><br><span class="line"><span class="keyword">auto</span> curr = fl.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (curr != fl.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (*curr % <span class="number">2</span>) &#123;</span><br><span class="line">curr = fl.<span class="built_in">erase_after</span>(prev);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">prev = curr;</span><br><span class="line">++curr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-28"><a href="#9-28" class="headerlink" title="9.28"></a>9.28</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">forward_list&lt;string&gt; <span class="title">func</span><span class="params">(forward_list&lt;string&gt;fl, string s1, string s2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> it2 = fl.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">auto</span> it1 = fl.<span class="built_in">before_begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it2 != fl.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it2 == s1) &#123;</span><br><span class="line">fl.<span class="built_in">insert_after</span>(it2, s2);</span><br><span class="line"><span class="keyword">return</span> fl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">it1 = it2;</span><br><span class="line">++it2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fl.<span class="built_in">insert_after</span>(it1,s2);</span><br><span class="line"><span class="keyword">return</span> fl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-31"><a href="#9-31" class="headerlink" title="9.31"></a>9.31</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">forward_list&lt;<span class="type">int</span>&gt;fl&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it2 = fl.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">auto</span> it1 = fl.<span class="built_in">before_begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it2 != fl.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it2 % <span class="number">2</span>) &#123;</span><br><span class="line">it2 = fl.<span class="built_in">insert_after</span>(it2, *it2);</span><br><span class="line">it1 = it2;</span><br><span class="line">++it2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">it2 = fl.<span class="built_in">erase_after</span>(it1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-41"><a href="#9-41" class="headerlink" title="9.41"></a>9.41</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">char</span>&gt; vc;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">vc.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(vc.begin(),vc.end())</span></span>;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h5 id="9-43"><a href="#9-43" class="headerlink" title="9.43"></a>9.43</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string &amp;s, string &amp;oldVal, string &amp;newVal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> iter = s.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (iter + oldVal.<span class="built_in">size</span>() != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (oldVal == <span class="built_in">string</span>(iter, iter+oldVal.<span class="built_in">size</span>())) &#123;</span><br><span class="line">iter = s.<span class="built_in">erase</span>(iter, iter + oldVal.<span class="built_in">size</span>());</span><br><span class="line">iter = s.<span class="built_in">insert</span>(iter, newVal.<span class="built_in">begin</span>(), newVal.<span class="built_in">end</span>());</span><br><span class="line">iter += newVal.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">++iter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;though,you don&#x27;t love me&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">oldVal</span><span class="params">(<span class="string">&quot;though&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">newVal</span><span class="params">(<span class="string">&quot;tho&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">func</span>(s, oldVal, newVal);</span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-44"><a href="#9-44" class="headerlink" title="9.44"></a>9.44</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string &amp;s, string &amp;oldVal, string &amp;newVal)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + oldVal.<span class="built_in">size</span>() &lt; s.<span class="built_in">size</span>();++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (oldVal == s.<span class="built_in">substr</span>(i,oldVal.<span class="built_in">size</span>())) &#123;</span><br><span class="line">s.<span class="built_in">replace</span>(i, oldVal.<span class="built_in">size</span>(), newVal);</span><br><span class="line">i += newVal.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-45"><a href="#7-45" class="headerlink" title="7.45"></a>7.45</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string&amp; name, string&amp; qz, string&amp; hz)</span> </span>&#123;</span><br><span class="line">name.<span class="built_in">insert</span>(name.<span class="built_in">begin</span>(), qz.<span class="built_in">begin</span>(), qz.<span class="built_in">end</span>());</span><br><span class="line">name.<span class="built_in">append</span>(hz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-46"><a href="#7-46" class="headerlink" title="7.46"></a>7.46</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string&amp; name, string&amp; qz, string&amp; hz)</span> </span>&#123;</span><br><span class="line">name.<span class="built_in">insert</span>(<span class="number">0</span>,qz);</span><br><span class="line">name.<span class="built_in">insert</span>(name.<span class="built_in">size</span>(), hz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-47"><a href="#7-47" class="headerlink" title="7.47"></a>7.47</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;ab2c3d7R4E6&quot;</span>)</span></span>;</span><br><span class="line">string numbers&#123; <span class="string">&quot;123456789&quot;</span> &#125;;</span><br><span class="line">string alphabet&#123; <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span> &#125;;</span><br><span class="line">string::size_type pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((pos = s.<span class="built_in">find_first_of</span>(numbers, pos)) != string::npos) &#123;</span><br><span class="line">cout &lt;&lt; s[pos] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((pos = s.<span class="built_in">find_first_of</span>(alphabet, pos)) != string::npos) &#123;</span><br><span class="line">cout &lt;&lt; s[pos] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find_first_not_of</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;ab2c3d7R4E6&quot;</span>)</span></span>;</span><br><span class="line">string numbers&#123; <span class="string">&quot;123456789&quot;</span> &#125;;</span><br><span class="line">string alphabet&#123; <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span> &#125;;</span><br><span class="line">string::size_type pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((pos = s.<span class="built_in">find_first_not_of</span>(alphabet, pos)) != string::npos) &#123;</span><br><span class="line">cout &lt;&lt; s[pos] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((pos = s.<span class="built_in">find_first_not_of</span>(numbers, pos)) != string::npos) &#123;</span><br><span class="line">cout &lt;&lt; s[pos] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-49"><a href="#9-49" class="headerlink" title="9.49"></a>9.49</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">cender</span><span class="params">(<span class="string">&quot;bdfhkltgjpqy&quot;</span>)</span></span>;</span><br><span class="line">string::size_type pos = <span class="number">0</span>, prepos = <span class="number">0</span>;</span><br><span class="line">string::size_type len = <span class="number">0</span>;</span><br><span class="line">string res;</span><br><span class="line"><span class="keyword">while</span> ((pos = str.<span class="built_in">find_first_of</span>(cender, pos)) != string::npos) &#123;</span><br><span class="line"><span class="keyword">if</span> (pos - prepos &gt; len) &#123;</span><br><span class="line">len = pos - prepos;</span><br><span class="line">res = str.<span class="built_in">substr</span>(prepos, len);</span><br><span class="line">&#125;</span><br><span class="line">prepos = pos+<span class="number">1</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; len &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; res;</span><br></pre></td></tr></table></figure><h5 id="9-50"><a href="#9-50" class="headerlink" title="9.50"></a>9.50</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt;vec&#123; <span class="string">&quot;3.14&quot;</span>,<span class="string">&quot;1.23&quot;</span>,<span class="string">&quot;4.89&quot;</span>,<span class="string">&quot;4.56&quot;</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> s : vec) &#123;</span><br><span class="line">i += <span class="built_in">stoi</span>(s);</span><br><span class="line">f += <span class="built_in">stof</span>(s);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; f &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h5 id="9-51"><a href="#9-51" class="headerlink" title="9.51"></a>9.51</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> string mm[<span class="number">12</span>] = &#123; <span class="string">&quot;Jan&quot;</span>,<span class="string">&quot;Feb&quot;</span>,<span class="string">&quot;Mar&quot;</span>,<span class="string">&quot;Apr&quot;</span>,<span class="string">&quot;May&quot;</span>,<span class="string">&quot;Jun&quot;</span>,<span class="string">&quot;Jul&quot;</span>,<span class="string">&quot;Aug&quot;</span>,<span class="string">&quot;Sept&quot;</span>,<span class="string">&quot;Oct&quot;</span>,<span class="string">&quot;Nov&quot;</span>,<span class="string">&quot;Dec&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findmonth</span><span class="params">(<span class="type">const</span> string&amp; mon)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> pos;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> ((pos = mon.<span class="built_in">find</span>(mm[i])) != string::npos) &#123;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Date</span>(<span class="type">const</span> string&amp; str) &#123;</span><br><span class="line">string data_str = str;</span><br><span class="line">string::size_type index1 = <span class="number">0</span>;</span><br><span class="line">string::size_type index2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (str.<span class="built_in">find</span>(<span class="string">&#x27;,&#x27;</span>) != string::npos) &#123;</span><br><span class="line">index1 = str.<span class="built_in">find</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">index2 = str.<span class="built_in">find</span>(<span class="string">&#x27;,&#x27;</span>, index1 + <span class="number">1</span>);</span><br><span class="line">string mon = str.<span class="built_in">substr</span>(<span class="number">0</span>, index1);</span><br><span class="line">month = <span class="built_in">findmonth</span>(mon);</span><br><span class="line">day = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index1 + <span class="number">1</span>, index2-index1<span class="number">-1</span>));</span><br><span class="line">year = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index2 + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str.<span class="built_in">find</span>(<span class="string">&#x27;/&#x27;</span>) != string::npos) &#123;</span><br><span class="line">index1 = str.<span class="built_in">find_first_of</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">index2 = str.<span class="built_in">find_first_of</span>(<span class="string">&#x27;/&#x27;</span>, index1 + <span class="number">1</span>);</span><br><span class="line">year = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index2 + <span class="number">1</span>));</span><br><span class="line">month = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index1 + <span class="number">1</span>, index2 - <span class="number">1</span> - index1));</span><br><span class="line">day = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(<span class="number">0</span>, index1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">index1 = str.<span class="built_in">find_first_of</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">index2 = str.<span class="built_in">find_first_of</span>(<span class="string">&#x27; &#x27;</span>, index1 + <span class="number">1</span>);</span><br><span class="line">string mon = str.<span class="built_in">substr</span>(<span class="number">0</span>, index1);</span><br><span class="line">month = <span class="built_in">findmonth</span>(mon);</span><br><span class="line">day = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index1 + <span class="number">1</span>, index2 - <span class="number">1</span> - index1));</span><br><span class="line">year = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index2 + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Year:&quot;</span> &lt;&lt; year &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;Month:&quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;Day:&quot;</span> &lt;&lt; day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">unsigned</span> year, month, day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string d1 = <span class="string">&quot;May 5,2016&quot;</span>, d2 = <span class="string">&quot;9/9/1999&quot;</span>, d3 = <span class="string">&quot;Mar 11 2022&quot;</span>;</span><br><span class="line"><span class="function">Date <span class="title">a</span><span class="params">(d1)</span>, <span class="title">b</span><span class="params">(d2)</span>, <span class="title">c</span><span class="params">(d3)</span></span>;</span><br><span class="line">a.<span class="built_in">getdate</span>();</span><br><span class="line">b.<span class="built_in">getdate</span>();</span><br><span class="line">c.<span class="built_in">getdate</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-52"><a href="#9-52" class="headerlink" title="9.52"></a>9.52</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">func</span><span class="params">(string &amp;s)</span> </span>&#123;</span><br><span class="line"><span class="function">string <span class="title">suanshu</span><span class="params">(<span class="string">&quot;+-*/%&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (s.<span class="built_in">find_first_of</span>(suanshu) != string::npos) &#123;</span><br><span class="line"><span class="keyword">auto</span> pos1 = s.<span class="built_in">find_first_of</span>(suanshu);</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>, pos1));</span><br><span class="line"><span class="type">int</span> b = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(pos1 + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (s[pos1] == <span class="string">&#x27;+&#x27;</span>)s = <span class="built_in">to_string</span>(a + b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[pos1]==<span class="string">&#x27;-&#x27;</span>)s = <span class="built_in">to_string</span>(a - b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[pos1] == <span class="string">&#x27;*&#x27;</span>)s = <span class="built_in">to_string</span>(a * b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[pos1] == <span class="string">&#x27;/&#x27;</span>)s = <span class="built_in">to_string</span>(a / b);</span><br><span class="line"><span class="keyword">else</span>s = <span class="built_in">to_string</span>(a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;5+(1+2)+(4-3)*6/(11%3)&quot;</span>)</span></span>;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt;st;</span><br><span class="line">string::size_type pos1 = <span class="number">0</span>;</span><br><span class="line">string::size_type pos2 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = str.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">string temp;</span><br><span class="line"><span class="keyword">while</span> (!st.<span class="built_in">empty</span>()&amp;&amp;st.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">temp += st.<span class="built_in">top</span>();</span><br><span class="line"><span class="comment">//cout &lt;&lt; st.top() &lt;&lt; endl;</span></span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="built_in">reverse</span>(temp.<span class="built_in">begin</span>(),temp.<span class="built_in">end</span>());</span><br><span class="line">temp = <span class="built_in">func</span>(temp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> c : temp) &#123;</span><br><span class="line">st.<span class="built_in">push</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">st.<span class="built_in">push</span>(str[i]);</span><br><span class="line"><span class="comment">//cout &lt;&lt; st.top() &lt;&lt; endl;</span></span><br><span class="line">len = str.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line">str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">str += st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第9章 顺序容器</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer(第8章 IO库)</title>
    <link href="https://windcrain.top/post/c-primer-di-8-zhang/"/>
    <id>https://windcrain.top/post/c-primer-di-8-zhang/</id>
    <published>2022-03-08T12:03:28.000Z</published>
    <updated>2022-06-10T12:05:06.594Z</updated>
    
    <content type="html"><![CDATA[<h5 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">istream&amp; <span class="title">iofunc</span><span class="params">(istream&amp; is)</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (is &gt;&gt; s) &#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">is.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">iofunc</span>(cin);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-4"><a href="#8-4" class="headerlink" title="8.4"></a>8.4</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt;v;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;ifile.txt&quot;</span>, ios::in);</span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="built_in">is_open</span>()) <span class="comment">//if(ifs&gt;&gt;s)逐个单词</span></span><br><span class="line">   &#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(ifs,s)) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(s);</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-10"><a href="#8-10" class="headerlink" title="8.10"></a>8.10</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string line, word;</span><br><span class="line">vector&lt;string&gt; vec;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(cin,line))</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(line);</span><br><span class="line">cout &lt;&lt; vec.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"><span class="function">istringstream <span class="title">record</span><span class="params">(vec.back())</span></span>;</span><br><span class="line"><span class="keyword">while</span> (record &gt;&gt; word) &#123;</span><br><span class="line">cout &lt;&lt; word &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="8-11"><a href="#8-11" class="headerlink" title="8.11"></a>8.11</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PersonInfo</span> &#123;</span><br><span class="line">string name;</span><br><span class="line">vector&lt;string&gt; phones;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string line, word;</span><br><span class="line">vector&lt;PersonInfo&gt; people;</span><br><span class="line">istringstream record;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(cin, line)) &#123;</span><br><span class="line">record.<span class="built_in">str</span>(line);</span><br><span class="line">PersonInfo info;</span><br><span class="line">record &gt;&gt; info.name;</span><br><span class="line"><span class="keyword">while</span> (record &gt;&gt; word) &#123;</span><br><span class="line">info.phones.<span class="built_in">push_back</span>(word);</span><br><span class="line">&#125;</span><br><span class="line">record.<span class="built_in">clear</span>();<span class="comment">//复位</span></span><br><span class="line">people.<span class="built_in">push_back</span>(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;entry : people) &#123;</span><br><span class="line">cout &lt;&lt; entry.name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;ph : entry.phones) &#123;</span><br><span class="line">cout &lt;&lt; ph &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第8章 IO库</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer(第7章 类)</title>
    <link href="https://windcrain.top/post/c-primer-di-7-zhang/"/>
    <id>https://windcrain.top/post/c-primer-di-7-zhang/</id>
    <published>2022-03-08T12:02:08.000Z</published>
    <updated>2022-06-10T06:46:31.959Z</updated>
    
    <content type="html"><![CDATA[<h5 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string bookNo;</span><br><span class="line"><span class="type">unsigned</span> units_sold;</span><br><span class="line"><span class="type">double</span> revenue;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function">string <span class="title">isbn</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bookNo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp; rhs)</span> </span>&#123;</span><br><span class="line">units_sold += rhs.units_sold;</span><br><span class="line">revenue += rhs.revenue;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (units_sold) &#123;</span><br><span class="line"><span class="keyword">return</span> revenue / units_sold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="7-4"><a href="#7-4" class="headerlink" title="7.4"></a>7.4</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_Name;</span><br><span class="line">string m_Address;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(string name,string address) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Address = address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Show_info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;&#x27;s&quot;</span> &lt;&lt; <span class="string">&quot; address is &quot;</span> &lt;&lt;  <span class="keyword">this</span>-&gt;m_Address &lt;&lt; endl;</span><br><span class="line">&#125;<span class="comment">//类内定义函数</span></span><br><span class="line"></span><br><span class="line"><span class="function">string&amp; <span class="type">const</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string&amp; <span class="type">const</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="7-24"><a href="#7-24" class="headerlink" title="7.24"></a>7.24</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">using</span> pos = string::size_type;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Screen</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Screen</span>(pos hei, pos wid) :<span class="built_in">height</span>(hei),<span class="built_in">width</span>(wid) &#123;&#125;;</span><br><span class="line"><span class="built_in">Screen</span>(pos hei, pos wid, <span class="type">char</span> c) :<span class="built_in">height</span>(hei), <span class="built_in">width</span>(wid), <span class="built_in">contents</span>(hei*wid,c) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">pos  cursor = <span class="number">0</span>;</span><br><span class="line">pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">string contents;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="7-27"><a href="#7-27" class="headerlink" title="7.27"></a>7.27</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> pos = string::size_type;</span><br><span class="line"><span class="built_in">Screen</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Screen</span>(pos hei, pos wid) :<span class="built_in">height</span>(hei),<span class="built_in">width</span>(wid) &#123;&#125;;</span><br><span class="line"><span class="built_in">Screen</span>(pos hei, pos wid, <span class="type">char</span> c) :<span class="built_in">height</span>(hei), <span class="built_in">width</span>(wid), <span class="built_in">contents</span>(hei*wid,c) &#123;&#125;;</span><br><span class="line"><span class="function">Screen &amp;<span class="title">move</span><span class="params">(pos r, pos c)</span></span>;</span><br><span class="line"><span class="function">Screen &amp;<span class="title">set</span><span class="params">(<span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function">Screen &amp;<span class="title">set</span><span class="params">(pos, pos, <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function">Screen &amp;<span class="title">display</span><span class="params">(ostream&amp; os)</span> </span>&#123;</span><br><span class="line"><span class="built_in">do_dispaly</span>(os);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">const</span> Screen &amp;<span class="title">display</span><span class="params">(ostream&amp; os)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="built_in">do_dispaly</span>(os);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">pos  cursor = <span class="number">0</span>;</span><br><span class="line">pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">string contents;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_dispaly</span><span class="params">(ostream&amp; os)</span><span class="type">const</span> </span>&#123;</span><br><span class="line">os &lt;&lt; contents;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::move</span><span class="params">(pos r, pos c)</span> </span>&#123;</span><br><span class="line">pos row = r * width;</span><br><span class="line">cursor = row + c;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::set</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">contents[cursor] = c;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::set</span><span class="params">(pos r, pos col, <span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">contents[r * width + col] = ch;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-31"><a href="#7-31" class="headerlink" title="7.31"></a>7.31</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line">Y* p;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span> &#123;</span><br><span class="line">X x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="7-32"><a href="#7-32" class="headerlink" title="7.32"></a>7.32</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> ScreenIndex = std::vector&lt;Screen&gt;::size_type;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(ScreenIndex)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;Screen&gt; screens;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Window_mgr::clear</span><span class="params">(ScreenIndex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line"><span class="built_in">Screen</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Screen</span>(pos ht, pos wd) :<span class="built_in">height</span>(ht), <span class="built_in">width</span>(wd) &#123;&#125;</span><br><span class="line"><span class="built_in">Screen</span>(pos ht, pos wd, <span class="type">char</span> c) :<span class="built_in">height</span>(ht), <span class="built_in">width</span>(wd), <span class="built_in">contents</span>(ht* wd, c) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Screen&amp; <span class="title">set</span><span class="params">(<span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function">Screen&amp; <span class="title">set</span><span class="params">(pos, pos, <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function">Screen&amp; <span class="title">move</span><span class="params">(pos, pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> contents[cursor]; &#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">get</span><span class="params">(pos r, pos c)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> contents[r * width + c]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Screen&amp; <span class="title">display</span><span class="params">(std::ostream&amp; os)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">do_display</span>(os);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> Screen&amp; <span class="title">display</span><span class="params">(std::ostream&amp; os)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">do_display</span>(os);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_display</span><span class="params">(std::ostream&amp; os)</span> <span class="type">const</span> </span>&#123; os &lt;&lt; contents; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">size_t</span> access_ctr;</span><br><span class="line">pos height, width, cursor;</span><br><span class="line">std::string contents;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Window_mgr::clear</span><span class="params">(ScreenIndex i)</span> </span>&#123;</span><br><span class="line">Screen&amp; s = screens[i];</span><br><span class="line">s.contents = <span class="built_in">string</span>(s.height * s.width, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-35"><a href="#7-35" class="headerlink" title="7.35"></a>7.35</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> string Type;</span><br><span class="line"><span class="function">Type <span class="title">initVal</span><span class="params">()</span></span>; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exercise</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">double</span> Type;</span><br><span class="line">    <span class="function">Type <span class="title">setVal</span><span class="params">(Type)</span></span>; <span class="comment">// double</span></span><br><span class="line">    <span class="function">Type <span class="title">initVal</span><span class="params">()</span></span>; <span class="comment">// double</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Type <span class="title">Exercise::setVal</span><span class="params">(Type parm)</span> </span>&#123;  <span class="comment">// first is `string`, second is `double`</span></span><br><span class="line">    val = parm + <span class="built_in">initVal</span>();    </span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-41"><a href="#7-41" class="headerlink" title="7.41"></a>7.41</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> std::istream &amp;<span class="title">read</span><span class="params">(std::istream &amp;is, Sales_data &amp;item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> std::ostream &amp;<span class="title">print</span><span class="params">(std::ostream &amp;os, <span class="type">const</span> Sales_data &amp;item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data &amp;lhs, <span class="type">const</span> Sales_data &amp;rhs)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p) : <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(p*n) </span><br><span class="line">&#123; </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Sales_data(const std::string &amp;s, unsigned n, double p)&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sales_data</span>() : <span class="built_in">Sales_data</span>(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>) </span><br><span class="line">&#123; </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Sales_data() : Sales_data(\&quot;\&quot;, 0, 0)&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s) : <span class="built_in">Sales_data</span>(s, <span class="number">0</span>, <span class="number">0</span>) </span><br><span class="line">&#123; </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Sales_data(const std::string &amp;s) : Sales_data&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sales_data</span>(std::istream &amp;is) : <span class="built_in">Sales_data</span>() </span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">read</span>(is, *<span class="keyword">this</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Sales_data(std::istream &amp;is) : Sales_data()&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line"><span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">std::string bookNo;</span><br><span class="line"><span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data&amp; <span class="title">Sales_data::combine</span><span class="params">(<span class="type">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">units_sold += rhs.units_sold;</span><br><span class="line">revenue += rhs.revenue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Sales_data::avg_price</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (units_sold)</span><br><span class="line"><span class="keyword">return</span> revenue / units_sold;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::istream &amp;<span class="title">read</span><span class="params">(std::istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> price = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">item.revenue = price * item.units_sold;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::ostream &amp;<span class="title">print</span><span class="params">(std::ostream &amp;os, <span class="type">const</span> Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">os &lt;&lt; item.<span class="built_in">isbn</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.<span class="built_in">avg_price</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data &amp;lhs, <span class="type">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Sales_data sum = lhs;</span><br><span class="line">sum.<span class="built_in">combine</span>(rhs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Sales_data <span class="title">a</span><span class="params">(<span class="string">&quot;0-1-999-9&quot;</span>, <span class="number">2</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Sales_data b;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">c</span><span class="params">(<span class="string">&quot;0-1-999-9&quot;</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">d</span><span class="params">(cin)</span></span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-43"><a href="#7-43" class="headerlink" title="7.43"></a>7.43</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NoDefault</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">NoDefault</span>(<span class="type">int</span> )&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NoDefault nd;</span><br><span class="line"><span class="built_in">C</span>():<span class="built_in">nd</span>(<span class="number">5</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第7章 类</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer(第6章 函数)</title>
    <link href="https://windcrain.top/post/c-primer-di-6-zhang/"/>
    <id>https://windcrain.top/post/c-primer-di-6-zhang/</id>
    <published>2022-03-08T11:57:55.000Z</published>
    <updated>2022-06-10T06:37:12.763Z</updated>
    
    <content type="html"><![CDATA[<h5 id="6-10-6-12"><a href="#6-10-6-12" class="headerlink" title="6.10-6.12"></a>6.10-6.12</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset1</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span>* q)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> temp = *p;</span><br><span class="line">*p = *q;</span><br><span class="line">*q = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset2</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span>&amp; q)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> temp = p;</span><br><span class="line">p = q;</span><br><span class="line">q = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">42</span>, j = <span class="number">22</span>;</span><br><span class="line"><span class="built_in">reset1</span>(&amp;i, &amp;j);</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; j &lt;&lt; endl;<span class="comment">//22+42</span></span><br><span class="line"><span class="built_in">reset2</span>(i, j);</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; j &lt;&lt; endl;<span class="comment">//42+22</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-17"><a href="#6-17" class="headerlink" title="6.17"></a>6.17</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">test01</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isupper</span>(c))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">(string&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span>&amp; c : s) &#123;</span><br><span class="line">c = <span class="built_in">tolower</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s&#123; <span class="string">&quot;hello WorlD&quot;</span> &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">test01</span>(s);</span><br><span class="line"><span class="built_in">test02</span>(s);</span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-18"><a href="#6-18" class="headerlink" title="6.18"></a>6.18</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">matrix</span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(matrix&amp; i, matrix&amp; j)</span></span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::<span class="function">iterator <span class="title">change_val</span><span class="params">(<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;::iterator)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="6-21"><a href="#6-21" class="headerlink" title="6.21"></a>6.21</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">test01</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; i, <span class="type">const</span> <span class="type">int</span>* j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; *j)<span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> *j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i, t;</span><br><span class="line">cin &gt;&gt; i &gt;&gt; t;</span><br><span class="line"><span class="type">int</span>* j = &amp;t;</span><br><span class="line">cout &lt;&lt; <span class="built_in">test01</span>(i, j);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-22"><a href="#6-22" class="headerlink" title="6.22"></a>6.22</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">test01</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span>* q)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span>* temp = p;</span><br><span class="line">p = q;</span><br><span class="line">q = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-27"><a href="#6-27" class="headerlink" title="6.27"></a>6.27</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(initializer_list&lt;<span class="type">int</span>&gt;il)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; elem : il) &#123;</span><br><span class="line">res += elem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">initializer_list&lt;<span class="type">int</span>&gt;il&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func</span>(il);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="P-201-函数返回引用"><a href="#P-201-函数返回引用" class="headerlink" title="P 201 函数返回引用"></a>P 201 函数返回引用</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> temp;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">fn1</span><span class="params">(<span class="type">float</span> r)</span> </span>&#123;</span><br><span class="line">temp = r * r * <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span>&amp; <span class="title">fn2</span><span class="params">(<span class="type">float</span> r)</span> </span>&#123; <span class="comment">//&amp;说明返回的是temp的引用，换句话说就是返回temp本身</span></span><br><span class="line">    temp = r * r * <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> a = <span class="built_in">fn1</span>(<span class="number">5.0</span>); <span class="comment">//case 1：返回值</span></span><br><span class="line">    <span class="comment">//float &amp;b=fn1(5.0); //case 2:用函数的返回值作为引用的初始化值 [Error] invalid initialization of non-const reference of type &#x27;float&amp;&#x27; from an rvalue of type &#x27;float&#x27;</span></span><br><span class="line">                           <span class="comment">//（有些编译器可以成功编译该语句，但会给出一个warning） </span></span><br><span class="line">    <span class="type">float</span> c = <span class="built_in">fn2</span>(<span class="number">5.0</span>);<span class="comment">//case 3：返回引用</span></span><br><span class="line">    <span class="type">float</span>&amp; d = <span class="built_in">fn2</span>(<span class="number">5.0</span>);<span class="comment">//case 4：用函数返回的引用作为新引用的初始化值</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;<span class="comment">//78.5</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; b &lt;&lt; endl;//78.5</span></span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;<span class="comment">//78.5</span></span><br><span class="line">    cout &lt;&lt; d &lt;&lt; endl;<span class="comment">//78.5</span></span><br><span class="line">    temp = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; d &lt;&lt; endl;<span class="comment">//10</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-36-6-37"><a href="#6-36-6-37" class="headerlink" title="6.36-6.37"></a>6.36-6.37</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>(&amp;<span class="built_in">func</span>(<span class="built_in">string</span> (&amp; arrStr)[<span class="number">10</span>]))[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> arrT = string[<span class="number">10</span>];</span><br><span class="line"><span class="function">arrT&amp; <span class="title">func1</span><span class="params">(arrT&amp; arr)</span></span>;<span class="comment">//使用类型别名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func2</span><span class="params">(arrT&amp; arr)</span>-&gt;<span class="title">string</span><span class="params">(&amp;)</span>[10]</span>;<span class="comment">// 尾置返回</span></span><br><span class="line"></span><br><span class="line">string arrS[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">decltype</span> (arrS)&amp; <span class="built_in">func3</span>(arrT&amp; arr);<span class="comment">//decltype</span></span><br></pre></td></tr></table></figure><h5 id="6-38"><a href="#6-38" class="headerlink" title="6.38"></a>6.38</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(odd) &amp;<span class="built_in">arrPtr</span>(<span class="type">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> (i &amp; <span class="number">2</span>) ? odd : even;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-42"><a href="#6-42" class="headerlink" title="6.42"></a>6.42</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">make_plural</span><span class="params">(<span class="type">size_t</span> ctr, <span class="type">const</span> string&amp; word, <span class="type">const</span> string&amp; ending =<span class="string">&quot;s&quot;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (ctr &gt; <span class="number">1</span>) ? word + ending : word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">make_plural</span>(<span class="number">1</span>, <span class="string">&quot;success&quot;</span>, <span class="string">&quot;es&quot;</span>) &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; <span class="built_in">make_plural</span>(<span class="number">2</span>, <span class="string">&quot;success&quot;</span>, <span class="string">&quot;es&quot;</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">make_plural</span>(<span class="number">1</span>, <span class="string">&quot;failure&quot;</span>) &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; <span class="built_in">make_plural</span>(<span class="number">2</span>, <span class="string">&quot;failure&quot;</span>) &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-47"><a href="#6-47" class="headerlink" title="6.47"></a>6.47</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVec</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NDEBUG</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vector size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (!vec.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> tmp = vec.<span class="built_in">back</span>();</span><br><span class="line">vec.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">printVec</span>(vec);</span><br><span class="line">cout &lt;&lt; tmp &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;<span class="comment">//c++11特性</span></span><br><span class="line"><span class="built_in">printVec</span>(vec);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-55"><a href="#6-55" class="headerlink" title="6.55"></a>6.55</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span>  a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span> (*)(<span class="type">int</span>, <span class="type">int</span>)&gt;v&#123; add,sub,multi,divide &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> c : v)cout &lt;&lt; <span class="built_in">c</span>(<span class="number">4</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第6章 函数</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://windcrain.top/tags/C/"/>
    
  </entry>
  
</feed>
