<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>windCrain</title>
  
  
  <link href="https://windcrain.top/atom.xml" rel="self"/>
  
  <link href="https://windcrain.top/"/>
  <updated>2023-12-29T09:14:50.314Z</updated>
  <id>https://windcrain.top/</id>
  
  <author>
    <name>麦子落</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用Docker部署GeminiPro Chat项目</title>
    <link href="https://windcrain.top/post/%E7%94%A8Docker%E9%83%A8%E7%BD%B2GeminiPro%20Chat%E9%A1%B9%E7%9B%AE/"/>
    <id>https://windcrain.top/post/%E7%94%A8Docker%E9%83%A8%E7%BD%B2GeminiPro%20Chat%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-12-29T09:07:55.000Z</published>
    <updated>2023-12-29T09:14:50.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="https://gg.windcrain.top/">https://gg.windcrain.top/</a></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202312291707986.png" alt=""></p><h1 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h1><p>1）一台服务器</p><p>2）此项目的github<br><a href="https://github.com/babaohuang/GeminiProChat">https://github.com/babaohuang/GeminiProChat</a></p><p>3）一个谷歌账号<br>用来获取免费的API<br><a href="https://makersuite.google.com/app/apikey">https://makersuite.google.com/app/apikey</a></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202312291555312.png" alt=""></p><h1 id="一、Docker环境部署"><a href="#一、Docker环境部署" class="headerlink" title="一、Docker环境部署"></a>一、Docker环境部署</h1><p><strong>docker安装脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://cdn.jsdelivr.net/gh/SuperManito/LinuxMirrors@main/DockerInstallation.sh)</span><br></pre></td></tr></table></figure><p><strong>docker-compose安装脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose &amp;&amp; chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>&lt;/br&gt;</p><h1 id="二、创建docker-compose-yml文件"><a href="#二、创建docker-compose-yml文件" class="headerlink" title="二、创建docker-compose.yml文件"></a>二、创建docker-compose.yml文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo -i <span class="comment">#切换到root用户</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/GeminiProChat <span class="comment">#创建一个目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/GeminiProChat</span><br><span class="line"></span><br><span class="line">vim docker-compose.yml  </span><br><span class="line"></span><br><span class="line"><span class="comment">#英文输入法下，按 i进入编辑</span></span><br><span class="line"><span class="comment">#esc退出编辑</span></span><br><span class="line"><span class="comment"># :wq保存退出</span></span><br><span class="line"><span class="comment"># :q退出  :q!强制退出</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span>  <span class="comment"># 这是一个Docker Compose文件的版本声明，它表明该文件符合Docker Compose文件格式版本3.3</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">ywsj_gemini:</span>   <span class="comment">#服务名，可以自定义</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">ywsj_gemini</span>    <span class="comment">#容器名，可以自定义</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;3000:3000&#x27;</span>   <span class="comment"># 冒号:左边的3000可以改成任意vps上未使用过的端口记得打开防火墙,冒号右边是本docker镜像里的端口</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PUID=0</span>    <span class="comment"># 用户ID,在终端输入id可以查看当前用户的id</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PGID=0</span>    <span class="comment"># 组ID同上</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span>  <span class="comment">#时区，可以自定义</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">GEMINI_API_KEY=AIlls3SyAZAoLx6TO2W40ojhWUJf_uqEKwGp5NqFU</span>   <span class="comment">#这里填自己准备条件上获取到的谷歌AI的API</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span>    <span class="comment">#开启自启动其他选项看以下备注</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">babaohuang/geminiprochat:latest</span>    <span class="comment">#镜像名一般都是使用的哪个镜像就写哪个镜像。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;/br&gt;</p><h1 id="三、执行容器运行命令"><a href="#三、执行容器运行命令" class="headerlink" title="三、执行容器运行命令"></a>三、执行容器运行命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d <span class="comment">#运行容器</span></span><br><span class="line"></span><br><span class="line">docker-compose ps  <span class="comment">#查看是否开启成功</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;/br&gt;</p><h1 id="四、打开web页面使用"><a href="#四、打开web页面使用" class="headerlink" title="四、打开web页面使用"></a>四、打开web页面使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8181   <span class="comment">#打开自己VPS的端口加ip进入web页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以绑定域名来访问</span></span><br></pre></td></tr></table></figure><p>&lt;/br&gt;</p><h1 id="五、更新网站"><a href="#五、更新网站" class="headerlink" title="五、更新网站"></a>五、更新网站</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/GeminiProChat   <span class="comment">#进入项目目录</span></span><br><span class="line"></span><br><span class="line">docker-compose down <span class="comment">#停止容器</span></span><br><span class="line"></span><br><span class="line">docker-compose pull <span class="comment">#拉取最新镜像</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d <span class="comment">#启动新容器</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">用Docker和谷歌Gemini-API私有化部署GeminiPro Chat项目</summary>
    
    
    
    <category term="技术分享" scheme="https://windcrain.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Docker" scheme="https://windcrain.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习03</title>
    <link href="https://windcrain.top/post/Linux03/"/>
    <id>https://windcrain.top/post/Linux03/</id>
    <published>2023-07-19T10:07:55.000Z</published>
    <updated>2023-07-22T15:54:30.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><h2 id="Shell是什么"><a href="#Shell是什么" class="headerlink" title="Shell是什么"></a>Shell是什么</h2><p>Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。d&amp;kF%Nfti3s-</p><h2 id="Shell脚本的执行方式"><a href="#Shell脚本的执行方式" class="headerlink" title="Shell脚本的执行方式"></a>Shell脚本的执行方式</h2><h3 id="脚本格式要求"><a href="#脚本格式要求" class="headerlink" title="脚本格式要求"></a>脚本格式要求</h3><p>1.脚本以#!bin/bash开头（表明以bashell执行）</p><p>2.脚本需要有可执行权限</p><p>3.shell脚本一般以.sh结尾。虽然也可以以别的结尾，但是一般约定俗成以.sh结尾。</p><p><br></p><h3 id="脚本的常用执行方式"><a href="#脚本的常用执行方式" class="headerlink" title="脚本的常用执行方式"></a>脚本的常用执行方式</h3><p><strong>编写第一个Shell脚本</strong></p><p>需求说明：创建一个Shell脚本，输出hello,world~</p><p>方式1（输入脚本的绝对路径或相对路径）</p><p>说明：首先要赋予helloworld.sh脚本的+x权限，再执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /root/shcode <span class="comment"># 创建shcode目录，用于存放后续的shell脚本</span></span><br><span class="line"><span class="built_in">cd</span> /root/shcode/</span><br><span class="line">vim hello.sh   <span class="comment"># 第一行输入：#!/bin/bash 第二行输入：echo &quot;hello,world~&quot;</span></span><br><span class="line"><span class="built_in">chmod</span> u+x hello.sh <span class="comment"># 给所有者增加执行权限</span></span><br><span class="line">./hello.sh   <span class="comment"># 或使用绝对路径执行脚本：/root/shcode/hello.sh</span></span><br><span class="line">12345</span><br></pre></td></tr></table></figure><p>方法2（sh+脚本）</p><p>说明：不用赋予脚本+x权限，直接执行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u-x hello.sh <span class="comment"># 去掉执行权限</span></span><br><span class="line">sh hello.sh   <span class="comment"># 将hello.sh当脚本执行，此时不需要执行权限</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="Shell的变量"><a href="#Shell的变量" class="headerlink" title="Shell的变量"></a>Shell的变量</h2><h3 id="Shell变量介绍"><a href="#Shell变量介绍" class="headerlink" title="Shell变量介绍"></a>Shell变量介绍</h3><p>1.Linux Shell中的变量分为：系统变量和用户自定义变量</p><p>2.系统变量：$HOME, $PWD, $SHELL, $USER等等，比如：echo $HOME等等。</p><p>3.显示当前shell中所有变量：set</p><p><br></p><h3 id="shell变量的定义"><a href="#shell变量的定义" class="headerlink" title="shell变量的定义"></a>shell变量的定义</h3><p>基本语法</p><p>1.定义变量：变量名=值（不要打空格）</p><p>2.撤销变量：unset 变量</p><p>3.声明静态变量：readonly 变量，注意：不能unset</p><p>快速入门</p><p>案例1：定义变量A</p><p>案例2：撤销变量A</p><p>案例3：声明静态的变量B=2，不能unset（静态变量不会被反复定义和初始化，只会被定义一次)</p><p>案例4：可把变量提升为全局环境变量，可供其他shell程序使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：定义变量A</span></span><br><span class="line">A=100</span><br><span class="line"><span class="comment"># 定义变量不需要$，输出变量需要$</span></span><br><span class="line"><span class="built_in">echo</span> A=<span class="variable">$A</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;A=<span class="variable">$A</span>&quot;</span></span><br><span class="line"><span class="comment"># 案例2：撤销变量A</span></span><br><span class="line"><span class="built_in">unset</span> A</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;A=<span class="variable">$A</span>&quot;</span> <span class="comment"># 此时只会输出A= ，因为变量A已经被销毁了</span></span><br><span class="line"><span class="comment"># 案例3：声明静态的变量B=2，不能unset</span></span><br><span class="line"><span class="built_in">readonly</span> B=2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;B=<span class="variable">$B</span>&quot;</span></span><br><span class="line"><span class="built_in">unset</span> B     </span><br></pre></td></tr></table></figure><p><br></p><h3 id="shell变量的命名和赋值规则"><a href="#shell变量的命名和赋值规则" class="headerlink" title="shell变量的命名和赋值规则"></a>shell变量的命名和赋值规则</h3><p>定义变量的规则</p><p>1.变量名称可以由字母、数字和下划线组成，但是不能以数字开头。</p><p>5A=200(不可以)</p><p>2.等号两侧不能有空格。</p><p>3.变量名称一般习惯为大写</p><p>将命令的返回值赋给变量</p><p>1.A=``反引号，运行里面的命令，并把结果返回给变量A（没有反引号，会认为是单词赋给A）</p><p>2.A=$(date)等价于反引号</p><p><br></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p><strong>基本语法</strong></p><p>1.export 变量名=变量值（功能描述：将shell变量输出为环境变量/全局变量）</p><p>2.source 配置文件 （功能描述：让修改后的配置信息立即生效）</p><p>3.echo $变量名 （功能描述：查询环境变量的值）</p><p><strong>快速入门</strong></p><p>1.在/etc/profile文件中定义TOMCAT_HOME环境变量</p><p>2.查看环境变量TOMCAT_HOME的值</p><p>3.在另外一个shell程序中使用TOMCAT_HOME</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 在/etc/profile文件最后添加</span></span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/opt/tomcat</span><br><span class="line"><span class="comment"># wq保存退出</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile <span class="comment"># 刷一下profile文件，让配置信息生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$TOMCAT_HOME</span>   <span class="comment"># 返回/opt/tomcat</span></span><br></pre></td></tr></table></figure><p>注意：在输出TOMCAT_HOME环境变量前，需要让其生效source/etc/profile</p><p>补充：shell脚本的多行注释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;! </span><br><span class="line">内容</span><br><span class="line">! </span><br></pre></td></tr></table></figure><p><br></p><h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><p>当我们执行一个shell脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量</p><p>比如：./myshell.sh 100 200，这个就是一个执行shell的命令行，可以在myshell脚本中获取到参数信息</p><p><strong>基本语法</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827292.png" alt="image-20230717142522210"></p><p>案例</p><p>案例：编写一个shell脚本myshell.sh，在脚本中获取到命令行的各个参数信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;0=<span class="variable">$0</span>, 1=<span class="variable">$1</span>, 2=<span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有的参数=$*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数的个数=<span class="variable">$#</span>&quot;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><p>就是shell设计者事先已经定义好的变量，可以直接在shell脚本中使用</p><p><strong>基本语法</strong></p><p>$$ （功能描述：当前进程的进程号(PID))</p><p>$! （功能描述：后台运行的最后一个进程的进程号（PID））</p><p>$? （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</p><p><strong>应用实例：</strong></p><p>在一个shell脚本中简单使用一下预定义变量preVar.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前执行的进程id=$$&quot;</span></span><br><span class="line"><span class="comment"># 以后台的方式运行一个脚本(后面带个&amp;)，并获取他的进程号</span></span><br><span class="line">/root/shcode/myshell.sh &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;最后一个后台方式运行的进程id=$!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行的结果=$?&quot;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><strong>基本语法</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827294.png" alt="image-20230717143610960"></p><p><strong>应用实例oper.sh</strong></p><p>案例1：计算(2+3)*4的值</p><p>案例2：请求出命令行两个参数[整数]的和，比如20和50</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：计算（2+3）X4的值</span></span><br><span class="line">RES1=$(((<span class="number">2</span>+<span class="number">3</span>)*<span class="number">4</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;res1=<span class="variable">$RES1</span>&quot;</span></span><br><span class="line"><span class="comment"># 使用第二种方式，推荐使用</span></span><br><span class="line">RES2=$[(2+3)*4]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;res2=<span class="variable">$RES2</span>&quot;</span></span><br><span class="line"><span class="comment"># 使用第三种方式 expr</span></span><br><span class="line">TEMP=`<span class="built_in">expr</span> 2 + 3`</span><br><span class="line">RES3=`<span class="built_in">expr</span> <span class="variable">$TEMP</span> \* 4`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;temp=<span class="variable">$TEMP</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;res3=<span class="variable">$RES3</span>&quot;</span></span><br><span class="line"><span class="comment"># 案例2：请求出命令行的两个参数[整数]的和 20 50</span></span><br><span class="line">SUM=$[<span class="variable">$1</span>+<span class="variable">$2</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sum=<span class="variable">$SUM</span>&quot;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><strong>基本语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ] <span class="comment"># 注意condition前后要有空格</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>#非空返回true，可使用$?验证（0为true，&gt;1为false）</p><p>应用实例</p><p>[ Edu ] # 非空，返回true</p><p>[ ] # 返回false，中间一定要有空格</p><p>[ condition ] &amp;&amp; echo OK || echo notok 条件满足，执行后面的语句</p><p>常用判断条件</p><p>1）=字符串比较</p><p>2）两个整数的比较</p><p>-lt 小于</p><p>-le 小于等于</p><p>-eq 等于</p><p>-gt 大于</p><p>-ge 大于等于</p><p>-ne 不等于</p><p>3）按照文件权限进行判断</p><p>-r 有读的权限</p><p>-w 有写的权限</p><p>-x 有执行的权限</p><p>4）按照文件类型进行判断</p><p>-f 文件存在并且是一个常规的文件</p><p>-e 文件存在</p><p>-d 文件存在并是一个目录</p><p>应用实例</p><p>案例1：“ok”是否等于“ok”</p><p>判断语句：使用 =</p><p>案例2：23是否大于等于22</p><p>判断语句：使用 -ge</p><p>案例3：/root/shcode/aaa.txt目录中的文件是否存在</p><p>判断语句：使用 -f</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：“ok”是否等于“ok”</span></span><br><span class="line"><span class="comment"># 判断语句：使用 =</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;ok&quot;</span> = <span class="string">&quot;ok&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;equal&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 案例2：23是否大于等于22</span></span><br><span class="line"><span class="comment"># 判断语句：使用 -ge</span></span><br><span class="line"><span class="keyword">if</span> [ 23 -ge 22 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;大于&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 案例3：/root/shcode/aaa.txt目录中的文件是否存在</span></span><br><span class="line"><span class="comment"># 判断语句：使用 -f</span></span><br><span class="line"><span class="keyword">if</span> [ -f /root/shcode/aaa.txt ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;存在&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">代码</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>多分支-if判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">代码</span><br><span class="line"><span class="keyword">elif</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">代码</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>注意事项：[ 条件判断式 ]，中括号和条件判断式之间必须有空格</p><p>应用实例ifCase.sh</p><p>案例：请编写要给shell程序，如果输入的参数，大于等于60，则输出“及格了”，如果小于60，则输出”不及格“</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例：请编写要给shell程序，如果输入的参数，大于等于60，则输出“及格了”，如果小于60，则输出”不及格“</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -ge 60 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;及格了&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> -lt 60 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;不及格&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名 <span class="keyword">in</span></span><br><span class="line">”值1“)</span><br><span class="line">如果变量的值等于值1，则执行程序1</span><br><span class="line">;;</span><br><span class="line">“值2”)</span><br><span class="line">如果变量的值等于值2，则执行程序2</span><br><span class="line">;;</span><br><span class="line">...省略其他分支...</span><br><span class="line">*）</span><br><span class="line">如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span> <span class="comment"># case单词反写</span></span><br></pre></td></tr></table></figure><p>应用实例 testCase.sh</p><p>案例1：当命令行参数是1时，输出“周一”，是2时，就输出“周二”，其他情况输出“other”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：当命令行参数是1时，输出“周一”，是2时，就输出“周二”，其他情况输出“other”</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;周一&quot;</span></span><br><span class="line">;;</span><br><span class="line"><span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;周二&quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;other&quot;</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>基本语法1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 值1 值2 值3... <span class="comment"># 值外面可以加双引号</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序/代码</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>应用实例testFor1.sh</p><p>案例1：打印命令行输入的参数[这里可以看出$*和$@的区别]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：打印命令行输入的参数[这里可以看出$* 和$@ 的区别]</span></span><br><span class="line"><span class="comment"># 注意：$* 是把输入的参数，当作一个整体，所以，只会输出一句话</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;num is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 使用$@ 来获取输入的参数，注意，这时是分别对待，所以有几个参数，就输出几句</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;===========================&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;num is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>基本语法2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((初始值;循环控制条件;变量变化))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序/代码</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>应用实例testFor2.sh</p><p>案例1：从1加到100的值输出显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：从1加到100的值输出显示，如何把100做成一个变量</span></span><br><span class="line"><span class="comment"># 定义一个变量</span></span><br><span class="line">SUM=0</span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=<span class="variable">$1</span>; i++ ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 写上你的业务代码</span></span><br><span class="line">        SUM=$[<span class="variable">$SUM</span>+<span class="variable">$i</span>]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;总和SUM=<span class="variable">$SUM</span>&quot;</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>基本语法1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>注意：while和[有空格，条件判断式和[也有空格<br>应用实例testWhile.sh</p><p>案例1：从命令行输入一个数n，统计从1+…+n的值是多少？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：从命令行输入一个数n，统计从1+...+n的值是多少？</span></span><br><span class="line">SUM=0</span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le <span class="variable">$1</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        SUM=$[<span class="variable">$SUM</span>+<span class="variable">$i</span>]</span><br><span class="line">        <span class="comment"># i自增</span></span><br><span class="line">        i=$[<span class="variable">$i</span>+1]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行结果=<span class="variable">$SUM</span>&quot;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h2><p><strong>基本语法</strong></p><p>read(选项)(参数)</p><p>选项：</p><p>-p：指定读取值的提示符</p><p>-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了。</p><p>参数：</p><p>变量：指定读取值的变量名</p><p><strong>应用实例testRead.sh</strong></p><p>案例1：读取控制台输入一个NUM1值</p><p>案例2：读取控制台输入一个NUM2值，在10秒内输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：读取控制台输入一个NUM1值</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个数NUM1=&quot;</span> NUM1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你输入的NUM1=<span class="variable">$NUM1</span>&quot;</span></span><br><span class="line"><span class="comment"># 案例2：读取控制台输入一个NUM2值，在10秒内输入</span></span><br><span class="line"><span class="built_in">read</span> -t 10 -p <span class="string">&quot;请输入一个数NUM2=&quot;</span> NUM2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你输入的NUM2=<span class="variable">$NUM2</span>&quot;</span>                        </span><br></pre></td></tr></table></figure><p><br></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>shell编程和其他编程语言一样，有系统函数，也可以自定义函数。</p><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><p>basename基本语法</p><p>功能：返回完整路径最后/的部分，常用于获取文件名</p><p>basename [pathname] [suffix]</p><p>basename [string] [suffix] (功能描述：basename命令会删掉所有的前缀包括最后一个(‘/’)字符，然后将字符串显示出来。</p><p>选项：</p><p>suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉。</p><p>应用实例</p><p>案例1：请返回/home/aaa/test.txt的”test.txt“部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@lmh100 shcode]<span class="comment"># basename /home/aaa/test.txt</span></span><br><span class="line">test.txt</span><br><span class="line">[root@lmh100 shcode]<span class="comment"># basename /home/aaa/test.txt .txt</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>dirname基本语法</p><p>功能：返回完整路径最后/的前面的部分，常用于返回路径部分</p><p>dirname 文件绝对路径（功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）</p><p>应用实例</p><p>案例1：请返回/home/aaa/test.txt的/home/aaa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lmh100 shcode]<span class="comment"># dirname /home/aaa/test.txt</span></span><br><span class="line">/home/aaa</span><br></pre></td></tr></table></figure><p><br></p><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数定义</span></span><br><span class="line"><span class="keyword">function</span> funname[()]</span><br><span class="line">&#123;</span><br><span class="line">Action;</span><br><span class="line">[<span class="built_in">return</span> int;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 调用函数时，直接写函数名</span></span><br><span class="line">funname [值]</span><br></pre></td></tr></table></figure><p>应用实例</p><p>案例1：计算输入两个参数的和（动态获取），getSum</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：计算输入两个参数的和（动态获取），getSum</span></span><br><span class="line"><span class="comment"># 定义函数 getSum</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getSum</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">        SUM=$[<span class="variable">$n1</span>+<span class="variable">$n2</span>]</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;和是=<span class="variable">$SUM</span>&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入两个值</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个数n1=&quot;</span> n1</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个数n2=&quot;</span> n2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用自定义函数</span></span><br><span class="line">getSum <span class="variable">$n1</span> <span class="variable">$n2</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="Shell编程综合案例"><a href="#Shell编程综合案例" class="headerlink" title="Shell编程综合案例"></a>Shell编程综合案例</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>1.每天凌晨2：30备份数据库mzlmh到/data/backup/db</p><p>2.备份开始和备份结束能够给出相应的提示信息</p><p>3.备份后的文件要求以备份时间为文件名，并打包成.tar.gz的形式，比如：2021-03-12_230201.tar.gz</p><p>4.在备份的同时，检查是否有10天前备份的数据库文件，如果有就将其删除。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827295.png" alt="image-20230717185434628"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /user/sbin</span><br><span class="line">vim mysql_db_backup.sh</span><br><span class="line"></span><br><span class="line">//.sh文件内容</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 备份目录</span></span><br><span class="line">BACKUP=/data/backup/db</span><br><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">DATETIME=$(<span class="built_in">date</span> +%Y-%m-%d_%H%M%S)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$DATETIME</span></span><br><span class="line"><span class="comment"># 数据库的地址</span></span><br><span class="line">HOST=localhost</span><br><span class="line"><span class="comment"># 数据库的用户名</span></span><br><span class="line">DB_USER=root</span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line">DB_PW=hspedu100</span><br><span class="line"><span class="comment"># 备份的数据库名</span></span><br><span class="line">DATABASE=hspedu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建备份目录，如果不存在，就创建</span></span><br><span class="line">[ ! -d <span class="string">&quot;<span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>&quot;</span> ] &amp;&amp; <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份数据库</span></span><br><span class="line">mysqldump -u<span class="variable">$&#123;DB_USER&#125;</span> -p<span class="variable">$&#123;DB_PW&#125;</span> --host=<span class="variable">$&#123;HOST&#125;</span> -q -R --databases <span class="variable">$&#123;DATABASE&#125;</span> | gzip &gt; <span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>.sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件处理成 tar.gz(压缩打包）</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;BACKUP&#125;</span></span><br><span class="line">tar -zcvf <span class="variable">$DATETIME</span>.tar.gz <span class="variable">$&#123;DATETIME&#125;</span></span><br><span class="line"><span class="comment"># 删除对应的备份</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除十天前的备份文件(atime是访问时间)</span></span><br><span class="line">find <span class="variable">$&#123;BACKUP&#125;</span> -atime +10 -name <span class="string">&quot;*.tar.gz&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;备份数据库<span class="variable">$&#123;DATEBASE&#125;</span> 成功~&quot;</span></span><br><span class="line">//.sh文件内容结束</span><br><span class="line"></span><br><span class="line">crontab -e</span><br><span class="line"><span class="comment"># 填入内容</span></span><br><span class="line">30 2 * * * /usr/sbin/mysql_db_backup.s</span><br></pre></td></tr></table></figure><p><br></p><h1 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h1><p>1.日志文件是重要的系统信息文件，其中记录了许多<code>重要的系统事件</code>，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件的相关信息、各种服务相关信息等。</p><p>2.日志对于安全来说也很重要，它记录了系统每天发生的各种事情，通过日志来检查错误发生的原因，或者受到攻击时攻击者留下的痕迹。</p><p>3.可以这样理解，日志是用来记录重大事件的工具。</p><p><br></p><h2 id="系统常用的日志"><a href="#系统常用的日志" class="headerlink" title="系统常用的日志"></a>系统常用的日志</h2><p>/var/log/目录就是系统日志文件的保存位置</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827296.png" alt="image-20230718182430089"></p><p>（下表标红为必须要知道的）</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827297.png" alt="image-20230718182652837"></p><p>注意：这里lastlog拼错了</p><p><br></p><h2 id="日志管理服务rsyslogd"><a href="#日志管理服务rsyslogd" class="headerlink" title="日志管理服务rsyslogd"></a>日志管理服务rsyslogd</h2><p>CentOS7.6日志服务是rsyslogd，CentOS6.x日志服务是syslogd。rsyslogd功能更强大。</p><p>rsyslogd的使用、日志文件的格式，和syslogd服务兼容的。</p><p>原理示意图（日志管理服务和日志的关系）：</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827298.png" alt="image-20230718183702775"></p><p>查看Linux中的rsyslogd服务是否启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep “rsyslog” | grep -v “grep”</span><br><span class="line"><span class="comment"># grep -v “grep”中的-v表示反向进行匹配，这样可以过滤掉查询的本身这条grep指令</span></span><br></pre></td></tr></table></figure><p>查询rsyslogd服务的自启动状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files | grep <span class="string">&quot;rsyslog&quot;</span></span><br></pre></td></tr></table></figure><p>配置文件：<code>/etc/rsyslog.conf</code> [重点]</p><p>编辑文件时的格式为： *.*  存放日志文件</p><p>其中第一个*代表日志类型，第二个*代表日志级别</p><p>1.日志类型分为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">auth<span class="comment">## pam产生的日志</span></span><br><span class="line">authpriv<span class="comment">## ssh、ftp等登录信息的验证信息</span></span><br><span class="line">corn<span class="comment">## 时间任务相关</span></span><br><span class="line">kern<span class="comment">## 内核</span></span><br><span class="line">lpr<span class="comment">## 打印</span></span><br><span class="line">mail<span class="comment">## 邮件</span></span><br><span class="line">mark(syslog)-rsyslog<span class="comment">## 服务内部的信息，时间标识</span></span><br><span class="line">news<span class="comment">## 新闻组</span></span><br><span class="line">user<span class="comment">## 用户程序产生的相关信息</span></span><br><span class="line">uucp<span class="comment">## unix to unix copy主机之间相关的通信</span></span><br><span class="line"><span class="built_in">local</span> 1-7<span class="comment">## 自定义的日志设备</span></span><br></pre></td></tr></table></figure><p>2.日志级别分为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debug<span class="comment">## 有调用信息的，日志通信最多</span></span><br><span class="line">info<span class="comment">## 一般信息日志，最常用</span></span><br><span class="line">notice<span class="comment">## 最具有重要性的普通条件的信息</span></span><br><span class="line">warning<span class="comment">## 警告级别</span></span><br><span class="line">err<span class="comment">## 错误级别，阻止某个功能或者模块不能正常工作的信息</span></span><br><span class="line">crit<span class="comment">## 严重级别，阻止整个系统或者整个软件不能正常工作的信息</span></span><br><span class="line">alert<span class="comment">## 需要立刻修改的信息</span></span><br><span class="line">emerg<span class="comment">## 内核崩溃等重要信息</span></span><br><span class="line">none<span class="comment">## 什么都不记录</span></span><br></pre></td></tr></table></figure><p>注意：从上到下，级别从低到高，记录信息越来越少</p><p>由日志服务rsyslogd记录的日志文件，日志文件的格式包含以下4列：</p><p>1.事件产生的时间</p><p>2.产生事件的服务器的主机名</p><p>3.产生事件的服务名或程序名</p><p>4.事件的具体信息</p><p>日志如何查看实例</p><p>查看一下/var/log/secure日志，这个日志中记录的是用户验证和授权方面的信息，来分析如何查看</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827299.png" alt="image-20230718184930184"></p><p>日志管理服务应用实例</p><p>在/etc/rsyslog.conf中添加一个日志文件/var/log/mzl.log，当有事件发送时（比如sshd服务相关事件），该文件会接收到信息并保存，演示<code>重启，登录的情况</code>，看看是否有日志保存<br><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827300.png" alt="image-20230718185535289"></p><p><br></p><h2 id="日志轮替"><a href="#日志轮替" class="headerlink" title="日志轮替"></a>日志轮替</h2><p>日志轮替就是把旧的日志文件移动并改名，同时建立新的空日志文件，当旧日志文件超出保存的范围之后，就会进行删除</p><h3 id="日志轮替文件命名"><a href="#日志轮替文件命名" class="headerlink" title="日志轮替文件命名"></a>日志轮替文件命名</h3><p>1.centos7使用logrotate进行日志轮替管理，要想改变日志轮替文件名字，通过/etc/logrotate.conf配置文件中”dateext”参数；</p><p>2.如果配置文件中有“dateext”参数，那么日志会用<font color="red">日期</font>来作为日志文件的后缀，例如“secure-20201010”。这样日志文件名不会重叠，也就不需要日志文件的改名，只需要指定保存日志个数，删除多余的日志文件即可。</p><p>3.如果配置文件中没有“dateext”参数，日志文件就需要进行改名了。当第一次进行日志轮替时，<font color="red">当前的“secure”日志会自动改名为“secure.1”，然后新建”secure“日志，用来保存新的日志</font>。当第二次进行日志轮替时，”secure.1“会自动改名为”secure.2“，当前的”secure“日志会自动改名为”secure.1“，然后也会新建”secure“日志，用来保存新的日志，以此类推。</p><p>注意：</p><p>1./etc/logrotate.conf里既可以配置全局的日志轮替策略/规则，也可以单独给某个日志文件指定策略。</p><p>2.也可以把某个日志文件的轮替规则，写到/etc/logrotate.d目录，</p><p><br></p><h3 id="logrotate配置文件"><a href="#logrotate配置文件" class="headerlink" title="logrotate配置文件"></a>logrotate配置文件</h3><p>/etc/logrotate.conf为logrotate的全局配置文件</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827301.png" alt="image-20230718190105442"></p><p>参数说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">参数参数说明</span><br><span class="line">daily日志的轮替周期是每天</span><br><span class="line">weekly日志的轮替周期是每周</span><br><span class="line">monthly日志的轮替周期是每月</span><br><span class="line">rotate 数字保留的日志备份文件的个数。0指没有备份。</span><br><span class="line">compress日志轮替时，旧的日志进行压缩</span><br><span class="line">create mode owner group 建立新日志，同时指定新日志的权限与所有者和所属组</span><br><span class="line">mail address当日志轮替时，输出内容通过邮件发送到指定的邮件地址</span><br><span class="line">missingok如果日志不存在，则忽略该日志的警告信息</span><br><span class="line">notifempty如果日志为空文件，则不进行日志轮替</span><br><span class="line">minsize大小日志轮替的最小值。也就是日志一定要达到这个最小值才会轮替，否则就算时间达到也不轮替</span><br><span class="line">size大小日志只有大于指定大小才进行日志轮替，而不是按照时间轮替</span><br><span class="line">dateext使用日期作为日志轮替文件的后缀</span><br><span class="line">sharedscripts在此关键字后的脚本只执行一次</span><br><span class="line">prerotate/endscript在日志轮替之前执行脚本命令</span><br><span class="line">postrotate/endscript在日志轮替之后执行脚本命令</span><br></pre></td></tr></table></figure><p><br></p><h3 id="把自己的日志加入日志轮替"><a href="#把自己的日志加入日志轮替" class="headerlink" title="把自己的日志加入日志轮替"></a>把自己的日志加入日志轮替</h3><p>第一种方法是直接在/etc/logrotate.conf配置文件中写入该日志的轮替策略。</p><p>第二种方法是在/etc/logrotate.d/目录中新建立该日志的轮替文件，在该轮替文件中写入正确的轮替策略，因为该目录中的文件都会被”include“到主配置文件中，所以也可以把日志加入轮替。</p><p>推荐使用第二种方法，因为系统中需要轮替的日志非常多，如果全都直接写入/etc/logrotate.conf配置文件，那么这个文件的可管理性就会非常差，不利于此文件的维护。</p><p>在/etc/logrotate.d/配置轮替文件一览</p><p><strong>应用实例</strong></p><p>在/etc/logrotate.conf进行配置，或者直接在/etc/logrotate.d/下创建mzllog编写如下内容，具体轮替的效果可以参考/var/log下的boot.log情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/var/log/mzl.log</span><br><span class="line">&#123;</span><br><span class="line">missingok</span><br><span class="line">daily</span><br><span class="line">copytruncate <span class="comment"># 拷贝截断：用于还在打开中的日志文件，将当前日志备份重命名并将原文件清空</span></span><br><span class="line">rotate 7</span><br><span class="line">notifempty</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="日志轮替机制原理"><a href="#日志轮替机制原理" class="headerlink" title="日志轮替机制原理"></a>日志轮替机制原理</h2><p>日志轮替之所以可以在指定的时间备份日志，是依赖于系统定时任务。</p><p>在/etc/cron.daily/目录，就会发现这个目录中是由logrotate文件（可执行），logrotate通过这个文件依赖定时任务执行的。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827302.png" alt="image-20230718194530049"></p><p><br></p><h2 id="查看内存日志"><a href="#查看内存日志" class="headerlink" title="查看内存日志"></a>查看内存日志</h2><p>有一部分日志先写到内存里面，还没有写到文件里。</p><p>journalctl 可以查看内存日志，这里我们看看常用的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">journalctl <span class="comment">## 查看全部</span></span><br><span class="line">journalctl -n 3 <span class="comment">## 查看最新3条</span></span><br><span class="line">journalctl --since 19:00 --until 19:10:10 <span class="comment"># 查看起始时间到结束时间的日志可加日期</span></span><br><span class="line">journalctl -p err <span class="comment">## 报错日志</span></span><br><span class="line">journalctl -o verbose <span class="comment">## 日志详细内容</span></span><br><span class="line">journalctl _PID=1245 _COMM=sshd<span class="comment">##查看包含这些参数的日志（在详细日志查看）</span></span><br><span class="line">或者journalctl | grep sshd</span><br></pre></td></tr></table></figure><p>注意：journalctl 查看得是<code>内存日志</code>，重启会清空</p><p><br></p><h1 id="定制自己的Linux系统"><a href="#定制自己的Linux系统" class="headerlink" title="定制自己的Linux系统"></a>定制自己的Linux系统</h1><p>通过裁剪现有Linux系统（CentOS7.6），创建属于自己的min Linux小系统，可以加深我们对linux的理解。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>启动流程介绍：</p><p>制作Linux小系统前，再了解一下Linux的启动流程：</p><p>1.首先Linux要通过自检，检查硬件设备有没有故障</p><p>2.如果有多块启动盘的话，需要在BIOS中选择启动磁盘</p><p>3.启动MBR中的bootloader引导程序</p><p>4.加载内核文件</p><p>5.执行所有进程的父进程、老祖宗systemd</p><p>6.欢迎界面</p><p>在Linux的启动流程中，加载内核文件时关键文件:</p><p>1）kernel文件：vmlinuz-3.10.0-957.el7.x86_64</p><p>2）initrd文件：initramfs-3.10.0-957.el7.x86_64.img</p><p><br></p><h2 id="制作min-linux思路分析"><a href="#制作min-linux思路分析" class="headerlink" title="制作min linux思路分析"></a>制作min linux思路分析</h2><p>1.在现有的Linux系统（centos7.6）上加一块硬盘/dev/sdb，在硬盘上分两个分区，一个是/boot，一个是/，并将其格式化。需要明确的是，现在加的这个硬盘在现有的Linux系统中是/dev/sdb，但是，当我们把东西全部设置好时，要把这个硬盘拔除，放在新的系统上，此时，就是/dev/sda。</p><p>2.在/dev/sdb硬盘上，将其打造成独立的Linux系统，里面的所有文件是需要拷贝进去的</p><p>3.作为能独立运行的Linux系统，内核是一定不能少，要把内核文件和initramfs文件也一起拷到/dev/sdb上</p><p>4.以上步骤完成，我们的自制Linux就完成，创建一个新的linux虚拟机，将其硬盘指向我们创建的硬盘，启动即可</p><p><br></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1.首先，我们在现有的linux添加一块大小为20G的硬盘（注意添加过程中，一定要将虚拟磁盘存储为单个文件）</p><p>注意：由于之前在学习挂载的时候，添加了一块硬盘，所以移除后如果不在配置文件/etc/fstab将永久挂载点删除，则开机会进入紧急模式。解决的办法是：进入紧急模式后，输入root密码，编辑/etc/fstab，将之前的sdb硬盘挂载指示内容删除，再重启。如果开机进入了紧急模式，可能是因为刚刚移除硬盘后</p><p>2.接下来进行分区和格式化</p><p>1）先用lsblk查看目前有哪些硬盘。</p><p>2）对硬盘进行分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure><p>3）对硬盘进行格式化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdb1</span><br><span class="line">mkfs.ext4 /dev/sdb2</span><br></pre></td></tr></table></figure><p>4）创建目录，并挂载新的磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /mnt/boot /mnt/sysroot <span class="comment"># 创建目录</span></span><br><span class="line">mount /dev/sdb1 /mnt/boot/</span><br><span class="line">mount /dev/sdb2 /mnt/sysroot/</span><br></pre></td></tr></table></figure><p>5）安装grub2，内核文件拷贝至目标磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grub2-install --root-directory=/mnt /dev/sdb <span class="comment"># 安装grub2</span></span><br><span class="line">hexdump -C -n 512 /dev/sdb <span class="comment"># 验证是否安装成功</span></span><br><span class="line"><span class="built_in">rm</span> -rf /mnt/boot/* <span class="comment"># 清除/mnt/boot/下原有的内容</span></span><br><span class="line"><span class="built_in">cp</span> -rf /boot/* /mnt/boot/ <span class="comment"># 将sda的boot/中的所有内容拷贝到/mnt的boot/下（相当于到sdb1）</span></span><br></pre></td></tr></table></figure><p>6）修改grub2/grub.cfg文件中的UUID（指定那些盘是启动盘，哪些盘是根目录盘），标红的部分是需要使用指令来查看的</p><p>（用sed -i全部替换更方便）</p><p>在UTF-8后面要加一句话selinux=0 init=/bin/bash，代表不要走系统那条线，要走我自己定制的shell</p><p>在linux16最后也要加上selinux=0 init=/bin/bash</p><p>保存退出</p><p>7）创建目标主机根文件系统（将所有重要目录建起来，虽然是空的）(注意/mnt/sysroot和{}之间没有空格)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -pv /mnt/sysroot/&#123;etc/rc.d,usr,var,proc,sys,dev,lib,lib64,bin,sbin,boot,srv,mnt,media,home,root&#125;</span><br></pre></td></tr></table></figure><p>8）拷贝需要的bash(也可以拷贝你需要的指令）和库文件给新的系统使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /lib64/*.* /mnt/sysroot/lib64/</span><br><span class="line"><span class="built_in">cp</span> /bin/bash /mnt/sysroot/bin/</span><br></pre></td></tr></table></figure><p>9.原虚拟机先关机，然后新创建一个虚拟机，然后将默认分配的硬盘移除掉，指向我们刚刚创建的磁盘即可。</p><p>10）这时，很多指令都不能使用，比如ls，reboot等，可以将需要的指令拷贝到对应的目录即可</p><p>11)如果要拷贝指令，重新进入到原来的linux系统拷贝相应的指令即可，如将/bin/ls拷贝到/mnt/sysroot/bin，将/sbin/reboot拷贝到/mnt/sysroot/sbin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdb2 /mnt/sysroot/ <span class="comment"># 重新挂载</span></span><br><span class="line"><span class="built_in">cp</span> /bin/ls /mnt/sysroot/bin/</span><br><span class="line"><span class="built_in">cp</span> /bin/systemctl /mnt/sysroot/bin/</span><br><span class="line"><span class="built_in">cp</span> /sbin/reboot /mnt/sysroot/sbin/</span><br></pre></td></tr></table></figure><p>12）再重启新的min linux系统，就可以使用ls，reboot指令了</p><p><br></p><h1 id="额外阅读：Linux内核源码-介绍-amp-内核升级"><a href="#额外阅读：Linux内核源码-介绍-amp-内核升级" class="headerlink" title="额外阅读：Linux内核源码-介绍&amp;内核升级"></a>额外阅读：Linux内核源码-介绍&amp;内核升级</h1><p>linux0.01内核源码</p><p>基本介绍</p><p>Linux的内核源代码可以从网上下载，解压缩后文件文件一般也都位于linux目录下。内核源代码有很多版本，可以从linux0.01内核入手，总共的代码1w行左右，版本5.9.8总共代码超过700w行，非常庞大。</p><p>内核地址：<a href="https://www.kernel.org/">https://www.kernel.org/</a></p><p>linux0.01内核源码目录&amp;阅读</p><p>阅读内核源码技巧</p><p>1.linux0.01的阅读需要懂c语言</p><p>2.阅读源码前，应知道Linux内核源码的整体分布情况。现代的操作系统一般由进程管理、内存管理、文件系统、驱动程序和网络等组成。Linux内核源码的各个目录大致与此相对应。</p><p>3.在阅读方法或顺序上，有纵向与横向之分。所谓纵向就是顺着程序的执行顺序逐步进行（比如从主方法开始阅读）；所谓横向，就是按模块进行，它们常结合在一起进行（比如先看内存管理mm模块）。</p><p>4.对于Linux启动的代码可顺着Linux的启动顺序一步步来阅读；对于像内存管理部分，可以单独拿出来进行阅读分析。实际上这是一个反复的过程，不可能读一遍就理解</p><p>linux内核源码阅读&amp;目录介绍&amp;main.c说明</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827303.png" alt="image-20230719154218014"></p><p>main.c中</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827304.png" alt="image-20230719154646277"></p><p>linux内核升级应用实例</p><p>将Centos系统从7.6内核升级到7.8版本内核（兼容性问题）</p><p>具体步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a //查看当前的内核版本</span><br><span class="line">yum info kernel -q //检测内核版本，显示可以升级的内核</span><br><span class="line">yum update kernel //升级内核</span><br><span class="line">yum list kernel -q //查看已经安装的内核</span><br></pre></td></tr></table></figure><p>注意：装了新的内核后，使用uname -a，仍显示原内核。重启之后，在重启界面可以选择新内核。新内核是兼容原先的系统的。</p><p> <br></p><h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><p>实体机无法做快照，如果系统出现异常或者数据损坏，后果严重，要重做系统，还会造成数据丢失。所以我们可以使用备份和恢复技术</p><p>linux的备份和恢复很简单，有两种方式：</p><p>1.把需要的文件（或者分区）用TAR打包就行，下次需要恢复的时候，再解压开覆盖即可</p><p>2.使用dump和restore命令</p><h2 id="安装dump和restore"><a href="#安装dump和restore" class="headerlink" title="安装dump和restore"></a>安装dump和restore</h2><p>如果linux上没有dump和restore指令，需要先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install dump (可能会同时安装上restore）</span><br><span class="line">yum -y install restore</span><br></pre></td></tr></table></figure><p><br></p><h2 id="使用dump完成备份"><a href="#使用dump完成备份" class="headerlink" title="使用dump完成备份"></a>使用dump完成备份</h2><p>dump支持分卷和增量备份（所谓增量备份是指备份上次备份后 修改/增加过的文件，也称差异备份）。</p><p>示意图:</p><p>第一次备份层级为0，表示完整备份。后面的层级表示增量备份/差异备份/层级备份。<br><img src="https://img-blog.csdnimg.cn/3b59dad1b58d41c6a47556365d95c55c.png" alt="在这里插入图片描述"></p><p><br></p><h3 id="dump语法说明"><a href="#dump语法说明" class="headerlink" title="dump语法说明"></a>dump语法说明</h3><p>dump [-cu] [-123456789] [-f &lt;备份后文件名&gt;] [-T &lt;日期&gt;] [目录或文件系统]</p><p>dump []-wW</p><p>-c（c是一个数字，可以是0-9中的一个数字）：创建新的归档文件，并将由一个或多个文件参数所指定的内容写入归档文件的开头。</p><p>-0123456789：备份的层级。0为最完整备份，会备份所有文件。若指定0以上的层级，则备份自上一次备份以来修改或新增的文件，到9后，可以再次轮替。</p><p>-f &lt;备份后文件名&gt;：指定备份后文件名</p><p>-j：<code>调用bzlib库压缩备份文件</code>，也就是将备份后的文件压缩成bz2格式，让文件更小</p><p>-T &lt;日期&gt;：指定开始备份的时间与日期</p><p>-u：备份完成后，在/etc/dumpdares中记录备份的文件系统，层级，日期与时间等。（不带u则不知道备份到第几次了）</p><p>-t：指定文件名，若该文件已存在备份文件中，则列出名称</p><p>-W：显示需要备份的文件及其最后一次备份的层级，时间，日期。</p><p>-w：与-W类似，但仅显示需要备份的文件。</p><p><strong>应用案例1</strong></p><p>将/boot分区所有内容备份到/opt/boot.bak.bz2文件中，备份层级为’0’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dump -0uj -f /opt/boot.bak0.bz2 /boot</span><br></pre></td></tr></table></figure><p><strong>dump应用案例2</strong></p><p>在/boot目录下增加新文件，备份层级为”1”（只备份上次使用层级”0“备份后发生过改变的数据），<code>注意比较看看这次生成的boot1.bak有多大</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dump -1uj -f /opt/boot.bak1.bz2 /boot</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827305.png" alt="image-20230719162725892"></p><p>注意：通过dump命令在配合cronbtab可以实现无人值守备份</p><p><br></p><h3 id="dump-W"><a href="#dump-W" class="headerlink" title="dump -W"></a>dump -W</h3><p>显示需要备份的文件及其最后一次备份的层级，时间，日期<br><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827306.png" alt="image-20230719162813992"></p><p><br></p><h3 id="查看备份时间文件"><a href="#查看备份时间文件" class="headerlink" title="查看备份时间文件"></a>查看备份时间文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/dumpdates</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827307.png" alt="image-20230719162905785"></p><p><br></p><h3 id="dump备份文件或者目录"><a href="#dump备份文件或者目录" class="headerlink" title="dump备份文件或者目录"></a>dump备份文件或者目录</h3><p>前面我们在备份分区时，是可以支持增量备份的，如果备份<code>文件或者目录，不再支持增量备份</code>，即只能只用0级别备份</p><p>案例：使用dump备份/etc整个目录</p><p>dump -0j -f /opt/etc0.bak.bz2 /etc/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面这条语句会报错，提示DUMP：Only level0 dumps are allowed on a subdirectory</span></span><br><span class="line">dump -1j -f /opt/etc.bak.bz2 /etc/</span><br></pre></td></tr></table></figure><p>注意：重要的备份文件，比如数据区，建议将文件上传到其他服务器保存，不要将鸡蛋放在同一个篮子。</p><p><br></p><h2 id="使用restore完成恢复"><a href="#使用restore完成恢复" class="headerlink" title="使用restore完成恢复"></a>使用restore完成恢复</h2><p>restore命令用来恢复已备份的文件，可以从dump生成的备份文件中恢复原文件</p><h3 id="restore基本语法"><a href="#restore基本语法" class="headerlink" title="restore基本语法"></a>restore基本语法</h3><p>restore [模式选项] [选项]</p><p>说明下面四个模式，不能混用，在一次命令中，只能指定一种。</p><p>-C：使用对比模式，将备份的文件与已存在的文件相互对比。</p><p>-i：使用交互模式，在进行还原操作时，restores指令将依序询问用户</p><p>-r：进行还原模式（用的最多的模式）</p><p>-t：查看模式，看备份文件有哪些文件</p><p>选项</p><p>-f &lt;备份设备&gt;：从指定的文件中读取备份数据，进行还原操作</p><p><strong>应用案例1</strong></p><p>restore命令比较模式，比较备份文件和原文件的区别</p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> /boot/hello.java /boot/hello100.java</span><br><span class="line"></span><br><span class="line">restore -C -f boot.bak1.bz2 //注意和最新的文件比较</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827308.png" alt="image-20230719163513000"></p><p>mv /boot/hello100.java /boot/hello.java</p><p>restore -C -f boot.bak1.bz2</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827309.png" alt="image-20230719163618351"></p><p><strong>应用案例2</strong></p><p>restore命令查看模式，看备份文件中有哪些数据/文件</p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restore -t -f boot.bak1.bz2</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827310.png" alt="image-20230719163756410"></p><p><strong>应用案例3</strong></p><p>restore命令还原模式，<code>注意细节</code>：如果你有增量备份，需要把增量备份文件也进行恢复，有几个增量备份文件，就要恢复几个，按顺序来恢复即可。</p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/boottmp</span><br><span class="line"><span class="built_in">cd</span> /opt/boottmp</span><br><span class="line">restore -r -f /opt/boot.bak0.bz2 //恢复到第一次完全备份状态</span><br><span class="line">restore -r -f /opt/boot.bak1.bz2 //恢复到第二次增量备份状态</span><br></pre></td></tr></table></figure><p><strong>应用案例4</strong></p><p>restore命令恢复备份的文件，或者整个目录的文件</p><p>基本语法：restore -r -f 备份好的文件</p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> etctmp</span><br><span class="line"><span class="built_in">cd</span> etctmp/</span><br><span class="line">restore -r -f /opt/etc.bak0.bz2</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Linux基础知识，Shell编程，日志管理，备份与恢复</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="https://windcrain.top/tags/Linux/"/>
    
    <category term="Shell" scheme="https://windcrain.top/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习02</title>
    <link href="https://windcrain.top/post/Linux02/"/>
    <id>https://windcrain.top/post/Linux02/</id>
    <published>2023-07-16T11:37:55.000Z</published>
    <updated>2023-07-22T15:54:30.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组管理和权限管理"><a href="#组管理和权限管理" class="headerlink" title="组管理和权限管理"></a>组管理和权限管理</h1><p>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件有所有者、所在组、其他组的概念。</p><p>1.所有者（谁创建谁就是所有者，但是后续可以修改）</p><p>2.所在组（创建者所属用户组，但后续可以修改）</p><p>3.其他组（除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组）</p><p>4.改变用户所在的组</p><p><br></p><h2 id="文件-目录-所有者"><a href="#文件-目录-所有者" class="headerlink" title="文件/目录 所有者"></a>文件/目录 所有者</h2><p>一般为文件的创建者，谁创建了该文件，就自然地成为该文件的所有者。</p><p><strong>查看文件的所有者</strong></p><p>指令：ls -ahl</p><p><strong>修改文件所有者（ch-ange own-er）</strong></p><p>指令：chown 用户名 文件名</p><p>要求：使用root创建一个文件apple.txt，然后将其所有者修改成tom：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> apple.txt</span><br><span class="line"><span class="built_in">chown</span> tom apple.txt <span class="comment"># tom用户必须存在</span></span><br></pre></td></tr></table></figure><p>注意：改变所有者，所在组不会变</p><p><br></p><h2 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h2><p>基本指令：groupadd 组名</p><p><strong>应用实例</strong></p><p>创建一个组，monster：groupadd monster</p><p>创建一个用户fox，并放入monster组中：useradd -g monster fox</p><p><br></p><h2 id="文件-目录-所在组"><a href="#文件-目录-所在组" class="headerlink" title="文件/目录 所在组"></a>文件/目录 所在组</h2><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组。(默认）</p><p><strong>查看文件/目录所在组</strong></p><p>基本指令：ls -ahl</p><p>应用实例</p><p>使用fox创建一个文件，看看该文件属于哪个组？</p><p>-rw-r–r–. 1 fox monster 0 1月 7 12:50 ok.txt</p><p><strong>修改文件/目录所在的组</strong></p><p>基本指令：chgrp 组名 文件名</p><p>应用实例</p><p>使用root用户创建文件orange.txt，看看当前这个文件属于哪个组，然后将这个文件所在组，修改到fruit组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupadd fruit</span><br><span class="line">touch orange.txt</span><br><span class="line">看看当前这个文件属于哪个组 -&gt; root组</span><br><span class="line">chgrp fruit orange.txt</span><br></pre></td></tr></table></figure><p><br></p><h2 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h2><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的，用root的管理权限可以改变某个用户所在的组。</p><p><strong>改变用户所在组</strong></p><p>1.usermod -g 新组名 用户名</p><p>2.usermod -d 目录名 用户名 改变该用户登录的初始目录（特别说明：用户需要有进入到新目录的权限）</p><p>应用实例</p><p>将zwj这个用户从原来所在组，修改到wudang组：usermod -g wudang zwj</p><p><br></p><h2 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h2><p>ls -l中显示的内容如下：</p><p><img src="D:\typora图片\image-20230713102605434.png" alt="image-20230713102605434"></p><p>第一列一共有10位，分别用0-9表示，下面是0-9位的说明：</p><p>1.第0位确定文件类型（d，-，l，c，b）</p><p>l是链接，相当于windows的快捷方式</p><p>d是目录，相当于windows的文件夹</p><p>-是普通文件</p><p>c是字符设备文件，鼠标，键盘（cd /dev可以看到）</p><p>b是块设备，比如硬盘（cd /dev可以看到）</p><p>2.第1-3位确定所有者（该文件的所有者）拥有该文件的权限。 —User</p><p>3.第4-6位确定所在组（同用户组的）拥有该文件的权限。—Group</p><p>4.第7-9位确定其他用户拥有该文件的权限。—Other</p><p><br></p><h2 id="rwx权限详解-难点）"><a href="#rwx权限详解-难点）" class="headerlink" title="rwx权限详解(难点）"></a>rwx权限详解(难点）</h2><p><strong>rwx作用到文件</strong></p><p>1.[r]代表可读（read）：可以读取，查看</p><p>2.[w]代表可写（write）：可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件</p><p>3.[x]代表可执行（execute）：可以被执行</p><p><strong>rwx作用到目录</strong></p><p>1.[r]代表可读（read）：可以读取，ls查看目录内容</p><p>2.[w]代表可写（write）：可以修改，对目录内创建+删除+重命名目录</p><p>3.[x]代表可执行（execute）：可以进入该目录</p><p><br></p><h2 id="文件及目录权限实际案例"><a href="#文件及目录权限实际案例" class="headerlink" title="文件及目录权限实际案例"></a>文件及目录权限实际案例</h2><p>=ls -l中显示的内容如下：</p><p>-rwxrw-r— 1 root root 1213 Feb 2 09:39 abc</p><ul><li><p>10个字符确定不同用户能对文件干什么</p><p>第一个字符代表文件类型：-代表该文件是普通文件</p><p>其余字符每3个一组（rwx）读（r）写（w）执行（x）</p><p>第一组rwx：文件拥有者的权限是读、写和执行</p><p>第二组rw-：所在组的用户的权限是读、写但不能执行</p><p>第三组r–： 其他组的用户的权限是读不能写和执行</p></li><li><p>可用数字表示：r=4，w=2，x=1，因此rwx=4+2+1=7，数字可以进行组合</p></li><li><p>其他说明</p><p>1 文件：该数一定为1 目录：该数对应子目录数</p><p>root 所有者</p><p>root 所在组</p><p>1213 大小（字节），如果是文件夹，显示4096字节</p><p>Feb 2 09:39 最后修改日期</p><p>abc 文件名</p></li></ul><p><br></p><h2 id="修改权限-chmod"><a href="#修改权限-chmod" class="headerlink" title="修改权限-chmod"></a>修改权限-chmod</h2><p><strong>第一种方式：+、-、=变更权限</strong></p><p>u:所有者 g：所有组 o：其他人 a：所有人（u、g、o的总和）</p><p>1.chmod u=rwx,g=rx,o=x 文件/目录名</p><p>2.chmod o+w 文件/目录名</p><p>3.chmod a-x 文件/目录名</p><p>案例演示</p><p>1.给abc文件的所有者读写执行的权限，给所在组读执行权限，给其他组读执行权限：chmod u=rwx, g=rx,o=rx abc</p><p>2.给abc文件的所有者除去执行的权限，增加组写的权限:chmod u-x g+w abc</p><p>3.给abc文件的所有用户添加读的权限:chmod a+r abc</p><p>注意：当文件可执行的时候，它的颜色会变成绿色</p><p><strong>第二种方式：通过数字变更权限</strong></p><p>r=4 w=2 x=1 rwx=4+2+1=7</p><p>chmod u=rwx,g=rx,o=x 文件目录名 相当于chmod 751 文件目录名</p><p>案例演示</p><p>要求：将/home/abc.txt 文件的权限修改成rwxr-xr-x，使用给数字的方式实现：</p><p>chmod 755 /home/abc.txt</p><p><br></p><h2 id="修改文件所有者-chown"><a href="#修改文件所有者-chown" class="headerlink" title="修改文件所有者-chown"></a>修改文件所有者-chown</h2><p>chown newowner 文件/目录 (功能描述：改变所有者）</p><p>chown newowner:newgroup 文件/目录 （功能描述：改变所有者和所在组）<br>-R 如果是目录，则使其下所有子文件或目录递归生效</p><p>案例演示</p><p>请将/home/abc.txt文件的所有者修改成tom：chown tom /home/abc.txt</p><p>请将/home/test目录下所有的文件和目录的所有者都修改成tom：chown -R tom /home/test</p><p><br></p><h2 id="修改文件-目录所在组-chgrp"><a href="#修改文件-目录所在组-chgrp" class="headerlink" title="修改文件/目录所在组-chgrp"></a>修改文件/目录所在组-chgrp</h2><p>基本介绍</p><p>chgrp newgroup 文件/目录</p><p>案例演示</p><p>请将/home/abc.txt文件的所在组修改成shaolin(少林)：chgrp shaolin /home/abc.txt</p><p>请将/home/test目录下所有的文件和目录的所在组都修改成shaolin（少林）：chgrp -R shaolin /home/test</p><p><br></p><h1 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h1><h2 id="Crond任务调度"><a href="#Crond任务调度" class="headerlink" title="Crond任务调度"></a>Crond任务调度</h2><p>任务调度：是指系统在某个时间执行的特定的<strong>命令</strong>或<strong>程序</strong>。</p><p>任务调度分类：</p><p>1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等</p><p>2.个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份</p><p><strong>基本语法：</strong> crontab [选项]</p><div class="table-container"><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-e</td><td>编辑crontab定时任务</td></tr><tr><td>-l</td><td>查询crontab任务</td></tr><tr><td>-r</td><td>删除当前用户所有的crontab任务</td></tr></tbody></table></div><p>注意</p><p><code>-r</code>  是删除当前用户所有任务，如果只想删除某个任务，使用 <code>-e</code> 进入编辑，删除那行任务或者 <code>#</code> 注释那行任务</p><p>案例</p><p>设置任务调度文件：/etc/crontab</p><p>设置个人任务调度。执行crontab -e命令</p><p>接着输入任务到调度文件</p><p>如：<em>/1 </em> <em> </em> <em> ls -l /etc/ &gt; /tmp/to.txt（注意：</em>之间有空格）</p><p>意思说每小时的每分钟执行ls -l /etc/ &gt; /tmp/to.txt命令</p><p><img src="D:\typora图片\image-20230714145621483.png" alt="image-20230714145621483"></p><p><img src="D:\typora图片\image-20230714145659346.png" alt="image-20230714145659346"></p><p><img src="D:\typora图片\image-20230714145815433.png" alt="image-20230714145815433"></p><p><br></p><h2 id="at定时任务"><a href="#at定时任务" class="headerlink" title="at定时任务"></a>at定时任务</h2><p>1.at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来运行。</p><p>2.默认情况下，atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。</p><p>3.at命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</p><p>4.在使用at命令的时候，一定要保证atd进程的启动，可以使用相关指令来查看</p><p>指令ps -ef（检测当前所有正在运行的进程有哪些）</p><p>指令ps -ef | grep atd （过滤其中的atd相关指令)//可以检测atd是否在运行</p><p><strong>at命令格式：</strong>at [选项] [时间]</p><p>Crtl + D 结束at命令的输入（按两次)</p><p><img src="D:\typora图片\image-20230714152821048.png" alt="image-20230714152821048"></p><p><strong>at时间定义</strong></p><p>at指定时间的方法:</p><p>1.接受在当天的hh:mm(小时：分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。例如：04：00</p><p>2.使用midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午4点）等比较模糊的词语来指定时间。</p><p>3.采用12小时计时制，即在时间后面加上AM（上午）或PM（下午）来说明是上午还是下午。例如：12pm</p><p>4.指定命令执行的具体日期，指定格式为month day（月 日）或mm/dd/yy（月/日/年）或dd.mm.yy（日.月.年），指定的日期必须跟在指定时间的后面。例如：04:00 2021-03-1</p><p>5.使用相对计时法。指定格式为：now + count time-units，now就是当前时间，time-units是时间单位，这里能够使minutes（分钟）、hours（小时）、days（天）、weeks（星期）。count是时间的数量，几天，几小时。例如：now + 5 minutes</p><p>6.直接使用today（今天）、tomorrow（明天）来指定完成命令的时间。</p><p><strong>应用案例</strong></p><p>案例1：2天后的下午5点执行/bin/ls /home</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at 5pm + 2days</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash">/bin/ls /home <span class="comment"># 然后按两次ctrl+D</span></span></span><br></pre></td></tr></table></figure><p>案例2：atq命令来查看系统中没有执行的工作任务：atq</p><p>案例3：明天17点钟，输出时间到指定文件内，比如/root/date100.log</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at 5pm tomorrow</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash"><span class="built_in">date</span> &gt; /root/date100.<span class="built_in">log</span> <span class="comment"># 然后按两次ctrl+D</span></span></span><br></pre></td></tr></table></figure><p>案例4：2分钟后，输出时间到指定文件内，比如/root/date200.log</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at now + 2 minutes</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash"><span class="built_in">date</span> &gt; /root/date200.<span class="built_in">log</span> <span class="comment"># 然后按两次ctrl+D</span></span></span><br></pre></td></tr></table></figure><p>案例5：删除已经设置的任务，atrm 编号（也可以使用at -d 任务编号：来删除设置的任务）</p><p>注意：当出现at&gt;，要输入指令时，退格会失效，要退格，需要使用ctrl+退格</p><p><br></p><h1 id="磁盘分区、挂载"><a href="#磁盘分区、挂载" class="headerlink" title="磁盘分区、挂载"></a>磁盘分区、挂载</h1><h2 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h2><p><strong>原理介绍</strong></p><p>1.Linux来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分。</p><p>2.Linux采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p><p>3.示意图<br><img src="D:\typora图片\image-20230714174037452.png" alt="image-20230714174037452"></p><p><strong>硬盘说明</strong></p><p>1.Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</p><p>2.对于IDE硬盘，驱动器标识符为‘hdx~’，其中’hd‘表明分区所在设备的类型，这里是指IDE硬盘。’x‘为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘），’ ~’代表分区，前四个分区用数字1-4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。例如，hda3表示为前一个IDE硬盘上的第三个主分区或扩展分区，hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。</p><p>3.对于SCSI硬盘则标识为’sdx~‘，SCSI硬盘使用’sd‘来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样。</p><p><img src="D:\typora图片\image-20230714174326670.png" alt="image-20230714174326670"></p><p>上图中，sda表示第一块SCSI硬盘，sda1表示第一块SCSI硬盘的第一个分区</p><p>sr0是光驱</p><p><strong>查看所有设备挂载情况</strong></p><p>命令：lsblk或者lsblk -f （list block的简称）</p><p>lsblk -f可以将分区的情况看的更加清晰</p><p><img src="D:\typora图片\image-20230714174448867.png" alt="image-20230714174448867"></p><p>FSTYPE是文件类型，UUID是当你格式化后，会给你的每一个分区分配一个唯一的不重复的40位的字符串（唯一标识符)，MOUNTPOINT是挂载点</p><p><br></p><h2 id="挂载的经典案例"><a href="#挂载的经典案例" class="headerlink" title="挂载的经典案例"></a>挂载的经典案例</h2><p><strong>如何增加一块硬盘</strong></p><p>1.虚拟机增加硬盘</p><p>2.分区</p><p>3.格式化</p><p>4.挂载</p><p>5.设置可以自动挂载</p><ul><li><p>虚拟机增加硬盘步骤1<br>在[虚拟机]菜单中，选择[设置]，然后设备列表里添加硬盘，然后一路[下一步]，中间只有选择磁盘大小的地方需要修改，直到完成。然后重启系统（才能识别）！</p></li><li><p>虚拟机增加硬盘步骤2<br>分区命令 fdisk /dev/sdb<br>开始对/sdb分区<br>m 显示命令列表<br>p 显示磁盘分区 同 fdisk -l<br>n 新增分区<br>d 删除分区<br>w 写入并退出<br>说明：开始分区后输入n，新增分区，然后选择p，分区类型为主分区。两次回车默认剩余全部空间。最后输入w写入分区并退出，若不保存退出输入q。</p></li><li><p>虚拟机增加硬盘步骤3<br>格式化磁盘<br>分区命令：mkfs [选项] [-t 分区格式] 分区路径，例如mkfs -t ext4 /dev/sdb1 （mkfs是make filesystem的简写）（也可以写成mkfs.ext4 /dev/sdb1)<br>其中ext4是分区类型</p></li><li><p>虚拟机增加磁盘步骤4<br>挂载：将一个分区与一个目录关联起来<br>mount 设备名称 挂载目录<br>例如：mount /dev/sdb1 /newdisk（必须先创建/newdisk目录）<br>卸载：<br>umount 设备名称 或者 挂载目录<br>例如：umount /dev/sdb1 或者 umount /newdisk<br><strong>注意</strong>：用命令行挂载重启后会失效（即这样操作的挂载关系是临时的）</p></li><li><p>虚拟机增加硬盘步骤5<br>永久挂载：通过修改/etc/fstab实现自动挂载（fstab是filesystem table的缩写）</p><p>补充：最后的两个数字：第一个是挂载点内备份，0表示不做dump备份，第二个表示磁盘检查，0表示不检查磁盘扇区，1表示其他目录文件检查，2表示根目录文件检查<br>添加完成后 执行mount -a即刻生效（或者执行reboot也会自动生效）<br>注意：永久挂载前最好保存快照。防止操作失误导致开不了机</p></li></ul><p><br></p><h2 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h2><p><strong>查询系统整体磁盘使用情况</strong></p><p>基本语法：df -h</p><p>应用实例</p><p>查询系统整体磁盘使用情况<br><img src="D:\typora图片\image-20230715151325928.png" alt="image-20230715151325928"></p><p>注意：如果磁盘使用率达到80%以上，就需要想办法清理空间了。</p><p><strong>查看指定目录的磁盘占用情况</strong></p><p>基本语法：du -h /目录</p><p>查询指定目录的磁盘占用情况，不指定则默认查询当前目录</p><p>-s 指定目录占用大小汇总</p><p>-h 带计量单位（人类可读）</p><p>-a 含文件</p><p>–max-depth=1 子目录深度（当前目录的1层子目录也显示）</p><p>-c 列出明细的同时，增加汇总值</p><p>应用案例</p><p>查询/opt目录的磁盘占用情况，深度为1：du -h —max-depth=1</p><p><br></p><h2 id="磁盘情况-工作使用指令"><a href="#磁盘情况-工作使用指令" class="headerlink" title="磁盘情况-工作使用指令"></a>磁盘情况-工作使用指令</h2><p>1.统计/opt文件夹下文件（以-开头）的个数</p><p>第一步：列出/opt目录下的内容：ls -l /opt</p><p>第二步：通过正则表达式‘^-’过滤（因为-开头的是文件类型）：ls -l /opt | grep ‘^-’</p><p>第三步：利用wc指令和-l选项统计行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /opt | grep &#x27;^-&#x27; | wc -l</span><br></pre></td></tr></table></figure><p>补充：</p><p>wc指令(wc就是wordcount的简写)选项：</p><p>-l：计算行数（line）</p><p>-c：计算字节数（character）</p><p>-m：计算字符数（char）</p><p>-w：计算单词数（word）</p><p>2.统计/opt文件夹下目录的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /opt | grep &#x27;^d&#x27; | wc -l</span><br></pre></td></tr></table></figure><p>3.统计/opt文件夹下文件的个数，包括子文件夹里的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /opt | grep &#x27;^-&#x27; | wc -l # 递归查看目录</span><br></pre></td></tr></table></figure><p>4.统计/opt文件夹下目录的个数，包括子文件夹里的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /opt | grep &#x27;^d&#x27; | wc -l # 递归查看目录</span><br></pre></td></tr></table></figure><p>5.以树状显示目录结构：tree 目录</p><p>注意：如果没有tree指令，则使用yum install tree，前提网络是畅通的</p><p><br></p><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><h2 id="网络配置原理图"><a href="#网络配置原理图" class="headerlink" title="网络配置原理图"></a>网络配置原理图</h2><p><img src="D:\typora图片\image-20230715185001874.png" alt="image-20230715185001874"></p><p><br></p><h2 id="linux网络环境配置"><a href="#linux网络环境配置" class="headerlink" title="linux网络环境配置"></a>linux网络环境配置</h2><p><strong>第一种方法（自动获取）：</strong></p><p>说明：登录后，通过界面来设置自动获取ip。</p><p>优点：linux启动后会自动获取IP，避免冲突</p><p>缺点：每次自动获取的ip地址可能不一样</p><p><strong>第二种方法（指定ip）：</strong></p><ul><li>说明<br>直接修改配置文件来指定ip，并可以连接到外网（程序员推荐）</li><li>编辑： <code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>（ens33就是网络设备，更准确地说是网卡）<br>要求：将ip地址配置成静态的：比如：ip地址为192.168.200.130<br><img src="D:\typora图片\image-20230715185907656.png" alt="image-20230715185907656"></li><li>ifcfg-ens33 文件说明</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TYPE=‘Ethernet’                     # 网络类型（通常是Ethenet）</span><br><span class="line">BOOTPROTO=‘dhcp’    # IP的配置方法[none|static|bootp|dhcp]（分别表示引导时不使用协议|静态分配IP|BOOTP协议|DHCP协议）</span><br><span class="line">UUID=<span class="number">926</span>a57ba。。。。。              # 随机id</span><br><span class="line">DEVICE=‘eth0’# 接口名（设备，网卡）</span><br><span class="line">HWADDR=‘<span class="number">00</span>:<span class="number">0</span>C:<span class="number">2</span><span class="keyword">x</span>:<span class="number">0</span><span class="keyword">x</span>:xx’           # MAC地址（这里没有)</span><br><span class="line">ONBOOT=‘yes’# 系统启动时，网络接口是否有效（yes/<span class="keyword">no</span>）</span><br></pre></td></tr></table></figure><p>要将ip地址配置成静态的，需要修改ifcfg-ens33文件，具体地</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要修改BOOTPROTO=‘static’   # 表示静态分配IP</span><br><span class="line">需要添加IPADDR=<span class="number">192.168</span>.<span class="number">200.130</span>    # 表示要固定的IP地址</span><br><span class="line">需要添加GATEWAY=<span class="number">192.168</span>.<span class="number">200.2</span>    # 表示网关</span><br><span class="line">需要添加DNS1=<span class="number">192.168</span>.<span class="number">200.2</span>   # 表示域名解析器</span><br></pre></td></tr></table></figure><p>修改后保存，接下来还需要打开虚拟机的虚拟网络编辑器，找到VMnet8，修改其子网IP为192.168.200.0</p><p>接下来打开NAT设置，修改网关IP为192.168.200.2</p><p>点应用和确定</p><ul><li>重启网络服务或者重启系统生效<br>service network restart # 重启网络服务<br>reboot # 重启系统</li></ul><p>注意：因为修改了虚拟机的ip，所有要在xshell中登录虚拟机，需要修改对应连接的属性中的ip</p><p><br></p><h2 id="设置主机名和hosts映射"><a href="#设置主机名和hosts映射" class="headerlink" title="设置主机名和hosts映射"></a>设置主机名和hosts映射</h2><p><strong>设置主机名</strong></p><p>1.为了方便记忆，可以给linux系统设置主机名，也可以根据需要修改主机名</p><p>2.指令hostname：查看主机名</p><p>3.修改文件在/etc/hostname指定</p><p>4.修改后，重启生效</p><p><strong>设置hosts映射</strong></p><p>思考：如何通过主机名能够找到（比如ping）某个linux系统?</p><ul><li>windows<br>在C:\Windows\System32\drivers\etc\hosts文件指定ip地址和主机名的关系即可<br>案例：192.168.200.130 lmh100</li><li>linux<br>在/etc/hosts 文件指定<br>案例：192.168.200.1 ThinkPad-PC（这个名字其实可以随意，但是ping的时候必须也是这个名称）</li></ul><p><br></p><h2 id="主机名解析过程分析（Hosts、DNS）"><a href="#主机名解析过程分析（Hosts、DNS）" class="headerlink" title="主机名解析过程分析（Hosts、DNS）"></a>主机名解析过程分析（Hosts、DNS）</h2><p><strong>Hosts</strong>是一个文本文件，用来记录IP和Hostname（主机名）的映射关系</p><p><strong>DNS</strong></p><p>1.DNS，就是Domain Name System的缩写，翻译过来就是域名系统</p><p>2.是互联网上作为域名和IP地址相互映射的一个分布式数据库</p><p>应用实例：</p><p>用户在浏览器输入了www.baidu.com</p><p>1.浏览器先检查浏览器缓存中有没有该域名和IP地址的对应关系，有就先调用这个IP完成解析；如果没有找到，就检查操作系统DNS解析器缓存，如果有直接返回IP完成解析。这两个缓存，可以理解为<strong>本地解析器缓存</strong>。</p><p>2.一般来说，当电脑第一次成功访问某一网站后，在一定时间内，浏览器或操作系统会缓存他的IP地址（DNS解析记录)。如在cmd窗口中输入</p><p>ipconfig /displaydns // 可以看到当前操作系统里面的DNS域名解析缓存</p><p>ipconfig /flushdns // 手动清理dns缓存</p><p>3.如果本地解析器缓存没有找到对应映射，检查系统中的hosts文件中有没有配置对应的域名IP映射，如果有，则完成解析并返回。</p><p>4.如果本地DNS解析器缓存和hosts文件中均没有找到对应的IP，则到域名服务DNS（公网的DNS，即分布式数据库）进行解析域</p><p>5.如果还没找到，返回域名不存在的信息</p><p>注意：<br>1.如果是ping 一个域名，则没有浏览器缓存</p><p>2.公网的DNS服务器不是一个服务器，而是分级的（这是为了优化而做的）</p><p>示意图</p><p><img src="D:\typora图片\image-20230715191804156.png" alt="image-20230715191804156"></p><p>补充：</p><p>dns域名劫持：黑客攻击，修改hosts文件，会让域名定向到假网站，（不过现在很多浏览器都有防域名劫持的机制)。</p><p><br></p><h1 id="进程管理（重点）"><a href="#进程管理（重点）" class="headerlink" title="进程管理（重点）"></a>进程管理（重点）</h1><p>1.在Linux中，每个<code>执行的程序</code>都成为一个进程。每一个进程都分配一个ID号(pid，也叫进程号）。<br>补充：程序（静态概念）不运行的时候，就是一段代码。当它加载到内存里时，它才是一个进程（动态概念)。</p><p>2.每个进程都可能以两种方式存在。<code>前台</code>与<code>后台</code>，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行，比如mysql服务。</p><p>3.一般系统的服务都是以后台进程的方式存在，如mysql，tomcat，而且都会常驻在系统中。直到关机才结束。</p><p><br></p><h2 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h2><p>ps命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数。</p><p><img src="D:\typora图片\image-20230716170005169.png" alt="image-20230716170005169"></p><p>一般将-a，-u和-x三个参数同时组合使用。</p><p><img src="D:\typora图片\image-20230716165907670.png" alt="image-20230716165907670"></p><p>USER是指”进程执行用户“</p><p>PID是指”进程号“</p><p>%CPU是指”占用CPU的百分比“</p><p>%MEM是指”占用物理内存百分比“</p><p>VSZ是指”占用虚拟内存大小“</p><p>RSS是指”驻留集合大小，即进程所使用的非交换区物理内存大小“</p><p>TTY是指”终端信息“</p><p>STAT是指”当前运行状态“，S表示sleep（休眠)、r表示正在运行</p><p>START是指”执行的开始时间“</p><p>TIME是指”占用CPU时间“</p><p>COMMAND是指”进程名，也可以理解为执行该进程的指令“</p><p><br></p><p><strong>ps详解</strong></p><p>1.指令：ps -aux | grep xxx，比如想看看有没有sshd服务</p><p>2.指令说明</p><ul><li>System V 展示风格</li><li>USER：用户名称</li><li>PID：进程号</li><li>%CPU：进程占用CPU百分比</li><li>%MEM：进程占用物理内存的百分比</li><li>VSZ：进程占用的虚拟内存大小（单位 ：KB）</li><li>RSS：进程占用的物理内存大小（单位：KB）</li><li>TTY：终端名称，缩写</li><li>STAT：进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等</li><li>STARTED：进程的启动时间</li><li>TIME：CPU时间，即进程使用CPU的总时间</li><li>COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</li></ul><p><strong>应用实例</strong></p><p>要求：以全格式显示当前所有的进程，查看进程的<code>父进程</code>。比如查看sshd的父进程信息：ps -ef | grep sshd</p><p><img src="D:\typora图片\image-20230716170731797.png" alt="image-20230716170731797"></p><p>可以看出，sshd的父进程的PID为1，通过指令ps -aux | more可以看到PID为1的进程为</p><p><img src="D:\typora图片\image-20230716170808364.png" alt="image-20230716170808364"></p><p>ps -ef是以全格式显示当前所有的进程</p><p>-e显示所有进程。-f 全格式</p><p>ps -ef | grep xxx</p><p>是BSD风格</p><p>UID：用户ID</p><p>PID：进程ID</p><p>PPID：父进程ID</p><p>C：CPU用于计算执行优先级的因子。数值越大， 表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高</p><p>STIME：进程启动的时间</p><p>TTY：完整的终端名称</p><p>TIME：CPU时间</p><p>CMD：启动进程所用的命令和参数</p><p><br></p><h2 id="终止进程kill和killall"><a href="#终止进程kill和killall" class="headerlink" title="终止进程kill和killall"></a>终止进程kill和killall</h2><p>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用kill命令来完成此项任务。</p><p><strong>基本语法</strong></p><p>kill [选项] 进程号（功能描述：通过进程号终止进程）</p><p>killall 进程名称 （功能描述：通过进程名称终止进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</p><p>补充：</p><p>1.通过kill只会终止父进程，其子进程会交给1号进程接管。</p><p>2.通过killall终止进程，会将该进程下面的所有子进程也一并终止。</p><p><strong>常用选项</strong></p><p>-9：表示强迫进程立即停止（因为在有些情况下，系统处于保护机制，它会忽略kill指令，但是带-9会强制终止进程）</p><p><strong>应用案例</strong></p><p>案例1：踢掉某个非法登录用户：kill 对应进程号，比如kill 11421</p><p>案例2：终止远程登录服务sshd，在适当时候再次启动sshd服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill sshd对应的进程号</span><br><span class="line">/bin/systemctl start sshd.service # 再次重启sshd服务</span><br></pre></td></tr></table></figure><p>案例3：终止多个gedit，演示killall：killall gedit</p><p>案例4：<code>强制</code>杀掉一个终端</p><p>kill 5480，没有反应。因为该终端正在工作，认为你可能是误操作。此时要终止必须要强制终止：kill -9 5480</p><p><br></p><h2 id="查看进程树pstree"><a href="#查看进程树pstree" class="headerlink" title="查看进程树pstree"></a>查看进程树pstree</h2><p><strong>基本语法</strong></p><p>pstree [选项] [进程号]，可以更加直观的来看进程信息，不写进程号，默认查看进程为1的进程树</p><p><strong>常用选项</strong></p><p>-p：显示进程的PID</p><p>-u：显示进程的所属用户</p><p><strong>应用实例：</strong></p><p>案例1：请以树状的形式显示进程pid：pstree -p （进程号）</p><p>案例2：请以树状的形式显示进程的用户：pstree -u</p><p><br></p><h2 id="服务（service）管理"><a href="#服务（service）管理" class="headerlink" title="服务（service）管理"></a>服务（service）管理</h2><p>服务（service）本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其他程序的请求，比如（mysqld，sshd，防火墙等），因此我们又称为守护进程，是Linux中非常重要的知识点。下图为原理图。</p><p><img src="D:\typora图片\image-20230716172920953.png" alt="image-20230716172920953"></p><p>补充：<br>1.SSHD，就是远程登陆服务，是通过SSH来登陆的。最后的一个符号D其实是daemon的简写，表示后台程序/守护进程/服务</p><p><strong>service管理指令</strong></p><p>1.service 服务名 [start | stop | restart | reload | status]</p><p>2.在CentOS7.0后，很多服务不再使用service，而是systemctl</p><p>3.在CentOS7.0后，被service指令管理的服务在/etc/init.d/查看（注意，必须最后带/）</p><p><strong>查看服务名：</strong></p><p>方式1：使用setup -&gt; 系统服务 就可以看到全部：setup</p><p>下图中打星号的表示会随着linux的启动，自动启动。没有带星号的则需要手动启动。</p><p>将光标移动到某一个服务上，按空格，可以将自动启动的服务改为需要手动启动，即可以去掉星号。</p><p>按tab可以切换选择框。</p><p><img src="D:\typora图片\image-20230716173557061.png" alt="image-20230716173557061"></p><p>方式2：/etc/init.d 看到service指令管理的服务：ls -l /etc/init.d</p><p><strong>服务的运行级别（runlevel）：</strong></p><p>Linux系统中有7种运行级别（runlevel）：<strong><font color="red">常用的是级别3和5</font></strong></p><p>运行级别0：系统停机状态（一旦启动马上关机），系统默认运行级别不能设为0，否则不能正常启动</p><p>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登录</p><p>运行级别2：多用户状态（没有NFS），不支持网络</p><p>运行级别3：完全的多用户状态（有NFS），无界面，登录后进入控制台命令行模式</p><p>运行级别4：系统未使用，保留</p><p>运行级别5：X11控制台，登录后进入图形GUI模式</p><p>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><p>开机的流程说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开机-&gt;BIOS-&gt;/boot-&gt;systemd进程1-&gt;运行级别-&gt;运行级对应的服务</span><br></pre></td></tr></table></figure><p><strong>CentOS7后运行级别说明</strong></p><p>在/etc/inittab中进行了简化，如下：</p><p>multi-user.target: analogous to runlevel 3</p><p>graphical.target: analogous to runlevel 5</p><p># To view current default target, run:</p><p>systemctl get-default</p><p># To set a default target, run:</p><p>systemctl set-default TARGET.target</p><p><strong>chkconfig指令</strong></p><p>1.通过chkconfig命令可以给服务的各个运行级别设置自启动/关闭</p><p>2.chkconfig指令管理的服务在/etc/init.d查看</p><p>3.注意：Centos7.0后，很多服务使用systemctl管理</p><p>chkconfig基本语法</p><ul><li><p>查看服务chkconfig —list [|grep xxx] (–list可加可不加）</p><p><img src="D:\typora图片\image-20230716175223326.png" alt="image-20230716175223326"></p><p>注意：sysv和systemd都是管理进程启动或关闭的程序，sysv启动服务慢，systemd启动服务快</p></li><li><p>chkconfig 服务名 —list</p></li><li>chkconfig —level 5 服务名 on/off：用这条指令可以设置某一个服务在某一个运行级别是自启动或者关闭自启动</li></ul><p>案例演示：对network 服务 进行各种操作，把network在3这个级别关闭自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 3 network off</span><br><span class="line">chkconfig --level 3 network on</span><br></pre></td></tr></table></figure><p>使用细节<br>chkconfig重新设置服务后自启动或关闭，需要重启机器reboot生效。</p><p><strong>systemctl管理指令</strong></p><p>1.基本语法：systemctl [start | stop | restart | status] 服务名</p><p>2.systemctl指令管理的服务在/usr/lib/systemd/system查看</p><p><strong>systemctl设置服务的自启动状态</strong></p><p>1.systemctl list-unit-files [| grep 服务名] （查看服务开机启动状态，grep可以进行过滤）</p><p>2.systemctl enable 服务名（设置服务开机启动）</p><p>3.systemctl disable 服务名（关闭服务开机启动）</p><p>4.systemctl is-enabled 服务名（查询某个服务是否是自启动的）</p><p><strong>应用案例：</strong></p><p>查看当前防火墙的状况，关闭防火墙和重启防火墙。</p><p>查看防火墙服务开机启动状态：systemctl list-unit-files | grep firewalld（.service可带可不带）</p><p>查看防火墙的状态：systemctl status firewalld</p><p>关闭防火墙：systemctl stop firewalld</p><p>重启防火墙：systemctl start firewalld</p><p>注意：</p><p>1.防火墙的服务名可以通过过滤查看/usr/lib/systemd/system文件来获得</p><p>2.static状态表示该服务与其他服务相关联，不能单独设置该服务的启动状态</p><p>3.与前面的chkconfig —level x 服务名 on/off不同的是，systemctl enable/disable 服务名的指令不需要带level，这是因为centos7.0以后，通过systemctl开启和关闭服务，默认是对级别3和5做操作，都生效。</p><p><strong>细节讨论：</strong></p><p>1.关闭或者启用防火墙后，立即生效。[<code>telnet</code>测试 某个端口即可]</p><p>可以通过<code>netstat -anp | more</code>指令查看网络状态</p><p>测试：telnet 192.168.200.130 111</p><p><img src="D:\typora图片\image-20230716180758053.png" alt="image-20230716180758053"></p><p>无法连接，说明防火墙是启动的，并且没有把111端口打开。</p><p>当关闭防火墙后，再测试连接端口，则可以通过。</p><p>补充：</p><p>防火墙基本原理：可以认为系统在监听端口前面加了一个防火墙，当一个请求来的时候，如果相应端口是放开的，则请求可以通过，否则不通过。防火墙可以理解为筛子，通过预先设置的大小，来过滤掉不符合尺寸的服务。</p><p>开启telnet命令需要：依次点击‘开始’-&gt;“控制面板”-&gt;“程序”-&gt;“在程序和功能”找到并点击“启用或关闭windows功能”进入windows系统功能设置对话框。找到并勾选“Telnet客户端”和“Telnet服务器”</p><p>这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。</p><p>如果希望设置某个服务自启动或关闭永久生效，要使用systemctl [enable|disable] 服务名。</p><p><strong>打开或者关闭指定端口</strong></p><p>在真正的生产环境，往往需要将防火墙打开，但问题来了，如果我们把防火墙打开，那么外部请求数据包就不能跟服务器监听端口通讯。这时，需要打开指定的端口。</p><p><strong>firewall指令</strong></p><p>打开端口：firewall-cmd —permanent —add-port=端口号/协议</p><p>关闭端口：firewall-cmd —permanent —remove-port=端口号/协议</p><p>重新载入，才能生效：firewall-cmd —reload</p><p>查询端口是否开放：firewall-cmd —query-port=端口/协议</p><p>补充：要知道对应端口的协议是什么，可以使用<code>netstat -anp</code>指令查看</p><p><strong>应用案例：</strong></p><p>1.启用防火墙，测试111端口是否能telnet，答案是不行：通过firewall-cmd —query-port=111/tcp可以发现111端口是未开放的 <code>no</code></p><p>2.开放111端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=111/tcp</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --query-port=111/tcp</span><br></pre></td></tr></table></figure><p>3.再次关闭111端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-port=111/tcp</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --query-port=111/tcp</span><br></pre></td></tr></table></figure><p><br></p><h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><p>top与ps命令很相似。它们都用来显示正在执行的进程。top与ps最大的不同之处，在于top指令可以每隔一段时间就更新正在运行的进程。</p><p><strong>基本语法：</strong> top [选项]</p><p><strong>选项说明：</strong></p><p><img src="D:\typora图片\image-20230716182051759.png" alt="image-20230716182051759"></p><p>执行top指令：<br><img src="D:\typora图片\image-20230716182221502.png" alt="image-20230716182221502"></p><p>说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">20：10：57 <span class="comment"># 当前时间</span></span><br><span class="line">4：47      <span class="comment"># 系统执行时间</span></span><br><span class="line">2 <span class="built_in">users</span>     <span class="comment"># 目前在线的用户数</span></span><br><span class="line">load average：0.00, 0.01, 0.05<span class="comment">#负载均衡：这三个值加起来除以3，如果在0.7以上，则负载较大，在0.7以下，则负载还行。</span></span><br><span class="line">Tasks: 185 total,   1 running, 184 sleeping,   0 stopped,   0 zombie <span class="comment"># 任务数，1个正在运行，231个休眠，0个终止，0个僵死</span></span><br><span class="line">%Cpu(s):  1.3 us,  5.1 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st <span class="comment"># us用户占用cpu；sy系统占用cpu；id空闲cpu比例</span></span><br><span class="line">KiB Mem :  2027892 total,   998752 free,   567012 used,   462128 buff/cache <span class="comment"># 共2G内存，大约1G空闲，用了0.5G，缓存占用0.5G</span></span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  1282572 avail Mem <span class="comment"># swap分区，共2G，大约2G空闲，使用0个，可获取的内存1G多</span></span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p>注意：这些单位可以按E或e切换，切换为KB/MB/GB/EB/PB。</p><p><strong>交互操作说明：</strong></p><p><img src="D:\typora图片\image-20230716182820644.png" alt="image-20230716182820644"></p><p><strong>应用实例</strong></p><p>案例1.监控特定用户，比如我们监控tom用户</p><p>top：输入此命令，按回车键，查看执行的进程。</p><p>u：然后输入“u”回车，再输入用户名tom，按回车键，即可</p><p>案例2：终止指定的进程，比如我们要结束tom登录</p><p>top：输入此命令，按回车键，查看执行的进程。</p><p>k：然后输入“k”回车，再输入要结束的进程ID号，按回车。此时一般会提示要输入信号量，输入9表示强制删除。</p><p>案例3：指定系统状态更新的时间（每隔10秒自动更新），默认是3秒：top -d 10</p><p><br></p><h2 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h2><p><strong>查看系统网络情况netstat</strong></p><p>基本语法：netstat [选项]</p><p><strong>选项说明</strong><br>-an 按一定顺序排列输出</p><p>-p 显示哪个进程在调用</p><p><img src="D:\typora图片\image-20230716183702368.png" alt="image-20230716183702368"></p><p>说明：</p><p>proto：网络协议</p><p>Local Address：本地地址（是指linux地址)，如0.0.0.0:22：指有一个程序在本地监听22号端口</p><p>Foreign Address：外部地址</p><p>State：LISTEN表示监听，ESTABLISHED表示连接建立，TIME_WAIT表示超时等待</p><p>补充：<br>（1）0.0.0.0表示本地地址，127.0.0.1也是本地，：：：三个冒号是ipv6的形式显示的本地地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>这两条说明22号端口既可以接受ipv4的地址连接，也可以接受ipv6的地址连接</p><p>（2）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp        0     36 192.168.200.130:22      192.168.200.1:55605     ESTABLISHED</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>这条ESTABLISHED表示连接成功（建立连接）了，其中<code>192.168.200.130</code>是linux的本地地址，与外部地址<code>192.168.200.1</code>的55605端口发生连接</p><p>（3）只要要建立通信，必须要有端口，发送端端口是随机产生的，接收端端口相对是固定的。</p><p>（4）当tcp协议的一方断开连接时，另一方会认为可能是网络临时有问题，所以会等待，直到超时（一般是一分钟或者更久），此时状态是TIME_WAIT。</p><p><strong>应用案例</strong></p><p>请查看服务名为sshd的服务的信息：netstat -anp | grep sshd</p><p><strong>检测主机连接命令ping：</strong></p><p>是一种网络检测工具，它主要是用来检测远程主机是否正常，或是两部主机间的网线或网卡故障。</p><p>如：ping 对方ip地址</p><p><br></p><h1 id="RPM与YUM"><a href="#RPM与YUM" class="headerlink" title="RPM与YUM"></a>RPM与YUM</h1><h2 id="rpm包的管理"><a href="#rpm包的管理" class="headerlink" title="rpm包的管理"></a>rpm包的管理</h2><p>rpm用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成具有.RPM扩展名的文件。RPM是RedHat Package Manager（RedHat软件包管理工具）的缩写，类似windows的setup.exe，这一文件格式名称虽然打上了RedHat的标志，但理念是通用的。</p><p>Linux的分发版本都有采用（suse，redhat，centos等等），可以算是公认的行业标准了。</p><p><strong>rpm包的简单查询指令</strong></p><p>查询已安装的rpm列表 rpm -qa | grep xx</p><p>举例：看看当前系统，是否安装了firefox：rpm -qa | grep firefox</p><p><strong>rpm包名基本格式</strong></p><p>一个rpm包名：<code>firefox-68.10.0-1.el7.centos.x86_64</code></p><p>名称：firefox</p><p>版本号：68.10.0-1</p><p>适用操作系统：el7.centos.x86_64表示centos7.x的64位系统，如果是i686、i386表示32位系统，noarch表示通用</p><p><strong>rpm包的其他查询指令：</strong></p><p>rpm - qa：查询所安装的所有rpm软件包（query all）</p><p>rpm -q 软件包名：查询指定软件包是否安装</p><p>案例：rpm -q firefox</p><p>rpm -qi 软件包名：查询软件包信息</p><p>案例：rpm -qi firefox</p><p>rpm -ql 软件包名：查询软件包中的文件</p><p>比如：rpm -ql firefox</p><p>rpm -qf 文件全路径名 查询文件所属的软件包</p><p>rpm -qf /etc/passwd</p><p><strong>卸载rpm包：</strong></p><p>基本语法</p><p>rpm -e RPM包的名称（e表示单词erase）</p><p>应用案例</p><p>删除firefox 软件包：rpm -e firefox</p><p>细节讨论</p><p>1.如果其他软件包依赖于您要卸载的软件包，卸载时则会产生错误信息。<br>如：</p><p>$ rpm -e foo<br>removing these packages would break dependencies: foo is needed by bar-1.0-1<br>2.如果我们就是要删除foo这个rpm包，可以增加参数–nodeps，就可以强制删除，但是一般不推荐这样做，因为依赖于该软件包的程序可能无法运行<br>如：$ rpm -e —nodeps foo</p><p><strong>安装rpm包</strong></p><p>基本语法</p><p>rpm -ivh RPM包全路径名称</p><p>参数说明</p><p>i=install 安装</p><p>v=verbose提示</p><p>h=hash进度条</p><p>应用实例</p><p>演示卸载和安装firefox浏览器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -e firefox <span class="comment"># 卸载firefox浏览器</span></span><br><span class="line">rpm -ivh /opt/firefox-68.10.0-1.el7.centos.x86_64.rpm <span class="comment"># 先将安装包放在/opt目录下</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><p>Yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p><p><strong>yum的基本指令</strong></p><p>查询yum服务器是否有需要安装的软件</p><p>yum list | grep xx软件列表</p><p><strong>安装指定的yum包</strong></p><p>yum install xxx 下载安装</p><p><strong>yum应用实例：</strong></p><p>案例：请使用yum的方式来安装firefox</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -e firefox <span class="comment"># 先卸载firefox</span></span><br><span class="line">yum list | grep firefox <span class="comment"># 如果有多个版本，都会显示出来</span></span><br><span class="line">yum install firefox</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Linux基础知识，组管理，权限管理，定时任务调度，磁盘，网络配置，进程管理，rpm，yum</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="https://windcrain.top/tags/Linux/"/>
    
    <category term="CentOS" scheme="https://windcrain.top/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习01</title>
    <link href="https://windcrain.top/post/Linux01/"/>
    <id>https://windcrain.top/post/Linux01/</id>
    <published>2023-07-12T10:30:55.000Z</published>
    <updated>2023-07-22T15:54:30.361Z</updated>
    
    <content type="html"><![CDATA[<p>Linux是一个强大、灵活且广泛使用的操作系统内核，它为用户提供了稳定性、安全性和自由度，成为了许多领域的首选操作系统。</p><h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li>linux的文件系统是采用级层式的树状目录机构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的目录。</li><li>深刻理解linux树状文件目录是非常重要的。(框架需要背)</li><li>记住一句经典的话：<strong>在Linux世界里，一切皆文件</strong>。(linux会将硬件映射成文件来进行管理)</li></ol><p><br></p><h2 id="具体的目录结构"><a href="#具体的目录结构" class="headerlink" title="具体的目录结构"></a>具体的目录结构</h2><ul><li>/bin [常用] (/usr/bin、/usr/local/bin)：<br>是Binary的缩写，这个目录存放着最经常使用的指令，如cd指令。</li><li>/sbin (/usr/sbin、/usr/local/sbin)：<br>s是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li>/home [常用]：<br>存放普通用户的根目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名。可以在终端用下面命令创建和删除linux用户：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd jack <span class="comment"># 创建名为jack的用户，同时在/home目录下会创建jack目录</span></span><br><span class="line">userdel -r jack <span class="comment"># 移除jack用户，同时在/home目录下会移除jack目录</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><ul><li>/root [常用]：<br>该目录为系统管理员，也称作超级权限者的用户主目录</li><li>/lib：系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</li><li>/lost+found这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件(lost+found目录一般是隐藏的，通过在终端，在根目录输入ls可以查看到)</li><li>/etc [常用]：所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库，则数据库的配置文件会默认放在etc下面。当然etc也有系统的一些配置文件。</li><li>/usr [常用]: 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录(windows下安装的程序默认的目录)。</li><li>/boot [常用]：存放的是启动Linux时的一些核心文件，包括一些连接文件以及镜像文件。</li><li>/proc [不能动]：这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。</li><li>/srv [不能动]: service缩写，该目录存放一些服务启动之后需要提取的数据。</li><li>/sys [不能动]: 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs。</li><li>/tmp: 这个目录是用来存放一些临时文件的。</li><li>/dev：类似于windows的设备管理器，把所有的硬件用文件的形式存储，如cpu，硬盘等</li><li>/media [常用]：linux系统会自动识别一些设备，如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li>/mnt [常用]：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里面的内容了。如共享文件夹。</li><li>/opt：这是给主机额外安装软件所存放的目录。如安装ORACLE数据库就可以放到该目录下。默认为空。</li><li>/usr/local [常用]：这是另一个给主机额外安装软件安装的目录。(软件安装好存放的目录)一般是通过编译源码方式安装的程序。</li><li>/var [常用]：这个目录中存放着不断扩充着的东西，习惯将经常被修改的目录放在该目录下。包括各种日志文件。</li><li>/selinux [security-enhanced linux]: SELinux是一种安全子系统，它能控制程序只访问呢特定文件，有三种工作模式，可自行设置。</li></ul><p><br></p><h1 id="远程登录到Linux服务器"><a href="#远程登录到Linux服务器" class="headerlink" title="远程登录到Linux服务器"></a>远程登录到Linux服务器</h1><h2 id="远程登陆Linux-Xshell7"><a href="#远程登陆Linux-Xshell7" class="headerlink" title="远程登陆Linux-Xshell7"></a>远程登陆Linux-Xshell7</h2><ol><li>Xshell是目前最好的远程登录到Linux操作系统的软件，流畅的速度并且完美解决了中文乱码的问题，是目前程序员首选的软件。</li><li>Xshell是一个强大的安全终端模拟软件，它支持SSH1，SSH2，以及Microsoft Windows平台的TELNET协议。</li><li>Xshell可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。</li></ol><p>xshell7的下载地址：<a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a></p><p><br></p><h2 id="远程上传下载文件-Xftp7"><a href="#远程上传下载文件-Xftp7" class="headerlink" title="远程上传下载文件-Xftp7"></a>远程上传下载文件-Xftp7</h2><p>Xftp7是一个基于windows平台的功能强大的SFTP、FTP文件传输软件。使用Xftp以后，windows用户能安全地在UNIX/Linux的和Windows PC之间传输文件。</p><p>如何处理Xftp中文乱码问题？<br>答：点击文件-当前会话属性-选项，在编码方式中选择UTF-8则可以处理乱码问题。</p><p><br></p><h1 id="Vi和Vim编辑器"><a href="#Vi和Vim编辑器" class="headerlink" title="Vi和Vim编辑器"></a>Vi和Vim编辑器</h1><p>Linux系统会内置vi文本编辑器。</p><p>Vim具有程序编程的能力，可以看作是Vi的增强版本，可以主动地以字体颜色辨别语法的正确性，方便程序设计。代码补全、编译及错误跳转等方便编程的功能特别丰富，再程序员中被广泛使用。</p><h2 id="vi和vim常用的三种模式"><a href="#vi和vim常用的三种模式" class="headerlink" title="vi和vim常用的三种模式"></a>vi和vim常用的三种模式</h2><p><strong>正常模式：</strong></p><p>以vim打开一个档案就直接进入一般模式(默认模式)。在这个模式中，你可以使用[上下左右]按键来移动光标，你可以使用[删除字符]或[删除整行]来处理档案内容，也可以使用[复制、粘贴]来处理你的文件数据。</p><p><strong>插入模式：</strong></p><p>按下i，I，o，O，a，A，r，R等任何一个字母之后才会进入编辑模式，一般来说按i即可。</p><p><strong>命令行模式：</strong></p><p>先输入esc，再输入冒号”:”或“/”，就能切换到命令行模式。在这个模式中，可以提供你相关指令，完成读取、写入(w)、替换、离开vim(q)、显示行号、写入并退出(wq)等动作。</p><p><strong>各种模式的相互切换</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307121822288.png" alt="image-20230712101906055"></p><p><br></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ol><li>拷贝当前行：在一般模式下输入yy ；拷贝当前行向下的5行：在一般模式下输入5yy ；并粘贴(输入p)</li><li>删除当前行：在一般模式下输入dd ；删除当前行向下的5行：在一般模式下输入5dd</li><li>在文件中查找某个单词：在命令行模式下输入“/单词”，回车就会对单词进行查找，输入n就是查找下一个</li><li>设置文件的行号，取消文件的行号：在命令行模式下，输入“:set nu”和“:set nonu”</li><li>编辑/etc/profile文件，在一般模式下，使用快捷键到该文档的最末行[G]和最首行[gg]</li><li>在一个文件中输入“hello”，然后又撤销这个动作：在一般模式下，输入“u”</li><li>编辑/etc/profile文件，并将光标移动到20行：在一般模式下，输入“20“再输入”shift+g”</li></ol><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307121822290.gif" alt="vi-vim-cheat-sheet-sch1"></p><p><br></p><h1 id="开机、重启和用户登录注销"><a href="#开机、重启和用户登录注销" class="headerlink" title="开机、重启和用户登录注销"></a>开机、重启和用户登录注销</h1><h2 id="关机-amp-重启命令"><a href="#关机-amp-重启命令" class="headerlink" title="关机&amp;重启命令"></a>关机&amp;重启命令</h2><ul><li>shutdown -h now ： 立刻进行关机</li><li>shutdown -h 1 “hello, 1分钟后会关机了” ：在终端提示“hello，1分钟后会关机了”，并且在1分钟后关机</li><li>shutdown -r now ： 现在重新启动计算机</li><li>halt ：关机，作用和上面一样</li><li>reboot ：现在重新启动计算机</li><li>sync ：把内存的数据同步到磁盘</li></ul><p>注意：</p><p>1.不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</p><p>2.目前的shutdown/reboot/halt等命令均已经在关机前进行了sync</p><p><br></p><h2 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h2><p>1.登录时尽量少用root账号登录，因为它是系统管理员，最大的权限，要避免使用它导致误操作。可以利用普通用户登录，然后登陆后再用‘su - 用户名’命令来切换成系统管理员身份。</p><p>2.在提示符下输入logout即可注销用户</p><p>3.logout注销指令在图形运行级别（如终端）无效，在运行级别3（如xshell登录）下有效</p><p><br></p><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p><strong>基本语法</strong></p><p>useradd 用户名</p><p><strong>应用案例</strong></p><p>案例1：添加一个用户milan，默认该用户的家目录在/home/milan(登录该用户后会默认切换到其家目录)</p><p><strong>说明</strong></p><p>1.当创建用户成功后，会自动创建和用户同名的家目录</p><p>2.也可以通过useradd -d 指定目录 新的用户名，给新创建的用户指定家目录</p><p><br></p><h2 id="指定-修改密码"><a href="#指定-修改密码" class="headerlink" title="指定/修改密码"></a>指定/修改密码</h2><p><strong>基本语法</strong></p><p>passwd 用户名</p><p>注意：如果不写用户名，则只会给当前用户修改密码</p><p><strong>应用案例</strong></p><p>给milan 指定密码：passwd milan</p><p>pwd命令（print working directory）：显示当前所在的工作目录</p><p><br></p><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p><strong>基本语法</strong></p><p>userdel 用户名</p><p><strong>应用案例</strong></p><p>1.删除用户milna，但是要保留家目录：userdel milan</p><p>2.删除用户以及用户家目录，比如tom：userdel -r tom</p><p><br></p><h2 id="查询用户信息指令"><a href="#查询用户信息指令" class="headerlink" title="查询用户信息指令"></a>查询用户信息指令</h2><p><strong>基本语法</strong></p><p>id 用户名</p><p><strong>细节说明</strong></p><p>当用户不存在时，返回无此用户</p><p><br></p><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><p>在操作LInux中，如果当前用户的权限不够，可以通过su - 指令，切换到高权限用户，比如root</p><p><strong>基本语法</strong></p><p>su - 切换用户名</p><p>或su 切换用户名</p><p>注意：su root，只是临时切换到root用户，切换后环境变量不变，取得root的部分权限，不能使用root在path中的独有命令；su - root切换后环境变量改变，几乎可以不受限制做任何事</p><p><strong>细节说明</strong></p><p>1.从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p><p>2.当需要返回到原来用户时，使用exit/logout指令</p><p>3.也可以使用“su 切换用户名”来切换用户，但这样登录不是通过shell登录，不能通过logout注销，只能通过exit退出登录</p><p><br></p><h2 id="查看当前用户-登录用户"><a href="#查看当前用户-登录用户" class="headerlink" title="查看当前用户/登录用户"></a>查看当前用户/登录用户</h2><p><strong>基本语法</strong></p><p>whoami/ who am i</p><p>注意：</p><p>1.whoami只显示当前使用的身份(切换后身份会变)，显示的信息少，只显示用户名</p><p>2.who am i显示的是最初登录的身份，无论后面切换了多少次用户都一样，显示的信息多，还会显示登录时间</p><p><br></p><h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><p>类似于角色，系统可以对有共性（权限）的多个用户进行统一的管理</p><p><strong>新增组</strong></p><p>指令：groupadd 组名</p><p><strong>删除组</strong></p><p>指令（基本语法）：groupdel 组名</p><p><strong>增加用户时直接加上组</strong></p><p>指令（基本语法）：useradd -g 用户组 用户名</p><ul><li>案例演示<br>增加一个用户 zwj， 直接将他指定到wudang<br>（前面我们使用useradd 用户名 新增用户时，没有分配组，系统会默认分配该用户到用户名同名的组中去）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd wudang</span><br><span class="line">useradd -g wudang zwj</span><br></pre></td></tr></table></figure><p><strong>修改用户的组</strong></p><p>指令（基本语法）：usermod -g 用户组 用户名</p><ul><li>案例演示<br>创建一个组 mojiao<br>把zwj放入到mojiao</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd mojiao</span><br><span class="line">usermod -g mojiao zwj</span><br></pre></td></tr></table></figure><p><br></p><h2 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h2><p><strong>/etc/passwd文件</strong></p><p>用户（user）的配置文件，记录用户的各种信息</p><p>每行的含义：用户名：口令：用户标识号（uid）：组标识号（gid）：注释性描述：主目录（家目录）：登录Shell</p><p>cd指令，linux内核无法识别，要通过shell翻译解释，而shell的种类很多，有bash，tcsh，csh等等</p><p><strong>/etc/shadow文件</strong></p><p>口令的配置文件</p><p>每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</p><p>注意：</p><p>1.每次输入的口令，会在shadow文件中验证</p><p>2.最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志都是用一种特殊的标识表示的</p><p><strong>/etc/group文件</strong></p><p>组（group）的配置文件，记录Linux包含的组的信息</p><p>每行含义：组名：口令：组标识号：组内用户列表</p><p>注意：组内用户列表看不到，它隐藏了</p><p><br></p><h1 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h1><h2 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h2><p>基本级别说明：</p><p>0：关机</p><p>1：单用户【找回丢失密码】</p><p>2：多用户状态没有网络服务（用的很少）</p><p>3：多用户状态有网络服务（用的最多的，不带图形界面，节省资源；支持多用户且有网络服务-在实际生产环境中使用最多）</p><p>4：系统未使用保留给用户（用的比较少）</p><p>5：图形界面（启动后默认进入的级别，是多用户的）</p><p>6：系统重启</p><p>常用运行级别是3和5，也可以指定默认运行级别，后面演示</p><p><strong>应用实例</strong></p><p>命令：init [0123456]</p><p>应用案例：通过init来切换不同的运行级别，比如修改级别为3：则命令为init 3</p><p><br></p><p><strong>CentOS7运行级别说明</strong></p><p>在centos7以前，我们是在/etc/inittab文件中进行修改，它里面有个数字。</p><p>到了centos7，进行了简化，在/etc/inittab文件中有如下：</p><p>multi-user.target：analogous to runlevel 3 (多用户，等价于级别3)</p><p>graphical.target：analogous to runlevel 5 (图形化，等价于级别5)</p><p><code>#</code> To view current default target, run:（以下指令可以查看当前运行级别）<br>systemctl get-default</p><p><code>#</code> To set a default target, run:（以下指令可以设置默认运行级别）<br>systemctl set-default TARGET.target</p><p><br></p><h2 id="找回root密码"><a href="#找回root密码" class="headerlink" title="找回root密码"></a>找回root密码</h2><p>注意：不同版本找回密码的方式可能有一些小区别</p><p>1.首先，启动系统，进入开机界面，在界面中按”e“进入编辑界面。</p><p>2.进入编辑界面，使用键盘的上下键将光标往下移动，找到以”Linux16“开头内容所在的行数，在行的最后面输入：init=/bin/sh。</p><p>3.接着，输入完成后，直接按快捷键：Ctrl+x进入单用户模式。</p><p>4.接着，在光标闪烁的位置中输入：mount -o remount,rw / （注意：各个单词间有空格），完成后按键盘的回车键.</p><p>5.在新的一行最后面输入：passwd，完成后按键盘的回车键(Enter)。输入密码，然后再次确认密码即可（密码长度最好是8位以上，但不是必须的），密码修改成功后，会显示passwd。。。的样式，说明密码修改成功。</p><p>6.接着，在光标闪烁的位置中(最后一行中)输入：touch /.autorelabel（注意：touch与 /之间有一个空格），完成后按键盘的回车键（Enter）。</p><p>7.继续在光标闪烁的位置中，输入：exec /sbin/init（注意： exec与 /之间有一个空格），完成后按键盘的回车键（Enter），等待系统自动修改密码（这个过程时间可能有点长，耐心等待)，完成后，系统会自动重启，新的密码生效了。</p><p><br></p><h2 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h2><p><strong>man获取帮助信息</strong></p><p>基本语法：man[命令或配置文件] （功能描述：获取帮助信息）</p><p>查看ls命令的帮助信息：man ls</p><p>注意：</p><p>1.如果帮助信息太长，没有显示完全，那么按空格键，会继续往下显示。</p><p>2.ls中常用的选项-a：列出所有文件，包括以”.“开头的隐含文件（在linux中，隐含文件是以”.“开头的，a代表all）。-l：单行输出。</p><p>3.按h寻求man指令的帮助，按q退出man指令。</p><p>4.选项可以组合使用，如-la（顺序无所谓，也可以是-al），则表示单行输出，且包含所有隐藏文件，如 ls -al /root</p><p>5.ls -al默认是查看当前目录的，如果要查看root目录下的文件，则可以用ls -al /root</p><p><strong>help指令</strong></p><p>基本语法：help命令（功能描述：获得shell内置命令的帮助信息）</p><p>注意：</p><p>help命令只能显示shell内置命令的帮助信息，而linux系统中绝大多数命令是外部命令。而通过man命令查看其它命令的详细文档。没有内建与外部命令的区分，因为 man 工具是显示系统手册页中的内容，man 得到的内容比 help 更多更详细。</p><p>查看shell内置的cd命令的帮助信息: help cd</p><p><br></p><h2 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h2><p><strong>pwd指令</strong></p><p>基本语法：pwd （功能描述：显示当前工作目录的绝对路径）</p><p><strong>ls指令</strong></p><p>基本语法：ls [选项] [目录或是文件]</p><p>常用选项</p><p>-a：显示当前目录所有的文件和目录，包括隐藏的</p><p>-l：以列表的方式显示信息</p><p><strong>cd指令</strong></p><p>基本语法：cd[参数] (功能描述：切换到指定目录)</p><p><strong>mkdir指令(make directory)</strong></p><p>mkdier指令用于创建目录</p><p>基本语法：mkdir [选项] 要创建的目录</p><p>常用选项</p><p>-p：创建多级目录</p><p>创建一个目录/home/dog：mkdir /home/dog</p><p>创建多级目录/home/animal/tiger：mkdir -p /home/animal/tiger</p><p><strong>rmdir指令</strong></p><p>rmdir指令删除空目录</p><p>基本语法：rmdir [选项] 要删除的空目录</p><p>使用细节</p><p>rmdir 删除的是空目录，如果目录下有内容时无法删除的。</p><p>提示：如果需要删除非空目录，需要使用 ’rm -rf 要删除的目录‘（-rf表示强制递归）</p><p>比如：rm -rf /home/animal</p><p>注意：</p><p>1.使用rm -rf进行删除时，要非常谨慎。</p><p>2.rm指令单独只能删除文件，加上参数-r可以删除包含文件的文件夹。但是在删除前shell会询问。</p><p><strong>touch指令</strong></p><p>touch指令创建空文件</p><p>基本语法：touch 文件名称</p><p>在/home目录下，创建一个空文件 hello.txt：touch hello.txt</p><p><strong>cp指令</strong></p><p>cp指令拷贝文件到指定目录</p><p>基本语法：cp [选项] source dest</p><p>常用选项</p><p>-r：递归复制整个文件夹</p><p>案例1：将/home/hello.txt拷贝到/home/bbb目录下：在/home目录下，cp hello.txt bbb</p><p>案例2：递归复制整个文件夹，比如将/home/bbb整个目录，拷贝到/opt：cp -r /home/bbb /opt（这样拷贝是将整个目录，包括目录bbb本身，都拷贝到/opt下的）</p><p>使用细节</p><p>强制覆盖不提示的方法：\cp：如上面的指令如果要强制覆盖，则为\cp -r /home/bbb /opt</p><p><strong>rm指令</strong></p><p>说明：rm指令移除文件或目录</p><p>基本语法：rm [选项] 要删除的文件或目录</p><p>常用选项</p><p>-r：递归删除整个文件夹</p><p>-f：强制删除不提示</p><p>案例1：将/home/hello.txt删除：rm /home/hello.txt ，在提示中选择y</p><p>案例2：递归删除整个目录 /home/bbb：rm -r /home/bbb（删除整个目录，但每删其中的一个文件都会提示）</p><p>使用细节：</p><p>强制删除不提示的方法：带上-f参数即可</p><p><strong>mv指令</strong></p><p>mv移动文件与目录或重命名</p><p>基本语法</p><p>mv oldNameFile newNameFile （功能描述：重命名）</p><p>mv /temp/movefile /targetFolder（功能描述：移动文件）</p><p>注意：</p><p>1.重命名是在同一个目录下</p><p>2.移动是在不同的目录下</p><p>案例1：将/home/cat.txt文件重新命名为pig.txt：在/home目录下，mv cat.txt pig.txt</p><p>案例2：将/home/pig.txt文件移动到/root目录下：在home目录下，mv cat.txt /root</p><p>案例3：移动整个目录，比如将/opt/bbb移动到/home下，并重命名为uuu：mv /opt/bbb /home/uuu（/home目录下本来没有/uuu目录）</p><p>注意：</p><p>对案例3，如果/home目录下本来有/uuu目录，则mv /opt/bbb /home/uuu命令会把/bbb目录移到/home/uuu目录下</p><p><strong>cat指令</strong></p><p>cat查看文件内容（与vim的区别是，cat只能查看，不能修改，更安全）</p><p>基本语法：cat [选项] 要查看的文件</p><p>常用选项<br>-n：显示行号</p><p>案例1：/etc/profile 文件内容，并显示行号：cat -n /etc/profile</p><p>使用细节</p><p>cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令：| more</p><p>补充：管道命令有点类似于，将前面的结果，再交给下一个指令进行处理，管道命令就是一个竖杠，再带一个其他命令</p><p><strong>more指令</strong></p><p>more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键（交互的指令），详见操作说明</p><p>基本语法：more要查看的文件</p><p>操作说明，如图</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307121822291.png" alt="image-20230712160719325"></p><p><strong>less指令</strong></p><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><p>基本语法：less 要查看的文件</p><p>操作说明</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307121822292.png" alt="image-20230712161125766"></p><p><strong>echo指令</strong></p><p>echo输出内容到控制台</p><p>基本语法：echo [选项] [输出内容]</p><p>案例1：使用echo指令输出环境变量，比如输出环境变量$PATH：echo $PATH ；输出主机名$HOSTNAME: echo $HOSTNAME</p><p>案例2：使用echo指令输出hello,world！：echo “hello，world~“（引号可加可不加）</p><p><strong>head指令</strong></p><p>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容</p><p>基本语法</p><p>head 文件（功能描述：查看文件头10行内容）</p><p>head -n 5 文件 （功能描述：查看文件头5行内容，5可以是任意行数）</p><p>案例：查看/etc/profile的前面5行代码：head -n 5 /etc/profile（去掉-n 5，默认看前10行）</p><p>注意：空行也算一行</p><p><strong>tail指令</strong></p><p>tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的前10行内容。</p><p>基本语法</p><p>1.tail 文件 (功能描述：查看文件尾10行内容）</p><p>2.tail -n 5 文件 （功能描述：查看文件尾5行内容，5可以是任意行数)</p><p>3.tail -f 文件 （功能描述：实时追踪该文档的所有更新）</p><p>案例1：查看/etc/profile最后5行的代码：tail -n 5 /etc/profile</p><p>案例2：实时监控mydate.txt，看看当该文件有变化时，是否看到，实时追加hello,world</p><p><strong>&gt;指令和&gt;&gt;指令</strong></p><p>>输出重定向和&gt;&gt;追加</p><p>基本语法</p><p>1.ls -l &gt;文件 （功能描述：列表的内容写入文件a.txt中（覆盖写））</p><p>2.ls -al &gt;&gt;文件 （功能描述：列表的内容追加到文件aa.txt的末尾）</p><p>3.cat 文件1&gt;文件2 （功能描述：将文件1的内容覆盖到文件2的内容）</p><p>4.echo ’内容‘ &gt;&gt; 文件 （功能描述：将内容追加到文件中）</p><p>案例1：将/home目录下的文件列表写入/home/info.txt中，覆盖写入：ls -l /home &gt; /home/info.txt（如果没有info.txt，则会创建）</p><p>案例2：将当前日历信息追加到/home/mycal文件中：cal &gt;&gt; /home/mycal </p><p><strong>ln指令</strong></p><p>软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径</p><p>基本语法：ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）</p><p>案例1：在/home目录下创建一个软链接myroot，连接到/root目录：ln -s /root /home/myroot</p><p>案例2：删除软连接myroot：rm /home/myroot（会提示是否删除符号链接）</p><p>注意：</p><p>如果rm /home/myroot/，会提示无法删除/home/myroot/，是一个目录</p><p>细节说明</p><p>当我们使用pwd指令查看目录时，仍然看到的是软链接所在目录</p><p><strong>history指令</strong></p><p>查看已经执行过的历史指令，也可以执行历史指令</p><p>基本语法：history（功能描述：查看已经执行过的历史命令）</p><p>案例1：显示所有的历史命令：history</p><p>案例2：显示最近使用过的10个指令：history 10</p><p>案例3：执行历史编号为5的指令：!5 （可以输入负数，表示倒数的指令）</p><p><br></p><h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><p><strong>date指令-显示当前日期</strong></p><p>基本语法</p><p>1.date （功能描述：显示当前时间）</p><p>2.date “+%Y” （功能描述：显示当前年份）</p><p>3.date “+%m” （功能描述：显示当前月份）</p><p>4.date “+%d”（功能描述：显示当前是哪一天）</p><p>5.date “+%Y-%m-%d %H:%M:%S”（功能描述：显示年月日时分秒）</p><p>案例1：显示当前时间信息：date （2023年 01月 06日 星期五 09:58:54 CST）</p><p>案例2：显示当前时间年月日：date “+%Y-%m-%d”</p><p>案例3：显示当前时间年月日时分秒：date “+%Y-%m-%d %H:%M:%S”</p><p><strong>date指令-设置日期</strong></p><p>基本语法：date -s 字符串时间</p><p>案例1：设置系统当前时间，比如设置成2021-11-11 11:22:22：date -s “2021-11-11 11:22:22”</p><p><strong>cal指令</strong></p><p>查看日历指令</p><p>基本语法：cal [选项] （功能描述：不加选项，显示本月日历）</p><p>案例1：显示当前日历：cal</p><p>案例2：显示2020年日历：cal 2020</p><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><p><strong>find指令</strong></p><p>find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p><p>基本语法：find [搜索范围] [选项]</p><p>选项说明<br>-name &lt;查询方式&gt;         按照指定的文件名查找模式查找文件</p><p>-user &lt;用户名&gt;               查找属于指定用户名所有文件</p><p>-size &lt;文件大小&gt;            按照指定的文件大小查找文件</p><p>案例1：按文件名：根据名称查找/home目录下的hello.txt文件：find /home -name hello.txt(没找到就没有信息)</p><p>案例2：按拥有者：查找/opt目录下，用户名称为nobody的文件：find /opt -user nobody</p><p>案例3：查找整个linux系统下大于200M的文件（+n大于 -n小于 n等于，单位有k,M,G)：find / -size +200M</p><p>补充：ls -lh，h表示人可以看清楚的形式展示，此时显示的文件大小会自动转化为人可以看明白的xx M</p><p><strong>locate指令</strong></p><p>locate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</p><p>基本语法：locate 搜索文件</p><p>由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库</p><p>案例1：请使用locate指令快速定位hello.txt文件所在目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">updatedb</span><br><span class="line">locate hello.txt</span><br></pre></td></tr></table></figure><p>which指令，可以查看某个指令在哪个目录下，比如ls指令在哪个目录：which ls</p><p><strong>指令和管道符号|</strong></p><p>grep过滤查找，管道符，“|”，表示将前一个命令的处理结果传递给后面的命令处理</p><p>基本语法：grep [选项] 查找内容 源文件</p><p>常用选项</p><p>-n                显示匹配行及行号</p><p>-i                  忽略字母大小写</p><p>案例1：请在hello.txt文件中，查找’yes‘所在行，并显示行号</p><p>方法1：cat /home/hello.txt | grep -n ’yes‘</p><p>方法2：grep -n ’yes‘ /home/hello.txt</p><p><br></p><h2 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h2><p><strong>gzip/gunzip指令</strong></p><p>gzip用于压缩文件，gunzip用于解压的</p><p>基本语法</p><p>gzip文件 （功能描述：压缩文件，只能将文件压缩为*.gz文件）</p><p>gunzip文件.gz （功能描述：解压缩文件命令）</p><p>案例1：gzip压缩，将/home下的hello.txt文件进行压缩：gzip /home/hello.txt</p><p>案例2：gunzip压缩，将/home下的hello.txt.gz文件进行解压缩：gunzip /home/hello.txt.gz</p><p><strong>zip/unzip指令</strong></p><p>zip用于压缩文件（或目录），unzip用于解压的，这个在项目打包发布中很有用的</p><p>基本语法</p><p>zip [选项] xxx.zip 将要压缩的内容（功能描述：压缩文件和目录的命令）</p><p>unzip [选项] xxx.zip （功能描述：解压缩文件）</p><p>zip常用选项</p><p>-r：递归压缩，即压缩目录</p><p>unzip的常用选项</p><p>-d&lt;目录&gt;：指定解压后文件的存放目录</p><p>案例1：将/home下的所有文件进行压缩成myhome.zip：zip -r myhome.zip /home(将home目录及其包含的文件和子文件夹都压缩）</p><p>案例2：将myhome.zip解压到/opt/tmp目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/tmp</span><br><span class="line">unzip -d /opt/tmp /home/myhome.zip</span><br></pre></td></tr></table></figure><p><strong>tar指令</strong></p><p>tar指令是打包指令，最后打包后的文件是.tar.gz的文件</p><p>基本语法</p><p>tar [选项] xxx.tar.gz 打包的内容 （功能描述：打包目录，压缩后的文件格式.tar.gz）<br>选项说明</p><div class="table-container"><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr></tbody></table></div><p>案例1：压缩多个文件，将/home/pig.txt和/home/cat.txt压缩成pc.tar.gz：</p><p>tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt<br>(压缩时候在绝对路径下压缩，会把/home目录也压缩进去，在相对路径下压缩则不会这样）</p><p>案例2：将/home的文件夹压缩成myhome.tar.gz:</p><p>tar -zcvf myhome.tar.gz /home</p><p>案例3：将pc.tar.gz解压到当前目录tar -zxvf pc.tar.gz</p><p>案例4：将myhome.tar.gz解压到/opt/tmp2目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/tmp2</span><br><span class="line">tar -zxvf /home/myhome.tar.gz -C /opt/tmp2</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.-C 目标目录表示指定目标目录</p><p>2.任何压缩方法，被压缩文件路径最好使用相对路径，否则会自动压缩绝对路径多创文件夹</p><p>补充：打包解包是针对.tar文件而言的，.tar文件就是将多个文件合并成一个单文件，解压和压缩是针对.gz文件而言，-c是打包成.tar文件，-x是把.tar包解开，-z会根据带的x还是c来决定解压还是压缩</p><p>[目录或是文件]: </p>]]></content>
    
    
    <summary type="html">Linux基础知识，用户管理，实用指令</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="https://windcrain.top/tags/Linux/"/>
    
    <category term="CentOS" scheme="https://windcrain.top/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Vue3前端框架</title>
    <link href="https://windcrain.top/post/Vue3/"/>
    <id>https://windcrain.top/post/Vue3/</id>
    <published>2023-07-10T08:31:55.000Z</published>
    <updated>2023-07-22T15:54:30.363Z</updated>
    
    <content type="html"><![CDATA[<p>技术选型</p><ul><li>Vue <ul><li><strong>选项式 API</strong> 还是 <strong>组合式 API</strong>✔️</li><li><strong>HTML</strong> 还是 <strong>单文件组件</strong>✔️</li></ul></li><li>语法<ul><li><strong>javascript</strong> 还是 <strong>typescript</strong>✔️</li></ul></li><li>构建工具<ul><li><strong>@vue/cli</strong> 还是 <strong>vite</strong>✔️</li></ul></li><li>路由<ul><li><strong>vue-router</strong>✔️</li></ul></li><li>共享存储<ul><li><strong>vuex</strong> 还是 <strong>pinia</strong>✔️</li></ul></li><li>视图组件<ul><li><strong>ElementUI</strong> 还是 <strong>Antdv</strong>✔️</li></ul></li></ul><p><br></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>采用 vite 作为前端项目的打包，构建工具</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure><p>按提示操作</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目目录</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><br></p><h2 id="编码-IDE"><a href="#编码-IDE" class="headerlink" title="编码 IDE"></a>编码 IDE</h2><p>推荐采用微软的 VSCode 作为开发工具，到它的官网 <a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a> 下载安装即可</p><p>要对 *.vue 做语法支持，还要安装一个 Volar 插件</p><p><br></p><h2 id="安装-devtools"><a href="#安装-devtools" class="headerlink" title="安装 devtools"></a>安装 devtools</h2><ul><li>devtools 插件网址：<a href="https://devtools.vuejs.org/guide/installation.html">https://devtools.vuejs.org/guide/installation.html</a></li></ul><p><br></p><h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><p>打开项目根目录下 vite.config.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>文档地址：<a href="https://vitejs.cn/config/#server-port">配置 Vite | Vite中文网 (vitejs.cn)</a></li></ul><p><br></p><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理，同样是修改项目根目录下 vite.config.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">index.html</span><br><span class="line">package.json</span><br><span class="line">tsconfig.json</span><br><span class="line">vite.config.ts</span><br><span class="line">├─public</span><br><span class="line">└─src</span><br><span class="line">    ├─assets</span><br><span class="line">    ├─components</span><br><span class="line">    ├─model</span><br><span class="line">    ├─router</span><br><span class="line">    ├─store</span><br><span class="line">    └─views</span><br></pre></td></tr></table></figure><ul><li>index.html 为主页面</li><li>package.json npm 配置文件</li><li>tsconfig.json typescript 配置文件</li><li>vite.config.ts vite 配置文件</li><li>public 静态资源</li><li>src/components 可重用组件</li><li>src/model 模型定义</li><li>src/router 路由</li><li>src/store 共享存储</li><li>src/views 视图组件</li></ul><p><br></p><h1 id="Vue-组件"><a href="#Vue-组件" class="headerlink" title="Vue 组件"></a>Vue 组件</h1><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>script 代码部分，控制模板的数据来源和行为</li><li>template 模板部分，由它生成 html 代码</li><li>style 样式部分，一般不咋关心</li></ul><p>根组件是 src/App.vue，先来个 Hello,world 例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">let msg = ref(&quot;hello&quot;); // 把数据变成响应式的</span><br><span class="line"></span><br><span class="line">function change() &#123;</span><br><span class="line">  msg.value = &quot;world&quot;;</span><br><span class="line">  console.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;修改msg&quot; @click=&quot;change&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li> 用来把一个变量绑定到页面上某个位置</li><li>绑定的变量必须用 ref 函数来封装<ul><li>ref 返回的是【响应式】数据，即数据一旦变化，页面展示也跟着变化</li></ul></li></ul><p><br></p><h2 id="main-ts"><a href="#main-ts" class="headerlink" title="main.ts"></a>main.ts</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">  .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>createApp 是创建一个 Vue 应用程序，它接收的参数 App 即之前我们看到的根组件</li><li>mount 就是把根组件生成的 html 代码片段【挂载】到 index.html 中 id 为 app 的 html 元素上</li></ul><p>可以修改自己的组件文件，挂载到主页面</p><p>新建 src/views/E0.vue，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const msg = ref(&#x27;Hello, World!!&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>修改 main.ts 将自己的组件文件挂载</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="comment">// import App from &#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">E0</span> <span class="keyword">from</span> <span class="string">&#x27;./views/E0.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="variable constant_">E0</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="ref-与-reactive"><a href="#ref-与-reactive" class="headerlink" title="ref 与 reactive"></a>ref 与 reactive</h2><p>vue 提供了两个函数，都可以将数据变为【响应式】的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">const msg = ref(&#x27;Hello, World&#x27;)</span><br><span class="line">const user = reactive(&#123; name: &#x27;张三&#x27; &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;user.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>ref 能将任意类型的数据变为【响应式】的</li><li>reactive 只能将对象类型变为【响应式】，对基本类型无效（例如 string，number，boolean）</li></ul><p>还有一点不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">const u1 = ref(&#123; name: &#x27;张三&#x27; &#125;)</span><br><span class="line">const u2 = reactive(&#123; name: &#x27;张三&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">function test() &#123;</span><br><span class="line">  console.log(u1.value)</span><br><span class="line">  console.log(u2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;u1.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;u2.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>在 template 模板中使用 ref 包装的数据，直接写【变量名】就可以了</li><li>但在代码中要使用 ref 包装的数据，必须用【变量名.value】才能访问到</li><li>reactive 包装的数据，在模板中和代码中都是一致的</li></ul><p><br></p><h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const path = ref(&#x27;/src/assets/vue.svg&#x27;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img :src=&quot;path&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>【:属性名】用来将标签属性与【响应式】变量绑定</li></ul><p><br></p><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br><span class="line">function dec() &#123;</span><br><span class="line">  count.value--</span><br><span class="line">&#125;</span><br><span class="line">function inc() &#123;</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;-&quot; @click=&quot;dec&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;+&quot; @click=&quot;inc&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>【@事件名】用来将标签属性与函数绑定，事件发生后执行函数内代码</li></ul><p><br></p><h2 id="表单绑定"><a href="#表单绑定" class="headerlink" title="表单绑定"></a>表单绑定</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">const user = ref(&#123;</span><br><span class="line">  name:&#x27;张三&#x27;,</span><br><span class="line">  age:18,</span><br><span class="line">  sex:&#x27;男&#x27;,</span><br><span class="line">  fav:[&#x27;游泳&#x27;,&#x27;打球&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function saveUser() &#123;</span><br><span class="line">  console.log(user.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label for=&quot;&quot;&gt;请输入姓名&lt;/label&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;user.name&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label for=&quot;&quot;&gt;请输入年龄&lt;/label&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;user.age&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label for=&quot;&quot;&gt;请选择性别&lt;/label&gt;</span><br><span class="line">      男 &lt;input type=&quot;radio&quot; value=&quot;男&quot; v-model=&quot;user.sex&quot;/&gt; </span><br><span class="line">      女 &lt;input type=&quot;radio&quot; value=&quot;女&quot; v-model=&quot;user.sex&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label for=&quot;&quot;&gt;请选择爱好&lt;/label&gt;</span><br><span class="line">      游泳 &lt;input type=&quot;checkbox&quot; value=&quot;游泳&quot; v-model=&quot;user.fav&quot;/&gt; </span><br><span class="line">      打球 &lt;input type=&quot;checkbox&quot; value=&quot;打球&quot; v-model=&quot;user.fav&quot;/&gt; </span><br><span class="line">      健身 &lt;input type=&quot;checkbox&quot; value=&quot;健身&quot; v-model=&quot;user.fav&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;保存&quot; @click=&quot;saveUser&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    margin-bottom: 8px;</span><br><span class="line">  &#125;</span><br><span class="line">  .outer &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    position: relative;</span><br><span class="line">    padding-left: 80px;</span><br><span class="line">  &#125;</span><br><span class="line">  label &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left :0;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>用 v-model 实现双向绑定，即 <ul><li>javascript 数据可以同步到表单标签</li><li>反过来用户在表单标签输入的新值也会同步到 javascript 这边</li></ul></li><li>双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了</li><li>复选框这种标签，双向绑定的 javascript 数据类型一般用数组</li></ul><p><br></p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>有时在数据展示时要做简单的计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const firstName = ref(&#x27;三&#x27;)</span><br><span class="line">const lastName = ref(&#x27;张&#x27;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;lastName + firstName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;lastName + firstName&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h4&gt;&#123;&#123;lastName + firstName&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>看起来较为繁琐，可以用计算属性改进</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">const firstName = ref(&#x27;三&#x27;)</span><br><span class="line">const lastName = ref(&#x27;张&#x27;)</span><br><span class="line">const fullName = computed(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;enter&#x27;)</span><br><span class="line">  return lastName.value + firstName.value</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;fullName&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h4&gt;&#123;&#123;fullName&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>fullName 即为计算属性，它具备缓存功能，即 firstName 和 lastName 的值发生了变化，才会重新计算</li><li>如果用函数实现相同功能，则没有缓存功能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const firstName = ref(&#x27;三&#x27;)</span><br><span class="line">const lastName = ref(&#x27;张&#x27;)</span><br><span class="line">function fullName() &#123;</span><br><span class="line">  console.log(&#x27;enter&#x27;)</span><br><span class="line">  return lastName.value + firstName.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fullName()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;fullName()&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h4&gt;&#123;&#123;fullName()&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="xhr"><a href="#xhr" class="headerlink" title="xhr"></a>xhr</h2><p>浏览器中有两套 API 可以和后端交互，发送请求、接收响应，fetch api 前面我们已经介绍过了，另一套 api 是 xhr，基本用法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:8080/api/students&#x27;</span>)</span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><p>但这套 api 虽然功能强大，但比较老，不直接支持 Promise，因此有必要对其进行改造</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(xhr.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(xhr.<span class="property">response</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(xhr.<span class="property">status</span> === <span class="number">404</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(xhr.<span class="property">response</span>)</span><br><span class="line">      &#125; <span class="comment">// 其它情况也需考虑，这里简化处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url)</span><br><span class="line">    xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Promise 对象适合用来封装异步操作，并可以配合 await 一齐使用</li><li>Promise 在构造时，需要一个箭头函数，箭头函数有两个参数 resolve 和 reject<ul><li>resolve 是异步操作成功时被调用，把成功的结果传递给它，最后会作为 await 的结果返回</li><li>reject 在异步操作失败时被调用，把失败的结果传递给它，最后在 catch 块被捉住</li></ul></li><li>await 会一直等到 Promise 内调用了 resolve 或 reject 才会继续向下运行</li></ul><p>调用示例1：同步接收结果，不走代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">get</span>(<span class="string">&quot;http://localhost:8080/api/students&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(resp)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用示例2：走代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">get</span>(<span class="string">&#x27;/api/students&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(resp)  </span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>走代理明显慢不少</li></ul><p><br></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p><strong>基本用法</strong></p><p>axios 就是对 xhr api 的封装，语法与前面例子类似</p><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>一个简单的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">let count = ref(0);</span><br><span class="line"></span><br><span class="line">async function getStudents() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const resp = await axios.get(&quot;/api/students&quot;);</span><br><span class="line">    count.value = resp.data.data.length;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  getStudents()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;学生人数为：&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>onMounted 指 vue 组件生成的 html 代码片段，挂载完毕后被执行</li></ul><p>再来看一个 post 例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">const student = ref(&#123;</span><br><span class="line">  name: &#x27;&#x27;,</span><br><span class="line">  sex: &#x27;男&#x27;,</span><br><span class="line">  age: 18</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">async function addStudent() &#123;</span><br><span class="line">  console.log(student.value)</span><br><span class="line">  const resp = await axios.post(&#x27;/api/students&#x27;, student.value)</span><br><span class="line">  console.log(resp.data.data)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; placeholder=&quot;请输入姓名&quot; v-model=&quot;student.name&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label for=&quot;&quot;&gt;请选择性别&lt;/label&gt;</span><br><span class="line">      男 &lt;input type=&quot;radio&quot; value=&quot;男&quot; v-model=&quot;student.sex&quot;/&gt; </span><br><span class="line">      女 &lt;input type=&quot;radio&quot; value=&quot;女&quot; v-model=&quot;student.sex&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;number&quot; placeholder=&quot;请输入年龄&quot; v-model=&quot;student.age&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;添加&quot; @click=&quot;addStudent&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>环境变量</strong></p><ul><li>开发环境下，联调的后端服务器地址是 <code>http://localhost:8080</code>，</li><li>上线改为生产环境后，后端服务器地址为 <code>http://itheima.com</code></li></ul><p>这就要求我们区分开发环境和生产环境，这件事交给构建工具 vite 来做</p><p>默认情况下，vite 支持上面两种环境，分别对应根目录下两个配置文件 </p><ul><li>.env.development - 开发环境</li><li>.env.production - 生产环境</li></ul><p>针对以上需求，分别在两个文件中加入</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">VITE_BACKEND_API_BASE_URL</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">VITE_BACKEND_API_BASE_URL</span> = <span class="string">&#x27;http://itheima.com&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在代码中使用 vite 给我们提供的特殊对象 <code>import.meta.env</code>，就可以获取到 <code>VITE_BACKEND_API_BASE_URL</code> 在不同环境下的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_BACKEND_API_BASE_URL</span></span><br></pre></td></tr></table></figure><p>默认情况下，不能智能提示自定义的环境变量，做如下配置：新增文件 <code>src/env.d.ts</code> 并添加如下内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ImportMetaEnv</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">VITE_BACKEND_API_BASE_URL</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="comment">// 更多环境变量...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ImportMeta</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">env</span>: <span class="title class_">ImportMetaEnv</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参考文档地址 <a href="https://cn.vitejs.dev/guide/env-and-mode.html">环境变量和模式 | Vite 官方中文文档 (vitejs.dev)</a></li></ul><p><br></p><p><strong>baseURL</strong></p><p>可以自己创建一个 axios 对象，方便添加默认设置，新建文件 /src/api/request.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新的 axios 对象</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">const</span> _axios = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_BACKEND_API_BASE_URL</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> _axios</span><br></pre></td></tr></table></figure><p>然后在其它组件中引用这个 ts 文件，例如 /src/views/E8.vue，就不用自己拼接路径前缀了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &#x27;../api/request&#x27;</span><br><span class="line">// ...</span><br><span class="line">await axios.post(&#x27;/api/students&#x27;, ...)    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>拦截器</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新的 axios 对象</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">const</span> _axios = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_BACKEND_API_BASE_URL</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">_axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>)=&gt;</span>&#123; <span class="comment">// 统一添加请求头</span></span><br><span class="line">    config.<span class="property">headers</span> = &#123;</span><br><span class="line">      <span class="title class_">Authorization</span>: <span class="string">&#x27;aaa.bbb.ccc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>)=&gt;</span>&#123; <span class="comment">// 请求出错时的处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">_axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>)=&gt;</span>&#123; <span class="comment">// 状态码  2xx</span></span><br><span class="line">    <span class="comment">// 这里的code是自定义的错误码</span></span><br><span class="line">    <span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">401</span>) &#123;       </span><br><span class="line">      <span class="comment">// 情况1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>)=&gt;</span>&#123; <span class="comment">// 状态码 &gt; 2xx, 400,401,403,404,500</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error) <span class="comment">// 处理了异常</span></span><br><span class="line">    <span class="keyword">if</span>(error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">400</span>) &#123;</span><br><span class="line">      <span class="comment">// 情况1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="comment">// 情况2</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> _axios</span><br></pre></td></tr></table></figure><p>处理响应时，又分成两种情况</p><ol><li>后端返回的是标准响应状态码，这时会走响应拦截器第二个箭头函数，用 error.response.status 做分支判断</li><li>后端返回的响应状态码总是200，用自定义错误码表示出错，这时会走响应拦截器第一个箭头函数，用 response.data.code 做分支判断</li></ol><p>另外</p><ul><li>Promise.reject(error) 类似于将异常继续向上抛出，异常由调用者（Vue组件）来配合 try … catch 来处理</li><li>Promise.resolve({}) 表示错误已解决，返回一个空对象，调用者中接到这个空对象时，需要配合 ?. 来避免访问不存在的属性</li></ul><p><br></p><h2 id="条件与列表"><a href="#条件与列表" class="headerlink" title="条件与列表"></a>条件与列表</h2><p>首先，新增模型数据 src/model/Model8080.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 spring 错误，返回的对象格式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SpringError</span> &#123;</span><br><span class="line">  <span class="attr">timestamp</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">error</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 spring 成功，返回 list 情况</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SpringList</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: T[],</span><br><span class="line">  message?: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 spring 成功，返回 page 情况</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SpringPage</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">list</span>: T[], <span class="attr">total</span>: <span class="built_in">number</span> &#125;,</span><br><span class="line">  message?: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 spring 成功，返回 string 情况</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SpringString</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">string</span>,</span><br><span class="line">  message?: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRespError</span> <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">SpringError</span>&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRespList</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">SpringList</span>&lt;T&gt;&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRespPage</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">SpringPage</span>&lt;T&gt;&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRespString</span> <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">SpringString</span>&gt; &#123; &#125;</span><br></pre></td></tr></table></figure><p>其中 </p><ul><li>AxiosRespPage 代表分页时的响应类型</li><li>AxiosRespList 代表返回集合时的响应类型</li><li>AxiosRespString 代表返回字符串时的响应类型</li><li>AxiosRespError 代表 Spring 出错时时的响应类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; Student, SpringList &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line"></span><br><span class="line">// 说明 students 数组类型为 Student[]</span><br><span class="line">const students = ref&lt;Student[]&gt;([]);</span><br><span class="line"></span><br><span class="line">async function getStudents() &#123;</span><br><span class="line">  // 说明 resp.data 类型是 SpringList&lt;Student&gt;</span><br><span class="line">  const resp = await axios.get&lt;SpringList&lt;Student&gt;&gt;(&quot;/api/students&quot;);  </span><br><span class="line">  console.log(resp.data.data);</span><br><span class="line">  students.value = resp.data.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; getStudents());</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;thead&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;row bold&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;tbody&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;students.length === 0&quot;&gt;暂无数据&lt;/div&gt;</span><br><span class="line">      &lt;template v-else&gt;</span><br><span class="line">        &lt;div class=&quot;row&quot; v-for=&quot;s of students&quot; :key=&quot;s.id&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;col&quot;&gt;&#123;&#123; s.id &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;col&quot;&gt;&#123;&#123; s.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;col&quot;&gt;&#123;&#123; s.sex &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;col&quot;&gt;&#123;&#123; s.age &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.outer &#123;</span><br><span class="line">  font-family: 华文行楷;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  width: 500px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">  color: #333;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.row &#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.col &#123;</span><br><span class="line">  border: 1px solid #f0f0f0;</span><br><span class="line">  width: 15%;</span><br><span class="line">  height: 35px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 35px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.bold .col &#123;</span><br><span class="line">  background-color: #f1f1f1;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>加入泛型是为了更好的提示</li><li>v-if 与 v-else 不能和 v-for 处于同一标签</li><li>template 标签还有一个用途，就是用它少生成一层真正 html 代码</li><li>可以看到将结果封装为响应式数据还是比较繁琐的，后面会使用 useRequest 改进</li></ul><p><br></p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>利用监听器，可以在【响应式】的基础上添加一些副作用，把更多的东西变成【响应式的】</p><ul><li><p>原本只是数据变化 =&gt; 页面更新</p></li><li><p>watch 可以在数据变化时 =&gt; 其它更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;name&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &quot;vue&quot;;</span><br><span class="line">function useStorage(name: string) &#123;</span><br><span class="line">  const data = ref(sessionStorage.getItem(name) ?? &quot;&quot;);</span><br><span class="line">  watch(data, (newValue) =&gt; &#123;</span><br><span class="line">    sessionStorage.setItem(name, newValue);</span><br><span class="line">  &#125;);</span><br><span class="line">  return data;</span><br><span class="line">&#125;</span><br><span class="line">const name = useStorage(&quot;name&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>名称为 useXXXX 的函数，作用是返回带扩展功能的【响应式】数据</li><li>localStorage   即使浏览器关闭，数据还在</li><li>sessionStorage  数据工作在浏览器活动期间</li></ul><p><br></p><h2 id="vueuse"><a href="#vueuse" class="headerlink" title="vueuse"></a>vueuse</h2><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vueuse/core</span><br></pre></td></tr></table></figure><p>一些函数的用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;X: &#123;&#123;x&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;Y: &#123;&#123;y&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h3&gt;&#123;&#123;count&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; @click=&quot;inc()&quot; value=&quot;+&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; @click=&quot;dec()&quot; value=&quot;-&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useMouse, useCounter, useStorage &#125; from &#x27;@vueuse/core&#x27;</span><br><span class="line"></span><br><span class="line">const &#123;x, y&#125; = useMouse()</span><br><span class="line"></span><br><span class="line">const &#123;count, inc, dec&#125; = useCounter()</span><br><span class="line"></span><br><span class="line">const name = useStorage(&quot;name&quot;, &quot;&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="useRequest"><a href="#useRequest" class="headerlink" title="useRequest"></a>useRequest</h2><p>响应式的 axios 封装，官网地址 <a href="https://next.cn.attojs.org/">一个 Vue 请求库 | VueRequest (attojs.org)</a></p><p>首先安装 vue-request</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-request@next</span><br></pre></td></tr></table></figure><p>组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3 v-if=&quot;students.length === 0&quot;&gt;暂无数据&lt;/h3&gt;</span><br><span class="line">  &lt;ul v-else&gt;</span><br><span class="line">    &lt;li v-for=&quot;s of students&quot; :key=&quot;s.id&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.sex&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.age&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;</span><br><span class="line">import &#123; useRequest &#125; from &#x27;vue-request&#x27;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; AxiosRespList, Student &#125; from &#x27;../model/Model8080&#x27;</span><br><span class="line"></span><br><span class="line">// data 代表就是 axios 的响应对象</span><br><span class="line">const &#123; data &#125; = useRequest&lt;AxiosRespList&lt;Student&gt;&gt;(() =&gt; axios.get(&#x27;/api/students&#x27;))</span><br><span class="line"></span><br><span class="line">const students = computed(()=&gt;&#123;</span><br><span class="line">  return data?.value?.data.data || []</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">ul li &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  font-family: &quot;华文行楷&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li span:nth-child(1) &#123;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line">li span:nth-child(2) &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  color: crimson;</span><br><span class="line">  vertical-align: bottom;</span><br><span class="line">&#125;</span><br><span class="line">li span:nth-child(3) &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  color: darkblue;</span><br><span class="line">  vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>data.value 的取值一开始是 undefined，随着响应返回变成 axios 的响应对象</li><li>用 computed 进行适配</li></ul><p><br></p><h2 id="usePagination"><a href="#usePagination" class="headerlink" title="usePagination"></a>usePagination</h2><p>在 src/model/Model8080.ts 中补充类型说明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">StudentQueryDto</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>,</span><br><span class="line">  sex?: <span class="built_in">string</span>,</span><br><span class="line">  age?: <span class="built_in">string</span>, <span class="comment">// 18,20</span></span><br><span class="line">  <span class="attr">page</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">size</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>js 中类似于 18,20 这样以逗号分隔字符串，会在 get 传参时转换为 java 中的整数数组</li></ul><p>编写组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入姓名&quot; v-model=&quot;dto.name&quot;&gt;</span><br><span class="line">  &lt;select v-model=&quot;dto.sex&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;&quot; selected&gt;请选择性别&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;男&quot;&gt;男&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;女&quot;&gt;女&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入年龄范围&quot; v-model=&quot;dto.age&quot;&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入页码&quot; v-model=&quot;dto.page&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入页大小&quot; v-model=&quot;dto.size&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;搜索&quot; @click=&quot;search&quot;&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h3 v-if=&quot;students.length === 0&quot;&gt;暂无数据&lt;/h3&gt;</span><br><span class="line">  &lt;ul v-else&gt;</span><br><span class="line">    &lt;li v-for=&quot;s of students&quot; :key=&quot;s.id&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.sex&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.age&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  总记录数&#123;&#123;total&#125;&#125; 总页数&#123;&#123;totalPage&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;</span><br><span class="line">import &#123; usePagination &#125; from &#x27;vue-request&#x27;</span><br><span class="line">import &#123; computed, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; AxiosRespPage, Student, StudentQueryDto &#125; from &#x27;../model/Model8080&#x27;</span><br><span class="line"></span><br><span class="line">const dto = ref&lt;StudentQueryDto&gt;(&#123;name:&#x27;&#x27;, sex:&#x27;&#x27;, age:&#x27;&#x27;, page:1, size:5&#125;)</span><br><span class="line"></span><br><span class="line">// data 代表就是 axios 的响应对象</span><br><span class="line">// 泛型参数1: 响应类型</span><br><span class="line">// 泛型参数2: 请求类型</span><br><span class="line">const &#123; data, total, totalPage, run &#125; = usePagination&lt;AxiosRespPage&lt;Student&gt;, StudentQueryDto[]&gt;(</span><br><span class="line">  (d) =&gt; axios.get(&#x27;/api/students/q&#x27;, &#123;params: d&#125;), // 箭头函数</span><br><span class="line">  &#123;</span><br><span class="line">    defaultParams: [ dto.value ], // 默认参数, 会作为参数传递给上面的箭头函数</span><br><span class="line">    pagination: &#123;</span><br><span class="line">      currentKey: &#x27;page&#x27;, // 指明当前页属性</span><br><span class="line">      pageSizeKey: &#x27;size&#x27;, // 指明页大小属性</span><br><span class="line">      totalKey: &#x27;data.data.total&#x27; // 指明总记录数属性</span><br><span class="line">    &#125; </span><br><span class="line">  &#125; // 选项</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const students = computed(()=&gt;&#123;</span><br><span class="line">  return data?.value?.data.data.list || []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function search() &#123;</span><br><span class="line">  run(dto.value) // 会作为参数传递给usePagination的箭头函数</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">ul li &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  font-family: &quot;华文行楷&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li span:nth-child(1) &#123;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line">li span:nth-child(2) &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  color: crimson;</span><br><span class="line">  vertical-align: bottom;</span><br><span class="line">&#125;</span><br><span class="line">li span:nth-child(3) &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  color: darkblue;</span><br><span class="line">  vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line">input,select &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>usePagination 只需要定义一次，后续还想用它内部的 axios 发请求，只需调用 run 函数</li><li><br></li></ul><h2 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h2><p><strong>例1</strong></p><p>定义子组件 Child1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;card&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p class=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;location&quot;&gt;&#123;&#123;country&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;img :src=&quot;avatar || &#x27;/src/assets/vue.svg&#x27;&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 定义属性,  编译宏</span><br><span class="line">defineProps&lt;&#123;name:string,country:string,avatar?:string&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  justify-content: space-evenly;</span><br><span class="line">  flex-direction: row-reverse;</span><br><span class="line">&#125;</span><br><span class="line">.name &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.location &#123;</span><br><span class="line">  font-size: 0.8em;</span><br><span class="line">  color: #6d597a;</span><br><span class="line">&#125;</span><br><span class="line">.card &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-evenly;</span><br><span class="line">  padding: 1em;</span><br><span class="line">  margin: 1rem;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  width: 200px;</span><br><span class="line">  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card:hover &#123;</span><br><span class="line">  transform: rotate(-5deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card img &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  max-width: 55px;</span><br><span class="line">  max-height: 55px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>父组件引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child1 name=&quot;张三&quot; country=&quot;中国&quot; avatar=&quot;/src/assets/vue.svg&quot;&gt;&lt;/Child1&gt;</span><br><span class="line">  &lt;Child1 name=&quot;李四&quot; country=&quot;印度&quot; avatar=&quot;/vite.svg&quot;&gt;&lt;/Child1&gt;</span><br><span class="line">  &lt;Child1 name=&quot;王五&quot; country=&quot;韩国&quot; &gt;&lt;/Child1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import Child1 from &#x27;../components/Child1.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>例2</strong></p><p>首先添加类型说明 model/ModelRandomUser.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRespResults</span> <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">Results</span>&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Results</span> &#123;</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">page</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">results</span>: <span class="built_in">number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">results</span>: <span class="title class_">Result</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> | <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="built_in">string</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">location</span>: &#123;</span><br><span class="line">    <span class="attr">country</span>: <span class="built_in">string</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">picture</span>: &#123;</span><br><span class="line">    <span class="attr">medium</span>: <span class="built_in">string</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">login</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件不变，父组件使用子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child1 v-for=&quot;u of users&quot; </span><br><span class="line">    :name=&quot;u.name.first&quot; </span><br><span class="line">    :country=&quot;u.location.country&quot; </span><br><span class="line">    :avatar=&quot;u.picture.medium&quot;</span><br><span class="line">    :key=&quot;u.login.username&quot;&gt;&lt;/Child1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import &#123; useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; AxiosRespResults &#125; from &#x27;../model/ModelRandomUser&#x27;</span><br><span class="line">import Child1 from &quot;../components/Child1.vue&quot;;</span><br><span class="line"></span><br><span class="line">const &#123; data &#125; = useRequest&lt;AxiosRespResults&gt;(</span><br><span class="line">  ()=&gt;axios.get(&#x27;https://randomuser.me/api/?results=3&#x27;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const users = computed(()=&gt;&#123;</span><br><span class="line">  return data.value?.data.results || []</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果觉得 Result 数据结构嵌套太复杂，还可以做一个类型映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child1 v-for=&quot;u of users&quot; </span><br><span class="line">    :name=&quot;u.name&quot; </span><br><span class="line">    :country=&quot;u.country&quot; </span><br><span class="line">    :avatar=&quot;u.avatar&quot;</span><br><span class="line">    :key=&quot;u.username&quot;&gt;&lt;/Child1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import &#123; useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; AxiosRespResults, Result &#125; from &#x27;../model/ModelRandomUser&#x27;</span><br><span class="line">import Child1 from &quot;../components/Child1.vue&quot;;</span><br><span class="line"></span><br><span class="line">const &#123; data &#125; = useRequest&lt;AxiosRespResults&gt;(</span><br><span class="line">  ()=&gt;axios.get(&#x27;https://randomuser.me/api/?results=3&#x27;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const users = computed(()=&gt;&#123;</span><br><span class="line">  return data.value?.data.results.map(resultToUser) || []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">interface User &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  country: string,</span><br><span class="line">  avatar: string,</span><br><span class="line">  username: string</span><br><span class="line">&#125;</span><br><span class="line">function resultToUser(r:Result):User &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    name: r.name.first,</span><br><span class="line">    country: r.location.country,</span><br><span class="line">    avatar: r.picture.medium,</span><br><span class="line">    username: r.login.username</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>resultToUser 将 Result 类型映射为 User 类型</li></ul><p><br></p><h1 id="Antdv"><a href="#Antdv" class="headerlink" title="Antdv"></a>Antdv</h1><p>添加必要插件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ant-design-vue</span><br></pre></td></tr></table></figure><ul><li>ant-design-vue 组件库插件</li></ul><p>引入 antdv 功能，修改 main.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> antd <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;ant-design-vue/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(antd).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- &lt;a-table :columns=&quot;columns&quot; :dataSource=&quot;students&quot; rowKey=&quot;id&quot;&gt;&lt;/a-table&gt; --&gt;</span><br><span class="line">  &lt;a-table :columns=&quot;columns&quot; :dataSource=&quot;students&quot; :rowKey=&quot;rowKey&quot;&gt;&lt;/a-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; AxiosRespList, Student &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line"></span><br><span class="line">const &#123;data&#125; = useRequest&lt;AxiosRespList&lt;Student&gt;&gt;(</span><br><span class="line">  ()=&gt;axios.get(&#x27;/api/students&#x27;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const students = computed(()=&gt;&#123;</span><br><span class="line">  return data.value?.data.data || []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function rowKey(r:Student) &#123;</span><br><span class="line">  return r.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const columns = ref([</span><br><span class="line">  &#123;</span><br><span class="line">    title:&#x27;编号&#x27;,</span><br><span class="line">    dataIndex:&#x27;id&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title:&#x27;姓名&#x27;,</span><br><span class="line">    dataIndex:&#x27;name&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title:&#x27;性别&#x27;,</span><br><span class="line">    dataIndex:&#x27;sex&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title:&#x27;年龄&#x27;,</span><br><span class="line">    dataIndex:&#x27;age&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-table :columns=&quot;columns&quot; :data-source=&quot;students&quot; row-key=&quot;id&quot;</span><br><span class="line">   :pagination=&quot;pagination&quot; @change=&quot;tableChange&quot;&gt;&lt;/a-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; usePagination &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; AxiosRespPage, Student, StudentQueryDto &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line">import &#123; PaginationProps &#125; from &quot;ant-design-vue&quot;;</span><br><span class="line">import DateBody from &quot;ant-design-vue/lib/vc-picker/panels/DatePanel/DateBody&quot;;</span><br><span class="line"></span><br><span class="line">const dto = ref(&#123;page: 1, size: 5&#125;)</span><br><span class="line"></span><br><span class="line">const &#123;data, total, run&#125; = usePagination&lt;AxiosRespPage&lt;Student&gt;, StudentQueryDto[]&gt;(</span><br><span class="line">  (d)=&gt; axios.get(&#x27;/api/students/q&#x27;, &#123;params:d&#125;),</span><br><span class="line">  &#123;</span><br><span class="line">    defaultParams: [dto.value],</span><br><span class="line">    pagination: &#123;</span><br><span class="line">      currentKey: &quot;page&quot;,</span><br><span class="line">      pageSizeKey: &#x27;size&#x27;,</span><br><span class="line">      totalKey: &#x27;data.data.total&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 在页号或页大小改变时调用</span><br><span class="line">function tableChange(pagination: PaginationProps) &#123; </span><br><span class="line">  console.log(pagination)</span><br><span class="line">  dto.value.page = pagination.current ?? 1</span><br><span class="line">  dto.value.size = pagination.pageSize ?? 5</span><br><span class="line">  run(dto.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const pagination = computed&lt;PaginationProps&gt;(()=&gt;&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    current: dto.value.page, // 当前页</span><br><span class="line">    pageSize: dto.value.size, // 页大小</span><br><span class="line">    total: total.value,       // 总记录数</span><br><span class="line">    showSizeChanger: true,    // 显示页大小的下拉列表</span><br><span class="line">    pageSizeOptions: [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;] // 自定义下拉列表内容</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const students = computed(()=&gt;&#123;</span><br><span class="line">  return data.value?.data.data.list || []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const columns = ref([</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;编号&quot;,</span><br><span class="line">    dataIndex: &quot;id&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;姓名&quot;,</span><br><span class="line">    dataIndex: &quot;name&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;性别&quot;,</span><br><span class="line">    dataIndex: &quot;sex&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;年龄&quot;,</span><br><span class="line">    dataIndex: &quot;age&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="搜索、删除"><a href="#搜索、删除" class="headerlink" title="搜索、删除"></a>搜索、删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-row&gt;</span><br><span class="line">    &lt;a-col :span=&quot;2&quot;&gt;</span><br><span class="line">      &lt;a-button type=&quot;primary&quot; size=&quot;small&quot;&gt;新增&lt;/a-button&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">      &lt;a-popconfirm title=&quot;确认要删除选中学生吗?&quot;</span><br><span class="line">        ok-text=&quot;确定&quot; cancel-text=&quot;取消&quot; @confirm=&quot;onDeleteIds&quot;</span><br><span class="line">        @visibleChange=&quot;onVisibleChange&quot; :visible=&quot;visible&quot;&gt;</span><br><span class="line">        &lt;a-button type=&quot;primary&quot; size=&quot;small&quot;&gt;删除选中&lt;/a-button&gt;</span><br><span class="line">      &lt;/a-popconfirm&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">      &lt;a-input v-model:value=&quot;dto.name&quot; placeholder=&quot;输姓名&quot; size=&quot;small&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">      &lt;a-select v-model:value=&quot;dto.sex&quot; placeholder=&quot;选性别&quot; :allowClear=&quot;true&quot; size=&quot;small&quot;&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;男&quot;&gt;男&lt;/a-select-option&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;女&quot;&gt;女&lt;/a-select-option&gt;</span><br><span class="line">      &lt;/a-select&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">      &lt;a-select v-model:value=&quot;dto.age&quot; placeholder=&quot;选年龄&quot; :allowClear=&quot;true&quot; size=&quot;small&quot;&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;0,20&quot;&gt;20以下&lt;/a-select-option&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;21,30&quot;&gt;21~30&lt;/a-select-option&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;31,40&quot;&gt;31~40&lt;/a-select-option&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;40,120&quot;&gt;40以上&lt;/a-select-option&gt;</span><br><span class="line">      &lt;/a-select&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;2&quot;&gt;</span><br><span class="line">      &lt;a-button @click=&quot;tableChange&quot; type=&quot;primary&quot; size=&quot;small&quot;&gt;搜索&lt;/a-button&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">  &lt;/a-row&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;a-table :columns=&quot;columns&quot; :data-source=&quot;students&quot; row-key=&quot;id&quot;</span><br><span class="line">    :pagination=&quot;pagination&quot; @change=&quot;tableChange&quot;</span><br><span class="line">    :row-selection=&quot;&#123;selectedRowKeys:ids,onChange:onSelectChange&#125;&quot;&gt;</span><br><span class="line">    &lt;template #bodyCell=&quot;&#123;column, record&#125;&quot;&gt;</span><br><span class="line">      &lt;template v-if=&quot;column.dataIndex===&#x27;name&#x27;&quot;&gt;</span><br><span class="line">      &#123;&#123;record.name + (record.sex===&#x27;男&#x27;?&#x27;(大侠)&#x27;:&#x27;(女侠)&#x27;)&#125;&#125;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;template v-else-if=&quot;column.dataIndex===&#x27;operation&#x27;&quot;&gt;</span><br><span class="line">      &lt;a&gt;修改&lt;/a&gt;</span><br><span class="line">      &lt;a-divider type=&quot;vertical&quot;&gt;&lt;/a-divider&gt;</span><br><span class="line">      &lt;a-popconfirm title=&quot;确认要删除该学生吗?&quot;</span><br><span class="line">        ok-text=&quot;确定&quot; cancel-text=&quot;取消&quot; @confirm=&quot;onDelete(record.id)&quot;&gt;</span><br><span class="line">        &lt;a&gt;删除&lt;/a&gt;   </span><br><span class="line">      &lt;/a-popconfirm&gt;         </span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/a-table&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; usePagination, useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; AxiosRespPage, AxiosRespString, Student, StudentQueryDto &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line">import &#123; PaginationProps &#125; from &quot;ant-design-vue&quot;;</span><br><span class="line"></span><br><span class="line">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 搜索功能开始</span><br><span class="line">const dto = ref(&#123;page: 1, size: 5, name: &#x27;&#x27;, sex: null, age: null&#125;)</span><br><span class="line"></span><br><span class="line">const &#123;data, total, run: search&#125; = usePagination&lt;AxiosRespPage&lt;Student&gt;, StudentQueryDto[]&gt;(</span><br><span class="line">  (d) =&gt; axios.get(&#x27;/api/students/q&#x27;, &#123;params:d&#125;),</span><br><span class="line">  &#123;</span><br><span class="line">    defaultParams: [dto.value],</span><br><span class="line">    pagination: &#123;</span><br><span class="line">      currentKey: &quot;page&quot;,</span><br><span class="line">      pageSizeKey: &#x27;size&#x27;,</span><br><span class="line">      totalKey: &#x27;data.data.total&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">function tableChange(pagination: PaginationProps) &#123; </span><br><span class="line">  // console.log(pagination)</span><br><span class="line">  dto.value.page = pagination.current ?? 1</span><br><span class="line">  dto.value.size = pagination.pageSize ?? 5</span><br><span class="line">  search(dto.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const pagination = computed&lt;PaginationProps&gt;(()=&gt;&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    current: dto.value.page, // 当前页</span><br><span class="line">    pageSize: dto.value.size, // 页大小</span><br><span class="line">    total: total.value,       // 总记录数</span><br><span class="line">    showSizeChanger: true,    // 显示页大小的下拉列表</span><br><span class="line">    pageSizeOptions: [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;] // 自定义下拉列表内容</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const students = computed(()=&gt;&#123;</span><br><span class="line">  return data.value?.data.data.list || []</span><br><span class="line">&#125;)</span><br><span class="line">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 搜索功能结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 删除功能开始</span><br><span class="line">async function onDelete(id:number) &#123;</span><br><span class="line">  // console.log(&quot;学生id是:&quot;+id)</span><br><span class="line">  await deleteById(id)      // 删除请求 删除响应</span><br><span class="line">  search(dto.value)        //                   查询请求 查询响应</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123; runAsync: deleteById &#125; = useRequest&lt;AxiosRespString, number[]&gt;(</span><br><span class="line">  (id) =&gt; axios.delete(`/api/students/$&#123;id&#125;`),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 删除功能结束</span><br><span class="line"></span><br><span class="line">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 删除选中开始</span><br><span class="line">const ids = ref&lt;number[]&gt;([])</span><br><span class="line"></span><br><span class="line">function onSelectChange(keys:number[]) &#123;</span><br><span class="line">  // console.log(keys)</span><br><span class="line">  ids.value = keys</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function onDeleteIds() &#123;</span><br><span class="line">  await deleteByIds(ids.value)</span><br><span class="line">  ids.value = []</span><br><span class="line">  search(dto.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123; runAsync: deleteByIds &#125; = useRequest&lt;AxiosRespString, number[][]&gt;(</span><br><span class="line">  (ids)=&gt;axios.delete(&#x27;/api/students&#x27;, &#123;data: ids&#125;),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const visible = ref(false)</span><br><span class="line"></span><br><span class="line">function onVisibleChange(v:boolean) &#123;</span><br><span class="line">  if(!v) &#123; // 希望隐藏</span><br><span class="line">    visible.value = false</span><br><span class="line">  &#125; else &#123; // 希望显示</span><br><span class="line">    visible.value = ids.value.length &gt; 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 删除选中结束</span><br><span class="line"></span><br><span class="line">const columns = ref([</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;编号&quot;,</span><br><span class="line">    dataIndex: &quot;id&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;姓名&quot;,</span><br><span class="line">    dataIndex: &quot;name&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;性别&quot;,</span><br><span class="line">    dataIndex: &quot;sex&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;年龄&quot;,</span><br><span class="line">    dataIndex: &quot;age&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;操作&#x27;,</span><br><span class="line">    dataIndex: &#x27;operation&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .ant-input, .ant-select &#123;</span><br><span class="line">    width: 80px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="新增、修改"><a href="#新增、修改" class="headerlink" title="新增、修改"></a>新增、修改</h2><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-modal :visible=&quot;visible&quot; :title=&quot;title&quot; </span><br><span class="line">    @ok=&quot;onOk&quot; @cancel=&quot;onCancel&quot;&gt;</span><br><span class="line">    &lt;a-form&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;编号&quot; v-if=&quot;id&quot;&gt;</span><br><span class="line">        &lt;a-input readonly v-model:value=&quot;id&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;姓名&quot;&gt;</span><br><span class="line">        &lt;a-input v-model:value=&quot;dto.name&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;性别&quot;&gt;</span><br><span class="line">        &lt;a-radio-group v-model:value=&quot;dto.sex&quot;&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;男&quot;&gt;男&lt;/a-radio-button&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;女&quot;&gt;女&lt;/a-radio-button&gt;</span><br><span class="line">        &lt;/a-radio-group&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;年龄&quot;&gt;</span><br><span class="line">        &lt;a-input-number v-model:value=&quot;dto.age&quot;&gt;&lt;/a-input-number&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">    &lt;/a-form&gt;</span><br><span class="line">  &lt;/a-modal&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; StudentSaveDto, AxiosRespString &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line">import &#123; Form &#125; from &#x27;ant-design-vue&#x27;</span><br><span class="line"></span><br><span class="line">// 定义属性</span><br><span class="line">const props = defineProps&lt;&#123;id:number, dto:StudentSaveDto, visible:boolean&#125;&gt;()</span><br><span class="line"></span><br><span class="line">const title = computed(()=&gt; props.id===0?&#x27;新增学生&#x27;:&#x27;修改学生&#x27;)</span><br><span class="line"></span><br><span class="line">// 定义事件</span><br><span class="line">const emit = defineEmits([&#x27;update:visible&#x27;, &#x27;saved&#x27;])</span><br><span class="line"></span><br><span class="line">async function onOk() &#123;</span><br><span class="line">  if(props.id === 0) &#123;</span><br><span class="line">    await insert(props.dto)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    await update(props.dto)</span><br><span class="line">  &#125;</span><br><span class="line">  emit(&#x27;saved&#x27;)</span><br><span class="line">  // 发送事件给父组件, 希望把 visible 改为 false</span><br><span class="line">  emit(&#x27;update:visible&#x27;, false) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function onCancel() &#123;</span><br><span class="line">  // 发送事件给父组件, 希望把 visible 改为 false</span><br><span class="line">  emit(&#x27;update:visible&#x27;, false)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123;runAsync:insert&#125; = useRequest&lt;AxiosRespString,StudentSaveDto[]&gt;(</span><br><span class="line">  (dto)=&gt;axios.post(&#x27;/api/students&#x27;, dto),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const &#123;runAsync:update&#125; = useRequest&lt;AxiosRespString,StudentSaveDto[]&gt;(</span><br><span class="line">  (dto)=&gt;axios.put(`/api/students/$&#123;props.id&#125;`, dto),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件使用子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;A4Save :id=&quot;id&quot; :dto=&quot;saveDto&quot; v-model:visible=&quot;saveVisible&quot;&gt;&lt;/A4Save&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// ...</span><br><span class="line">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 新增、修改开始</span><br><span class="line">const saveVisible = ref(false)</span><br><span class="line">const id = ref(0)</span><br><span class="line">const saveDto = reactive(&#123;name:&#x27;&#x27;, sex:&#x27;男&#x27;, age:18&#125;)</span><br><span class="line"></span><br><span class="line">function onInsert() &#123;</span><br><span class="line">  saveVisible.value = true</span><br><span class="line">  id.value = 0</span><br><span class="line">  Object.assign(saveDto, &#123;name:&#x27;&#x27;, sex:&#x27;男&#x27;, age:18&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function onUpdate(record: Student) &#123;</span><br><span class="line">  saveVisible.value = true</span><br><span class="line">  id.value = record.id</span><br><span class="line">  Object.assign(saveDto, record)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function onSaved() &#123;</span><br><span class="line">  search(dto.value)</span><br><span class="line">&#125;    </span><br><span class="line">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 新增、修改结束</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>saveDto 使用 reactive 包装，是为了解决后续表单校验失效问题</p></li><li><p>Object.assign 是将源对象（参数2）的属性值赋值给目标对象（参数1）的同名属性，效果等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">saveDto.<span class="property">name</span> = record.<span class="property">name</span></span><br><span class="line">saveDto.<span class="property">sex</span> = record.<span class="property">sex</span></span><br><span class="line">saveDto.<span class="property">age</span> = record.<span class="property">age</span></span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="全局消息"><a href="#全局消息" class="headerlink" title="全局消息"></a>全局消息</h2><p>在 request.ts 中对响应消息统一处理</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">_axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>)=&gt;</span>&#123; <span class="comment">// 状态码  2xx</span></span><br><span class="line">    <span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">      message.<span class="title function_">success</span>(response.<span class="property">data</span>.<span class="property">message</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>)=&gt;</span>&#123; <span class="comment">// 状态码 &gt; 2xx, 400,401,403,404,500</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-modal :visible=&quot;visible&quot; :title=&quot;title&quot; </span><br><span class="line">    @ok=&quot;onOk&quot; @cancel=&quot;onCancel&quot;&gt;</span><br><span class="line">    &lt;a-form&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;编号&quot; v-if=&quot;id&quot;&gt;</span><br><span class="line">        &lt;a-input readonly v-model:value=&quot;id&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;姓名&quot; v-bind=&quot;validateInfos.name&quot;&gt;</span><br><span class="line">        &lt;a-input v-model:value=&quot;dto.name&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;性别&quot; v-bind=&quot;validateInfos.sex&quot;&gt;</span><br><span class="line">        &lt;a-radio-group v-model:value=&quot;dto.sex&quot;&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;男&quot;&gt;男&lt;/a-radio-button&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;女&quot;&gt;女&lt;/a-radio-button&gt;</span><br><span class="line">        &lt;/a-radio-group&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;年龄&quot; v-bind=&quot;validateInfos.age&quot;&gt;</span><br><span class="line">        &lt;a-input-number v-model:value=&quot;dto.age&quot;&gt;&lt;/a-input-number&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">    &lt;/a-form&gt;</span><br><span class="line">  &lt;/a-modal&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; StudentSaveDto, AxiosRespString &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line">import &#123; Form &#125; from &#x27;ant-design-vue&#x27;</span><br><span class="line"></span><br><span class="line">// 定义属性</span><br><span class="line">const props = defineProps&lt;&#123;id:number, dto:StudentSaveDto, visible:boolean&#125;&gt;()</span><br><span class="line"></span><br><span class="line">const title = computed(()=&gt; props.id===0?&#x27;新增学生&#x27;:&#x27;修改学生&#x27;)</span><br><span class="line"></span><br><span class="line">// 定义事件</span><br><span class="line">const emit = defineEmits([&#x27;update:visible&#x27;, &#x27;saved&#x27;])</span><br><span class="line"></span><br><span class="line">async function onOk() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    // 提交前校验</span><br><span class="line">    await validate()</span><br><span class="line">    if(props.id === 0) &#123;</span><br><span class="line">      await insert(props.dto)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      await update(props.dto)</span><br><span class="line">    &#125;</span><br><span class="line">    emit(&#x27;saved&#x27;)</span><br><span class="line">    // 发送事件给父组件, 希望把 visible 改为 false</span><br><span class="line">    emit(&#x27;update:visible&#x27;, false) </span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function onCancel() &#123;</span><br><span class="line">  // 发送事件给父组件, 希望把 visible 改为 false</span><br><span class="line">  emit(&#x27;update:visible&#x27;, false)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123;runAsync:insert&#125; = useRequest&lt;AxiosRespString,StudentSaveDto[]&gt;(</span><br><span class="line">  (dto)=&gt;axios.post(&#x27;/api/students&#x27;, dto),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const &#123;runAsync:update&#125; = useRequest&lt;AxiosRespString,StudentSaveDto[]&gt;(</span><br><span class="line">  (dto)=&gt;axios.put(`/api/students/$&#123;props.id&#125;`, dto),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const rules = ref(&#123;</span><br><span class="line">  name: [</span><br><span class="line">    &#123;required: true, message:&#x27;姓名必须&#x27;&#125;,</span><br><span class="line">    &#123;min:2, message:&#x27;字符数至少为2&#x27;&#125;</span><br><span class="line">  ],</span><br><span class="line">  sex: [</span><br><span class="line">    &#123;required: true, message:&#x27;性别必须&#x27;&#125;</span><br><span class="line">  ],</span><br><span class="line">  age: [</span><br><span class="line">    &#123;required: true, message:&#x27;年龄必须&#x27;&#125;,</span><br><span class="line">    &#123;min:10, message:&#x27;年龄最小为10岁&#x27;, type:&#x27;number&#x27;&#125;,</span><br><span class="line">    &#123;max:120, message:&#x27;年龄最大为120岁&#x27;, type:&#x27;number&#x27;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 参数1: 待校验的数据</span><br><span class="line">// 参数2: 校验规则</span><br><span class="line">const &#123; validateInfos, validate &#125; = Form.useForm(props.dto, rules)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@<span class="number">4</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="创建-router"><a href="#创建-router" class="headerlink" title="创建 router"></a>创建 router</h2><p>首先创建一个 /src/router/a5router.ts 文件，在其中定义路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A51</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A51.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A52</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A52.vue&#x27;</span></span><br><span class="line"><span class="comment">// 路由 =&gt; 路径和组件之间的对应关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a1&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="variable constant_">A51</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a2&#x27;</span>, </span><br><span class="line">    <span class="attr">component</span>: <span class="variable constant_">A52</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; </span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(), <span class="comment">// 路径格式</span></span><br><span class="line">  <span class="attr">routes</span>: routes <span class="comment">// 路由数组</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ul><li><p>createWebHashHistory 是用 # 符号作为【单页面】跳转技术，上面两个路由访问时路径格式为</p><ul><li><a href="http://localhost:7070/#/a1">http://localhost:7070/#/a1</a></li><li><a href="http://localhost:7070/#/a2">http://localhost:7070/#/a2</a></li></ul></li><li><p>每个路由都有两个必须属性</p><ul><li><p>path：路径</p></li><li><p>component：组件</p></li></ul></li><li><p>createRouter 用来创建 router 对象，作为默认导出</p></li></ul><p>需要在 main.ts 中导入 router 对象：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A5</span> <span class="keyword">from</span> <span class="string">&#x27;./views/A5.vue&#x27;</span>  <span class="comment">// vue-router</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/a5router&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="variable constant_">A5</span>).<span class="title function_">use</span>(antdv).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>A5 是根组件，不必在 router 中定义，但需要在其中定义 router-view，用来控制路由跳转后，A51、A52 这些组件的显示位置，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a5&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A51</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A51.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A52</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A52.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a3&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A53.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>用 import 关键字导入，效果是打包时会将组件的 js 代码都打包成一个大的 js 文件，如果组件非常多，会影响页面加载速度</li><li>而 import 函数导入（动态导入），则是按需加载，即<ul><li>当路由跳转到 /a3 路径时，才会去加载 A53 组件对应的 js 代码</li><li>vue-router 官方推荐采用动态导入</li></ul></li></ul><p><br></p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>如果希望再嵌套更深层次的路由跳转，例如：希望在 A53 组件内再进行路由跳转</p><p>首先，修改 A53.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a53&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>其次，再修改 /src/router/a5router.ts 文件 内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A51</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A51.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A52</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A52.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a3&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A53.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;student&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A531.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;teacher&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A532.vue&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>用法1</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A51</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A51.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A52</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A52.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a3&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A53.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/a3/student&#x27;</span>, <span class="comment">// 重定向到另外路径</span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;student&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A531.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;teacher&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A532.vue&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>效果是，页面输入 /a3，紧接着会重定向跳转到 /a3/student</p><p>用法2</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A51</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A51.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A52</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A52.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a1&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="variable constant_">A51</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a2&#x27;</span>, </span><br><span class="line">    <span class="attr">component</span>: <span class="variable constant_">A52</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:pathMatcher(.*)*&#x27;</span>, <span class="comment">// 可以匹配剩余的路径</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/a2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>效果是，当页面输入一个不存在路径 /aaa 时，会被 <code>path: &#39;/:pathMatcher(.*)*&#39;</code> 匹配到，然后重定向跳转到 A52 组件去</p><p><br></p><h2 id="主页布局"><a href="#主页布局" class="headerlink" title="主页布局"></a>主页布局</h2><p>借助 antdv 的 layout 组件，可以实现主页【上】【左】【右】布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a53&quot;&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header&gt;&lt;/a-layout-header&gt;</span><br><span class="line">      &lt;a-layout&gt;</span><br><span class="line">        &lt;a-layout-sider&gt;&lt;/a-layout-sider&gt;</span><br><span class="line">        &lt;a-layout-content&gt;</span><br><span class="line">          &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/a-layout-content&gt;</span><br><span class="line">      &lt;/a-layout&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.a53 &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background-color: rgb(220, 225, 255);</span><br><span class="line">  background-image: url(&quot;data:image/svg+xml,%3Csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27;%3E%3Ctext x=&#x27;35&#x27; y=&#x27;10&#x27; font-size=&#x27;14&#x27; font-family=&#x27;system-ui, sans-serif&#x27; text-anchor=&#x27;middle&#x27; dominant-baseline=&#x27;middle&#x27;%3EA53(主页)%3C/text%3E%3C/svg%3E&quot;);</span><br><span class="line">  padding: 20px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.ant-layout-header &#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background-color:darkseagreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-sider &#123;</span><br><span class="line">  background-color:lightsalmon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-content &#123;</span><br><span class="line">  background-color: aliceblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-footer &#123;</span><br><span class="line">  background-color:darkslateblue;</span><br><span class="line">  height: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-has-sider &#123;</span><br><span class="line">  height: calc(100% - 50px);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="侧边栏菜单"><a href="#侧边栏菜单" class="headerlink" title="侧边栏菜单"></a>侧边栏菜单</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a53&quot;&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header&gt;&lt;/a-layout-header&gt;</span><br><span class="line">      &lt;a-layout&gt;</span><br><span class="line">        &lt;a-layout-sider&gt;</span><br><span class="line">          &lt;a-menu theme=&quot;dark&quot; mode=&quot;inline&quot;&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;1&quot;&gt;</span><br><span class="line">              &lt;router-link to=&quot;/a3/student&quot;&gt;菜单1&lt;/router-link&gt;</span><br><span class="line">            &lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;2&quot;&gt;</span><br><span class="line">              &lt;router-link to=&quot;/a3/teacher&quot;&gt;菜单2&lt;/router-link&gt;</span><br><span class="line">            &lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;3&quot;&gt;菜单3&lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-sub-menu :key=&quot;4&quot; title=&quot;菜单4&quot;&gt;</span><br><span class="line">              &lt;a-menu-item :key=&quot;41&quot;&gt;菜单41&lt;/a-menu-item&gt;</span><br><span class="line">              &lt;a-menu-item :key=&quot;42&quot;&gt;菜单42&lt;/a-menu-item&gt;</span><br><span class="line">            &lt;/a-sub-menu&gt;</span><br><span class="line">          &lt;/a-menu&gt;</span><br><span class="line">        &lt;/a-layout-sider&gt;</span><br><span class="line">        &lt;a-layout-content&gt;</span><br><span class="line">          &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/a-layout-content&gt;</span><br><span class="line">      &lt;/a-layout&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>a-menu-item 与 a-sub-menu 都必须为 key 属性唯一赋值，否则会产生混乱</li><li>router-link 标签用来切换路由，to 是目标路由的路径</li><li>theme 属性定义菜单的主题（默认亮色主题，dark 为暗色主题）</li><li>mode 属性定义子菜单的展示模式（默认弹出，inline 显示在下方）</li></ul><h2 id="菜单图标"><a href="#菜单图标" class="headerlink" title="菜单图标"></a>菜单图标</h2><p>安装图标依赖</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @ant-design/icons-vue</span><br></pre></td></tr></table></figure><p>菜单中使用图标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a53&quot;&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header&gt;&lt;/a-layout-header&gt;</span><br><span class="line">      &lt;a-layout&gt;</span><br><span class="line">        &lt;a-layout-sider&gt;</span><br><span class="line">          &lt;a-menu theme=&quot;dark&quot; mode=&quot;inline&quot;&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;1&quot;&gt;</span><br><span class="line">              &lt;template #icon&gt;</span><br><span class="line">                &lt;highlight-outlined /&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">              &lt;router-link to=&quot;/a3/student&quot;&gt;菜单1&lt;/router-link&gt;</span><br><span class="line">            &lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;2&quot;&gt;</span><br><span class="line">              &lt;template #icon&gt;</span><br><span class="line">                &lt;align-center-outlined /&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">              &lt;router-link to=&quot;/a3/teacher&quot;&gt;菜单2&lt;/router-link&gt;</span><br><span class="line">            &lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;3&quot;&gt;</span><br><span class="line">              &lt;template #icon&gt;</span><br><span class="line">                &lt;strikethrough-outlined /&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">              菜单3&lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-sub-menu :key=&quot;4&quot; title=&quot;菜单4&quot;&gt;</span><br><span class="line">              &lt;template #icon&gt;</span><br><span class="line">                &lt;sort-descending-outlined /&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">              &lt;a-menu-item :key=&quot;41&quot;&gt;菜单41&lt;/a-menu-item&gt;</span><br><span class="line">              &lt;a-menu-item :key=&quot;42&quot;&gt;菜单42&lt;/a-menu-item&gt;</span><br><span class="line">            &lt;/a-sub-menu&gt;</span><br><span class="line">          &lt;/a-menu&gt;</span><br><span class="line">        &lt;/a-layout-sider&gt;</span><br><span class="line">        &lt;a-layout-content&gt;</span><br><span class="line">          &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/a-layout-content&gt;</span><br><span class="line">      &lt;/a-layout&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;HighlightOutlined, AlignCenterOutlined, StrikethroughOutlined, SortDescendingOutlined&#125; from &#x27;@ant-design/icons-vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>图标组件没有全局绑定，需要 import 之后才能使用</li><li>用 <code>&lt;template #icon&gt;&lt;/template&gt;</code> 插槽，才能确定图标展示的位置（菜单文字之前）</li></ul><p><br></p><h2 id="二次封装图标组件"><a href="#二次封装图标组件" class="headerlink" title="二次封装图标组件"></a>二次封装图标组件</h2><p>最终希望用统一的图标组件去使用图标，图标名只是作为一个属性值传递进去，例如：</p><p>使用者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-icon icon=&quot;highlight-outlined&quot;&gt;&lt;/a-icon&gt;</span><br><span class="line">  &lt;a-icon icon=&quot;align-center-outlined&quot;&gt;&lt;/a-icon&gt;</span><br><span class="line">  &lt;a-icon icon=&quot;strikethrough-outlined&quot;&gt;&lt;/a-icon&gt;</span><br><span class="line">  &lt;a-icon icon=&quot;sort-descending-outlined&quot;&gt;&lt;/a-icon&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import AIcon from &#x27;../components/AIcon1.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>方法1，使用 vue 组件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123;HighlightOutlined, AlignCenterOutlined, StrikethroughOutlined, SortDescendingOutlined&#125; from &#x27;@ant-design/icons-vue&#x27;</span><br><span class="line">const props = defineProps&lt;&#123;icon:string&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;highlight-outlined v-if=&quot;icon===&#x27;highlight-outlined&#x27;&quot;&gt;&lt;/highlight-outlined&gt;</span><br><span class="line">  &lt;align-center-outlined v-else-if=&quot;icon===&#x27;align-center-outlined&#x27;&quot;&gt;&lt;/align-center-outlined&gt;</span><br><span class="line">  &lt;strikethrough-outlined v-else-if=&quot;icon===&#x27;strikethrough-outlined&#x27;&quot;&gt;&lt;/strikethrough-outlined&gt;</span><br><span class="line">  &lt;sort-descending-outlined v-else-if=&quot;icon===&#x27;sort-descending-outlined&#x27;&quot;&gt;&lt;/sort-descending-outlined&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>缺点：实现太笨</li></ul><p><br></p><p><strong>方法2，使用函数式组件</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Icons</span> <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Module</span> &#123;</span><br><span class="line">  [<span class="attr">p</span>:<span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1: 组件属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AIcon</span> = (<span class="params">props:&#123;icon:<span class="built_in">string</span>&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// console.log(props.icon)</span></span><br><span class="line">  <span class="comment">// console.log(Icons)</span></span><br><span class="line">  <span class="comment">// 参数1: 组件对象</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">im</span>: <span class="title class_">Module</span> = <span class="title class_">Icons</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(im[<span class="title function_">toCamelCase</span>(props.<span class="property">icon</span>)])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AIcon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将-分隔的单词转换为大驼峰命名的单词</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toCamelCase</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123; <span class="comment">// highlight-outlined</span></span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>) <span class="comment">// [&#x27;highlight&#x27;, &#x27;outlined&#x27;]</span></span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>)=&gt;</span> e.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + e.<span class="title function_">slice</span>(<span class="number">1</span>) ) <span class="comment">// [&#x27;Highlight&#x27;, &#x27;Outlined&#x27;]</span></span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Icons 的结构如下</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  HighlightOutlined: HighlightOutlined组件对象,</span></span><br><span class="line"><span class="comment">  MonitorOutlined: MonitorOutlined组件对象,</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>需要动态生成标签的时候，可以考虑使用函数式组件</li></ul><p><br></p><p><strong>方法3，使用 jsx 组件</strong></p><p>首先，安装  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vitejs/plugin-vue-jsx -D</span><br></pre></td></tr></table></figure><p>配置 vite.config.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">vueJsx</span>()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>编写一个 Hi.tsx 组件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props: &#123; msg: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;props.msg&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后被其它组件使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import Hi from &#x27;../components/Hi&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Hi msg=&quot;Hello,World&quot;&gt;&lt;/Hi&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>用 jsx 实现图标组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Icons</span> <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Module</span> &#123;</span><br><span class="line">  [<span class="attr">p</span>:<span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toCamelCase</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123; <span class="comment">// highlight-outlined</span></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>) <span class="comment">// [&#x27;highlight&#x27;, &#x27;outlined&#x27;]</span></span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + e.<span class="title function_">slice</span>(<span class="number">1</span>)) <span class="comment">// [&#x27;Highlight&#x27;, &#x27;Outlined&#x27;]</span></span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// HighlightOutlined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props: &#123;icon: <span class="built_in">string</span>&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">im</span>: <span class="title class_">Module</span> = <span class="title class_">Icons</span></span><br><span class="line">    <span class="keyword">const</span> tag = im[<span class="title function_">toCamelCase</span>(props.<span class="property">icon</span>)] <span class="comment">// 图标组件</span></span><br><span class="line">    <span class="comment">// HighlightOutlined</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">tag</span>&gt;</span><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span> <span class="comment">// 返回组件标签</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="动态路由与菜单"><a href="#动态路由与菜单" class="headerlink" title="动态路由与菜单"></a>动态路由与菜单</h2><p><strong>路由文件</strong></p><p>a6router.js</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStorage &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">Menu</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/Model8080&#x27;</span></span><br><span class="line"><span class="keyword">const</span> clientRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A6Login.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A6NotFound.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A6Main.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:pathMatcher(.*)*&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;remaining&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: clientRoutes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> serverMenus = useStorage&lt;<span class="title class_">Menu</span>[]&gt;(<span class="string">&#x27;serverMenus&#x27;</span>, [])</span><br><span class="line"><span class="keyword">const</span> serverRoutes = useStorage&lt;<span class="title class_">Route</span>[]&gt;(<span class="string">&#x27;serverRoutes&#x27;</span>, [])</span><br><span class="line"><span class="title function_">addServerRoutes</span>(serverRoutes.<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addServerRoutes</span>(<span class="params">routeList: Route[]</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> r <span class="keyword">of</span> routeList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r.<span class="property">parentName</span>) &#123;</span><br><span class="line">      router.<span class="title function_">addRoute</span>(r.<span class="property">parentName</span>, &#123;</span><br><span class="line">        <span class="attr">path</span>: r.<span class="property">path</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(r.<span class="property">component</span>),</span><br><span class="line">        <span class="attr">name</span>: r.<span class="property">name</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  serverRoutes.<span class="property">value</span> = routeList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resetRoutes</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> r <span class="keyword">of</span> clientRoutes) &#123;</span><br><span class="line">    router.<span class="title function_">addRoute</span>(r)</span><br><span class="line">  &#125;</span><br><span class="line">  serverRoutes.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">  serverMenus.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>本文件重要的函数及变量</p><ul><li>addServerRoutes 函数向路由表中添加由服务器提供的路由，路由分成两部分<ul><li>clientRoutes 这是客户端固定的路由</li><li>serverRoutes 这是服务器变化的路由，存储于 localStorage</li></ul></li><li>resetRoutes 函数用来将路由重置为 clientRoutes <ul><li>vue-router@4 中的 addRoute 方法会【覆盖】同名路由，这是这种实现的关键</li><li>因此，服务器返回的路由最好是 main 的子路由，这样重置时就会比较简单，用之前的 main 一覆盖就完事了</li></ul></li><li>serverMenus 变量记录服务器变化的菜单，存储于 localStorage</li></ul><p><br></p><p><strong>登录组件</strong></p><p>动态路由应当在登录时生成，A6Login.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login&quot;&gt;</span><br><span class="line">    &lt;a-form :label-col=&quot;&#123; span: 6 &#125;&quot; autocomplete=&quot;off&quot;&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;用户名&quot; v-bind=&quot;validateInfos.username&quot;&gt;</span><br><span class="line">        &lt;a-input v-model:value=&quot;dto.username&quot; /&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;密码&quot; v-bind=&quot;validateInfos.password&quot;&gt;</span><br><span class="line">        &lt;a-input-password v-model:value=&quot;dto.password&quot; /&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item :wrapper-col=&quot;&#123; offset: 6, span: 16 &#125;&quot;&gt;</span><br><span class="line">        &lt;a-button type=&quot;primary&quot; @click=&quot;onClick&quot;&gt;Submit&lt;/a-button&gt;</span><br><span class="line">      &lt;/a-form-item&gt;      </span><br><span class="line">    &lt;/a-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; Form &#125; from &#x27;ant-design-vue&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import axios from &#x27;../api/request&#x27;</span><br><span class="line">import &#123; useRequest &#125; from &#x27;vue-request&#x27;</span><br><span class="line">import &#123; AxiosRespToken, LoginDto, AxiosRespMenuAndRoute &#125; from &#x27;../model/Model8080&#x27;</span><br><span class="line">import &#123; resetRoutes, addServerRoutes, serverMenus &#125; from &#x27;../router/a6router&#x27;</span><br><span class="line">const dto = ref(&#123;username:&#x27;&#x27;, password:&#x27;&#x27;&#125;)</span><br><span class="line">const rules = ref(&#123;</span><br><span class="line">  username: [</span><br><span class="line">    &#123;required: true, message:&#x27;用户名必填&#x27;&#125;</span><br><span class="line">  ],</span><br><span class="line">  password:[</span><br><span class="line">    &#123;required: true, message:&#x27;密码必填&#x27;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">const &#123; validateInfos, validate &#125; = Form.useForm(dto, rules)</span><br><span class="line">const router = useRouter()</span><br><span class="line">const &#123; runAsync:login &#125; = useRequest&lt;AxiosRespToken, LoginDto[]&gt;((dto)=&gt; axios.post(&#x27;/api/loginJwt&#x27;, dto), &#123;manual:true&#125;)</span><br><span class="line">const &#123; runAsync:menu &#125; = useRequest&lt;AxiosRespMenuAndRoute, string[]&gt;((username)=&gt; axios.get(`/api/menu/$&#123;username&#125;`), &#123;manual:true&#125;)</span><br><span class="line">async function onClick() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await validate()</span><br><span class="line">    const loginResp = await login(dto.value</span><br><span class="line">    if(loginResp.data.code === 200) &#123; // 登录成功</span><br><span class="line">      const token = loginResp.data.data.token</span><br><span class="line">      const menuResp = await menu(dto.value.username)</span><br><span class="line">      const routeList = menuResp.data.data.routeList</span><br><span class="line">      addServerRoutes(routeList)</span><br><span class="line">      serverMenus.value = menuResp.data.data.menuTree</span><br><span class="line">      router.push(&#x27;/&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  resetRoutes()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.login&#123;</span><br><span class="line">  margin: 200px auto;</span><br><span class="line">  width: 25%;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  height: 180px;</span><br><span class="line">  background-color: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>登录成功后去请求 <code>/api/menu/&#123;username&#125;</code>  获取该用户的菜单和路由</li><li>router.push 方法用来以编程方式跳转至主页路由</li></ul><p><br></p><p><strong>主页组件</strong></p><p>A6Main.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a6main&quot;&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header&gt;</span><br><span class="line">      &lt;/a-layout-header&gt;</span><br><span class="line">      &lt;a-layout&gt;</span><br><span class="line">        &lt;a-layout-sider&gt;</span><br><span class="line">          &lt;a-menu mode=&quot;inline&quot; theme=&quot;dark&quot;&gt;</span><br><span class="line">            &lt;template v-for=&quot;m1 of serverMenus&quot;&gt;</span><br><span class="line">              &lt;a-sub-menu v-if=&quot;m1.children&quot; :key=&quot;m1.id&quot; :title=&quot;m1.title&quot;&gt;</span><br><span class="line">                &lt;template #icon&gt;&lt;a-icon :icon=&quot;m1.icon&quot;&gt;&lt;/a-icon&gt;&lt;/template&gt;</span><br><span class="line">                &lt;a-menu-item v-for=&quot;m2 of m1.children&quot; :key=&quot;m2.id&quot;&gt;</span><br><span class="line">                  &lt;template #icon&gt;&lt;a-icon :icon=&quot;m2.icon&quot;&gt;&lt;/a-icon&gt;&lt;/template&gt;</span><br><span class="line">                  &lt;router-link v-if=&quot;m2.routePath&quot; :to=&quot;m2.routePath&quot;&gt;&#123;&#123;m2.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">                  &lt;span v-else&gt;&#123;&#123;m2.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;/a-menu-item&gt;</span><br><span class="line">              &lt;/a-sub-menu&gt;</span><br><span class="line">              &lt;a-menu-item v-else :key=&quot;m1.id&quot;&gt;</span><br><span class="line">                &lt;template #icon&gt;&lt;a-icon :icon=&quot;m1.icon&quot;&gt;&lt;/a-icon&gt;&lt;/template&gt;</span><br><span class="line">                &lt;router-link v-if=&quot;m1.routePath&quot; :to=&quot;m1.routePath&quot;&gt;&#123;&#123;m1.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">                &lt;span v-else&gt;&#123;&#123;m1.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">              &lt;/a-menu-item&gt;</span><br><span class="line">            &lt;/template&gt;            </span><br><span class="line">          &lt;/a-menu&gt;</span><br><span class="line">        &lt;/a-layout-sider&gt;</span><br><span class="line">        &lt;a-layout-content&gt;</span><br><span class="line">          &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/a-layout-content&gt;</span><br><span class="line">      &lt;/a-layout&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import AIcon from &#x27;../components/AIcon3&#x27; // jsx icon 组件</span><br><span class="line">import &#123; serverMenus &#125; from &#x27;../router/a6router&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.a6main &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background-color: rgb(220, 225, 255);</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.ant-layout-header &#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background-color:darkseagreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-sider &#123;</span><br><span class="line">  background-color:lightsalmon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-content &#123;</span><br><span class="line">  background-color: aliceblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-footer &#123;</span><br><span class="line">  background-color:darkslateblue;</span><br><span class="line">  height: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-has-sider &#123;</span><br><span class="line">  height: calc(100% - 50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="token-使用"><a href="#token-使用" class="headerlink" title="token 使用"></a>token 使用</h2><ol><li>获取用户信息，例如服务器端可以把用户名、该用户的路由、菜单信息都统一从 token 返回</li><li>前端路由跳转依据，例如跳转前检查 token，如果不存在，表示未登录，就避免跳转至某些路由</li><li>后端 api 访问依据，例如每次发请求携带 token，后端需要身份校验的 api 需要用到</li></ol><p><br></p><h1 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h1><p>需求：在组件 p1 里更新了数据，主页组件也同步更新显示</p><ul><li>storage 虽然可以实现多个组件的数据共享，但是需要【主动访问】才能获取更新后的数据</li><li>本例中由于没有涉及主页组件的 mounted 操作，因此并不会【主动】获取 storage 的数据 </li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><p>在 main.ts 中引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="variable constant_">A6</span>).<span class="title function_">use</span>(antdv).<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>()).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="定义Store"><a href="#定义Store" class="headerlink" title="定义Store"></a>定义Store</h2><p>再新建 store 目录来管理共享数据，下面是 /src/store/UserInfo.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;../api/request&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserInfoDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/Model8080&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserInfo = <span class="title function_">defineStore</span>(<span class="string">&#x27;userInfo&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">get</span>(<span class="params">username: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> resp = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`/api/info/<span class="subst">$&#123;username&#125;</span>`</span>)</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>, resp.<span class="property">data</span>.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">update</span>(<span class="params">dto: UserInfoDto</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/info&#x27;</span>, dto)</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>, dto)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>定义了 useUserInfo 函数，用来获取共享数据，它可能用于多个组件</p><ul><li>命名习惯上，函数变量以 use 打头</li></ul></li><li><p>state 定义数据格式</p></li><li><p>actions 定义操作数据的方法</p><ul><li><p>get 方法用来获取用户信息</p></li><li><p>update 方法用来修改用户信息</p></li></ul></li></ul><ul><li>由于 useRequest 必须放在 setup 函数内，这里简化起见，直接使用了 axios</li></ul><p>获取用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a6main&quot;&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;serverUsername&#125;&#125; 【&#123;&#123;userInfo.name&#125;&#125; - &#123;&#123;userInfo.sex&#125;&#125;】&lt;/span&gt;</span><br><span class="line">      &lt;/a-layout-header&gt;</span><br><span class="line">      &lt;a-layout&gt;</span><br><span class="line">        &lt;!-- ... --&gt;</span><br><span class="line">      &lt;/a-layout&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">import AIcon from &#x27;../components/AIcon3&#x27; // jsx icon 组件</span><br><span class="line">import &#123; serverMenus, serverUsername &#125; from &#x27;../router/a6router&#x27;</span><br><span class="line">import &#123; useUserInfo &#125; from &#x27;../store/UserInfo&#x27;</span><br><span class="line">const userInfo = useUserInfo()</span><br><span class="line"></span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  userInfo.get(serverUsername.value)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>修改用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a6p1&quot;&gt;</span><br><span class="line">    &lt;h3&gt;修改用户信息&lt;/h3&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;a-form&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;用户名&quot;&gt;</span><br><span class="line">        &lt;a-input readonly v-model:value=&quot;dto.username&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;姓名&quot; v-bind=&quot;validateInfos.name&quot;&gt;</span><br><span class="line">        &lt;a-input v-model:value=&quot;dto.name&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;性别&quot;&gt;</span><br><span class="line">        &lt;a-radio-group v-model:value=&quot;dto.sex&quot;&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;男&quot;&gt;男&lt;/a-radio-button&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;女&quot;&gt;女&lt;/a-radio-button&gt;</span><br><span class="line">        &lt;/a-radio-group&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">    &lt;/a-form&gt;</span><br><span class="line">    &lt;a-button type=&quot;primary&quot; @click=&quot;onClick&quot;&gt;确定&lt;/a-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Form &#125; from &#x27;ant-design-vue&#x27;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; UserInfoDto &#125; from &#x27;../model/Model8080&#x27;</span><br><span class="line">import &#123; useUserInfo &#125; from &#x27;../store/UserInfo&#x27;;</span><br><span class="line">const dto = ref&lt;UserInfoDto&gt;(&#123; username: &#x27;&#x27;, name: &#x27;&#x27;, sex: &#x27;&#x27; &#125;)</span><br><span class="line">const userInfo = useUserInfo()</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  Object.assign(dto.value, userInfo)</span><br><span class="line">&#125;)</span><br><span class="line">const rules = ref(&#123;</span><br><span class="line">  name: [</span><br><span class="line">    &#123;required: true, message:&#x27;姓名必填&#x27;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">const &#123; validateInfos, validate &#125; = Form.useForm(dto, rules)</span><br><span class="line">async function onClick() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await validate()</span><br><span class="line">    await userInfo.update(dto.value)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>不能直接把 userInfo 绑定到表单，需要 dto 中转一下</li><li>userInfo.update 和 useInfo.get 返回的都是 Promise 对象，可以配合 await 一起用</li></ul>]]></content>
    
    
    <summary type="html">Java前端技术基础，Vue3</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="https://windcrain.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://windcrain.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础</title>
    <link href="https://windcrain.top/post/TypeScript/"/>
    <id>https://windcrain.top/post/TypeScript/</id>
    <published>2023-07-09T08:31:55.000Z</published>
    <updated>2023-07-22T15:54:30.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态类型的问题"><a href="#动态类型的问题" class="headerlink" title="动态类型的问题"></a>动态类型的问题</h1><p> js 属于动态类型语言，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">obj</span>) &#123;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obj 可能只是个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;hello, world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>obj 也有可能是个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello, world&#x27;</span>))</span><br></pre></td></tr></table></figure><p>obj 类型不确定，就给后期使用者带来了麻烦，一旦参数传不对，代码就崩溃了</p><p>动态类型意味着</p><ul><li>运行代码时才知道发生什么 (running the code to see what happens)</li></ul><p>静态类型意味着</p><ul><li>在代码运行前，就对它的行为做出预测 (make predications about what code is expected before it runs)</li></ul><p>下面的 typescript 代码，就在代码运行前对参数加入了约束限制</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">msg : <span class="built_in">string</span></span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>限制了参数只能做 string 那些事</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">msg : <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">  <span class="title function_">msg</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>限制了参数只能做函数那些事</li></ul><p><br></p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>安装 typescript 编译器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>编写 ts 代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">msg: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>(<span class="string">&#x27;hello,world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行 tsc 编译命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts</span><br></pre></td></tr></table></figure><p>编译生成 js 代码，编译后进行了类型擦除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hello</span>(<span class="string">&#x27;hello,world&#x27;</span>);</span><br></pre></td></tr></table></figure><p>再来一个例子，用 interface 定义用户类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">u: User</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">name</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhangs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">u</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhangs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br></pre></td></tr></table></figure><p>可见，typescript 属于编译时实施类型检查（静态类型）的技术</p><p><br></p><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><div class="table-container"><table><thead><tr><th>类型</th><th>例</th><th>备注</th></tr></thead><tbody><tr><td>字符串类型</td><td>string</td><td></td></tr><tr><td>数字类型</td><td>number</td><td></td></tr><tr><td>布尔类型</td><td>boolean</td><td></td></tr><tr><td>数组类型</td><td>number[],string[], boolean[] 依此类推</td><td></td></tr><tr><td>任意类型</td><td>any</td><td>相当于又回到了没有类型的时代</td></tr><tr><td>复杂类型</td><td>type 与 interface</td><td></td></tr><tr><td>函数类型</td><td>() =&gt; void</td><td>对函数的参数和返回值进行说明</td></tr><tr><td>字面量类型</td><td>“a”\</td><td>“b”\</td><td>“c”</td><td>限制变量或参数的取值</td></tr><tr><td>nullish类型</td><td>null 与 undefined</td><td></td></tr><tr><td>泛型</td><td><code>&lt;T&gt;</code>，<code>&lt;T extends 父类型&gt;</code></td></tr></tbody></table></div><p><br></p><h2 id="标注位置"><a href="#标注位置" class="headerlink" title="标注位置"></a>标注位置</h2><p><strong>标注变量</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&#x27;hello,world&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>一般可以省略，因为可以根据后面的字面量推断出前面变量类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;hello,world&#x27;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>标注参数</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候，都能够推断出参数类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Eve&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> lowercaseNames = names.<span class="title function_">map</span>(<span class="function">(<span class="params">e: <span class="built_in">string</span></span>) =&gt;</span> e.<span class="title function_">toLowerCase</span>())</span><br></pre></td></tr></table></figure><ul><li>可以用类型推断，推断出 e 是 string 类型</li></ul><p><br></p><p><strong>标注返回值</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) : <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一般也可以省略，因为可以根据返回值做类型推断</li></ul><p><br></p><h2 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h2><p><strong>type</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Cat</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c1</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c2</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span> &#125;  <span class="comment">// 错误: 缺少 age 属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c3</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小黑&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="string">&#x27;公&#x27;</span> &#125; <span class="comment">// 错误: 多出 sex 属性</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>interface</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c1</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c2</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span> &#125;  <span class="comment">// 错误: 缺少 age 属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c3</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小黑&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="string">&#x27;公&#x27;</span> &#125; <span class="comment">// 错误: 多出 sex 属性</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>可选属性</strong></p><p>如果需要某个属性可选，可以用下面的语法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c1</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c2</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span> &#125;  <span class="comment">// 正确: age 属性可选</span></span><br></pre></td></tr></table></figure><ul><li>可选属性要注意处理 undefined 值</li></ul><p><br></p><p><strong>鸭子类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">cat: Cat</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125; </span><br><span class="line"><span class="title function_">test</span>(c1)</span><br></pre></td></tr></table></figure><ul><li>const c1 并没有声明类型为 Cat，但它与 Cat 类型有一样的属性，也可以被当作是 Cat 类型</li></ul><p><br> </p><h2 id="方法类型"><a href="#方法类型" class="headerlink" title="方法类型"></a>方法类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Api</span> &#123;</span><br><span class="line">  <span class="title function_">foo</span>(): <span class="built_in">void</span>,</span><br><span class="line">  <span class="title function_">bar</span>(<span class="attr">str</span>: <span class="built_in">string</span>): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">api: Api</span>) &#123;</span><br><span class="line">  api.<span class="title function_">foo</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(api.<span class="title function_">bar</span>(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(&#123;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>) &#125;,</span><br><span class="line">  <span class="title function_">bar</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123; <span class="keyword">return</span> str.<span class="title function_">toUpperCase</span>() &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printText</span>(<span class="params">s: <span class="built_in">string</span>, alignment: <span class="string">&quot;left&quot;</span> | <span class="string">&quot;right&quot;</span> | <span class="string">&quot;center&quot;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s, alignment)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printText</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="title function_">printText</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>) <span class="comment">// 错误: 取值只能是 left | right | center</span></span><br></pre></td></tr></table></figure><h2 id="nullish-类型"><a href="#nullish-类型" class="headerlink" title="nullish 类型"></a>nullish 类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">x?: <span class="built_in">string</span> | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x?.<span class="title function_">toUpperCase</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="title function_">test</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><ul><li>x?: string | null 表示可能是 undefined 或者是 string 或者是 null</li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>下面的几个类型声明显然有一定的相似性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">RefString</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RefNumber</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RefBoolean</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">r1</span>: <span class="title class_">RefString</span> = &#123; <span class="attr">value</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r2</span>: <span class="title class_">RefNumber</span> = &#123; <span class="attr">value</span>: <span class="number">123</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r3</span>: <span class="title class_">RefBoolean</span> = &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure><p>可以改进为</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Ref</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">value</span>: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">r1</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">string</span>&gt; = &#123; <span class="attr">value</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r2</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">number</span>&gt; = &#123; <span class="attr">value</span>: <span class="number">123</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r3</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">boolean</span>&gt; = &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>泛型的要点就是 <code>&lt;类型参数&gt;</code>，把【类型】也当作一个变化的要素，像参数一样传递过来，这样就可以派生出结构相似的新类型</li></ul><p>函数定义也支持泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> ref&lt;T&gt;(<span class="attr">n</span>: T): <span class="title class_">Ref</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">value</span>: n &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v1 = <span class="title function_">ref</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// Ref&lt;string&gt;</span></span><br><span class="line"><span class="keyword">const</span> v2 = <span class="title function_">ref</span>(<span class="number">123.3333</span>);<span class="comment">// Ref&lt;number&gt;</span></span><br><span class="line"></span><br><span class="line">v1.<span class="property">value</span>.<span class="title function_">toLocaleLowerCase</span>()</span><br><span class="line">v2.<span class="property">value</span>.<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><br></p><h1 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h1><h2 id="更好理解框架"><a href="#更好理解框架" class="headerlink" title="更好理解框架"></a>更好理解框架</h2><p>现在越来越多的前端框架采用 typescript，如果懂 typescript 语法，可以更好地阅读框架代码</p><p>以 Map 为例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;()</span><br><span class="line">map</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value,key,m</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value, key)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>注意编译需要 <code>tsc --target es6 .\xxx.ts</code></li></ul><p><br></p><h2 id="更好的提示"><a href="#更好的提示" class="headerlink" title="更好的提示"></a>更好的提示</h2><p>例如，从服务器返回的一段 json，如果不用 typescript，则编辑器也不能给出准确的提示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">`&#123; &quot;name&quot;:&quot;张三&quot;, &quot;age&quot;:18 &#125;`</span>)</span><br></pre></td></tr></table></figure><p><br></p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><blockquote><p>关于 TypeScript 与 JavaScript 中的类语法不是重点，class 相关语法只是起到辅助作用，更重要的是前面讲的 interface</p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其实会被编译成这个样子（默认 —target=es3）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = <span class="comment">/** <span class="doctag">@class</span> */</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">User</span>;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure><p>所以 js 中的 class，并不等价于 java 中的 class，它还是基于原型实现的。</p><p><br></p><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">u.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span><span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><ul><li>readonly 是 typescript 特有的，表示该属性只读</li></ul><p><br></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>]正在学习`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">u.<span class="title function_">study</span>()</span><br></pre></td></tr></table></figure><p><br></p><h2 id="get，set"><a href="#get，set" class="headerlink" title="get，set"></a>get，set</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">name</span>)</span><br><span class="line">u.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><ul><li>注意，需要在编译时加上 <code>tsc --target es6 .\xxx.ts</code> 选项</li><li>es6 等价于 es2015，再此之上还有 es2016 … es2022</li></ul><p><br></p><h2 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">study</span>(<span class="attr">course</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">implements</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">study</span>(<span class="params">course: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>]正在学习[<span class="subst">$&#123;course&#125;</span>]`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = <span class="keyword">new</span> <span class="title class_">UserImpl</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">user.<span class="title function_">study</span>(<span class="string">&#x27;Typescript&#x27;</span>)</span><br><span class="line">user.<span class="title function_">foo</span>() <span class="comment">// 错误，必须是接口中定义的方法</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="继承与接口"><a href="#继承与接口" class="headerlink" title="继承与接口"></a>继承与接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在飞翔`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">Flyable</span> &amp; <span class="title class_">Animal</span> = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;小花&quot;</span>)</span><br><span class="line">b.<span class="title function_">fly</span>()</span><br></pre></td></tr></table></figure><ul><li>Flyable &amp; Animal 表示变量是 flyable 类型，同时也是 Animal 类型</li></ul><p><br></p><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">  <span class="title function_">study</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`father study`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;  </span><br><span class="line">  <span class="title function_">study</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">study</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`son study`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f</span>: <span class="title class_">Father</span> = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line">f.<span class="title function_">study</span>()</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    
    <summary type="html">Java前端技术基础，TypeScript</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="https://windcrain.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://windcrain.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Java前端技术基础</title>
    <link href="https://windcrain.top/post/Java%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    <id>https://windcrain.top/post/Java%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/</id>
    <published>2023-07-05T01:57:55.000Z</published>
    <updated>2023-07-22T15:54:30.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML与CSS"><a href="#HTML与CSS" class="headerlink" title="HTML与CSS"></a>HTML与CSS</h1><p>HTML是超文本标记语言（HyperText Markup Language）的缩写。它是一种用于创建网页和Web应用程序的标准标记语言。HTML使用标签来标记文档中的元素，定义它们的结构和内容。</p><p>CSS是级联（层叠）样式表（Cascading Style Sheets）。它是一种用于描述网页的表现和展示效果。</p><p>CSS与HTML结合使用，可以控制网页中各个元素的布局、颜色、字体、大小、背景等外观特征。</p><p><br></p><h2 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML 元素"></a>HTML 元素</h2><p>HTML 由一系列元素 <code>elements</code> 组成，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>整体称之为元素</li><li><code>&lt;p&gt;</code> 和 <code>&lt;/p&gt;</code> 分别称为起始和结束标签</li><li><p>标签包围起来的 Hello, world 称之为内容</p></li><li><p>p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落</p></li></ul><p>元素还可以有属性，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识</li></ul><p>元素之间可以嵌套，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大<span class="tag">&lt;/<span class="name">b</span>&gt;</span>的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误嵌套写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不包含内容的元素称之为空元素，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>img 作用是用来展示图片</li><li>src 属性用来指明图片路径</li></ul><p><br></p><h2 id="HTML-页面"><a href="#HTML-页面" class="headerlink" title="HTML 页面"></a>HTML 页面</h2><p>前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>html</code> 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素</li><li><code>head</code> 元素包含的是那些不用于展现内容的元素，如 <code>title</code>，<code>link</code>，<code>meta</code> 等</li><li><code>body</code> 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素</li></ul><p><br></p><h2 id="常见元素"><a href="#常见元素" class="headerlink" title="常见元素"></a>常见元素</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p><strong>Heading</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2号标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3号标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4号标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>5号标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>6号标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Paragraph</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>List</strong></p><p>无序列表 unordered list</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多级列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    北京市</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>海淀区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>朝阳区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>昌平区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    河北省</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>石家庄<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>保定<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Anchor</strong></p><p>锚，超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;网页地址&quot;</span>&gt;</span>超链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><p><strong>Image</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>src 格式有 3 种</p><ul><li><p>文件地址</p></li><li><p>data URL，格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:媒体类型;base64,数据</span><br></pre></td></tr></table></figure></li><li><p>object URL，需要配合 javascript 使用</p></li></ul><p><br><strong>Video</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><strong>Audio</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p><strong>作用与语法</strong></p><p>表单的作用：<strong>收集</strong>用户填入的<strong>数据</strong>，并将这些数据<strong>提交给服务器</strong></p><p>表单的语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;服务器地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;请求方式&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;数据格式&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单项 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>method 请求方式有 <ul><li>get （默认）提交时，数据跟在 URL 地址之后</li><li>post 提交时，数据在请求体内</li></ul></li><li>enctype 在 post 请求时，指定请求体的数据格式<ul><li>application/x-www-form-urlencoded（默认）</li><li>multipart/form-data</li></ul></li><li>其中表单项提供多种收集数据的方式<ul><li>有 name 属性的表单项数据，才会被发送给服务器</li></ul></li></ul><p><strong>常见的表单项</strong></p><p>文本框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uesrname&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>密码框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>隐藏框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日期框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;唱歌&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;逛街&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><h3 id="请求组成"><a href="#请求组成" class="headerlink" title="请求组成"></a>请求组成</h3><p>请求由三部分组成</p><ol><li>请求行</li><li>请求头</li><li>请求体</li></ol><p>可以用 telnet 程序测试</p><p><br></p><h3 id="请求方式与数据格式"><a href="#请求方式与数据格式" class="headerlink" title="请求方式与数据格式"></a>请求方式与数据格式</h3><p><strong>get 请求示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /test2?name=%E5%BC%A0&amp;age=20 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><ul><li>%E5%BC%A0 是【张】经过 URL 编码后的结果</li></ul><p><br></p><p><strong>post 请求示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 21</span><br><span class="line"></span><br><span class="line">name=%E5%BC%A0&amp;age=18</span><br></pre></td></tr></table></figure><p>application/x-www-form-urlencoed 格式细节：</p><ul><li>参数分成名字和值，中间用 = 分隔</li><li>多个参数使用 &amp; 进行分隔</li><li>【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送</li></ul><p><br><strong>json 请求示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test3 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 25</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure><p>json 对象格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;属性名&quot;:属性值&#125;</span><br></pre></td></tr></table></figure><p>其中属性值可以是</p><ul><li>字符串 “”</li><li>数字</li><li>true, false</li><li>null</li><li>对象</li><li>数组</li></ul><p>json 数组格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[元素1, 元素2, ...]</span><br></pre></td></tr></table></figure><p><br><strong>multipart 请求示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: multipart/form-data; boundary=123</span><br><span class="line">Content-Length: 125</span><br><span class="line"></span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">lisi</span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;age&quot;</span><br><span class="line"></span><br><span class="line">30</span><br><span class="line">--123--</span><br></pre></td></tr></table></figure><ul><li>boundary=123 用来定义分隔符</li><li>起始分隔符是 <code>--分隔符</code></li><li>结束分隔符是 <code>--分隔符--</code></li></ul><p><br><strong>数据格式小结</strong></p><p>客户端发送</p><ul><li>编码 <ul><li>application/x-www-form-urlencoded ：url 编码</li><li>application/json：utf-8 编码</li><li>multipart/form-data：每部分编码可以不同</li></ul></li><li>表单只支持以 application/x-www-form-urlencoded 和 multipart/form-data 格式发送数据</li><li>文件上传需要用 multipart/form-data 格式</li><li>js 代码可以支持任意格式发送数据 </li></ul><p>服务端接收</p><ul><li>对 application/x-www-form-urlencoded 和 multipart/form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可</li><li>对于 applicaiton/json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式</li></ul><p><br></p><h3 id="session-原理"><a href="#session-原理" class="headerlink" title="session 原理"></a>session 原理</h3><p>Http 无状态，有会话</p><ul><li>无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用</li><li>有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享</li></ul><p>服务端使用了 session 技术来暂存数据</p><p>存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /s1?name=zhang HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /s2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Cookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D</span><br></pre></td></tr></table></figure><p><br></p><p>session 技术实现身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line">participant Session</span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L -&gt;&gt; +Session : 存入用户名</span><br><span class="line">Session --&gt;&gt; -L: </span><br><span class="line">L --&gt;&gt; -Client: 登录成功</span><br><span class="line">end</span><br><span class="line">rect rgb(200, 190, 255)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求</span><br><span class="line">i -&gt;&gt; +Session : 获取用户名</span><br><span class="line">Session --&gt;&gt; -i : </span><br><span class="line">i -&gt;&gt; i: 用户名存在，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307051027890.png" alt=""></p><p><br></p><h3 id="jwt-原理"><a href="#jwt-原理" class="headerlink" title="jwt 原理"></a>jwt 原理</h3><p>jwt 技术实现身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line"></span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L --&gt;&gt; -Client : 登录成功，返回token</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rect rgb(150, 190, 155)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求，携带token</span><br><span class="line">i -&gt;&gt; i : 校验token，校验无误，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307051027856.png" alt=""></p><p>生成 token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /j1?name=zhang&amp;pass=123 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>校验 token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /j2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Authorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28</span><br></pre></td></tr></table></figure><p><br></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>即 Cascading  Style  Sheets，它描述了网页的表现与展示效果</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>type 选择器 - 根据标签名进行匹配（元素选择器）<code>p</code></li><li><p>class 选择器 - 根据元素的 class 属性进行匹配<code>.c</code></p></li><li><p>id 选择器  - 根据元素的 id 属性进行匹配<code>#id</code></p></li></ul><p><br></p><h3 id="属性和值"><a href="#属性和值" class="headerlink" title="属性和值"></a>属性和值</h3><ul><li>background-color : red;</li><li>…</li><li>display</li></ul><p><br></p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>与布局相关的 html 元素</p><ul><li>div</li><li>template</li></ul><p><br></p><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p>Javascript是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等。</p><p><br></p><h2 id="变量与数据类型"><a href="#变量与数据类型" class="headerlink" title="变量与数据类型"></a>变量与数据类型</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p><strong>let :star:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名 = 值;</span><br></pre></td></tr></table></figure><ul><li>let 声明的变量可以被多次赋值，例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;  <span class="comment">// 初始值是 100</span></span><br><span class="line">a = <span class="number">200</span>;  <span class="comment">// ok, 被重新赋值为 200</span></span><br></pre></td></tr></table></figure><p><br><strong>const :star:</strong></p><ul><li>const 修饰的叫常量，只能赋值一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="number">300</span>; <span class="comment">// 初始值是 300</span></span><br><span class="line">b = <span class="number">400</span>;   <span class="comment">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure><ul><li>const 并不意味着它引用的内容不可修改，例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">c[<span class="number">2</span>] = <span class="number">4</span>;         <span class="comment">// ok, 数组内容被修改成 [1,2,4]</span></span><br><span class="line">c = [<span class="number">5</span>,<span class="number">6</span>];<span class="comment">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>var</strong></p><p>var 声明的变量可以被多次赋值，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="number">100</span>;</span><br><span class="line">f = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ul><li><p><a href="#1.undefined 和 null">undefined 和 null</a></p></li><li><p><a href="#2.string">string ⭐</a></p></li><li><p><a href="#3.number 和 bigint">number 和 bigint⭐</a></p></li><li><p><a href="#4.boolean">boolean⭐</a></p></li><li><p><a href="#5.symbol">symbol</a></p></li></ul><hr><p><strong>undefined 和 null</strong><span id="1.undefined 和 null"></span></p><ul><li>执行表达式或函数，没有返回结果，出现 undefined</li><li>访问数组不存在的元素，访问对象不存在的属性，出现 undefined</li><li>定义变量，没有初始化，出现 undefined</li></ul><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);  <span class="comment">// 函数没有返回值, 结果是  undefined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>; <span class="comment">// 表达式没有返回值, 结果是 undefined</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b[<span class="number">10</span>]); <span class="comment">// 数组未定义元素是 undefined</span></span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="property">age</span>); <span class="comment">// 对象未定义属性是 undefined</span></span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">// 变量未初始化是 undefined</span></span><br></pre></td></tr></table></figure><p>二者共同点</p><ul><li>都没有属性、方法</li><li>二者合称 Nullish</li></ul><p>二者区别</p><ul><li>undefined 由 js 产生</li><li>null 由程序员提供</li></ul><p><br></p><p><strong>string⭐</strong><span id="2.string"></span></p><p>js 字符串三种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;hello&quot;</span>;  <span class="comment">// 双引号</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;world&#x27;</span>;  <span class="comment">// 单引号</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">`hello`</span>;  <span class="comment">// 反引号</span></span><br></pre></td></tr></table></figure><p>html 代码如下，用 java 和 js 中的字符串如何表示？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.html&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java 显得比较繁琐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;&lt;a href=\&quot;1.html\&quot;&gt;超链接&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>js 就比较灵活</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&#x27;&lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">`&lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;`</span>;</span><br></pre></td></tr></table></figure><p>模板字符串（Template strings）</p><p>需求：拼接 URI 的请求参数，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/test?name=zhang&amp;age=18</span><br><span class="line">/test?name=li&amp;age=20</span><br></pre></td></tr></table></figure><p>传统方法拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ; <span class="comment">// zhang li ...</span></span><br><span class="line"><span class="keyword">let</span> age = ; <span class="comment">// 18 20 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;/test?name=&quot;</span> + name + <span class="string">&quot;&amp;age=&quot;</span> + age;</span><br></pre></td></tr></table></figure><p>模板字符串方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ; <span class="comment">// zhang li ...</span></span><br><span class="line"><span class="keyword">let</span> age = ; <span class="comment">// 18 20 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">`/test?name=<span class="subst">$&#123;name&#125;</span>&amp;age=<span class="subst">$&#123;age&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p><br><strong>number 和 bigint⭐</strong><span id="3.number 和 bigint"></span></p><p>number 类型标识的是双精度浮动小数，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">3</span>;   <span class="comment">// 结果 3.3333333333333335</span></span><br></pre></td></tr></table></figure><p>既然是浮点小数，那么可以除零</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">0</span>;  <span class="comment">// 结果 Infinity 正无穷大</span></span><br><span class="line">-<span class="number">10</span> / <span class="number">0</span>;  <span class="comment">// 结果 -Infinity 负无穷大</span></span><br></pre></td></tr></table></figure><p>浮点小数都有运算精度问题，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.0</span> - <span class="number">1.1</span>; <span class="comment">// 结果 0.8999999999999999</span></span><br></pre></td></tr></table></figure><p>字符串转数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>); <span class="comment">// 结果是数字 10 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10.5&quot;</span>);<span class="comment">// 结果是数字 10, 去除了小数部分</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>) / <span class="number">3</span>; <span class="comment">// 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 转换失败，结果是特殊值 NaN (Not a Number)</span></span><br></pre></td></tr></table></figure><p>要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10n</span> / <span class="number">3n</span>;<span class="comment">// 结果 3n, 按整数除法处理</span></span><br></pre></td></tr></table></figure><p><br><strong>boolean⭐</strong><span id="4.boolean"></span></p><ul><li>Truthy</li><li>Falsy</li></ul><p>在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】… 作为判断条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b) &#123; <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy</p><p>下面值都是 falsy</p><ul><li><code>false</code></li><li><code>Nullish (null, undefined)</code></li><li><code>0, 0n, NaN</code></li><li><code>&quot;&quot; &#39;&#39; `` </code>  即长度为零的字符串</li></ul><p>剩余的值绝大部分都是 truthy</p><p>有几个容易被当作 falsy 实际是 truthy 的</p><ul><li><code>&quot;false&quot;, &quot;0&quot;</code> 即字符串的 false 和 字符串的零</li><li><code>[]</code> 空数组</li><li><code>&#123;&#125;</code> 空对象</li></ul><p><br> <strong>symbol</strong><span id="5.symbol"></span></p><ul><li>Symbol的值是唯一的，用来解决命名冲突问题</li><li>Symbol值不能与其他数据进行运算</li><li>Symbol定义的对象属性不能使用for…in循环遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</li></ul><p><br></p><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><ul><li><a href="#1.Function">Function⭐⭐</a></li><li><a href="#2.Array">Array⭐</a></li><li><a href="#3.Object">Object⭐⭐</a></li></ul><hr><p><strong>1) Function⭐⭐</strong><span id="1.Function"></span></p><p><strong>定义函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><strong>调用函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(实参);</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);     <span class="comment">// 返回 3</span></span><br></pre></td></tr></table></figure><p>js 中的函数调用特点：对参数的<strong>类型</strong>和<strong>个数</strong>都没有限制，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);  <span class="comment">// 返回 ab</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);   <span class="comment">// 返回 9, 第三个参数没有被用到, 不会报错</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>);<span class="comment">// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN</span></span><br></pre></td></tr></table></figure><p><br><strong>默认参数</strong></p><p>java 中（spring）要实现默认参数的效果得这么做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">page</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(defaultValue=&quot;1&quot;)</span> <span class="type">int</span> page, </span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(defaultValue=&quot;10&quot;)</span> <span class="type">int</span> size</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pagination</span>(<span class="params">page = <span class="number">1</span>, size = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(page, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>匿名函数</strong></p><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">参数</span>) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第一种场景：定义完毕后立刻调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>第二种场景：作为其它对象的方法，例如</p><p>页面有元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>点我啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此元素有一个 onclick 方法，会在鼠标单击这个元素后被执行，onclick 方法刚开始是 null，需要赋值后才能使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标单击了...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><strong>箭头函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(参数) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有参数，() 还是要保留</li><li>如果只有一个参数，() 可以省略</li><li>如果函数体内只有一行代码，{} 可以省略</li><li>如果这一行代码就是结果，return 可以省略</li></ul><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span>  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aa&quot;</span>);</span><br></pre></td></tr></table></figure><p><br></p><p> <strong>函数是对象</strong></p><p>以下形式在 js 中非常常见！</p><ol><li>可以参与赋值，例，具名函数也能参与赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = abc;</span><br></pre></td></tr></table></figure><ol><li>有属性、有方法，执行 <code>console.dir(abc)</code>，输出结果如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ƒ abc()</span><br><span class="line">    arguments: null</span><br><span class="line">    caller: null</span><br><span class="line">    length: 0</span><br><span class="line">    name: &quot;abc&quot;</span><br><span class="line">    ➡prototype: &#123;constructor: ƒ&#125;</span><br><span class="line">    [[FunctionLocation]]: VM1962:1</span><br><span class="line">    ➡[[Prototype]]: ƒ ()</span><br><span class="line">    ➡[[Scopes]]: Scopes[1]</span><br></pre></td></tr></table></figure><ul><li>其中带有 f 标记的是方法，不带的是属性</li><li><p>带有 ➡ 符号的可以继续展开，限于篇幅省略了</p></li><li><p>带有 <code>[[ ]]</code> 的是内置属性，不能访问，只能查看</p></li><li>相对重要的是 <code>[[Prototype]]</code> 和 <code>[[Scopes]]</code> 会在后面继承和作用域时讲到</li></ul><ol><li>可以作为方法参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">fn</span>) &#123;          <span class="comment">// fn 将来可以是一个函数对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="title function_">fn</span>();                 <span class="comment">// 调用函数对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">b</span>(a)</span><br></pre></td></tr></table></figure><ol><li>可以作为方法返回值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">c</span>()()</span><br></pre></td></tr></table></figure><p><br></p><p><strong>函数作用域</strong></p><p>函数可以嵌套（js 代码中很常见，只是嵌套的形式更多是匿名函数，箭头函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 看这里</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>();</span><br></pre></td></tr></table></figure><ul><li>以函数为分界线划定作用域，所有函数之外是全局作用域</li><li>查找变量时，由内向外查找<ul><li>在内层作用域找到变量，就会停止查找，不会再找外层</li><li>所有作用域都找不到变量，报错</li></ul></li><li>作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试</li></ul><p><br></p><p><strong>闭包</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()();  <span class="comment">// 在外面执行了 b</span></span><br></pre></td></tr></table></figure><ul><li>函数定义时，它的作用域已经确定好了，因此无论函数将来去了哪，都能从它的作用域中找到当时那些变量</li><li>别被概念忽悠了，闭包就是指<strong>函数能够访问自己的作用域中变量</strong></li></ul><p><br></p><p><strong>let、var 与作用域</strong></p><p>如果函数外层引用的是 let 变量，那么外层普通的 {} 也会作为作用域边界，最外层的 let 也占一个 script 作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 因为是同一个变量，还是打印 20</span></span><br></pre></td></tr></table></figure><p>如果是 let，则视为两个作用域中的两个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 10</span></span><br></pre></td></tr></table></figure><p>要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br></pre></td></tr></table></figure><p><br></p><p><strong>2) Array</strong>⭐<span id="2.Array"></span></p><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]); <span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组元素</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="number">5</span>; <span class="comment">// 数组元素变成了 [5,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组元素，其中 length 是数组属性，代表数组长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API</p><ul><li>push、shift、splice</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);    <span class="comment">// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]</span></span><br><span class="line">arr.<span class="title function_">shift</span>();<span class="comment">// 从数组头部(左侧)移除元素, 结果 [2,3,4]</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]</span></span><br></pre></td></tr></table></figure><ul><li>join</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">join</span>(); <span class="comment">// 默认使用【,】作为连接符，结果 &#x27;a,b,c&#x27;</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);<span class="comment">// 结果 &#x27;abc&#x27;</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>);<span class="comment">// 结果 &#x27;a-b-c&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>map、filter、forEach</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">i</span>) &#123;   <span class="comment">// 代表的新旧元素之间的变换规则</span></span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map(a) // 具名函数，结果 [10,20,30,60]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map( (i) =&gt; &#123;return i * 10&#125; ); // 箭头函数</span></span><br><span class="line">arr.<span class="title function_">map</span>( <span class="function"><span class="params">i</span> =&gt;</span> i * <span class="number">10</span> ); <span class="comment">// 箭头函数</span></span><br></pre></td></tr></table></figure><ul><li>传给 map 的函数，参数代表旧元素，返回值代表新元素</li></ul><p>map 的内部实现（伪代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">a</span>) &#123; <span class="comment">// 参数是一个函数</span></span><br><span class="line">    <span class="keyword">let</span> narr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> o = arr[i]; <span class="comment">// 旧元素</span></span><br><span class="line">        <span class="keyword">let</span> n = <span class="title function_">a</span>(o);   <span class="comment">// 新元素</span></span><br><span class="line">        narr.<span class="title function_">push</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> narr;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>filter 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line">arr.<span class="title function_">filter</span>( <span class="function">(<span class="params">i</span>)=&gt;</span> i % <span class="number">2</span> == <span class="number">1</span> ); <span class="comment">// 结果 [1,3]</span></span><br></pre></td></tr></table></figure><ul><li>传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素</li></ul><p>forEach 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for(let i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">    console.log(arr[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>( <span class="function">(<span class="params">i</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i) );</span><br></pre></td></tr></table></figure><p>两个称呼</p><ul><li>高阶函数，map，filter，forEach</li><li>回调函数，例如作为参数传入的函数</li></ul><p><br></p><p><strong>3) Object⭐⭐</strong><span id="3.Object"></span></p><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    属性名: 值,</span><br><span class="line">    方法名: 函数,</span><br><span class="line">    get 属性名() &#123;&#125;,</span><br><span class="line">    set 属性名(新值) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">study</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;小黑&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> study = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123; name, age, study &#125;</span><br></pre></td></tr></table></figure><p>例3（重点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu3 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="title function_">study</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：对象方法这么写，仅限于对象内部</li></ul><p>例4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu4 = &#123;</span><br><span class="line">    <span class="attr">_name</span>: <span class="literal">null</span>, <span class="comment">/*类似于java中私有成员变量*/</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了get&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了set&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 get，set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu4.<span class="property">name</span> = <span class="string">&quot;小白&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu4.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><p><strong>特色：属性增删</strong></p><p>对比一下 Java 中的 Object</p><ul><li>Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的</li><li>js 的对象，不需要什么模板，它的属性和方法可以随时加减</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;;</span><br><span class="line">stu.<span class="property">age</span> = <span class="number">18</span>;<span class="comment">// 添加属性</span></span><br><span class="line"><span class="keyword">delete</span> stu.<span class="property">age</span>;<span class="comment">// 删除属性</span></span><br><span class="line"></span><br><span class="line">stu.<span class="property">study</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">// 添加方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 get，set，需要借助 Object.definePropery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">_name</span>:<span class="literal">null</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(stu, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>参数1：目标对象</li><li>参数2：属性名</li><li>参数3：get，set 的定义</li></ul><p><strong>特色：this</strong></p><p>先来对 Java 中的 this 有个理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">(Student <span class="built_in">this</span>, String subject)</span> &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;在学习 &quot;</span> + subject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下面的代码，本质上是执行 study(stu, &quot;java&quot;)，因此 this 就是 stu</span></span><br><span class="line">        stu.study(<span class="string">&quot;java&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java 中的 this 是个隐式参数</li><li>Java 中，我们说 this 代表的就是调用方法的那个对象</li></ul><p>js 中的 this 也是隐式参数，但它与函数运行时上下文相关</p><p>例如，一个“落单”的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">study</span>(<span class="params">subject</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在学习 &quot;</span> + subject)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">study</span>(<span class="string">&quot;js&quot;</span>);  <span class="comment">// 输出 在学习 js</span></span><br></pre></td></tr></table></figure><p>这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串</p><p>同样的函数，如果作为对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    study</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，会将当前对象作为 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stu.<span class="title function_">study</span>(<span class="string">&#x27;js&#x27;</span>); <span class="comment">// 输出 小白在学习 js</span></span><br></pre></td></tr></table></figure><p>还可以动态改变 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">name</span>:<span class="string">&quot;小黑&quot;</span>&#125;;</span><br><span class="line">study.<span class="title function_">call</span>(stu, <span class="string">&quot;js&quot;</span>);<span class="comment">// 输出 小黑在学习 js</span></span><br></pre></td></tr></table></figure><p>这回 study 执行时，就把 call 的第一个参数 stu 作为 this</p><p>一个<em>例外</em>是，在<strong>箭头函数</strong>内出现的 this，以外层 this 理解 </p><p>用匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">stu.<span class="title function_">play</span>()</span><br></pre></td></tr></table></figure><ul><li>this.name 所在的函数是【落单】的函数，因此 this 代表 window</li></ul><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">与小白在玩耍</span><br><span class="line">与小黑在玩耍</span><br><span class="line">与小明在玩耍</span><br></pre></td></tr></table></figure><p>用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象</li></ul><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小花与小白在玩耍</span><br><span class="line">小花与小黑在玩耍</span><br><span class="line">小花与小明在玩耍</span><br></pre></td></tr></table></figure><p>不用箭头函数的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> me = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(me.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特色：原型继承</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> father = &#123;</span><br><span class="line">    <span class="attr">f1</span>: <span class="string">&#x27;父属性&#x27;</span>,</span><br><span class="line">    <span class="attr">m1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="title class_">Object</span>.<span class="title function_">create</span>(father);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">f1</span>);  <span class="comment">// 打印 父属性</span></span><br><span class="line">son.<span class="title function_">m1</span>();  <span class="comment">// 打印 父方法</span></span><br></pre></td></tr></table></figure><ul><li>father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找</li><li>son 自己可以添加自己的属性和方法</li><li>son 里有特殊属性 <code>__proto__</code> 代表它的父对象，js 术语： son 的原型对象</li><li>不同浏览器对打印 son 的 <code>__proto__</code> 属性时显示不同<ul><li>Edge 打印 console.dir(son) 显示 <code>[[Prototype]]</code></li><li>Firefox 打印 console.dir(son) 显示 <code>&lt;prototype&gt;</code></li></ul></li></ul><p><strong>特色：基于函数的原型继承</strong></p><p>出于方便的原因，js 又提供了一种基于函数的原型继承</p><blockquote><p><strong>函数职责</strong></p><ol><li><p>负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法</p></li><li><p>函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象</p><p><strong>注意！</strong>名字有差异，这个属性的作用就是为新对象提供原型</p></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cons</span>(<span class="params">f2</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建子对象(this), 给子对象提供属性和方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">f2</span> = f2;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">m2</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cons.prototype 就是父对象</span></span><br><span class="line">cons.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">f1</span> = <span class="string">&quot;父属性&quot;</span>;</span><br><span class="line">cons.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">m1</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合 new 关键字，创建子对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title function_">cons</span>(<span class="string">&quot;子属性&quot;</span>)</span><br></pre></td></tr></table></figure><p>子对象的 <code>__proto__</code> 就是函数的 <code>prototype</code> 属性</p><p><strong>JSON</strong></p><p>之前我们讲 http 请求格式时，讲过 json 这种数据格式，它的语法看起来与 js 对象非常相似，例如：</p><p>一个 json 对象可以长这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>一个 js 对象长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么他们的区别在哪儿呢？我总结了这么几点</p><ol><li>本质不同<ul><li>json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货</li><li>js 对象是切切实实的对象，可以有属性方法</li></ul></li><li>语法细节不同<ul><li>json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组</li><li>json 中不能有除以上的其它 js 对象的特性，如方法等</li><li>json 中的属性必须用双引号引起来</li></ul></li></ol><p>json 字符串与 js 对象的转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(json字符串);  <span class="comment">// 返回js对象</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(js对象);  <span class="comment">// 返回json字符串</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h3><p>静态类型语言，如 Java，值有类型，变量也有类型、赋值给变量时，类型要相符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;  <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>而 js 属于动态类型语言，值有类型，但变量没有类型，赋值给变量时，没要求</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100</span>;</span><br><span class="line">b = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">b = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>动态类型看起来比较灵活，但变量没有类型，会给后期维护带来困难，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// obj 的类型未知，必须根据不同类型做出相应的容错处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><ul><li><code>+ - * / % **</code></li><li><code>+= -= *= /= %= **=</code></li><li><code>++ --</code></li><li>位运算、移位运算</li><li><code>== != &gt; &gt;= &lt; &lt;=</code></li><li><code>=== !==</code> ⭐</li><li><code>&amp;&amp; || !</code> ⭐</li><li><code>?? ?.</code> ⭐</li><li><code>...</code> ⭐</li><li>解构赋值⭐</li></ul><hr><h3 id=""><a href="#" class="headerlink" title="==="></a>===</h3><p>严格相等运算符，用作逻辑判等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1</span>    <span class="comment">// 返回 true </span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 true，会先将右侧的字符串转为数字，再做比较</span></span><br><span class="line"><span class="number">1</span> === <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 false，类型不等，直接返回 false</span></span><br></pre></td></tr></table></figure><p>typeof 查看某个值的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span><span class="comment">// 返回 &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="-1"><a href="#-1" class="headerlink" title="||"></a>||</h3><p>需求，如果参数 n 没有传递，给它一个【男】</p><p><strong>推荐</strong>做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n = <span class="string">&#x27;男&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        n = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可能是这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = (n === <span class="literal">undefined</span>) ? <span class="string">&#x27;男&#x27;</span> : n;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些老旧代码中可能的做法（不推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = n || <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的语法是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值<span class="number">1</span> || 值<span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2</p><p><br></p><h3 id="与"><a href="#与" class="headerlink" title="?? 与 ?."></a>?? 与 ?.</h3><p><strong>??</strong></p><p>需求，如果参数 n 没有传递或是 null，给它一个【男】</p><p>如果用传统办法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="literal">undefined</span> || n === <span class="literal">null</span>) &#123;</span><br><span class="line">        n = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 ??</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = n ?? <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值1 ?? 值2</span><br></pre></td></tr></table></figure><ul><li>值1 是 nullish，返回值2</li><li>值1 不是 nullish，返回值1</li></ul><p><br></p><p><strong>?.</strong></p><p>需求，函数参数是一个对象，可能包含有子属性</p><p>例如，参数可能是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu3 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在要访问子属性（有问题）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>?.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用传统办法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(stu.<span class="property">address</span> === <span class="literal">undefined</span> || stu.<span class="property">address</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><p>展开运算符</p><p>作用1：打散数组，把元素传递给多个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b,c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求，把数组元素依次传递给函数参数</p><p>传统写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>]);<span class="comment">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure><p>展开运算符写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(...arr);<span class="comment">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure><ul><li>打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素</li></ul><p>作用2：复制数组或对象</p><p>数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1];<span class="comment">// 复制数组</span></span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;...obj1&#125;;<span class="comment">// 复制对象</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：展开运算符复制属于浅拷贝，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">address</span>: &#123;<span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span>&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;...o1&#125;;</span><br></pre></td></tr></table></figure><p>作用3：合并数组或对象</p><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> a2 = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b1 = [...a1,...a2];<span class="comment">// 结果 [1,2,3,4]</span></span><br><span class="line"><span class="keyword">let</span> b2 = [...a2,<span class="number">5</span>,...a1]<span class="comment">// 结果 [3,4,5,1,2]</span></span><br></pre></td></tr></table></figure><p>合并对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o3 = &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n1 = &#123;...o1, ...o2&#125;;<span class="comment">// 结果 &#123;name:&#x27;张三&#x27;,age:18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n2 = &#123;...o3, ...o2, ...o1&#125;; <span class="comment">// 结果&#123;name:&#x27;李四&#x27;,age:18&#125;</span></span><br></pre></td></tr></table></figure><ul><li>复制对象时出现同名属性，后面的会覆盖前面的</li></ul><p><br></p><h3 id="-2"><a href="#-2" class="headerlink" title="[] {}"></a>[] {}</h3><p>解构赋值</p><p><strong>[]</strong></p><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;<span class="comment">// 结果 a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">[a,b,c]</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c) <span class="comment">// 结果 a=1, b=2, c=3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(arr);</span><br></pre></td></tr></table></figure><be><p><strong>{}</strong></p><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = obj;<span class="comment">// 结果 name=张三, age=18</span></span><br></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">&#123;name, age&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age); <span class="comment">// 结果 name=张三, age=18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(obj)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><ul><li><code>if ... else</code></li><li><code>switch</code></li><li><code>while</code></li><li><code>do ... while</code></li><li><code>for</code> </li><li><code>for ... in</code> ⭐</li><li><code>for ... of</code> ⭐</li><li><code>try ... catch</code> ⭐</li></ul><hr><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><p>主要用来遍历对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> father = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">study</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> father) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中 const n 代表遍历出来的属性名</li><li>注意1：方法名也能被遍历出来（它其实也算一种特殊属性）</li><li>注意2：遍历子对象时，父对象的属性会跟着遍历出来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="title class_">Object</span>.<span class="title function_">create</span>(father);</span><br><span class="line">son.<span class="property">sex</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> son) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> son) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n, son[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><p>主要用来遍历数组，也可以是其它可迭代对象，如 Map，Set 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> a1) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a2 = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>:<span class="number">22</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> obj <span class="keyword">of</span> a2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> &#123;name,age&#125; <span class="keyword">of</span> a2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">address</span>: &#123;<span class="attr">city</span>:<span class="string">&#x27;北京&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)   </span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现了异常&#x27;</span>, e.<span class="property">message</span>)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><strong>1) 安装 nvm</strong></p><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p><p>安装注意事项</p><ol><li>要卸载掉现有的 nodejs</li><li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li><li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li><li>首次运行前设置好国内镜像地址</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror http://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><p>首先查看有哪些可用版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |</span><br><span class="line">|--------------|--------------|--------------|--------------|</span><br><span class="line">|    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    |</span><br><span class="line">|    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    |</span><br><span class="line">|    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    |</span><br><span class="line">|    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    |</span><br><span class="line">|    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    |</span><br><span class="line">|    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    |</span><br><span class="line">|    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    |</span><br><span class="line">|    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    |</span><br><span class="line">|    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    |</span><br><span class="line">|    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    |</span><br><span class="line">|    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    |</span><br><span class="line">|    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    |</span><br><span class="line">|    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    |</span><br><span class="line">|    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    |</span><br><span class="line">|    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    |</span><br><span class="line">|    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    |</span><br><span class="line">|    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    |</span><br><span class="line">|    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    |</span><br><span class="line">|    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    |</span><br><span class="line">|    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |</span><br></pre></td></tr></table></figure><p>建议安装 LTS（长期支持版）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install 16.16.0</span><br><span class="line">nvm install 14.20.0</span><br></pre></td></tr></table></figure><p>执行 <code>nvm list</code> 会列出已安装版本</p><p>切换到 16.16.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 16.16.0</span><br></pre></td></tr></table></figure><p>切换到 14.20.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 14.20.0</span><br></pre></td></tr></table></figure><p>安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量</p><p><br></p><p><strong>2) 检查 npm</strong></p><p>npm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p><p>检查镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure><p>如果返回的不是 <code>https://registry.npm.taobao.org/</code>，需要做如下设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p><br><strong>3) 搭建前端服务器</strong></p><p>新建一个保存项目的 client 文件夹，进入文件夹执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save-dev</span><br></pre></td></tr></table></figure><p>修改 package.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.18.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>其中 devDependencies 是 npm install —save-dev 添加的</li></ul><p>编写 main.js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./&#x27;</span>))</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">7070</span>)</span><br></pre></td></tr></table></figure><p>执行 js 代码（运行前端服务器）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node main.js</span><br></pre></td></tr></table></figure><h3 id="前端案例"><a href="#前端案例" class="headerlink" title="前端案例"></a>前端案例</h3><ul><li>前端只有静态页面，使用 Express 服务器</li><li>后端使用 Tomcat 服务器，通过 SpringBoot、MyBatis 等框架获取数据库数据</li></ul><p><strong>1) 查找元素</strong></p><ul><li>document.getElementById - 根据 id 值查找一个元素</li><li>[document|元素].querySelector - 根据选择器查找第一个匹配元素</li><li>[document|元素].querySelectorAll - 根据选择器查找所有匹配元素</li></ul><p>例如，有下面的 html 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thead&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row bold&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>); <span class="comment">// 找到 &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.col&#x27;</span>); <span class="comment">// 找到 &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.col&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  找到的是一个集合</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;1&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;张三&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;男&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;18&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thead = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.thead&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只在 thead 元素范围内找</span></span><br><span class="line">thead.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.col&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  找到的是一个集合</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>根据 id 属性查找既可以用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id值&quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以用 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#id值&quot;</span>)</span><br></pre></td></tr></table></figure><p><br></p><p><strong>2) 修改元素内容</strong></p><ul><li>元素.innerHTML</li><li>元素.textContent</li></ul><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;侠客列表&#x27;</span></span><br></pre></td></tr></table></figure><p>innerHTML  会解析内容中的标签</p><p>textContext 不会解析内容中的标签</p><p>给 innerHTML 或 textContent 赋值空串，可以实现清空标签内容的效果</p><p><br></p><p><strong>3) 利用模板</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thead&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row bold&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将来这些数据从 java 端返回</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> array = [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    ];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">        c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">        c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">        c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">        c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.<span class="title function_">importNode</span>(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 建立父子关系，左边父，右边子</span></span></span><br><span class="line"><span class="language-javascript">        tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>4) Fetch API</strong></p><p>Fetch API 可以用来获取远程数据，它有两种方式接收结果，同步方式与异步方式</p><p>格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, options) <span class="comment">// 返回 Promise</span></span><br></pre></td></tr></table></figure><p>同步方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 结果 = <span class="keyword">await</span> <span class="title class_">Promise</span></span><br><span class="line"><span class="comment">// 后续代码</span></span><br></pre></td></tr></table></figure><ul><li>await 关键字必须在一个标记了 async 的 function 内来使用</li><li>后续代码不会在结果返回前执行</li></ul><p>异步方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">then</span>(结果 =&gt; &#123; ... &#125;)</span><br><span class="line"><span class="comment">// 后续代码                 </span></span><br></pre></td></tr></table></figure><ul><li>后续代码不必等待结果返回就可以执行</li></ul><p>例：</p><p>在 express 服务器上有 students.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">17</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>现在用 fetch api 获取这些数据，并展示</p><p>同步方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findStudents</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取响应对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;students.json&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取响应体, 按json格式转换为js数组</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> array = <span class="keyword">await</span> resp.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 显示数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">                c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">                c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">                c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">                c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.<span class="title function_">importNode</span>(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 建立父子关系</span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">findStudents</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>fetch(‘students.json’) 内部会发送请求，但响应结果不能立刻返回，因此 await 就是等待响应结果返回</li><li>其中 resp.json() 也不是立刻能返回结果，它返回的也是 Promise 对象，也要配合 await 取结果</li></ul><p>异步方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&#x27;students.json&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>( <span class="function"><span class="params">resp</span> =&gt;</span> resp.<span class="title function_">json</span>() )</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>( <span class="function"><span class="params">array</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 显示数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">                c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">                c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">                c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">                c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.<span class="title function_">importNode</span>(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 建立父子关系</span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>( <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e) )</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第一个 then 是在响应返回后，才会调用它里面的箭头函数，箭头函数参数即 resp  响应对象</li><li>第二个 then 是在 json 解析完成后，才会调用它里面的箭头函数，箭头函数参数即解析结果（本例是 array 数组）</li><li>上一个 then 返回的是 Promise 对象时，才能链式调用下一个 then</li></ul><p><br></p><p><strong>跨域问题</strong></p><ul><li>只要协议、主机、端口之一不同，就不同源，例如<ul><li><a href="http://localhost:7070/a">http://localhost:7070/a</a> 和 <a href="https://localhost:7070/b">https://localhost:7070/b</a> 就不同源</li></ul></li><li>同源检查是浏览器的行为，而且只针对 fetch、xhr 请求<ul><li>如果是其它客户端，例如 java http client，postman，它们是不做同源检查的</li><li>通过表单提交、浏览器直接输入 url 地址这些方式发送的请求，也不会做同源检查</li></ul></li><li>更多相关知识请参考<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></li></ul></li></ul><p>请求响应头解决</p><ul><li>fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域<ul><li>我们的例子中：student.html 发送 fetch 请求，告诉 tomcat，我源自 localhost:7070</li></ul></li><li>目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】<ul><li>我们的例子中：tomcat 返回 fetch 响应，告诉浏览器，这个响应允许源自 localhost:7070 的资源使用</li></ul></li></ul><p>代理解决</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-proxy-middleware --save-dev</span><br></pre></td></tr></table></figure><p>在 express 服务器启动代码中加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createProxyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;http-proxy-middleware&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, <span class="title function_">createProxyMiddleware</span>(&#123; <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>, <span class="attr">changeOrigin</span>: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure><p>fetch 代码改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:7070/api/students&#x27;</span>)</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/students&#x27;</span>)</span><br></pre></td></tr></table></figure><p><br></p><p><strong>5) 模块化</strong></p><p>单个导出 const、let、function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一齐导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;a,b,c&#125;</span><br></pre></td></tr></table></figure><p>导出 default，只能有一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> b;</span><br></pre></td></tr></table></figure><p>import 语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> 语句</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>import 需要遵循同源策略</li></ul><p>整个导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable language_">module</span> <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">a</span>)<span class="comment">// 输出10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">b</span>)<span class="comment">// 输出20</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">c</span>()<span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><p>单个导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a,c&#125; <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// 输出10</span></span><br><span class="line"><span class="title function_">c</span>()<span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><p>导入默认</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> x <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)<span class="comment">// 输出20</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java前端技术基础，HTML，CSS，JavaScript</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="https://windcrain.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="https://windcrain.top/tags/HTML/"/>
    
    <category term="CSS" scheme="https://windcrain.top/tags/CSS/"/>
    
    <category term="JavaScript" scheme="https://windcrain.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Git快速入门</title>
    <link href="https://windcrain.top/post/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://windcrain.top/post/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2023-05-23T07:05:08.000Z</published>
    <updated>2023-05-27T03:11:56.371Z</updated>
    
    <content type="html"><![CDATA[<p>Git是一种分布式版本控制系统，用于跟踪代码的变化和版本历史并支持多人协作开发。它已成为许多软件开发团队的首选工具，并被广泛使用于各种类型的项目中。</p><hr><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><p>版本控制又称为版本管理，是一种记录文件内容变化，以及对这些变化进行跟踪和控制的技术。它主要应用于软件开发、文档编写等领域，旨在协助多人协作开发或编辑同一项目时有效地管理文件的变化历史和版本。</p><p>版本控制系统通常可以帮助团队记录文件的每一个版本，即可跟踪整个项目的历史，并允许开发人员回滚到之前的版本，查看某个特定版本的变化，比较不同版本之间的差异等。同时，版本控制系统也能够处理文件的冲突，避免不同开发人员之间出现代码混乱、重复或矛盾的情况。</p><p><br></p><h1 id="版本控制软件"><a href="#版本控制软件" class="headerlink" title="版本控制软件"></a>版本控制软件</h1><p>版本控制软件的基础<strong>功能</strong>包括：</p><ol><li>提供源代码管理：版本控制软件能够管理和跟踪文件的历史版本，包括源代码、二进制文件、文本文件等。</li><li>支持多人协作开发：版本控制软件允许多个开发人员在同一代码库或文件上进行协作开发。它可以帮助团队协调不同人员之间的工作，标记代码更改，并合并代码。</li><li>版本历史记录：版本控制软件可以跟踪每个文件在整个开发过程中的变化历史，记录了每个版本或提交的详细信息，例如时间、作者、注释等。</li><li>分支和合并：版本控制软件支持分支和合并，使开发人员可以独立地开发新功能或修复错误，而不干扰其他开发人员的工作。它还可以将不同的代码分支合并到一个通用的代码库中。</li><li>冲突解决：版本控制软件可以标记由于同时修改同一个文件而产生的冲突，并提供工具来解决这些冲突。</li><li>标签和版本号：版本控制软件允许开发人员对重要版本进行标记和归档，以便于查找和恢复早期版本。它还可以为每个提交分配唯一的版本号，以便于跟踪和管理。</li></ol><p>版本控制软件可以分为两种不同的<strong>类型</strong>：集中式和分布式。</p><ol><li>集中式版本控制软件（Centralized Version Control System, CVCS）：集中式版本控制系统将所有文件存储在中央仓库中，并且开发人员需要从该中央仓库中获得最新版本，然后开始工作。开发人员进行更改后，必须将其提交回中央仓库。CVCS通常具有较好的稳定性和可靠性，但是当多个开发人员同时访问同一个文件时，可能会发生冲突，需要手动解决。</li><li>分布式版本控制软件（Distributed Version Control System, DVCS）：分布式版本控制系统允许每个开发人员都拥有完整的代码库副本，并可以在本地对代码进行更改，而不必连接到中央服务器。开发人员可以方便地保存本地历史记录并跟踪文件变化。当需要与其他开发人员共享代码时，可以通过合并来处理更改冲突。DVCS通常具有更高的灵活性和可伸缩性，但也需要更多的硬盘空间和计算能力。</li></ol><p>常见的集中式版本控制软件包括Subversion (SVN)、Perforce、ClearCase等；而Git、Mercurial等则是分布式版本控制软件的代表。在选择使用哪种版本控制软件时，需要考虑团队规模、开发流程、安全性、可用性等方面的需求和限制。</p><p><br></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Git下载：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> </p><p>GitHub Desktop下载：<a href="https://desktop.github.com/">https://desktop.github.com/</a></p><p>IDEA集成Github：<code>VCS</code>  ~&gt;   <code>Share Project on Github</code></p><p><br></p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>以下是一些Git常用指令的代码：</p><ul><li>初始化Git仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>克隆一个远程Git仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure><ul><li>添加文件到Git仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [file]</span><br></pre></td></tr></table></figure><ul><li>提交更改到Git仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m [message]</span><br></pre></td></tr></table></figure><ul><li>查看当前Git仓库状态</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li>查看Git仓库中文件变化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff [file]</span><br></pre></td></tr></table></figure><ul><li>查看Git提交历史记录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><ul><li>恢复Git仓库到某个历史版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore [commit]</span><br></pre></td></tr></table></figure><ul><li>创建新的Git分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [branch-name]</span><br></pre></td></tr></table></figure><ul><li>切换到指定Git分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch-name]</span><br></pre></td></tr></table></figure><ul><li>创建并切换到指定Git分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branch-name]</span><br></pre></td></tr></table></figure><ul><li>合并指定Git分支到当前分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [branch-name]</span><br></pre></td></tr></table></figure><ul><li>删除Git分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [branch-name]</span><br></pre></td></tr></table></figure><ul><li>从本地Git仓库推送更改到远程分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote] [branch]</span><br></pre></td></tr></table></figure><ul><li>从远程Git仓库拉取更新到本地</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [remote] [branch]</span><br></pre></td></tr></table></figure><ul><li>设置Git全局配置信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;[name]&quot;</span><br><span class="line">git config --global user.email &quot;[email]&quot;</span><br></pre></td></tr></table></figure><ul><li>将本地仓库与远程仓库关联</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [远程仓库URL]</span><br></pre></td></tr></table></figure><p>这些Git指令只是Git命令集的一部分，涵盖了Git基本操作的核心指令。在实际使用中，还需要不断学习和掌握更多其他Git指令，以更好地管理和协作开发代码。</p>]]></content>
    
    
    <summary type="html">简单的Git入门指南</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="git" scheme="https://windcrain.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 新特性</title>
    <link href="https://windcrain.top/post/Java%208%20%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://windcrain.top/post/Java%208%20%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2023-05-20T06:55:08.000Z</published>
    <updated>2023-05-27T03:11:56.374Z</updated>
    
    <content type="html"><![CDATA[<p>Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。</p><hr><h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br><span class="line">或</span><br><span class="line">(parameters) -&gt;&#123; statements; &#125;</span><br></pre></td></tr></table></figure><p>以下是lambda表达式的重要特征:</p><ul><li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</li><li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号。</li><li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 类型声明</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">addition</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a + b;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 不用类型声明</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">subtraction</span> <span class="operator">=</span> (a, b) -&gt; a - b;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 大括号中的返回语句</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">multiplication</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123; <span class="keyword">return</span> a * b; &#125;;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 没有大括号及返回语句</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">division</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a / b;</span><br><span class="line">        </span><br><span class="line">      System.out.println(<span class="string">&quot;10 + 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, addition));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 - 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, subtraction));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 x 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, multiplication));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 / 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, division));</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 不用括号</span></span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService1</span> <span class="operator">=</span> message -&gt;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello &quot;</span> + message);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 用括号</span></span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService2</span> <span class="operator">=</span> (message) -&gt;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello &quot;</span> + message);</span><br><span class="line">        </span><br><span class="line">      greetService1.sayMessage(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">      greetService2.sayMessage(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">MathOperation</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="title function_">operation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">GreetingService</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">operate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, MathOperation mathOperation)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> mathOperation.operation(a, b);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Lambda 表达式需要注意以下两点：</p><ul><li>Lambda 表达式主要用来定义行内执行的方法类型接口（例如，一个简单方法接口）。在上面例子中，我们使用各种类型的 Lambda 表达式来定义 MathOperation 接口的方法，然后我们定义了 operation 的执行。</li><li>Lambda 表达式免去了使用匿名方法的麻烦，并且给予 Java 简单但是强大的函数化的编程能力。</li></ul><p><br></p><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul><li>只包含<code>一个抽象方法</code>（Single Abstract Method，简称SAM）的接口，称为函数式接口。当然该接口可以包含其他非抽象方法。</li><li>你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。</li><li>我们可以在一个接口上使用 <code>@FunctionalInterface</code> 注解，这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</li><li>在<code>java.util.function</code>包下定义了Java 8 的丰富的函数式接口</li></ul><p><br></p><h2 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h2><div class="table-container"><table><thead><tr><th>函数式接口</th><th>称谓</th><th>参数类型</th><th>用途</th></tr></thead><tbody><tr><td><code>Consumer&lt;T&gt;</code></td><td>消费型接口</td><td>T</td><td>对类型为T的对象应用操作，包含方法：  <code>void accept(T t)</code></td></tr><tr><td><code>Supplier&lt;T&gt;</code></td><td>供给型接口</td><td>无</td><td>返回类型为T的对象，包含方法：<code>T get()</code></td></tr><tr><td><code>Function&lt;T, R&gt;</code></td><td>函数型接口</td><td>T</td><td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：<code>R apply(T t)</code></td></tr><tr><td><code>Predicate&lt;T&gt;</code></td><td>判断型接口</td><td>T</td><td>确定类型为T的对象是否满足某约束，并返回 boolean 值。包含方法：<code>boolean test(T t)</code></td></tr></tbody></table></div><p><strong>类型1：消费型接口</strong></p><p>消费型接口的抽象方法特点：有形参，但是返回值类型是void</p><div class="table-container"><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>BiConsumer<T,U></td><td>void accept(T t, U u)</td><td>接收两个对象用于完成功能</td></tr><tr><td>DoubleConsumer</td><td>void accept(double value)</td><td>接收一个double值</td></tr><tr><td>IntConsumer</td><td>void accept(int value)</td><td>接收一个int值</td></tr><tr><td>LongConsumer</td><td>void accept(long value)</td><td>接收一个long值</td></tr><tr><td>ObjDoubleConsumer<T></td><td>void accept(T t, double value)</td><td>接收一个对象和一个double值</td></tr><tr><td>ObjIntConsumer<T></td><td>void accept(T t, int value)</td><td>接收一个对象和一个int值</td></tr><tr><td>ObjLongConsumer<T></td><td>void accept(T t, long value)</td><td>接收一个对象和一个long值</td></tr></tbody></table></div><p><strong>类型2：供给型接口</strong></p><p>这类接口的抽象方法特点：无参，但是有返回值</p><div class="table-container"><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>BooleanSupplier</td><td>boolean getAsBoolean()</td><td>返回一个boolean值</td></tr><tr><td>DoubleSupplier</td><td>double getAsDouble()</td><td>返回一个double值</td></tr><tr><td>IntSupplier</td><td>int getAsInt()</td><td>返回一个int值</td></tr><tr><td>LongSupplier</td><td>long getAsLong()</td><td>返回一个long值</td></tr></tbody></table></div><p><strong>类型3：函数型接口</strong></p><p>这类接口的抽象方法特点：既有参数又有返回值</p><div class="table-container"><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>UnaryOperator<T></td><td>T apply(T t)</td><td>接收一个T类型对象，返回一个T类型对象结果</td></tr><tr><td>DoubleFunction<R></td><td>R apply(double value)</td><td>接收一个double值，返回一个R类型对象</td></tr><tr><td>IntFunction<R></td><td>R apply(int value)</td><td>接收一个int值，返回一个R类型对象</td></tr><tr><td>LongFunction<R></td><td>R apply(long value)</td><td>接收一个long值，返回一个R类型对象</td></tr><tr><td>ToDoubleFunction<T></td><td>double applyAsDouble(T value)</td><td>接收一个T类型对象，返回一个double</td></tr><tr><td>ToIntFunction<T></td><td>int applyAsInt(T value)</td><td>接收一个T类型对象，返回一个int</td></tr><tr><td>ToLongFunction<T></td><td>long applyAsLong(T value)</td><td>接收一个T类型对象，返回一个long</td></tr><tr><td>DoubleToIntFunction</td><td>int applyAsInt(double value)</td><td>接收一个double值，返回一个int结果</td></tr><tr><td>DoubleToLongFunction</td><td>long applyAsLong(double value)</td><td>接收一个double值，返回一个long结果</td></tr><tr><td>IntToDoubleFunction</td><td>double applyAsDouble(int value)</td><td>接收一个int值，返回一个double结果</td></tr><tr><td>IntToLongFunction</td><td>long applyAsLong(int value)</td><td>接收一个int值，返回一个long结果</td></tr><tr><td>LongToDoubleFunction</td><td>double applyAsDouble(long value)</td><td>接收一个long值，返回一个double结果</td></tr><tr><td>LongToIntFunction</td><td>int applyAsInt(long value)</td><td>接收一个long值，返回一个int结果</td></tr><tr><td>DoubleUnaryOperator</td><td>double applyAsDouble(double operand)</td><td>接收一个double值，返回一个double</td></tr><tr><td>IntUnaryOperator</td><td>int applyAsInt(int operand)</td><td>接收一个int值，返回一个int结果</td></tr><tr><td>LongUnaryOperator</td><td>long applyAsLong(long operand)</td><td>接收一个long值，返回一个long结果</td></tr><tr><td>BiFunction<T,U,R></td><td>R apply(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个R类型对象结果</td></tr><tr><td>BinaryOperator<T></td><td>T apply(T t, T u)</td><td>接收两个T类型对象，返回一个T类型对象结果</td></tr><tr><td>ToDoubleBiFunction<T,U></td><td>double applyAsDouble(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个double</td></tr><tr><td>ToIntBiFunction<T,U></td><td>int applyAsInt(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个int</td></tr><tr><td>ToLongBiFunction<T,U></td><td>long applyAsLong(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个long</td></tr><tr><td>DoubleBinaryOperator</td><td>double applyAsDouble(double left, double right)</td><td>接收两个double值，返回一个double结果</td></tr><tr><td>IntBinaryOperator</td><td>int applyAsInt(int left, int right)</td><td>接收两个int值，返回一个int结果</td></tr><tr><td>LongBinaryOperator</td><td>long applyAsLong(long left, long right)</td><td>接收两个long值，返回一个long结果</td></tr></tbody></table></div><p><strong>类型4：判断型接口</strong></p><p>这类接口的抽象方法特点：有参，但是返回值类型是boolean结果。</p><div class="table-container"><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>BiPredicate<T,U></td><td>boolean test(T t, U u)</td><td>接收两个对象</td></tr><tr><td>DoublePredicate</td><td>boolean test(double value)</td><td>接收一个double值</td></tr><tr><td>IntPredicate</td><td>boolean test(int value)</td><td>接收一个int值</td></tr><tr><td>LongPredicate</td><td>boolean test(long  value)</td><td>接收一个long值</td></tr></tbody></table></div><p><br></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>Lambda表达式是可以简化函数式接口的变量或形参赋值的语法。而方法引用和构造器引用是为了简化Lambda表达式的。</p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><ul><li><p>格式：使用方法引用操作符 “<code>::</code>” 将类(或对象) 与 方法名分隔开来。</p><ul><li>两个:中间不能有空格，而且必须英文状态下半角输入</li></ul><p>如下三种主要使用情况：</p><ul><li>情况1：<code>对象 :: 实例方法名</code></li><li>情况2：<code>类 :: 静态方法名</code></li><li>情况3：<code>类 :: 实例方法名</code></li></ul></li><li><p>方法引用使用前提</p><p><strong>要求1：</strong>Lambda体只有一句语句，并且是通过调用一个对象的/类现有的方法来完成的</p><p>例如：System.out对象，调用println()方法来完成Lambda体</p><p>​           Math类，调用random()静态方法来完成Lambda体</p><p><strong>要求2：</strong></p><p>针对情况1：函数式接口中的抽象方法a在被重写时使用了某一个对象的方法b。如果方法a的形参列表、返回值类型与方法b的形参列表、返回值类型都相同，则我们可以使用方法b实现对方法a的重写、替换。</p></li></ul><p>  针对情况2：函数式接口中的抽象方法a在被重写时使用了某一个类的静态方法b。如果方法a的形参列表、返回值类型与方法b的形参列表、返回值类型都相同，则我们可以使用方法b实现对方法a的重写、替换。</p><p>  针对情况3：函数式接口中的抽象方法a在被重写时使用了某一个对象的方法b。如果方法a的返回值类型与方法b的返回值类型相同，同时方法a的形参列表中有n个参数，方法b的形参列表有n-1个参数，且方法a的第1个参数作为方法b的调用者，且方法a的后n-1参数与方法b的n-1参数匹配（类型相同或满足多态场景也可以）</p><p>  例如：t-&gt;System.out.println(t)</p><p>  ​        () -&gt; Math.random() 都是无参</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodRefTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况一：对象 :: 实例方法</span></span><br><span class="line"><span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line"><span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);</span><br><span class="line">con1.accept(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">con2.accept(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Supplier中的T get()</span></span><br><span class="line"><span class="comment">//Employee中的String getName()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>,<span class="number">5600</span>);</span><br><span class="line"></span><br><span class="line">Supplier&lt;String&gt; sup1 = () -&gt; emp.getName();</span><br><span class="line">System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">Supplier&lt;String&gt; sup2 = emp::getName;</span><br><span class="line">System.out.println(sup2.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二：类 :: 静态方法</span></span><br><span class="line"><span class="comment">//Comparator中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">//Integer中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);</span><br><span class="line">System.out.println(com1.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">System.out.println(com2.compare(<span class="number">12</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">Function&lt;Double,Long&gt; func = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Double, Long&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Double d)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.round(d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Function&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);</span><br><span class="line">System.out.println(func1.apply(<span class="number">12.3</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Function&lt;Double,Long&gt; func2 = Math::round;</span><br><span class="line">System.out.println(func2.apply(<span class="number">12.6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三：类 :: 实例方法  (有难度)</span></span><br><span class="line"><span class="comment">// Comparator中的int comapre(T t1,T t2)</span></span><br><span class="line"><span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">Comparator&lt;String&gt; com1 = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class="line">System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Comparator&lt;String&gt; com2 = String :: compareTo;</span><br><span class="line">System.out.println(com2.compare(<span class="string">&quot;abd&quot;</span>,<span class="string">&quot;abm&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line"><span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class="line">System.out.println(pre1.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">BiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class="line">System.out.println(pre2.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee中的String getName();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">23</span>, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();</span><br><span class="line">System.out.println(func1.apply(employee));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">Function&lt;Employee,String&gt; func2 = Employee::getName;</span><br><span class="line">System.out.println(func2.apply(employee));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><p>当Lambda表达式是创建一个对象，并且满足Lambda表达式形参，正好是给创建这个对象的构造器的实参列表，就可以使用构造器引用。</p><p>格式：<code>类名::new</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.BiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Function&lt;Integer, Dog&gt; func1 = Dog::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(func1.apply(<span class="number">11</span>));</span><br><span class="line">        BiFunction&lt;Integer, String, Dog&gt; func2 = Dog::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(func2.apply(<span class="number">11</span>, <span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="数组构造引用"><a href="#数组构造引用" class="headerlink" title="数组构造引用"></a>数组构造引用</h2><p>当Lambda表达式是创建一个数组对象，并且满足Lambda表达式形参，正好是给创建这个数组对象的长度，就可以数组构造引用。</p><p>格式：<code>数组类型名::new</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">    String[] arr1 = func1.apply(<span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Integer,String[]&gt; func2 = String[] :: <span class="keyword">new</span>;</span><br><span class="line">    String[] arr2 = func2.apply(<span class="number">10</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h1><h2 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h2><p>Stream 是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。</p><p>Stream 和 Collection 集合的区别：<strong>Collection 是一种静态的内存数据结构，讲的是数据，而 Stream 是有关计算的，讲的是计算。</strong>前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</p><p>注意：</p><p>①Stream 自己不会存储元素。</p><p>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</p><p>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。即一旦执行终止操作，就执行中间操作链，并产生结果。</p><p>④ Stream一旦执行了终止操作，就不能再调用其它中间操作或终止操作了。</p><p><br></p><h2 id="Stream的操作三个步骤"><a href="#Stream的操作三个步骤" class="headerlink" title="Stream的操作三个步骤"></a>Stream的操作三个步骤</h2><p><strong>1- 创建 Stream</strong><br>一个数据源（如：集合、数组），获取一个流</p><p><strong>2- 中间操作</strong><br>每次处理都会返回一个持有结果的新Stream，即中间操作的方法返回值仍然是Stream类型的对象。因此中间操作可以是个<code>操作链</code>，可对数据源的数据进行n次处理，但是在终结操作前，并不会真正执行。</p><p><strong>3- 终止操作(终端操作)</strong><br>终止操作的方法返回值类型就不再是Stream了，因此一旦执行终止操作，就结束整个Stream操作了。一旦执行终止操作，就执行中间操作链，最终产生结果并结束Stream。</p><h3 id="创建Stream实例"><a href="#创建Stream实例" class="headerlink" title="创建Stream实例"></a>创建Stream实例</h3><p><strong>方式一：通过集合</strong></p><p>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：</p><ul><li><p>default Stream<E> stream() : 返回一个顺序流</p></li><li><p>default Stream<E> parallelStream() : 返回一个并行流</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JDK1.8中，Collection系列集合增加了方法</span></span><br><span class="line">    Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二：通过数组</strong></p><p>Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：</p><ul><li>static <T> Stream<T> stream(T[] array): 返回一个流</li><li>public static IntStream stream(int[] array)</li><li>public static LongStream stream(long[] array)</li><li>public static DoubleStream stream(double[] array)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">    String[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">    Stream&lt;String&gt; stream = Arrays.stream(arr); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式三：通过Stream的of()</strong></p><p>可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。</p><ul><li>public static<T> Stream<T> of(T… values) : 返回一个流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式四：创建无限流(了解)</strong></p><p>可以使用静态方法 Stream.iterate() 和 Stream.generate(), 创建无限流。</p><ul><li><p>迭代<br>public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) </p></li><li><p>生成<br>public static<T> Stream<T> generate(Supplier<T> s) </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式四：创建无限流</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final</span></span><br><span class="line"><span class="comment">// UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">0</span>, x -&gt; x + <span class="number">2</span>);</span><br><span class="line">stream.limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成</span></span><br><span class="line"><span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">Stream&lt;Double&gt; stream1 = Stream.generate(Math::random);</span><br><span class="line">stream1.limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一系列中间操作"><a href="#一系列中间操作" class="headerlink" title="一系列中间操作"></a>一系列中间操作</h3><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。</p><p>1-筛选与切片</p><div class="table-container"><table><thead><tr><th><strong>方   法</strong></th><th><strong>描   述</strong></th></tr></thead><tbody><tr><td><strong>filter(Predicatep)</strong></td><td>接收  Lambda ， 从流中排除某些元素</td></tr><tr><td><strong>distinct()</strong></td><td>筛选，通过流所生成元素的  hashCode() 和 equals() 去除重复元素</td></tr><tr><td><strong>limit(long maxSize)</strong></td><td>截断流，使其元素不超过给定数量</td></tr><tr><td><strong>skip(long n)</strong></td><td>跳过元素，返回一个扔掉了前  n 个元素的流。<br>若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</td></tr></tbody></table></div><p>2-映射</p><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>map(Function f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td></tr><tr><td><strong>mapToDouble(ToDoubleFunction f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</td></tr><tr><td><strong>mapToInt(ToIntFunction  f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的  IntStream。</td></tr><tr><td><strong>mapToLong(ToLongFunction  f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的  LongStream。</td></tr><tr><td><strong>flatMap(Function  f)</strong></td><td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td></tr></tbody></table></div><p>3-排序</p><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>sorted()</strong></td><td>产生一个新流，其中按自然顺序排序</td></tr><tr><td><strong>sorted(Comparator</strong> <strong>com)</strong></td><td>产生一个新流，其中按比较器顺序排序</td></tr></tbody></table></div><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamMiddleOperate</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1、创建Stream</span></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、加工处理</span></span><br><span class="line">        <span class="comment">//过滤：filter(Predicate p)</span></span><br><span class="line">        <span class="comment">//把里面的偶数拿出来</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * filter(Predicate p)</span></span><br><span class="line"><span class="comment">         * Predicate是函数式接口，抽象方法：boolean test(T t)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        stream = stream.filter(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、终结操作：例如：遍历</span></span><br><span class="line">        stream.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">                .filter(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .distinct()</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">                .distinct()  <span class="comment">//(1,2,3,4,5,6,7)</span></span><br><span class="line">                .filter(t -&gt; t%<span class="number">2</span>!=<span class="number">0</span>) <span class="comment">//(1,3,5,7)</span></span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .skip(<span class="number">5</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .skip(<span class="number">5</span>)</span><br><span class="line">                .distinct()</span><br><span class="line">                .filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .distinct()</span><br><span class="line">                .peek(System.out::println)  <span class="comment">//Consumer接口的抽象方法  void accept(T t)</span></span><br><span class="line">                .count();</span><br><span class="line">        System.out.println(<span class="string">&quot;count=&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//希望能够找出前三个最大值，前三名最大的，不重复</span></span><br><span class="line">        Stream.of(<span class="number">11</span>,<span class="number">2</span>,<span class="number">39</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">54</span>)</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted((t1,t2) -&gt; -Integer.compare(t1, t2))<span class="comment">//Comparator接口  int compare(T t1, T t2)</span></span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .map(t -&gt; t+=<span class="number">1</span>)<span class="comment">//Function&lt;T,R&gt;接口抽象方法 R apply(T t)</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.stream(arr)</span><br><span class="line">                .map(t-&gt;t.toUpperCase())</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span>&#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line">        Arrays.stream(arr)</span><br><span class="line">                .flatMap(t -&gt; Stream.of(t.split(<span class="string">&quot;|&quot;</span>)))<span class="comment">//Function&lt;T,R&gt;接口抽象方法 R apply(T t)  现在的R是一个Stream</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><ul><li><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。</p></li><li><p>流进行了终止操作后，不能再次使用。</p></li></ul><p>1-匹配与查找</p><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>allMatch(Predicate  p)</strong></td><td>检查是否匹配所有元素</td></tr><tr><td><strong>anyMatch(Predicate  p)  </strong></td><td>检查是否至少匹配一个元素</td></tr><tr><td><strong>noneMatch(Predicate</strong>  <strong>p)</strong></td><td>检查是否没有匹配所有元素</td></tr><tr><td><strong>findFirst()</strong></td><td>返回第一个元素</td></tr><tr><td><strong>findAny()</strong></td><td>返回当前流中的任意元素</td></tr><tr><td><strong>count()</strong></td><td>返回流中元素总数</td></tr><tr><td><strong>max(Comparator c)</strong></td><td>返回流中最大值</td></tr><tr><td><strong>min(Comparator c)</strong></td><td>返回流中最小值</td></tr><tr><td><strong>forEach(Consumer c)</strong></td><td>内部迭代(使用  Collection  接口需要用户去做迭代，称为外部迭代。<br>相反，Stream  API 使用内部迭代——它帮你把迭代做了)</td></tr></tbody></table></div><p>2-归约</p><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>reduce(T  identity, BinaryOperator b)</strong></td><td>可以将流中元素反复结合起来，得到一个值。返回  T</td></tr><tr><td><strong>reduce(BinaryOperator  b)</strong></td><td>可以将流中元素反复结合起来，得到一个值。返回 Optional<T></td></tr></tbody></table></div><p>备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它来进行网络搜索而出名。</p><p>3-收集</p><div class="table-container"><table><thead><tr><th><strong>方   法</strong></th><th><strong>描   述</strong></th></tr></thead><tbody><tr><td><strong>collect(Collector  c)</strong></td><td>将流转换为其他形式。接收一个  Collector接口的实现，<br>用于给Stream中元素做汇总的方法</td></tr></tbody></table></div><p>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。</p><p>另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toList</strong></td><td>Collector<T, ?, List<T>&gt;</td><td>把流中元素收集到List</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; emps= list.stream().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toSet</strong></td><td>Collector<T, ?, Set<T>&gt;</td><td>把流中元素收集到Set</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Employee&gt; emps= list.stream().collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toCollection</strong></td><td>Collector<T, ?, C></td><td>把流中元素收集到创建的集合</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Employee&gt; emps =list.stream().collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>counting</strong></td><td>Collector<T, ?, Long></td><td>计算流中元素的个数</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().collect(Collectors.counting());</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>summingInt</strong></td><td>Collector<T, ?, Integer></td><td>对流中元素的整数属性求和</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> total=list.stream().collect(Collectors.summingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>averagingInt</strong></td><td>Collector<T, ?, Double></td><td>计算流中元素Integer属性的平均值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">avg</span> <span class="operator">=</span> list.stream().collect(Collectors.averagingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>summarizingInt</strong></td><td>Collector<T, ?, IntSummaryStatistics></td><td>收集流中Integer属性的统计值。如：平均值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> SummaryStatisticsiss= list.stream().collect(Collectors.summarizingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>joining</strong></td><td>Collector<CharSequence, ?, String></td><td>连接流中每个字符串</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str= list.stream().map(Employee::getName).collect(Collectors.joining());</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>maxBy</strong></td><td>Collector<T, ?, Optional<T>&gt;</td><td>根据比较器选择最大值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Emp&gt;max= list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary)));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>minBy</strong></td><td>Collector<T, ?, Optional<T>&gt;</td><td>根据比较器选择最小值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Emp&gt; min = list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary)));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>reducing</strong></td><td>Collector<T, ?, Optional<T>&gt;</td><td>从一个作为累加器的初始值开始，利用BinaryOperator与流中元素逐个结合，从而归约成单个值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> total=list.stream().collect(Collectors.reducing(<span class="number">0</span>, Employee::getSalar, Integer::sum));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>collectingAndThen</strong></td><td>Collector<T,A,RR></td><td>包裹另一个收集器，对其结果转换函数</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> how= list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>groupingBy</strong></td><td>Collector<T, ?, Map<K, List<T>&gt;&gt;</td><td>根据某属性值对流分组，属性为K，结果为V</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Emp.Status, List&lt;Emp&gt;&gt; map= list.stream().collect(Collectors.groupingBy(Employee::getStatus));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>partitioningBy</strong></td><td>Collector<T, ?, Map<Boolean, List<T>&gt;&gt;</td><td>根据true或false进行分区</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean,List&lt;Emp&gt;&gt; vd = list.stream().collect(Collectors.partitioningBy(Employee::getManage));</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamEndding</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .count();</span><br><span class="line">        System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">                .allMatch(t -&gt; t%<span class="number">2</span>!=<span class="number">0</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">                .anyMatch(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Integer&gt; opt = Stream.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>).findFirst();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Integer&gt; opt = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">                .filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                .findFirst();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Integer&gt; opt = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                .findFirst();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Integer&gt; max = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .max((t1,t2) -&gt; Integer.compare(t1, t2));</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">reduce</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .reduce(<span class="number">0</span>, (t1,t2) -&gt; t1+t2);<span class="comment">//BinaryOperator接口   T apply(T t1, T t2)</span></span><br><span class="line">        System.out.println(reduce);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Integer&gt; max = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .reduce((t1,t2) -&gt; t1&gt;t2?t1:t2);<span class="comment">//BinaryOperator接口   T apply(T t1, T t2)</span></span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .filter(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="新语法结构"><a href="#新语法结构" class="headerlink" title="新语法结构"></a>新语法结构</h1><h2 id="Java的REPL工具：-jShell命令"><a href="#Java的REPL工具：-jShell命令" class="headerlink" title="Java的REPL工具： jShell命令"></a>Java的REPL工具： jShell命令</h2><p><strong>JDK9的新特性</strong></p><p>Java 终于拥有了像Python 和 Scala 之类语言的REPL工具（交互式编程环境，read - evaluate - print - loop）：<code>jShell</code>。以交互式的方式对语句和表达式进行求值。<code>即写即得</code>、<code>快速运行</code>。</p><p>利用jShell在没有创建类的情况下，在命令行里直接声明变量，计算表达式，执行语句。无需跟人解释”public static void main(String[] args)”这句”废话”。</p><p><br></p><h2 id="异常处理之try-catch资源关闭"><a href="#异常处理之try-catch资源关闭" class="headerlink" title="异常处理之try-catch资源关闭"></a>异常处理之try-catch资源关闭</h2><p><strong>JDK7的新特性</strong></p><p>在try的后面可以增加一个()，在括号中可以声明流对象并初始化。try中的代码执行完毕，会自动把流对象释放，就不用写finally了。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(资源对象的声明和初始化)&#123;</span><br><span class="line">    业务逻辑代码,可能会产生异常</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> e)&#123;</span><br><span class="line">    处理异常代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> e)&#123;</span><br><span class="line">    处理异常代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>1、在try()中声明的资源，无论是否发生异常，无论是否处理异常，都会自动关闭资源对象，不用手动关闭了。</p><p>2、这些资源实现类必须实现AutoCloseable或Closeable接口，实现其中的close()方法。Closeable是AutoCloseable的子接口。Java7几乎把所有的“资源类”（包括文件IO的各种类、JDBC编程的Connection、Statement等接口…）都进行了改写，改写后资源类都实现了AutoCloseable或Closeable接口，并实现了close()方法。</p><p>3、写到try()中的资源类的变量默认是final声明的，不能修改。</p><p><strong>JDK9的新特性</strong></p><p>try的前面可以定义流对象，try后面的()中可以直接引用流对象的名称。在try代码执行完毕后，流对象也可以释放掉，也不用写finally了。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line"><span class="keyword">try</span>(a;b)&#123;</span><br><span class="line">    可能产生的异常代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名 变量名)&#123;</span><br><span class="line">    异常处理的逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in);</span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out);</span><br><span class="line">    <span class="keyword">try</span> (reader; writer) &#123;</span><br><span class="line">        <span class="comment">//reader是final的，不可再被赋值</span></span><br><span class="line">        <span class="comment">//   reader = null;</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h2><p><strong>JDK 10的新特性</strong></p><p>局部变量的显示类型声明，常常被认为是不必须的，给一个好听的名字反而可以很清楚的表达出下面应该怎样继续。本新特性允许开发人员省略通常不必要的局部变量类型声明，以增强Java语言的体验性、可读性。</p><ul><li>使用举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.局部变量的实例化</span></span><br><span class="line"><span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.增强for循环中的索引</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v : list) &#123;</span><br><span class="line">    System.out.println(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.传统for循环中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 返回值类型含复杂泛型结构</span></span><br><span class="line"><span class="type">var</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line"><span class="comment">//Iterator&lt;Map.Entry&lt;Integer, Student&gt;&gt; iterator = set.iterator();</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>不适用场景<ul><li>声明一个成员变量</li><li>声明一个数组变量，并为数组静态初始化（省略new的情况下）</li><li>方法的返回值类型</li><li>方法的参数类型</li><li>没有初始化的方法内的局部变量声明</li><li>作为catch块中异常类型</li><li>Lambda表达式中函数式接口的类型</li><li>方法引用中函数式接口的类型</li></ul></li></ul><p><br></p><h2 id="instanceof的模式匹配"><a href="#instanceof的模式匹配" class="headerlink" title="instanceof的模式匹配"></a>instanceof的模式匹配</h2><p><strong>JDK14中预览特性：</strong></p><p>instanceof 模式匹配通过提供更为简便的语法，来提高生产力。有了该功能，可以减少Java程序中显式强制转换的数量，实现更精确、简洁的类型安全的代码。</p><p>Java 14之前旧写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)obj; <span class="comment">//需要强转</span></span><br><span class="line">    .. str.contains(..)..</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 14新特性写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String str)&#123;</span><br><span class="line">    .. str.contains(..)..</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * instanceof的模式匹配（预览）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 上午 11:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Feature01</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello,Java14&quot;</span>);</span><br><span class="line">        obj = <span class="literal">null</span>;<span class="comment">//在使用null 匹配instanceof 时，返回都是false.</span></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj;</span><br><span class="line">            System.out.println(str.contains(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;非String类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例1：</span></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String str)&#123; <span class="comment">//新特性：省去了强制类型转换的过程</span></span><br><span class="line">            System.out.println(str.contains(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;非String类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InstanceOf</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String str)&#123;<span class="comment">//此时的str的作用域仅限于if结构内。</span></span><br><span class="line">            System.out.println(str.toUpperCase());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(str.toLowerCase());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//举例3：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monitor</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public boolean equals(Object o)&#123;</span></span><br><span class="line"><span class="comment">//        if(o instanceof Monitor other)&#123;</span></span><br><span class="line"><span class="comment">//            if(model.equals(other.model) &amp;&amp; price == other.price)&#123;</span></span><br><span class="line"><span class="comment">//                return true;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> Monitor other &amp;&amp; model.equals(other.model) &amp;&amp; price == other.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="switch表达式"><a href="#switch表达式" class="headerlink" title="switch表达式"></a>switch表达式</h2><p>传统switch声明语句的弊端：</p><ul><li>匹配是自上而下的，如果忘记写break，后面的case语句不论匹配与否都会执行； —-&gt;case穿透</li><li>所有的case语句共用一个块范围，在不同的case语句定义的变量名不能重复；</li><li>不能在一个case里写多个执行结果一致的条件；</li><li>整个switch不能作为表达式返回值；</li></ul><p><strong>JDK12中预览特性：</strong></p><ul><li><p>Java 12将会对switch声明语句进行扩展，使用<code>case L -&gt;</code>来替代以前的<code>break;</code>，省去了 break 语句，避免了因少写 break 而出错。</p></li><li><p>同时将多个 case 合并到一行，显得简洁、清晰，也更加优雅的表达逻辑分支。</p></li><li><p>为了保持兼容性，case 条件语句中依然可以使用字符<code>:</code> ，但是同一个 switch 结构里不能混用<code>-&gt;</code> 和<code>:</code> ，否则编译错误。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> Fruit.GRAPE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numberOfLetters</span> <span class="operator">=</span> <span class="keyword">switch</span>(fruit)&#123;</span><br><span class="line">            <span class="keyword">case</span> PEAR -&gt; <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">case</span> APPLE,MANGO,GRAPE -&gt; <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">case</span> ORANGE,PAPAYA -&gt; <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No Such Fruit:&quot;</span> + fruit);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(numberOfLetters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JDK13中二次预览特性：</strong></p><p>JDK13中引入了yield语句，用于返回值。这意味着，switch表达式(返回值)应该使用yield，switch语句(不返回值)应该使用break。</p><p>yield和return的区别在于：return会直接跳出当前循环或者方法，而yield只会跳出当前switch块。</p><p>在JDK13中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSwitch2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">            yield <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSwitch3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            yield <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            yield <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            yield <span class="number">3</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h2><p>现实问题：</p><p>在Java中，通常需要使用String类型表达HTML，XML，SQL或JSON等格式的字符串，在进行字符串赋值时需要进行转义和连接操作，然后才能编译该代码，这种表达方式难以阅读并且难以维护。</p><p><strong>JDK13的新特性</strong></p><p>使用”””作为文本块的开始符和结束符，在其中就可以放置多行的字符串，不需要进行任何转义。因此，文本块将提高Java程序的可读性和可写性。</p><p>基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;line1\nline2\nline3\n&quot;</span></span><br></pre></td></tr></table></figure><p>或者一个连接的字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;line1\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;line2\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;line3\n&quot;</span></span><br></pre></td></tr></table></figure><p>如果字符串末尾不需要行终止符，则结束分隔符可以放在最后一行内容上。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;line1\nline2\nline3&quot;</span></span><br></pre></td></tr></table></figure><p>文本块可以表示空字符串，但不建议这样做，因为它需要两行源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">empty</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>JDK14中二次预览特性</strong></p><p>JDK14的版本主要增加了两个escape sequences，分别是<code>\  取消换行</code>与<code>\s  空格</code>。</p><p><br></p><h2 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h2><p><code>record</code> 是一种全新的类型，它本质上是一个 <code>final</code> 类，同时所有的属性都是 <code>final</code> 修饰，它会自动编译出 <code>public get</code> 、<code>hashcode</code> 、<code>equals</code>、<code>toString</code>、构造器等结构，减少了代码编写量。</p><p>具体来说：当你用<code>record</code> 声明一个类时，该类将自动拥有以下功能：</p><ul><li>获取成员变量的简单方法，比如例题中的 name() 和 partner() 。注意区别于我们平常getter()的写法。</li><li>一个 equals 方法的实现，执行比较时会比较该类的所有成员属性。</li><li>重写 hashCode() 方法。</li><li>一个可以打印该类所有成员属性的 toString() 方法。</li><li>只有一个构造方法。</li></ul><p>此外：</p><ul><li>还可以在record声明的类中定义静态字段、静态方法、构造器或实例方法。</li><li>不能在record声明的类中定义实例字段；类不能声明为abstract；不能声明显式的父类等。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Dog</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java14Record</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;牧羊犬&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;田园犬&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;哈士奇&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(dog1);</span><br><span class="line">        System.out.println(dog2);</span><br><span class="line">        System.out.println(dog3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>记录不适合哪些场景</code></p><p>record的设计目标是提供一种将数据建模为数据的好方法。它也不是 JavaBeans 的直接替代品，因为record的方法不符合 JavaBeans 的 get 标准。另外 JavaBeans 通常是可变的，而记录是不可变的。尽管它们的用途有点像，但记录并不会以某种方式取代 JavaBean。</p><p><br></p><h2 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h2><p>背景：</p><p>在 Java 中如果想让一个类不能被继承和修改，这时我们应该使用 <code>final</code> 关键字对类进行修饰。不过这种要么可以继承，要么不能继承的机制不够灵活，有些时候我们可能想让某个类可以被某些类型继承，但是又不能随意继承，是做不到的。Java 15 尝试解决这个问题，引入了 <code>sealed</code> 类，被 <code>sealed</code> 修饰的类可以指定子类。这样这个类就只能被指定的类继承。</p><p><strong>JDK15的预览特性：</strong></p><p>通过密封的类和接口来限制超类的使用，密封的类和接口限制其它可能继承或实现它们的其它类或接口。</p><p>具体使用：</p><ul><li>使用修饰符<code>sealed</code>，可以将一个类声明为密封类。密封的类使用保留关键字<code>permits</code>列出可以直接扩展（即extends）它的类。</li></ul><ul><li><code>sealed</code> 修饰的类的机制具有传递性，它的子类必须使用指定的关键字进行修饰，且只能是 <code>final</code>、<code>sealed</code>、<code>non-sealed</code> 三者之一。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Shape</span> permits Circle, Rectangle, Square &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;...&#125; <span class="comment">//final表示Circle不能再被继承了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> permits TransparentRectangle, FilledRectangle &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransparentRectangle</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FilledRectangle</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">non-sealed</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;...&#125; <span class="comment">//non-sealed表示可以允许任何类继承</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="其它变化"><a href="#其它变化" class="headerlink" title="其它变化"></a>其它变化</h1><h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h2><p><strong>JDK8的新特性</strong></p><p>到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google在著名的Guava项目引入了Optional类，通过检查空值的方式避免空指针异常。受到Google的启发，Optional类已经成为Java 8类库的一部分。</p><p><code>Optional&lt;T&gt;</code> 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。如果值存在，则isPresent()方法会返回true，调用get()方法会返回该对象。</p><p>Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</p><ul><li><code>创建Optional类对象的方法：</code></li><li><p>static <T> Optional<T> empty() ：用来创建一个空的Optional实例</p><ul><li>static <T> Optional<T> of(T value) ：用来创建一个Optional实例，value必须非空</li><li><code>static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</code> ：用来创建一个Optional实例，value可能是空，也可能非空</li></ul></li><li><p><code>判断Optional容器中是否包含对象：</code></p><ul><li>boolean isPresent() : 判断Optional容器中的值是否存在</li><li>void ifPresent(Consumer&lt;? super T&gt; consumer) ：判断Optional容器中的值是否存在，如果存在，就对它进行Consumer指定的操作，如果不存在就不做</li></ul></li><li><p><code>获取Optional容器的对象：</code></p></li><li><p>T get(): 如果调用对象包含值，返回该值。否则抛异常。T get()与of(T value)配合使用</p></li><li><p><code>T orElse(T other)</code>：orElse(T other) 与ofNullable(T value)配合使用，如果Optional容器中非空，就返回所包装值，如果为空，就用orElse(T other)other指定的默认值（备胎）代替</p></li><li><p>T orElseGet(Supplier&lt;? extends T&gt; other) ：如果Optional容器中非空，就返回所包装值，如果为空，就用Supplier接口的Lambda表达式提供的值代替</p></li><li><p>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) ：如果Optional容器中非空，就返回所包装值，如果为空，就抛出你指定的异常类型代替原来的NoSuchElementException</p></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOptional</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.of(str);</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.empty();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.of(str);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.get();</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line"><span class="comment">//System.out.println(opt.get());//java.util.NoSuchElementException: No value present</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElse(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElseGet(String::<span class="keyword">new</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElseThrow(()-&gt;<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;值不存在&quot;</span>));</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello1&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="comment">//判断是否是纯字母单词，如果是，转为大写，否则保持不变</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> opt.filter(s-&gt;s.matches(<span class="string">&quot;[a-zA-Z]+&quot;</span>))</span><br><span class="line">                .map(s -&gt; s.toUpperCase()).orElse(str);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这是JDK9-11的新特性</strong></p><div class="table-container"><table><thead><tr><th><strong>新增方法</strong></th><th><strong>描述</strong></th><th><strong>新增的版本</strong></th></tr></thead><tbody><tr><td>boolean isEmpty()</td><td>判断value是否为空</td><td>JDK  11</td></tr><tr><td>ifPresentOrElse(Consumer&lt;? super T&gt; action, Runnable emptyAction)</td><td>value非空，执行参数1功能；如果value为空，执行参数2功能</td><td>JDK  9</td></tr><tr><td>Optional<T> or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</td><td>value非空，返回对应的Optional；value为空，返回形参封装的Optional</td><td>JDK  9</td></tr><tr><td>Stream<T> stream()</td><td>value非空，返回仅包含此value的Stream；否则，返回一个空的Stream</td><td>JDK  9</td></tr><tr><td>T orElseThrow()</td><td>value非空，返回value；否则抛异常NoSuchElementException</td><td>JDK  10</td></tr></tbody></table></div><p><br></p><h2 id="GC方面新特性"><a href="#GC方面新特性" class="headerlink" title="GC方面新特性"></a>GC方面新特性</h2><h3 id="G1-GC"><a href="#G1-GC" class="headerlink" title="G1 GC"></a>G1 GC</h3><p>JDK9以后默认的垃圾回收器是G1GC。</p><p><strong>JDK10 : 为G1提供并行的Full GC</strong></p><p>G1最大的亮点就是可以尽量的避免full gc。但毕竟是“尽量”，在有些情况下，G1就要进行full gc了，比如如果它无法足够快的回收内存的时候，它就会强制停止所有的应用线程然后清理。</p><p>在Java10之前，一个单线程版的标记-清除-压缩算法被用于full gc。为了尽量减少full gc带来的影响，在Java10中，就把之前的那个单线程版的标记-清除-压缩的full gc算法改成了支持多个线程同时full gc。这样也算是减少了full gc所带来的停顿，从而提高性能。</p><p>你可以通过<code>-XX:ParallelGCThreads</code>参数来指定用于并行GC的线程数。</p><p><strong>JDK12：可中断的 G1 Mixed GC</strong></p><p><strong>JDK12：增强G1，自动返回未用堆内存给操作系统</strong></p><h3 id="henandoah-GC"><a href="#henandoah-GC" class="headerlink" title="henandoah GC"></a>henandoah GC</h3><p><strong>JDK12：Shenandoah GC：低停顿时间的GC</strong></p><p>Shenandoah 垃圾回收器是 Red Hat 在 2014 年宣布进行的一项垃圾收集器研究项目 Pauseless GC 的实现，旨在<strong>针对 JVM 上的内存收回实现低停顿的需求</strong>。</p><h3 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h3><p><strong>JDK11：引入革命性的 ZGC</strong></p><p>ZGC，这应该是JDK11最为瞩目的特性，没有之一。 </p><p>ZGC是一个并发、基于region、压缩型的垃圾收集器。</p><p>ZGC的设计目标是：支持TB级内存容量，暂停时间低（&lt;10ms），对整个程序吞吐量的影响小于15%。 将来还可以扩展实现机制，以支持不少令人兴奋的功能，例如多层堆（即热对象置于DRAM和冷对象置于NVMe闪存），或压缩堆。</p><p><strong>JDK13：ZGC:将未使用的堆内存归还给操作系统</strong></p><p><strong>JDK14：ZGC on macOS和windows</strong></p><p><strong>JDK15：ZGC 功能转正</strong></p><p><strong>JDK16：ZGC 并发线程处理</strong></p>]]></content>
    
    
    <summary type="html">Java 8 以来的新特性</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://windcrain.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>免费临时邮箱合集</title>
    <link href="https://windcrain.top/post/%E5%85%8D%E8%B4%B9%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E5%90%88%E9%9B%86/"/>
    <id>https://windcrain.top/post/%E5%85%8D%E8%B4%B9%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E5%90%88%E9%9B%86/</id>
    <published>2023-05-18T02:34:08.000Z</published>
    <updated>2023-05-27T03:11:56.379Z</updated>
    
    <content type="html"><![CDATA[<p>临时邮箱是一种可以临时使用的电子邮箱地址。它通常可以免费获得，不需要注册，也不需要提供个人资料。临时邮箱通常只能在一定时间内使用，这个时间通常是几分钟到几小时不等。使用临时邮箱可以保护您的真实电子邮箱地址和个人信息，避免被垃圾邮件、广告和恶意软件骚扰。临时邮箱也可以用于注册一些不太重要的网站和服务，以避免您的真实邮箱地址被泄露或滥用。</p><h2 id="1-mail-tm"><a href="#1-mail-tm" class="headerlink" title="1.mail.tm"></a>1.mail.tm</h2><p>网站地址：<a href="https://mail.tm/zh/">https://mail.tm/zh/</a> </p><p>非常赞的一个临时邮箱，一个临时账号可以反复用，只有点击右上角的退出按钮才会更换账号，关闭浏览器或电脑也没问题。</p><h2 id="2-YOPMAIL"><a href="#2-YOPMAIL" class="headerlink" title="2.YOPMAIL"></a>2.YOPMAIL</h2><p>官方网址：<a href="https://www.yopmail.com/">http://www.yopmail.com</a></p><p>支持手动刷新，国内用户需要挂代理。</p><h2 id="3-Guerrilla-Mail"><a href="#3-Guerrilla-Mail" class="headerlink" title="3.Guerrilla Mail"></a>3.Guerrilla Mail</h2><p>官方网址：<a href="https://www.guerrillamail.com/zh/">https://www.guerrillamail.com/zh/</a></p><p>特点：支持10秒自动更新，支持自定义邮箱地址，多种邮箱后缀。</p><h2 id="4-查错IT网"><a href="#4-查错IT网" class="headerlink" title="4.查错IT网"></a>4.查错IT网</h2><p>官方网址：<a href="http://24mail.chacuo.net/">http://24mail.chacuo.net</a></p><p>手动，自动刷新，支持两种邮箱后缀。</p><h2 id="5-10分钟邮箱"><a href="#5-10分钟邮箱" class="headerlink" title="5.10分钟邮箱"></a>5.10分钟邮箱</h2><p>官方网址：<a href="https://mail.xiuvi.cn/">https://mail.xiuvi.cn/</a></p><p>自动刷新。</p><h2 id="6-Temp-mail"><a href="#6-Temp-mail" class="headerlink" title="6.Temp mail"></a>6.Temp mail</h2><p>地址： <a href="https://temp-mail.org/zh/">https://temp-mail.org/zh/</a> </p><p>支持IOS和安卓移动端。</p><h2 id="7-Gmailnator"><a href="#7-Gmailnator" class="headerlink" title="7.Gmailnator"></a>7.Gmailnator</h2><p>地址：<a href="https://www.emailnator.com/">https://www.emailnator.com/</a></p><p>以gmail结尾的临时邮箱，降低放进垃圾邮件的概率。邮件会在 24 小时后自动删除，且对所有电子邮件进行 7 天备份。</p><h2 id="8-Temp-Gmail"><a href="#8-Temp-Gmail" class="headerlink" title="8.Temp Gmail"></a>8.Temp Gmail</h2><p>地址：<a href="https://smailpro.com/advanced">https://smailpro.com/advanced</a></p><p>gmail后缀的临时邮箱，同时网站还包括免费在线接收短信、免费临时信用卡生成以及免费用户名生成等服务。</p><h2 id="9-Eooc-Mail"><a href="#9-Eooc-Mail" class="headerlink" title="9.Eooc Mail"></a>9.Eooc Mail</h2><p>地址：<a href="https://eeooc.com/">https://eeooc.com/</a></p><p>中文名字叫易欧克临时邮箱。即阅即焚，小巧免费,可以自定义，使用无限制，打开网站随机生成，程序仅提供临时邮箱接收邮件的功能。</p><h2 id="10-EduMail"><a href="#10-EduMail" class="headerlink" title="10. EduMail"></a>10. EduMail</h2><p>地址：<a href="https://edumail.icu/mailbox">https://edumail.icu/mailbox</a></p><h2 id="11-ETEMPMAIL"><a href="#11-ETEMPMAIL" class="headerlink" title="11.ETEMPMAIL"></a>11.ETEMPMAIL</h2><p>地址：<a href="https://etempmail.com/">https://etempmail.com/</a></p><p>免费教育邮箱，具有自由选择的临时电子邮件。您可以将 Edu 或 .com 临时邮件与 eTempMail 一起使用。</p>]]></content>
    
    
    <summary type="html">免费临时邮箱合集</summary>
    
    
    
    <category term="工具资源" scheme="https://windcrain.top/categories/%E5%B7%A5%E5%85%B7%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="邮箱" scheme="https://windcrain.top/tags/%E9%82%AE%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title>高速交通摄像头实时监控视频</title>
    <link href="https://windcrain.top/post/%E9%AB%98%E9%80%9F%E4%BA%A4%E9%80%9A%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E8%A7%86%E9%A2%91/"/>
    <id>https://windcrain.top/post/%E9%AB%98%E9%80%9F%E4%BA%A4%E9%80%9A%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E8%A7%86%E9%A2%91/</id>
    <published>2023-04-29T13:07:08.000Z</published>
    <updated>2023-05-27T03:11:56.380Z</updated>
    
    <content type="html"><![CDATA[<ul><li>河南：<a href="https://weixin.hngscloud.com/">https://weixin.hngscloud.com/</a> 公众号：河南高速</li><li>浙江：监控视频 (zjt.gov.cn) 公众号：浙里畅行</li><li>四川：<a href="https://etc.scjtonline.cn/ScWeChatAvatar/#/homePage">https://etc.scjtonline.cn/ScWeChatAvatar/#/homePage</a></li><li>黑龙江：帮车宝APP，路况：<a href="https://gzh.hljtit.com/gis#/home">https://gzh.hljtit.com/gis#/home</a></li><li>江西：小程序江西交通监控云</li><li>江苏：江苏路网 (gandongyun.com) （还有零星省道）公众号：江苏高速</li><li>安徽：安徽高速出行服务（试运行） (u-road.com) （手动点亮右上角监控按钮）</li><li>上海：<a href="https://epsn.jtw.sh.gov.cn/wxgzh/html/ssjt.html">https://epsn.jtw.sh.gov.cn/wxgzh/html/ssjt.html</a> （手动点亮右上角监控按钮）</li><li>陕西（需在微信使用）：<a href="https://gaoguantong.ruitong369.com/GaoGuanTongServer/gaoguantongHTML/html/direction/12122/MainTest.html">https://gaoguantong.ruitong369.com/GaoGuanTongServer/gaoguantongHTML/html/direction/12122/MainTest.html</a></li><li>公众号：陕西交通12122</li><li>广西（微信）：<a href="https://traffic.gxxfzjt.com/traffic.html">https://traffic.gxxfzjt.com/traffic.html</a></li><li>河北：公众号：畅行燕赵；路况：河北省高速公路出行信息服务网 (hebecc.com)</li><li>新疆：新疆交通公众出行信息服务网 (xinjiang.gov.cn)</li><li>云南：云南高速通APP（现在只有点播），路况：<a href="https://wxyngst.u-road.com/YunNanWeChatServer/html/SVG/map.html">https://wxyngst.u-road.com/YunNanWeChatServer/html/SVG/map.html</a></li><li>吉林：（目前只有平台没有设备）<a href="https://www.hikjtxx.com/app?indexCode=190729111253050980&amp;code=051AE3100tGe6L1JWh000m6BoH3AE31a&amp;state=123#/live_traffic">https://www.hikjtxx.com/app?indexCode=190729111253050980&amp;code=051AE3100tGe6L1JWh000m6BoH3AE31a&amp;state=123#/live_traffic</a></li><li>广东：（目前仅开放内部用户）小程序高速视频云，二维码：<a href="https://img1.imgtp.com/2023/02/17/h5dQcHPh.jpg">https://img1.imgtp.com/2023/02/17/h5dQcHPh.jpg</a></li><li>宁夏：<a href="https://pubvideo.nxjtglgs.com/public/page/index?project=nx，公众号：宁夏高速服务（只有俩摄像头，一个还是坏的）">https://pubvideo.nxjtglgs.com/public/page/index?project=nx，公众号：宁夏高速服务（只有俩摄像头，一个还是坏的）</a></li></ul><p>以下省份只有路况无监控</p><ul><li>湖北：<a href="http://www.02712122.com/oss/gst-hubei/svg/index.html">http://www.02712122.com/oss/gst-hubei/svg/index.html</a></li><li>甘肃：<a href="http://gstgansuapi.u-road.com/Ga">http://gstgansuapi.u-road.com/Ga</a> … /roadCondition.html</li><li>福建（微信）：<a href="https://jjzd.fzga.gov.cn/3g/sslkxx.msw">https://jjzd.fzga.gov.cn/3g/sslkxx.msw</a></li><li>内蒙：实时路况_内蒙古自治区交通运输厅 (nmg.gov.cn)</li><li>辽宁：<a href="https://app.ln-gst.com/nuxtH5/epidemicSituation、辽宁高速通APP">https://app.ln-gst.com/nuxtH5/epidemicSituation、辽宁高速通APP</a></li><li>湖南（快拍）：湖南高速公众出行服务网 (u-road.com)、湖南高速通APP</li><li>山东：e高速APP</li></ul>]]></content>
    
    
    <summary type="html">各省市内外的高速交通摄像头实时监控视频在线观看</summary>
    
    
    
    <category term="工具资源" scheme="https://windcrain.top/categories/%E5%B7%A5%E5%85%B7%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="视频" scheme="https://windcrain.top/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>如何将网页做成APP</title>
    <link href="https://windcrain.top/post/%E5%A6%82%E4%BD%95%E5%B0%86%E7%BD%91%E9%A1%B5%E5%81%9A%E6%88%90APP/"/>
    <id>https://windcrain.top/post/%E5%A6%82%E4%BD%95%E5%B0%86%E7%BD%91%E9%A1%B5%E5%81%9A%E6%88%90APP/</id>
    <published>2023-04-03T02:29:08.000Z</published>
    <updated>2023-05-27T03:11:56.379Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们有一个网页需要经常访问，以打开浏览器输入网址或者点击书签的方式就让人感到麻烦。本文将介绍如何通过iAPP将你的网站制作成APP，只要点击就可以直接访问。</p><hr><h1 id="iAPP"><a href="#iAPP" class="headerlink" title="iAPP"></a>iAPP</h1><p>iAPP是一款在手机上制作APP的应用，可以在应用商店搜索到。</p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>1.打开iAPP，在左上角点击新建项目，输入标题，语言选择裕V3，创建应用</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035732.png" alt="20230403100208" style="zoom:25%;" /></p><p>2.点击<strong>可视编程设计</strong>我们就可以进入项目设计页面了</p><p>3.新项目建立后系统会自动生成一个“hello world”页面，我们可以直接在页面中删掉这个页面</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035733.png" alt="20230403100005" style="zoom:25%;" /></p><p>4.新页面，我们要添加一个浏览器控件，在右侧控件点开，找到<strong>浏览器</strong>控件进行添加</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035734.png" alt="20230403100657" style="zoom:25%;" /></p><p>5.在控件属性页面将控件高和宽都设置为<strong>-1</strong>（-1的意思为最大）</p><p>6.点击界面事件，添加一个<strong>载入事件</strong></p><p>我们需要在载入事件面板中填写代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s a=<span class="string">&quot;https://www.doubt-fact.top&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s申明一个变量,设置变量a为网址</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">us</span>(<span class="number">1</span>,<span class="string">&quot;url&quot;</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1为控件的代号</span></span><br></pre></td></tr></table></figure><p>补充一点，如果需要每次访问都清理缓存的话可以添加这句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hs(&quot;del cookie&quot;)</span><br></pre></td></tr></table></figure><p>这样，我们就创建好了，测试一下，是不是可以访问了呢？</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035735.png" alt="20230403101701" style="zoom:25%;" /></p><p>7.在界面事件中添加<strong>按键按下事件</strong></p><p>输入以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">f</span>(st_kC==<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//按下返回键</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">ug</span>(<span class="number">1</span>,<span class="string">&quot;cangoback&quot;</span>,c)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断是否存在可以后退的网页</span></span><br><span class="line"></span><br><span class="line"> <span class="title function_ invoke__">f</span>(c==<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果存在</span></span><br><span class="line"></span><br><span class="line">   <span class="title function_ invoke__">us</span>(<span class="number">1</span>,<span class="string">&quot;gobackorforward&quot;</span>,-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//网页后退一步（这里整数为前进,负数为后退）</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果不存在</span></span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="title function_ invoke__">ends</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//退回桌面</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存退出设计</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035736.png" alt="20230403102113" style="zoom:25%;" /></p><p>8.点击<strong>权限配置管理</strong>，将访问网络的权限打开，<strong>打包测试</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035737.png" alt="20230403102525" style="zoom:25%;" /></p><p>安装APP即可使用</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035738.png" alt="16" style="zoom:25%;" /></p>]]></content>
    
    
    <summary type="html">本文将介绍如何通过iAPP将你的网站制作成APP</summary>
    
    
    
    <category term="技术分享" scheme="https://windcrain.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="APP" scheme="https://windcrain.top/tags/APP/"/>
    
    <category term="网站" scheme="https://windcrain.top/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>AI工具合集</title>
    <link href="https://windcrain.top/post/AI%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/"/>
    <id>https://windcrain.top/post/AI%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/</id>
    <published>2023-03-25T11:57:55.000Z</published>
    <updated>2023-05-27T03:11:56.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📙AI文本"><a href="#📙AI文本" class="headerlink" title="📙AI文本"></a>📙AI文本</h1><p>ChatGPT： <a href="https://chat.openai.com/">https://chat.openai.com/</a><br>NotionAI： <a href="https://www.notion.so/product/ai">https://www.notion.so/product/ai</a><br>A.I. Data Sidekick：AI工具编写 SQL、文档等的速度提高10倍<br><a href="https://www.airops.com/">https://www.airops.com/</a><br>Writesonic：人工智能写作辅助工具<br><a href="https://writesonic.com/">https://writesonic.com/</a><br>copy.ai：使用 AI 编写更好的营销文案和内容<br><a href="https://www.copy.ai/">https://www.copy.ai/</a><br>Character.AI：AI人工交互<br><a href="https://beta.character.ai/">https://beta.character.ai/</a><br>Fireflies：该工具可插入 Zoom、Teams 或 Webex 等流行的视频会议工具，并自动执行做笔记和创建转录的过程<br><a href="https://fireflies.ai/">https://fireflies.ai/</a><br>Jasper： AI文案写作工具<br><a href="https://www.jasper.ai/">https://www.jasper.ai/</a><br>Outplay： <a href="https://outplayhq.com/">https://outplayhq.com/</a><br>CoWriter：AI辅助写作<br><a href="https://cowriter.org/login">https://cowriter.org/login</a></p><h1 id="🎨AI绘画"><a href="#🎨AI绘画" class="headerlink" title="🎨AI绘画"></a>🎨AI绘画</h1><p>Midjourney：AI绘画神器<br>网站： <a href="https://www.midjourney.com/">https://www.midjourney.com/</a><br>教程： <a href="https://www.uisdc.com/midjourney">https://www.uisdc.com/midjourney</a><br>PhotoRoom：擦除任何背景、对象<br><a href="https://www.photoroom.com/">https://www.photoroom.com/</a><br>造梦师：只需一句话，让你的文字变成画作<br><a href="https://printidea.art/">https://printidea.art/</a><br>ARC Lab：一款提供照片修复、抠图、画质增强的在线工具<br><a href="https://arc.tencent.com/zh/ai-demos/faceRestoration">https://arc.tencent.com/zh/ai-demos/faceRestoration</a><br>Artbreeder：人工智能合成创意工具<br><a href="https://www.artbreeder.com/">https://www.artbreeder.com/</a><br>Stockimg AI：生成各种各样的设计元素,包括logo、插画、图片壁纸等<br><a href="https://stockimg.ai/">https://stockimg.ai/</a><br>niji·journey：二次元ai绘画<br><a href="https://nijijourney.com/zh/">https://nijijourney.com/zh/</a><br>Getimg.ai：关键词生成图片的AI工具<br><a href="https://getimg.ai/">https://getimg.ai/</a><br>Dreamlike.art：AI图像生成<br><a href="https://dreamlike.art/">https://dreamlike.art/</a><br>文心一格 飞桨：AI艺术和创意辅助平台<br><a href="https://yige.baidu.com/">https://yige.baidu.com/</a><br>Phygital+：AI图像生成<br><a href="https://phygital.plus/">https://phygital.plus/</a><br>Beautiful.ai：AI生成PPT<br><a href="https://www.beautiful.ai/">https://www.beautiful.ai/</a></p><h1 id="🎧AI音频"><a href="#🎧AI音频" class="headerlink" title="🎧AI音频"></a>🎧AI音频</h1><p>Brain.fm：专注、放松、冥想和睡眠，聆听为您的大脑量身打造的音乐<br><a href="https://www.brain.fm/">https://www.brain.fm/</a><br>Soundraw：人工智障生成音乐<br><a href="https://soundraw.io/">https://soundraw.io/</a><br>Endel：个性化背景音，帮助您集中注意力、放松和睡眠<br><a href="https://endel.io/">https://endel.io/</a><br>Riffusion：实时音乐和音频生成库<br><a href="https://www.riffusion.com/">https://www.riffusion.com/</a><br><a href="https://github.com/riffusion/riffusion">https://github.com/riffusion/riffusion</a><br>Papercup：人工智障配音和视频翻译软件<br><a href="https://www.papercup.com/">https://www.papercup.com/</a><br>LALAL.AI：从任何音频和视频中提取人声、伴奏和各种乐器<br><a href="https://www.lalal.ai/">https://www.lalal.ai/</a><br>Murf：使用多功能AI语音生成器从文本到语音<br><a href="https://murf.ai/">https://murf.ai/</a><br>PolyAI：语音助手<br><a href="https://poly.ai/">https://poly.ai/</a><br>Voicemod：语音实时变声器<br><a href="https://www.voicemod.net/zh/">https://www.voicemod.net/zh/</a><br>Boomy：人工智障生成音乐<br><a href="https://boomy.com/">https://boomy.com/</a><br>Mubert：人工智障生成音乐<br><a href="https://mubert.com/">https://mubert.com/</a></p><h1 id="🕸AI视频"><a href="#🕸AI视频" class="headerlink" title="🕸AI视频"></a>🕸AI视频</h1><p>Runway： AI 魔法工具<br><a href="https://runwayml.com/">https://runwayml.com/</a><br>Cascadeur：人工智障辅助关键帧动画软件<br><a href="https://cascadeur.com/">https://cascadeur.com/</a><br>Synthesia：人工智障视频生成<br><a href="https://www.synthesia.io/">https://www.synthesia.io/</a><br>Pollinations：文本转视频、图片<br><a href="https://pollinations.ai/">https://pollinations.ai/</a><br>Zubtitle：为视频添加字幕和在线编辑视频<br><a href="https://zubtitle.com/">https://zubtitle.com/</a><br>Munch：人工智障提取视频中的最引人入胜、最流行和最有影响力的片段<br><a href="https://www.getmunch.com/">https://www.getmunch.com/</a><br>Fliki：将文本变成带有 AI 语音的视频<br><a href="https://fliki.ai/">https://fliki.ai/</a><br>Peech：个性化的自动视频编辑和管理平台<br><a href="https://www.peech-ai.com/">https://www.peech-ai.com/</a><br>DreamFace：AI 动画照片应用程序<br><a href="https://dreamfaceapp.com/">https://dreamfaceapp.com/</a><br>D-ID：人工智障视频生成<br><a href="https://www.d-id.com/">https://www.d-id.com/</a></p>]]></content>
    
    
    <summary type="html">文本、绘画、音频、视频的AI工具合集</summary>
    
    
    
    <category term="工具资源" scheme="https://windcrain.top/categories/%E5%B7%A5%E5%85%B7%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="AI" scheme="https://windcrain.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>无需服务器无需域名搭建自己的ChatGPT3.5网站</title>
    <link href="https://windcrain.top/post/%E6%97%A0%E9%9C%80%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E9%9C%80%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ChatGPT3.5%E7%BD%91%E7%AB%99/"/>
    <id>https://windcrain.top/post/%E6%97%A0%E9%9C%80%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E9%9C%80%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ChatGPT3.5%E7%BD%91%E7%AB%99/</id>
    <published>2023-03-24T11:57:55.000Z</published>
    <updated>2023-05-27T03:11:56.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h1><ol><li><p>ChatGPT的API-KEY<br>获取地址：<br><a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a></p></li><li><p>注册好的github账号<br>注册地址：<br><a href="https://github.com/">https://github.com/</a></p></li><li><p>注册好的vercel账号<br>用github登录即可，需要手机号验证<br><a href="https://vercel.com/login">https://vercel.com/login</a></p></li><li><p>本开源项目作者的GitHub<br><a href="https://github.com/ddiu8081/chatgpt-demo">https://github.com/ddiu8081/chatgpt-demo</a></p></li></ol><h1 id="搭建开始"><a href="#搭建开始" class="headerlink" title="搭建开始"></a>搭建开始</h1><h2 id="1-打开这个项目"><a href="#1-打开这个项目" class="headerlink" title="1)打开这个项目"></a>1)打开这个项目</h2><p><a href="https://github.com/nezha001/chatgpt-ywsj">https://github.com/nezha001/chatgpt-ywsj</a><br>登录好自己的GitHub账号</p><p><a href="#others"><strong><em><u>其他类似项目见最后</u></em></strong></a></p><h2 id="2-点击项目左下侧的Deploy进入Vercel页面"><a href="#2-点击项目左下侧的Deploy进入Vercel页面" class="headerlink" title="2)点击项目左下侧的Deploy进入Vercel页面"></a>2)点击项目左下侧的Deploy进入Vercel页面</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241152265.png" alt=""></p><h2 id="3-然后用github登录成功-需要验证手机号"><a href="#3-然后用github登录成功-需要验证手机号" class="headerlink" title="3)然后用github登录成功(需要验证手机号)"></a>3)然后用github登录成功(需要验证手机号)</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241154700.png" alt=""></p><h2 id="4-选择github"><a href="#4-选择github" class="headerlink" title="4)选择github"></a>4)选择github</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241153222.png" alt=""></p><p>然后自定义一个自己的名称-点击创建</p><h2 id="5-填入自己的chatgpt的api-key，部署即可"><a href="#5-填入自己的chatgpt的api-key，部署即可" class="headerlink" title="5)填入自己的chatgpt的api-key，部署即可"></a>5)填入自己的chatgpt的api-key，部署即可</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241200045.png" alt=""></p><h2 id="6）大约等待1分钟即可成功"><a href="#6）大约等待1分钟即可成功" class="headerlink" title="6）大约等待1分钟即可成功"></a>6）大约等待1分钟即可成功</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241203899.png" alt=""></p><h2 id="7-点击Continue-To-Dashboard进入管理页面"><a href="#7-点击Continue-To-Dashboard进入管理页面" class="headerlink" title="7) 点击Continue To Dashboard进入管理页面"></a>7) 点击Continue To Dashboard进入管理页面</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241208597.png" alt=""></p><p>点击<code>Visit</code>即可进入vercel官方分配的网址</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241211855.png" alt=""></p><h1 id="绑定自定义域名（可选）"><a href="#绑定自定义域名（可选）" class="headerlink" title="绑定自定义域名（可选）"></a>绑定自定义域名（可选）</h1><p>选中自己的项目-打开下图-View Domains</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242111478.png" alt=""></p><p>将自己要绑定的域名填入以下的位置并ADD增加</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242112332.png" alt=""></p><p>此时他会要求我们做如下CNAME</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242121663.png" alt=""></p><p>那么我们将自己的域名CNAME到vercel给你的域名即可</p><p>打开Cloudflare做如下配置</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242120271.png" alt=""></p><p>添加一条点下保存，再添加下一条</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242123056.png" alt=""></p><p>稍微等待一会，刷新，直到没有错误提示即可</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242124806.png" alt=""></p><p>此时(有可能还得等待一会5分钟)就可以用自己的域名来访问了</p><p>Demo:</p><p><del><a href="https://www.mzlfreegpt.eu.org/">https://www.mzlfreegpt.eu.org/</a></del></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242128213.png" alt=""></p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p><a name="others"></a></p><p>其他类似项目：</p><ul><li><a href="https://github.com/Chanzhaoyu/chatgpt-web">https://github.com/Chanzhaoyu/chatgpt-web</a></li></ul><ul><li><a href="https://github.com/ourongxing/chatgpt-vercel">https://github.com/ourongxing/chatgpt-vercel</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;准备条件&quot;&gt;&lt;a href=&quot;#准备条件&quot; class=&quot;headerlink&quot; title=&quot;准备条件&quot;&gt;&lt;/a&gt;准备条件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ChatGPT的API-KEY&lt;br&gt;获取地址：&lt;br&gt;&lt;a href=&quot;https://platform</summary>
      
    
    
    
    <category term="技术分享" scheme="https://windcrain.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="网站" scheme="https://windcrain.top/tags/%E7%BD%91%E7%AB%99/"/>
    
    <category term="chatGPT" scheme="https://windcrain.top/tags/chatGPT/"/>
    
  </entry>
  
  <entry>
    <title>永久免费域名注册eu.org</title>
    <link href="https://windcrain.top/post/%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8Ceu.org/"/>
    <id>https://windcrain.top/post/%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8Ceu.org/</id>
    <published>2023-03-24T11:57:55.000Z</published>
    <updated>2023-05-27T03:11:56.379Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简介：<a href="https://nic.eu.org">EU.org</a>, free domain names since 1996</strong></p><h1 id="一、注册账号"><a href="#一、注册账号" class="headerlink" title="一、注册账号"></a>一、注册账号</h1><p>首先进入注册页面注册一个网站的账号<br>打开<br><a href="https://nic.eu.org/arf/en/login/?next=/arf/en/">https://nic.eu.org/arf/en/login/?next=/arf/en/</a><br>点击Register注册</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241016334.png" alt=""></p><p>按照报错提示要求补充其他信息</p><p>可以参考地址生成器生成地址<br><a href="https://www.meiguodizhi.com/">https://www.meiguodizhi.com/</a></p><h1 id="二、注册成功"><a href="#二、注册成功" class="headerlink" title="二、注册成功"></a>二、注册成功</h1><p>注册账号成功以后，邮箱会收到一份激活邮件，按要求激活即可</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241028759.png" alt=""></p><h1 id="三、申请域名"><a href="#三、申请域名" class="headerlink" title="三、申请域名"></a>三、申请域名</h1><p>登录成功以后新创建一个域名</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241030170.png" alt=""></p><p>dns地址可以填写这这个<br><code>edmund.dnspod.net</code><br><code>dempsey.dnspod.net</code></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241047593.png" alt=""></p><h1 id="四、等待审核"><a href="#四、等待审核" class="headerlink" title="四、等待审核"></a>四、等待审核</h1><p><img src="D:\Typora\图片\202304022345330.png" alt=""></p><p>没有错误，就代表成功了，剩下的就是等待，一两天的样子。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242027609.png" alt=""></p><h1 id="五、绑定Cloudflare"><a href="#五、绑定Cloudflare" class="headerlink" title="五、绑定Cloudflare"></a>五、绑定Cloudflare</h1><p>注册Cloudflare账号<br><a href="https://www.cloudflare.com/zh-cn/">https://www.cloudflare.com/zh-cn/</a></p><p>登录Cloudflare账号</p><p>添加站点-填入自己要绑定的域名</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242031222.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242036935.png" alt=""></p><p>选择免费</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242037418.png" alt=""></p><p>添加  Cloudflare  名称服务器</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242042128.png" alt=""></p><p>在eu.org中-选择自己的域名-Nameservers</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242043921.png" alt=""></p><p>将Cloudflare中的两个地址替换到这里，选择server names，Submit提交</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242049778.png" alt=""></p><p>添加完后，cloudflare个人主页的 <code>网站</code></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242051929.png" alt=""></p><p>等待一段时间（不到一小时）</p><p>即可收到绑定成功的邮件-变成了这样-有效</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242110748.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;简介：&lt;a href=&quot;https://nic.eu.org&quot;&gt;EU.org&lt;/a&gt;, free domain names since 1996&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、注册账号&quot;&gt;&lt;a href=&quot;#一、注册账号&quot; class=&quot;he</summary>
      
    
    
    
    <category term="技术分享" scheme="https://windcrain.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="域名" scheme="https://windcrain.top/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>OpenSSL SSL_read：Connection was reset, errno 10054</title>
    <link href="https://windcrain.top/post/OpenSSL%20SSL_read%20errno%2010054/"/>
    <id>https://windcrain.top/post/OpenSSL%20SSL_read%20errno%2010054/</id>
    <published>2023-03-23T11:57:55.000Z</published>
    <updated>2023-05-27T03:11:56.375Z</updated>
    
    <content type="html"><![CDATA[<p><strong><big>❌  git 报错信息 ：</big></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL SSL_read: Connection was reset, errno 10054 ...</span><br></pre></td></tr></table></figure><p><strong><big>❗   异常信息</big></strong></p><p><code>Git Bash</code> 中，<code>push</code> 或者<code>hexo deploy</code>时，出现错误</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><strong><big>⭕  解决方案</big></strong></p><p>1.邮箱问题</p><p>查看用户名，邮箱</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>修改，用户名，邮箱</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><p>移除仓库，重新添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin https:<span class="comment">//github.com/XXX</span></span><br></pre></td></tr></table></figure><p>2.解除SSL认证</p><p>在 Git Bash 中输入以下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure><p>3.更新 DNS 缓存</p><p>cmd 窗口输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><p>4.文件过大，超过上限</p><p>修改为 500MB，在 Git Bash 中输入以下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config http.postBuffer <span class="number">5242880003</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;big&gt;❌  git 报错信息 ：&lt;/big&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    <category term="疑难杂症" scheme="https://windcrain.top/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
    <category term="git" scheme="https://windcrain.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>笔记本键盘禁用</title>
    <link href="https://windcrain.top/post/%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%94%AE%E7%9B%98%E7%A6%81%E7%94%A8/"/>
    <id>https://windcrain.top/post/%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%94%AE%E7%9B%98%E7%A6%81%E7%94%A8/</id>
    <published>2023-03-13T11:57:55.000Z</published>
    <updated>2023-05-27T03:11:56.379Z</updated>
    
    <content type="html"><![CDATA[<p>1、搜索cmd，以管理员身份运行命令指令符</p><p>2、输入以下代码，回车确定，重启电脑生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config i8042prt start= disabled</span><br></pre></td></tr></table></figure><p>tip：若要再次开启笔记本键盘</p><p>输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config i8042prt start= auto</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、搜索cmd，以管理员身份运行命令指令符&lt;/p&gt;
&lt;p&gt;2、输入以下代码，回车确定，重启电脑生效&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=</summary>
      
    
    
    
    <category term="疑难杂症" scheme="https://windcrain.top/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
    <category term="键盘" scheme="https://windcrain.top/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://windcrain.top/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://windcrain.top/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-10-16T11:57:55.000Z</published>
    <updated>2023-05-27T03:11:56.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>一个正则表达式，就是用某种模式去匹配字符串的一个公式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;1998 年 12 月 8 日，第二代 Java 平台的企业版 J2EE 发布。1999 年 6 月，Sun 公司发布了&quot;</span> +</span><br><span class="line">                <span class="string">&quot;第二代 Java 平台（简称为 Java2）的 3 个版本：J2ME（Java2 Micro Edition，Java2 平台的微型&quot;</span> +</span><br><span class="line">                <span class="string">&quot;版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2 平台的&quot;</span> +</span><br><span class="line">                <span class="string">&quot;标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2 平台的企业版），应&quot;</span> +</span><br><span class="line">                <span class="string">&quot;用 3443 于基于 Java 的应用服务器。Java 2 平台的发布，是 Java 发展过程中最重要的一个&quot;</span> +</span><br><span class="line">                <span class="string">&quot;里程碑，标志着 Java 的应用开始普及 9889 &quot;</span>;</span><br><span class="line">        <span class="comment">//目标：匹配所有四个数字</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. \\d 表示一个任意的数字</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(\\d\\d)(\\d\\d)&quot;</span>;</span><br><span class="line">        <span class="comment">//2. 创建模式对象[即正则表达式对象]</span></span><br><span class="line">                <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="comment">//3. 创建匹配器</span></span><br><span class="line">        <span class="comment">//说明：创建匹配器 matcher， 按照 正则表达式的规则 去匹配 content 字符串</span></span><br><span class="line">                <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="comment">//4.开始匹配</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * matcher.find() 完成的任务 （考虑分组）</span></span><br><span class="line"><span class="comment"> * 什么是分组，比如 (\d\d)(\d\d) ,正则表达式中有() 表示分组,第 1 个()表示第 1 组,第 2 个()表示第 2 组... * 1. 根据指定的规则 ,定位满足规则的子字符串(比如(19)(98))</span></span><br><span class="line"><span class="comment"> * 2. 找到后，将 子字符串的开始的索引记录到 matcher 对象的属性 int[] groups;</span></span><br><span class="line"><span class="comment"> *      2.1 groups[0] = 0 , 把该子字符串的结束的索引+1 的值记录到 groups[1] = 4</span></span><br><span class="line"><span class="comment"> *      2.2 记录 1 组()匹配到的字符串 groups[2] = 0 groups[3] = 2</span></span><br><span class="line"><span class="comment"> *      2.3 记录 2 组()匹配到的字符串 groups[4] = 2 groups[5] = 4</span></span><br><span class="line"><span class="comment"> *      2.4.如果有更多的分组..... * 3. 同时记录 oldLast 的值为 子字符串的结束的 索引+1 的值即 35, 即下次执行 find 时，就从 35 开始匹</span></span><br><span class="line"><span class="comment"> 配</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * matcher.group(0) 分析</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 源码:</span></span><br><span class="line"><span class="comment"> * public String group(int group) &#123;</span></span><br><span class="line"><span class="comment"> * if (first &lt; 0)</span></span><br><span class="line"><span class="comment"> * throw new IllegalStateException(&quot;No match found&quot;);</span></span><br><span class="line"><span class="comment"> * if (group &lt; 0 || group &gt; groupCount())</span></span><br><span class="line"><span class="comment"> * throw new IndexOutOfBoundsException(&quot;No group &quot; + group);</span></span><br><span class="line"><span class="comment"> * if ((groups[group*2] == -1) || (groups[group*2+1] == -1))</span></span><br><span class="line"><span class="comment"> * return null;</span></span><br><span class="line"><span class="comment"> * return getSubSequence(groups[group * 2], groups[group * 2 + 1]).toString();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * 1. 根据 groups[0]=31 和 groups[1]=35 的记录的位置，从 content 开始截取子字符串返回</span></span><br><span class="line"><span class="comment"> * 就是 [31,35) 包含 31 但是不包含索引为 35 的位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果再次指向 find 方法.仍然安上面分析来执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="comment">//小结</span></span><br><span class="line">            <span class="comment">//1. 如果正则表达式有() 即分组</span></span><br><span class="line">            <span class="comment">//2. 取出匹配的字符串规则如下</span></span><br><span class="line">            <span class="comment">//3. group(0) 表示匹配到的子字符串</span></span><br><span class="line">            <span class="comment">//4. group(1) 表示匹配到的子字符串的第一组字串</span></span><br><span class="line">            <span class="comment">//5. group(2) 表示匹配到的子字符串的第 2 组字串</span></span><br><span class="line">            <span class="comment">//6. ... 但是分组的数不能越界.</span></span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 1 组()匹配到的值=&quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 2 组()匹配到的值=&quot;</span> + matcher.group(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="转义号"><a href="#转义号" class="headerlink" title="转义号\\"></a>转义号\\</h2><p>\\符号 说明:在我们使用正则表达式去检索某些特殊字符的时候，需要用到转义符号，否则检索不到结果，甚至会报错的。 </p><p>需要用到转义符号的字符有以下: <strong>. * + ( ) $ / \ ? [ ]  ^ { }</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;abc$(a.bc(123( )&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr = &quot;\\$&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;\\(&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符匹配符"><a href="#字符匹配符" class="headerlink" title="字符匹配符"></a>字符匹配符</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201724351.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201724539.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;a11c8abc _ABCy @&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr = &quot;[a-z]&quot;;//匹配 a-z 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[A-Z]&quot;;//匹配 A-Z 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;abc&quot;;//匹配 abc 字符串[默认区分大小写]</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;(?i)abc&quot;;//匹配 abc 字符串[不区分大小写]</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[0-9]&quot;;//匹配 0-9 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[^a-z]&quot;;//匹配 不在 a-z 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[^0-9]&quot;;//匹配 不在 0-9 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[abcd]&quot;;//匹配 在 abcd 中任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\D&quot;;//匹配 不在 0-9 的任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\w&quot;;//匹配 大小写英文字母, 数字，下划线</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\W&quot;;//匹配 等价于 [^a-zA-Z0-9_]</span></span><br><span class="line">        <span class="comment">//\\s 匹配任何空白字符(空格,制表符等)</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\s&quot;;</span></span><br><span class="line">        <span class="comment">//\\S 匹配任何非空白字符 ,和\\s 刚好相反</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\S&quot;;</span></span><br><span class="line">        <span class="comment">// . 匹配出 \n 之外的所有字符,如果要匹配.本身则需要使用 \\.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当创建 Pattern 对象时，指定 Pattern.CASE_INSENSITIVE, 表示匹配是不区分字母大小写.</span></span><br><span class="line">        <span class="comment">// Pattern pattern = Pattern.compile(regStr, Pattern.CASE_INSENSITIVE)</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择匹配符"><a href="#选择匹配符" class="headerlink" title="选择匹配符"></a>选择匹配符</h2><p>在匹配某个字符串的时候是选择性的，即:既可以匹配这个，又可以匹配那个，这时需<br>要用到选择匹配符号|</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201744698.png" alt=""></p><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>用于指定其前面的字符和组合项连续出现多少次</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201745278.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;a211111aaaaaahello&quot;</span>;</span><br><span class="line">        <span class="comment">//a&#123;3&#125;,1&#123;4&#125;,\\d&#123;2&#125;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;a&#123;3&#125;&quot;;// 表示匹配 aaa</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1&#123;4&#125;&quot;;// 表示匹配 1111</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d&#123;2&#125;&quot;;// 表示匹配 两位的任意数字字符</span></span><br><span class="line">        <span class="comment">//a&#123;3,4&#125;,1&#123;4,5&#125;,\\d&#123;2,5&#125;</span></span><br><span class="line">        <span class="comment">//细节：java 匹配默认贪婪匹配，即尽可能匹配多的</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;a&#123;3,4&#125;&quot;; //表示匹配 aaa 或者 aaaa</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1&#123;4,5&#125;&quot;; //表示匹配 1111 或者 11111</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d&#123;2,5&#125;&quot;; //匹配 2 位数或者 3,4,5</span></span><br><span class="line">        <span class="comment">//1+</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1+&quot;; //匹配一个 1 或者多个 1</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d+&quot;; //匹配一个数字或者多个数字</span></span><br><span class="line">        <span class="comment">//1*</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1*&quot;; //匹配 0 个 1 或者多个 1</span></span><br><span class="line">        <span class="comment">//演示?的使用, 遵守贪婪匹配</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;a1?&quot;</span>; <span class="comment">//匹配 a 或者 a1</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr<span class="comment">/*, Pattern.CASE_INSENSITIVE*/</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到 &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符, 规定要匹配的字符串出现的位置，比如在字符串的开始还是在结束的位置.</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201754813.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hanshunping sphan nnhan&quot;</span>;</span><br><span class="line">        <span class="comment">//String content = &quot;123-abc&quot;;</span></span><br><span class="line">        <span class="comment">//以至少 1 个数字开头，后接任意个小写字母的字符串</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;^[0-9]+[a-z]*&quot;;</span></span><br><span class="line">        <span class="comment">//以至少 1 个数字开头, 必须以至少一个小写字母结束</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;^[0-9]+\\-[a-z]+$&quot;;</span></span><br><span class="line">        <span class="comment">//表示匹配边界的 han[这里的边界是指：被匹配的字符串最后, // 也可以是空格的子字符串的后面]</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;han\\b&quot;;</span></span><br><span class="line">        <span class="comment">//和\\b 的含义刚刚相反</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;han\\B&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到=&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201820067.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hanshunping s7789 nn1189han&quot;</span>;</span><br><span class="line">        <span class="comment">//下面就是非命名分组</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">// 1. matcher.group(0) 得到匹配到的字符串</span></span><br><span class="line">        <span class="comment">// 2. matcher.group(1) 得到匹配到的字符串的第 1 个分组内容</span></span><br><span class="line">        <span class="comment">// 3. matcher.group(2) 得到匹配到的字符串的第 2 个分组内容</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;(\\d\\d)(\\d\\d)&quot;;//匹配 4 个数字的字符串</span></span><br><span class="line">        <span class="comment">//命名分组： 即可以给分组取名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(?&lt;g1&gt;\\d\\d)(?&lt;g2&gt;\\d\\d)&quot;</span>;<span class="comment">//匹配 4 个数字的字符串</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到=&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 1 个分组内容=&quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 1 个分组内容[通过组名]=&quot;</span> + matcher.group(<span class="string">&quot;g1&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 2 个分组内容=&quot;</span> + matcher.group(<span class="number">2</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 2 个分组内容[通过组名]=&quot;</span> + matcher.group(<span class="string">&quot;g2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201821410.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello 韩顺平教育 jack 韩顺平老师 韩顺平同学 hello 韩顺平学生&quot;</span>;</span><br><span class="line">        <span class="comment">// 找到 韩顺平教育 、韩顺平老师、韩顺平同学 子字符串</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;韩顺平教育|韩顺平老师|韩顺平同学&quot;;</span></span><br><span class="line">        <span class="comment">//上面的写法可以等价非捕获分组, 注意：不能 matcher.group(1)</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;韩顺平(?:教育|老师|同学)&quot;;</span></span><br><span class="line">        <span class="comment">//找到 韩顺平 这个关键字,但是要求只是查找韩顺平教育和 韩顺平老师 中包含有的韩顺平</span></span><br><span class="line">        <span class="comment">//下面也是非捕获分组，不能使用 matcher.group(1)</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;韩顺平(?=教育|老师)&quot;;</span></span><br><span class="line">        <span class="comment">//找到 韩顺平 这个关键字,但是要求只是查找 不是 (韩顺平教育 和 韩顺平老师) 中包含有的韩顺平</span></span><br><span class="line">        <span class="comment">//下面也是非捕获分组，不能使用 matcher.group(1)</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;韩顺平(?!教育|老师)&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201836039.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201837409.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201837719.png" alt=""></p><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201914233.png" alt=""></p><h2 id="Pattern类"><a href="#Pattern类" class="headerlink" title="Pattern类"></a>Pattern类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示 matches 方法，用于整体匹配, 在验证输入的字符串是否满足条件使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello abc hello, world&quot;</span>;</span><br><span class="line"><span class="comment">//String regStr = &quot;hello&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;hello.*&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">matches</span> <span class="operator">=</span> Pattern.matches(regStr, content);</span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配= &quot;</span> + matches);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Matcher类"><a href="#Matcher类" class="headerlink" title="Matcher类"></a>Matcher类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatcherMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello edu jack hspedutom hello smith hello hspedu hspedu&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">            System.out.println(matcher.start());</span><br><span class="line">            System.out.println(matcher.end());</span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + content.substring(matcher.start(), matcher.end()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//整体匹配方法，常用于，去校验某个字符串是否满足某个规则</span></span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配=&quot;</span> + matcher.matches());</span><br><span class="line">        <span class="comment">//完成如果 content 有 hspedu 替换成 Java学习</span></span><br><span class="line">        regStr = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line">        pattern = Pattern.compile(regStr);</span><br><span class="line">        matcher = pattern.matcher(content);</span><br><span class="line">        <span class="comment">//注意：返回的字符串才是替换后的字符串 原来的 content 不变化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newContent</span> <span class="operator">=</span> matcher.replaceAll(<span class="string">&quot;Java学习&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;newContent=&quot;</span> + newContent);</span><br><span class="line">        System.out.println(<span class="string">&quot;content=&quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分组、捕获、反向引用"><a href="#分组、捕获、反向引用" class="headerlink" title="分组、捕获、反向引用"></a>分组、捕获、反向引用</h1><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201928470.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content= <span class="string">&quot;12321-333999111&quot;</span>;</span><br><span class="line">        String regStr= <span class="string">&quot;\\d&#123;5&#125;-(\\d)\\1&#123;2&#125;(\\d)\\2&#123;2&#125;(\\d)\\3&#123;2&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;我....我要....学学学学....编程 java!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;\\.&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        content = matcher.replaceAll(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        regStr =&quot;(.)\\1+&quot;;</span></span><br><span class="line"><span class="comment">//        pattern = Pattern.compile(regStr);</span></span><br><span class="line"><span class="comment">//        matcher = pattern.matcher(content);</span></span><br><span class="line"><span class="comment">//        //使用 反向引用$1 来转换匹配到的内容</span></span><br><span class="line"><span class="comment">//        content = matcher.replaceAll(&quot;$1&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(content);</span></span><br><span class="line"></span><br><span class="line">        content = Pattern.compile(<span class="string">&quot;(.)\\1+&quot;</span>).matcher(content).replaceAll(<span class="string">&quot;$1&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-类中使用正则表达式"><a href="#String-类中使用正则表达式" class="headerlink" title="String 类中使用正则表达式"></a>String 类中使用正则表达式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringReg</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;2000 年 5 月，JDK1.3、JDK1.4 和 J2SE1.3 相继发布，几周后其&quot;</span> +</span><br><span class="line">                <span class="string">&quot;获得了 Apple 公司 Mac OS X 的工业标准的支持。2001 年 9 月 24 日，J2EE1.3 发&quot;</span> +</span><br><span class="line">                <span class="string">&quot;布。&quot;</span> +</span><br><span class="line">                <span class="string">&quot;2002 年 2 月 26 日，J2SE1.4 发布。自此 Java 的计算能力有了大幅提升&quot;</span>;</span><br><span class="line">        <span class="comment">//使用正则表达式方式，将 JDK1.3 和 JDK1.4 替换成 JDK</span></span><br><span class="line">        content = content.replaceAll(<span class="string">&quot;JDK1\\.3|JDK1\\.4&quot;</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">        <span class="comment">//要求 验证一个 手机号， 要求必须是以 138 139 开头的</span></span><br><span class="line">        content = <span class="string">&quot;13888889999&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (content.matches(<span class="string">&quot;1(38|39)\\d&#123;8&#125;&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要求按照 # 或者 - 或者 ~ 或者 数字 来分割</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        content = <span class="string">&quot;hello#abc-jack12smith~北京&quot;</span>;</span><br><span class="line">        String[] split = content.split(<span class="string">&quot;#|-|~|\\d+&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">一、校验数字的表达式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">1</span> 数字：^[<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line">        <span class="number">2</span> n位的数字：^\d&#123;n&#125;$</span><br><span class="line">        <span class="number">3</span> 至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line">        <span class="number">4</span> m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">        <span class="number">5</span> 零和非零开头的数字：^(<span class="number">0</span>|[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)$</span><br><span class="line">        <span class="number">6</span> 非零开头的最多带两位小数的数字：^([<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">7</span> 带<span class="number">1</span>-<span class="number">2</span>位小数的正数或负数：^(\-)?\d+(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">8</span> 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line">        <span class="number">9</span> 有两位小数的正实数：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">10</span> 有<span class="number">1</span>~<span class="number">3</span>位小数的正实数：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)?$</span><br><span class="line">        <span class="number">11</span> 非零的正整数：^[<span class="number">1</span>-<span class="number">9</span>]\d*$ 或 ^([<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$ 或 ^\+?[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line">        <span class="number">12</span> 非零的负整数：^\-[<span class="number">1</span>-<span class="number">9</span>][]<span class="number">0</span>-<span class="number">9</span><span class="string">&quot;*$ 或 ^-[1-9]\d*$</span></span><br><span class="line"><span class="string">        13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span></span><br><span class="line"><span class="string">        14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span></span><br><span class="line"><span class="string">        15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span></span><br><span class="line"><span class="string">        16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span></span><br><span class="line"><span class="string">        17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span></span><br><span class="line"><span class="string">        18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span></span><br><span class="line"><span class="string">        19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        二、校验字符的表达式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1 汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</span></span><br><span class="line"><span class="string">        2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</span></span><br><span class="line"><span class="string">        3 长度为3-20的所有字符：^.&#123;3,20&#125;$</span></span><br><span class="line"><span class="string">        4 由26个英文字母组成的字符串：^[A-Za-z]+$</span></span><br><span class="line"><span class="string">        5 由26个大写英文字母组成的字符串：^[A-Z]+$</span></span><br><span class="line"><span class="string">        6 由26个小写英文字母组成的字符串：^[a-z]+$</span></span><br><span class="line"><span class="string">        7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span></span><br><span class="line"><span class="string">        8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$</span></span><br><span class="line"><span class="string">        9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span></span><br><span class="line"><span class="string">        10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</span></span><br><span class="line"><span class="string">        11 可以输入含有^%&amp;&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;,;=?$\x22]+</span></span><br><span class="line"><span class="string">        12 禁止输入含有~的字符：[^~\x22]+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        三、特殊需求表达式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span></span><br><span class="line"><span class="string">        2 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span></span><br><span class="line"><span class="string">        3 InternetURL：[a-zA-z]+://[^\s]* 或 ^https://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span></span><br><span class="line"><span class="string">        4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span></span><br><span class="line"><span class="string">        5 电话号码(&quot;</span>XXX-XXXXXXX<span class="string">&quot;、&quot;</span>XXXX-XXXXXXXX<span class="string">&quot;、&quot;</span>XXX-XXXXXXX<span class="string">&quot;、&quot;</span>XXX-XXXXXXXX<span class="string">&quot;、&quot;</span>XXXXXXX<span class="string">&quot;和&quot;</span>XXXXXXXX)：^(\(\d&#123;<span class="number">3</span>,<span class="number">4</span>&#125;-)|\d&#123;<span class="number">3.4</span>&#125;-)?\d&#123;<span class="number">7</span>,<span class="number">8</span>&#125;$ </span><br><span class="line">        <span class="number">6</span> 国内电话号码(<span class="number">0511</span>-<span class="number">4405222</span>、<span class="number">021</span>-<span class="number">87888822</span>)：\d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">8</span>&#125;|\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">7</span>&#125;</span><br><span class="line">        <span class="number">7</span> 身份证号：</span><br><span class="line">        <span class="number">15</span>或<span class="number">18</span>位身份证：^\d&#123;<span class="number">15</span>&#125;|\d&#123;<span class="number">18</span>&#125;$</span><br><span class="line">        <span class="number">15</span>位身份证：^[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">7</span>&#125;((<span class="number">0</span>\d)|(<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>]))(([<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>]\d)|<span class="number">3</span>[<span class="number">0</span>-<span class="number">1</span>])\d&#123;<span class="number">3</span>&#125;$</span><br><span class="line">        <span class="number">18</span>位身份证：^[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">5</span>&#125;[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">3</span>&#125;((<span class="number">0</span>\d)|(<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>]))(([<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>]\d)|<span class="number">3</span>[<span class="number">0</span>-<span class="number">1</span>])\d&#123;<span class="number">4</span>&#125;$</span><br><span class="line">        <span class="number">8</span> 短身份证号码(数字、字母x结尾)：^([<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">7</span>,<span class="number">18</span>&#125;(x|X)?$ 或 ^\d&#123;<span class="number">8</span>,<span class="number">18</span>&#125;|[<span class="number">0</span>-9x]&#123;<span class="number">8</span>,<span class="number">18</span>&#125;|[<span class="number">0</span>-9X]&#123;<span class="number">8</span>,<span class="number">18</span>&#125;?$</span><br><span class="line">        <span class="number">9</span> 帐号是否合法(字母开头，允许<span class="number">5</span>-<span class="number">16</span>字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;<span class="number">4</span>,<span class="number">15</span>&#125;$</span><br><span class="line">        <span class="number">10</span> 密码(以字母开头，长度在<span class="number">6</span>~<span class="number">18</span>之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;<span class="number">5</span>,<span class="number">17</span>&#125;$</span><br><span class="line">        <span class="number">11</span> 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class="number">8</span>-<span class="number">10</span>之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class="number">8</span>,<span class="number">10</span>&#125;$</span><br><span class="line">        <span class="number">12</span> 日期格式：^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">        <span class="number">13</span> 一年的<span class="number">12</span>个月(<span class="number">01</span>～09和<span class="number">1</span>～<span class="number">12</span>)：^(<span class="number">0</span>?[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])$</span><br><span class="line">        <span class="number">14</span> 一个月的<span class="number">31</span>天(<span class="number">01</span>～09和<span class="number">1</span>～<span class="number">31</span>)：^((<span class="number">0</span>?[<span class="number">1</span>-<span class="number">9</span>])|((<span class="number">1</span>|<span class="number">2</span>)[<span class="number">0</span>-<span class="number">9</span>])|<span class="number">30</span>|<span class="number">31</span>)$</span><br><span class="line">        <span class="number">15</span> 钱的输入格式：</span><br><span class="line">        <span class="number">16</span> <span class="number">1.</span>有四种钱的表示形式我们可以接受:<span class="string">&quot;10000.00&quot;</span> 和 <span class="string">&quot;10,000.00&quot;</span>, 和没有 <span class="string">&quot;分&quot;</span> 的 <span class="string">&quot;10000&quot;</span> 和 <span class="string">&quot;10,000&quot;</span>：^[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line">        <span class="number">17</span> <span class="number">2.</span>这表示任意一个不以<span class="number">0</span>开头的数字,但是,这也意味着一个字符<span class="string">&quot;0&quot;</span>不通过,所以我们采用下面的形式：^(<span class="number">0</span>|[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)$</span><br><span class="line">        <span class="number">18</span> <span class="number">3.</span>一个<span class="number">0</span>或者一个不以<span class="number">0</span>开头的数字.我们还可以允许开头有一个负号：^(<span class="number">0</span>|-?[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)$</span><br><span class="line">        <span class="number">19</span> <span class="number">4.</span>这表示一个<span class="number">0</span>或者一个可能为负的开头不为<span class="number">0</span>的数字.让用户以<span class="number">0</span>开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]+)?$</span><br><span class="line">        <span class="number">20</span> <span class="number">5.</span>必须说明的是,小数点后面至少应该有<span class="number">1</span>位数,所以<span class="string">&quot;10.&quot;</span>是不通过的,但是 <span class="string">&quot;10&quot;</span> 和 <span class="string">&quot;10.2&quot;</span> 是通过的：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">21</span> <span class="number">6.</span>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">22</span> <span class="number">7.</span>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(,[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">3</span>&#125;)*(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">23</span> <span class="number">8.1</span>到<span class="number">3</span>个数字,后面跟着任意个 逗号+<span class="number">3</span>个数字,逗号成为可选,而不是必须：^([<span class="number">0</span>-<span class="number">9</span>]+|[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(,[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">3</span>&#125;)*)(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">24</span> 备注：这就是最终结果了,别忘了<span class="string">&quot;+&quot;</span>可以用<span class="string">&quot;*&quot;</span>替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span><br><span class="line">        <span class="number">25</span> xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-<span class="number">9</span>]+\\.[x|X][m|M][l|L]$</span><br><span class="line">        <span class="number">26</span> 中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">        <span class="number">27</span> 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计<span class="number">2</span>，ASCII字符计<span class="number">1</span>))</span><br><span class="line">        <span class="number">28</span> 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">        <span class="number">29</span> HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line">        <span class="number">30</span> 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">        <span class="number">31</span> 腾讯QQ号：[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">4</span>,&#125; (腾讯QQ号从<span class="number">10000</span>开始)</span><br><span class="line">        <span class="number">32</span> 中国邮政编码：[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">5</span>&#125;(?!\d) (中国邮政编码为<span class="number">6</span>位数字)</span><br><span class="line">        <span class="number">33</span> IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">语法、常用类</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="正则表达式" scheme="https://windcrain.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://windcrain.top/post/MySQL/"/>
    <id>https://windcrain.top/post/MySQL/</id>
    <published>2022-08-17T11:57:55.000Z</published>
    <updated>2023-05-27T03:11:56.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p><strong>SQL语句分类</strong></p><p>DDL:数据定义语句[create表，库…]</p><p>DML:数据操作语句[增加insert,修改update，删除 delete]</p><p>DQL:数据查询语句[select ]</p><p>DCL:数据控制语句[管理数据库:比如用户权限grant revoke ]</p><h2 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a><strong>数据库基本操作</strong></h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208031548136.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208031650195.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208031701557.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208031734240.png" alt=""></p><h2 id="常用数据类型（列类型）"><a href="#常用数据类型（列类型）" class="headerlink" title="常用数据类型（列类型）"></a>常用数据类型（列类型）</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208031744446.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208032131524.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208051932191.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">`id` <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">`sex` <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">`birthday` <span class="type">DATE</span>,</span><br><span class="line">`entry_date` DATETIME,</span><br><span class="line">`job` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">`Salary` <span class="keyword">DOUBLE</span>,</span><br><span class="line">`resume` TEXT)<span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin ENGINE INNODB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span>(<span class="number">100</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;2000-12-11&#x27;</span>,<span class="string">&#x27;2022-08-03 22:01:20&#x27;</span>,<span class="string">&#x27;Java开发&#x27;</span>,<span class="string">&#x27;20000&#x27;</span>,<span class="string">&#x27;法外狂徒&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> </span><br><span class="line">`image` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> AFTER resume;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp MODIFY  </span><br><span class="line">`job` <span class="type">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> emp </span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> `sex`;</span><br><span class="line"></span><br><span class="line">RENAME <span class="keyword">table</span> emp <span class="keyword">TO</span> employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee CHANGE `name` `user_name` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> employee;</span><br></pre></td></tr></table></figure><h2 id="数据库CRUD语句"><a href="#数据库CRUD语句" class="headerlink" title="数据库CRUD语句"></a>数据库CRUD语句</h2><ol><li><p>Insert语句(添加数据)</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208051958270.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#说明 <span class="keyword">insert</span> 语句的细节</span><br><span class="line"><span class="comment">-- 1.插入的数据应与字段的数据类型相同。</span></span><br><span class="line"><span class="comment">-- 比如 把 &#x27;abc&#x27; 添加到 int 类型会错误</span></span><br><span class="line"><span class="comment">-- 2. 数据的长度应在列的规定范围内，例如：不能将一个长度为 80 的字符串加入到长度为 40 的列中。</span></span><br><span class="line"><span class="comment">-- 3. 在 values 中列出的数据位置必须与被加入的列的排列位置相对应。</span></span><br><span class="line"><span class="comment">-- 4. 字符和日期型数据应包含在单引号中。</span></span><br><span class="line"><span class="comment">-- 5. 列可以插入空值[前提是该字段允许为空]，insert into table value(null)</span></span><br><span class="line"><span class="comment">-- 6. insert into tab_name (列名..) values (),(),() 形式添加多条记录</span></span><br><span class="line"><span class="comment">-- 7. 如果是给表中的所有字段添加数据，可以不写前面的字段名称</span></span><br><span class="line"><span class="comment">-- 8. 默认值的使用，当不给某个字段值时，如果有默认值就会添加默认值，否则报错</span></span><br><span class="line"><span class="comment">-- 如果某个列 没有指定 not null ,那么当添加数据时，没有给定值，则会默认给 null </span></span><br><span class="line"><span class="comment">-- 如果我们希望指定某个列的默认值，可以在创建表时指定</span></span><br></pre></td></tr></table></figure></li><li><p>Update语句(更新数据)</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208051958354.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> salary <span class="operator">=</span><span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> salary <span class="operator">=</span><span class="number">30000</span> <span class="keyword">WHERE</span> user_name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> salary <span class="operator">=</span>salary<span class="operator">+</span><span class="number">10000</span> <span class="keyword">WHERE</span> user_name<span class="operator">=</span><span class="string">&#x27;王五&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.UPDATE语法可以用新值更新原有表行中的各列。</span></span><br><span class="line"><span class="comment">-- 2.SET子句指示要修改哪些列和要给予哪些值。</span></span><br><span class="line"><span class="comment">-- 3. WHERE学句指定应更新哪些行。如没有WHERE子句，则更新所有的行(记录)，一定小心。</span></span><br><span class="line"><span class="comment">-- 4.如果需要修改多个字段，可以通过set字段1=值1,字段2=值2....</span></span><br></pre></td></tr></table></figure></li><li><p>Delete语句(删除数据)</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052013134.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> user_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.如果不使用where子句，将删除表中所有数据。</span></span><br><span class="line"><span class="comment">-- 2. Delete语句不能删除某一列的值(可使用update设为null 或者&quot;&quot;)</span></span><br><span class="line"><span class="comment">-- 3.使用delete语句仅删除记录,不删除表本身。如要删除表，使用drop table语句。drop table 表名;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li>Select语句(查找数据)</li></ol><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052018639.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052019919.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">NAME <span class="type">VARCHAR</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">chinese <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">english <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">math <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span> </span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">1</span>, <span class="string">&#x27;刘备&#x27;</span>, <span class="number">89</span>, <span class="number">78</span>, <span class="number">90</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">2</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="number">67</span>, <span class="number">98</span>, <span class="number">56</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">3</span>, <span class="string">&#x27;宋江&#x27;</span>, <span class="number">87</span>, <span class="number">78</span>, <span class="number">77</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">4</span>, <span class="string">&#x27;关羽&#x27;</span>, <span class="number">88</span>, <span class="number">98</span>, <span class="number">90</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">5</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">67</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">6</span>, <span class="string">&#x27;欧阳锋&#x27;</span>, <span class="number">55</span>, <span class="number">85</span>, <span class="number">45</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">7</span>, <span class="string">&#x27;黄蓉&#x27;</span>, <span class="number">75</span>, <span class="number">65</span>, <span class="number">30</span> );</span><br><span class="line"><span class="comment">-- 1.查询表中所有学生的信息。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 2.查询表中所有学生的姓名和对应的英语成绩。</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,english <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 3.过滤表中重复数据distinct .</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> english <span class="keyword">from</span> student;</span><br><span class="line"><span class="comment">-- 4.要查询的记录，每个字段都相同，才会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `name` ,english <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><h3 id="使用表达式对查询的列进行运算"><a href="#使用表达式对查询的列进行运算" class="headerlink" title="使用表达式对查询的列进行运算"></a><strong>使用表达式对查询的列进行运算</strong><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052031553.png" alt=""></h3><h3 id="在-select-语句中可使用-as-语句"><a href="#在-select-语句中可使用-as-语句" class="headerlink" title="在 select 语句中可使用 as 语句"></a><strong>在 select 语句中可使用 as 语句</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052032883.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计每个学生的总分</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` ,(chinese<span class="operator">+</span>english<span class="operator">+</span>math) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 在所有学生总分上加10分</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` ,(chinese<span class="operator">+</span>english<span class="operator">+</span>math<span class="operator">+</span><span class="number">10</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 使用别名表示学生分数</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` ,(chinese<span class="operator">+</span>english<span class="operator">+</span>math<span class="operator">+</span><span class="number">10</span>) <span class="keyword">AS</span> total_score <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><h3 id="在where子句中经常使用的运算符"><a href="#在where子句中经常使用的运算符" class="headerlink" title="在where子句中经常使用的运算符"></a><strong>在where子句中经常使用的运算符</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052036369.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>查询姓名为赵云的学生成绩</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;赵云&#x27;</span> ;</span><br><span class="line"><span class="number">2.</span>查询英语成绩大于<span class="number">90</span>分的同学</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"><span class="number">3.</span>查询总分大于<span class="number">200</span>分的所有同学</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> (chinese<span class="operator">+</span>english<span class="operator">+</span>math) <span class="operator">&gt;</span><span class="number">200</span>;</span><br><span class="line"><span class="number">4.</span>查询math大于<span class="number">60</span>并且(<span class="keyword">and</span>) id大于<span class="number">4</span>的学生成绩</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">&gt;</span> <span class="number">60</span> <span class="keyword">AND</span> id <span class="operator">&gt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="number">5.</span>查询英语成绩大于语文成绩的同学</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="operator">&gt;</span> chinese;</span><br><span class="line"><span class="number">6.</span>查询总分大于<span class="number">200</span>分并且数学成绩大于语文成绩,的姓刘的学生.</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> (chinese<span class="operator">+</span>english<span class="operator">+</span>math) <span class="operator">&gt;</span><span class="number">200</span> <span class="keyword">AND</span> math <span class="operator">&gt;</span> chinese <span class="keyword">AND</span> `name`<span class="keyword">LIKE</span><span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"><span class="number">7.</span>查询英语分数在<span class="number">80</span> <span class="operator">-</span> <span class="number">90</span>之间的同学。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">90</span>;</span><br><span class="line"><span class="number">8.</span>查询数学分数为<span class="number">89</span>,<span class="number">90</span>,<span class="number">91</span>的同学。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="keyword">IN</span>(<span class="number">89</span>,<span class="number">90</span>,<span class="number">91</span>);</span><br><span class="line"><span class="number">9.</span>查询数学比语文少<span class="number">30</span>分的同学。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math<span class="operator">+</span><span class="number">30</span> <span class="operator">&lt;=</span> chinese ;</span><br></pre></td></tr></table></figure><h3 id="使用order-by-子句排序查询结果"><a href="#使用order-by-子句排序查询结果" class="headerlink" title="使用order by 子句排序查询结果"></a><strong>使用order by 子句排序查询结果</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052056369.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按数学成绩升序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> math;</span><br><span class="line"><span class="comment">-- 按总分降序</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,(chinese<span class="operator">+</span>english<span class="operator">+</span>math)<span class="keyword">AS</span> total_score <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> total_score <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 对姓刘的学生成绩[总分]排序输出(升序) where + order by</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, (chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="keyword">AS</span> total_score <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> total_score;</span><br></pre></td></tr></table></figure><h3 id="合计-统计函数"><a href="#合计-统计函数" class="headerlink" title="合计/统计函数"></a><strong>合计/统计函数</strong></h3><p>1.count</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052103331.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计一个班级共有多少学生?</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 统计数学成绩大于80的学生有多少个？</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">&gt;</span> <span class="number">80</span>;</span><br><span class="line"><span class="comment">-- 统计总分大于250的人数有多少？</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> (math<span class="operator">+</span>english<span class="operator">+</span>chinese) <span class="operator">&gt;</span> <span class="number">250</span>;</span><br><span class="line"><span class="comment">-- count(*)和count(列)的区别</span></span><br><span class="line"><span class="comment">-- 解释 :count(*) 返回满足条件的记录的行数</span></span><br><span class="line"><span class="comment">-- count(列): 统计满足条件的某列有多少个，但是会排除 为 null 的情况</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t15 (</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t15 <span class="keyword">VALUES</span>(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t15 <span class="keyword">VALUES</span>(<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t15 <span class="keyword">VALUES</span>(<span class="string">&#x27;mary&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t15 <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t15;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> t15; <span class="comment">-- 4</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`name`) <span class="keyword">FROM</span> t15;<span class="comment">-- 3</span></span><br></pre></td></tr></table></figure><p>2.sum</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052111942.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计一个班级数学总成绩？</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(math) <span class="keyword">FROM</span> student; </span><br><span class="line"><span class="comment">-- 统计一个班级语文、英语、数学各科的总成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(math) <span class="keyword">AS</span> math_total_score,<span class="built_in">SUM</span>(english),<span class="built_in">SUM</span>(chinese) <span class="keyword">FROM</span> student; </span><br><span class="line"><span class="comment">-- 统计一个班级语文、英语、数学的成绩总和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(math <span class="operator">+</span> english <span class="operator">+</span> chinese) <span class="keyword">FROM</span> student; </span><br><span class="line"><span class="comment">-- 统计一个班级语文成绩平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(chinese)<span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- sum 仅对数值起作用</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(`name`) <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>3.avg</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052115350.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求一个班级数学平均分？</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(math) <span class="keyword">FROM</span> student; <span class="comment">-- 求一个班级总分平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(math <span class="operator">+</span> english <span class="operator">+</span> chinese）<span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>4.mxa/min</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052116864.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求班级最高分和最低分（数值范围在统计中特别有用）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(math <span class="operator">+</span> english <span class="operator">+</span> chinese), <span class="built_in">MIN</span>(math <span class="operator">+</span> english <span class="operator">+</span> chinese)<span class="keyword">FROM</span> student; </span><br><span class="line"><span class="comment">-- 求出班级数学最高分和最低分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(math) <span class="keyword">AS</span> math_high_socre, <span class="built_in">MIN</span>(math) <span class="keyword">AS</span> math_low_socre <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>5.使用 group by 子句对列进行分组</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052118209.png" alt=""></p><p>6.使用 having 子句对分组后的结果进行过滤</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052119160.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如何显示每个部门的平均工资和最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),<span class="built_in">MAX</span>(sal),deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"><span class="comment">-- 显示每个部门的每种岗位的平均工资和最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),<span class="built_in">MIN</span>(sal),deptno,job <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno,job;</span><br><span class="line"><span class="comment">-- 显示平均工资低于 2000 的部门号和它的平均工资 // 别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal)<span class="keyword">AS</span> avg_sal,deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> avg_sal <span class="operator">&lt;</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a><strong>字符串相关函数</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208072108112.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CHARSET(str) 返回字串字符集</span></span><br><span class="line"><span class="keyword">SELECT</span> CHARSET(ename) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- CONCAT (string2 [,... ]) 连接字串, 将多个列拼接成一列</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(ename, <span class="string">&#x27; 工作是 &#x27;</span>, job) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSTR (string ,substring ) 返回 substring 在 string 中出现的位置,没有返回 0</span></span><br><span class="line"><span class="comment">-- dual 亚元表, 系统表 可以作为测试表使用</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;hanshunping&#x27;</span>, <span class="string">&#x27;ping&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- UCASE (string2 ) 转换成大写</span></span><br><span class="line"><span class="keyword">SELECT</span> UCASE(ename) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- LCASE (string2 ) 转换成小写</span></span><br><span class="line"><span class="keyword">SELECT</span> LCASE(ename) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT (string2 ,length )从 string2 中的左边起取 length 个字符</span></span><br><span class="line"><span class="comment">-- RIGHT (string2 ,length ) 从 string2 中的右边起取 length 个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(ename, <span class="number">2</span>) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- LENGTH (string )string 长度[按照字节]</span></span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(ename) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- REPLACE (str ,search_str ,replace_str )</span></span><br><span class="line"><span class="comment">-- 在 str 中用 replace_str 替换 search_str</span></span><br><span class="line"><span class="comment">-- 如果是 manager 就替换成 经理</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, REPLACE(job,<span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;经理&#x27;</span>) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- STRCMP (string1 ,string2 ) 逐字符比较两字串大小</span></span><br><span class="line"><span class="keyword">SELECT</span> STRCMP(<span class="string">&#x27;hsp&#x27;</span>, <span class="string">&#x27;hsp&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- SUBSTRING (str , position [,length ])</span></span><br><span class="line"><span class="comment">-- 从 str 的 position 开始【从 1 开始计算】,取 length 个字符</span></span><br><span class="line"><span class="comment">-- 从 ename 列的第一个位置开始取出 2 个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(ename, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- LTRIM (string2 ) RTRIM (string2 ) TRIM(string)</span></span><br><span class="line"><span class="comment">-- 去除前端空格或后端空格</span></span><br><span class="line"><span class="keyword">SELECT</span> LTRIM(<span class="string">&#x27; 学习学习&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> RTRIM(<span class="string">&#x27;学习学习 &#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27; 学习学习 &#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 练习: 以首字母小写的方式显示所有员工 emp 表的姓名</span></span><br><span class="line"><span class="comment">-- 思路先取出 ename 的第一个字符，转成小写的</span></span><br><span class="line"><span class="comment">-- 把他和后面的字符串进行拼接输出即可</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(LCASE(<span class="built_in">SUBSTRING</span>(ename,<span class="number">1</span>,<span class="number">1</span>)),<span class="built_in">SUBSTRING</span>(ename,<span class="number">2</span>))<span class="keyword">AS</span> new_name <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(LCASE(<span class="keyword">LEFT</span>(ename,<span class="number">1</span>)), <span class="built_in">SUBSTRING</span>(ename,<span class="number">2</span>)) <span class="keyword">AS</span> new_name <span class="keyword">FROM</span> emp</span><br></pre></td></tr></table></figure><h3 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a><strong>数学相关函数</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208072125228.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示数学相关函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ABS(num) 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-10</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- BIN (decimal_number )十进制转二进制</span></span><br><span class="line"><span class="keyword">SELECT</span> BIN(<span class="number">10</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- CEILING (number2 ) 向上取整, 得到比 num2 大的最小整数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">-1.1</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- CONV(number2,from_base,to_base) 进制转换</span></span><br><span class="line"><span class="comment">-- 下面的含义是 8 是十进制的 8, 转成 2 进制输出</span></span><br><span class="line"><span class="keyword">SELECT</span> CONV(<span class="number">8</span>, <span class="number">10</span>, <span class="number">2</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"><span class="comment">-- 下面的含义是 16 是 16 进制的 16, 转成 10 进制输出</span></span><br><span class="line"><span class="keyword">SELECT</span> CONV(<span class="number">16</span>, <span class="number">16</span>, <span class="number">10</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- FLOOR (number2 ) 向下取整,得到比 num2 小的最大整数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">-1.1</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- FORMAT (number,decimal_places ) 保留小数位数(四舍五入)</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="number">78.125458</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- HEX (DecimalNumber ) 转十六进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEAST (number , number2 [,..]) 求最小值</span></span><br><span class="line"><span class="keyword">SELECT</span> LEAST(<span class="number">0</span>,<span class="number">1</span>, <span class="number">-10</span>, <span class="number">4</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- MOD (numerator ,denominator ) 求余</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">10</span>, <span class="number">3</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- RAND([seed]) RAND([seed]) 返回随机数 其范围为 0 ≤ v ≤ 1.0</span></span><br><span class="line"><span class="comment">-- 1. 如果使用 rand() 每次返回不同的随机数 ，在 0 ≤ v ≤ 1.0</span></span><br><span class="line"><span class="comment">-- 2. 如果使用 rand(seed) 返回随机数, 范围 0 ≤ v ≤ 1.0, 如果 seed 不变，</span></span><br><span class="line"><span class="comment">-- 该随机数也不变了</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND() <span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><h3 id="时间日期相关函数"><a href="#时间日期相关函数" class="headerlink" title="时间日期相关函数"></a><strong>时间日期相关函数</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208072132800.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 日期时间相关函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- CURRENT_DATE ( ) 当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>() <span class="keyword">FROM</span> DUAL; </span><br><span class="line"><span class="comment">-- CURRENT_TIME ( )当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>() <span class="keyword">FROM</span> DUAL; </span><br><span class="line"><span class="comment">-- CURRENT_TIMESTAMP ( ) 当前时间戳</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>() <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建测试表 信息表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mes(</span><br><span class="line">id <span class="type">INT</span> ,</span><br><span class="line">content <span class="type">VARCHAR</span>(<span class="number">30</span>), </span><br><span class="line">send_time DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mes <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;北京新闻&#x27;</span>, <span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mes <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;上海新闻&#x27;</span>, NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mes <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">&#x27;广州新闻&#x27;</span>, NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mes;</span><br><span class="line"><span class="keyword">SELECT</span> NOW() <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 上应用实例</span></span><br><span class="line"><span class="comment">-- 显示所有新闻信息，发布日期只显示 日期，不用显示时间. </span></span><br><span class="line"><span class="keyword">SELECT</span> id, content, <span class="type">DATE</span>(send_time)<span class="keyword">FROM</span> mes; </span><br><span class="line"><span class="comment">-- 请查询在 10 分钟内发布的新闻, 思路一定要梳理一下. </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mes <span class="keyword">WHERE</span> DATE_ADD(send_time, <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>) <span class="operator">&gt;=</span> NOW();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mes <span class="keyword">WHERE</span> send_time <span class="operator">&gt;=</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 请在 mysql 的 sql 语句中求出 2011-11-11 和 1990-1-1 相差多少天</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="string">&#x27;2011-11-11&#x27;</span>, <span class="string">&#x27;1990-01-01&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 请用 mysql 的 sql 语句求出你活了多少天? 1986-11-11 出生</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(NOW(), <span class="string">&#x27;1986-11-11&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果你能活 80 岁，求出你还能活多少天.1986-11-11 出生</span></span><br><span class="line"><span class="comment">-- 先求出活 80 岁 时, 是什么日期 X</span></span><br><span class="line"><span class="comment">-- 然后在使用 datediff(x, now()); 1986-11-11-&gt;datetime</span></span><br><span class="line"><span class="comment">-- INTERVAL 80 YEAR ： YEAR 可以是 年月日，时分秒</span></span><br><span class="line"><span class="comment">-- &#x27;1986-11-11&#x27; 可以 date,datetime timestamp</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(DATE_ADD(<span class="string">&#x27;1986-11-11&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">80</span> <span class="keyword">YEAR</span>), NOW())<span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TIMEDIFF(<span class="string">&#x27;10:11:11&#x27;</span>, <span class="string">&#x27;06:10:10&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"><span class="comment">-- YEAR|Month|DAY| DATE (datetime )</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW()) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW()) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW()) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="string">&#x27;2013-11-10&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- unix_timestamp() : 返回的是 1970-1-1 到现在的秒数</span></span><br><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP() <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- FROM_UNIXTIME() : 可以把一个 unix_timestamp 秒数[时间戳]，转成指定格式的日期</span></span><br><span class="line"><span class="comment">-- %Y-%m-%d 格式是规定好的，表示年月日</span></span><br><span class="line"><span class="comment">-- 意义：在开发中，可以存放一个整数，然后表示时间，通过 FROM_UNIXTIME 转换</span></span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="number">1618483484</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="number">1618483100</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="加密和系统函数"><a href="#加密和系统函数" class="headerlink" title="加密和系统函数"></a><strong>加密和系统函数</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208072148044.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示加密函数和系统函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- USER() 查询用户</span></span><br><span class="line"><span class="comment">-- 可以查看登录到 mysql 的有哪些用户，以及登录的 IP</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>() <span class="keyword">FROM</span> DUAL; <span class="comment">-- 用户@IP 地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- DATABASE()查询当前使用数据库名称</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE(); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- MD5(str) 为字符串算出一个 MD5 32 的字符串，常用(用户密码)加密</span></span><br><span class="line"><span class="comment">-- root 密码是 hsp -&gt; 加密 md5 -&gt; 在数据库中存放的是加密后的密码</span></span><br><span class="line"><span class="keyword">SELECT</span> MD5(<span class="string">&#x27;fzy&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(MD5(<span class="string">&#x27;fzy&#x27;</span>)) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示用户表，存放密码时，是 md5</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hsp_user</span><br><span class="line">(id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, pwd <span class="type">CHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_user <span class="keyword">VALUES</span>(<span class="number">100</span>, <span class="string">&#x27;韩顺平&#x27;</span>, MD5(<span class="string">&#x27;hsp&#x27;</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> hsp_user; </span><br><span class="line"><span class="comment">-- SQL 注入问题</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> hsp_user <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;韩顺平&#x27;</span> <span class="keyword">AND</span> pwd <span class="operator">=</span> MD5(<span class="string">&#x27;hsp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- PASSWORD(str) -- 加密函数, MySQL 数据库的用户密码就是 PASSWORD 函数加密</span></span><br><span class="line"><span class="keyword">SELECT</span> PASSWORD(<span class="string">&#x27;hsp&#x27;</span>) <span class="keyword">FROM</span> DUAL; <span class="comment">-- 数据库的 *81220D972A52D4C51BB1C37518A2613706220DAC</span></span><br><span class="line"><span class="comment">-- select * from mysql.user \G 从原文密码 str 计算并返回密码字符串</span></span><br><span class="line"><span class="comment">-- 通常用于对 mysql 数据库的用户密码加密</span></span><br><span class="line"><span class="comment">-- mysql.user 表示 数据库.表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a><strong>流程控制函数</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208072159288.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 演示流程控制语句</span><br><span class="line"># IF(expr1,expr2,expr3) 如果 expr1 为 <span class="literal">True</span> ,则返回 expr2 否则返回 expr3</span><br><span class="line"><span class="keyword">SELECT</span> IF(<span class="literal">TRUE</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"># IFNULL(expr1,expr2) 如果 expr1 不为空 <span class="keyword">NULL</span>,则返回 expr1,否则返回 expr2</span><br><span class="line"><span class="keyword">SELECT</span> IFNULL( <span class="keyword">NULL</span>, <span class="string">&#x27;韩顺平教育&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"># <span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> expr1 <span class="keyword">THEN</span> expr2 <span class="keyword">WHEN</span> expr3 <span class="keyword">THEN</span> expr4 <span class="keyword">ELSE</span> expr5 <span class="keyword">END</span>; [类似多重分支.]</span><br><span class="line"># 如果 expr1 为 <span class="literal">TRUE</span>,则返回 expr2,如果 expr2 为 t, 返回 expr4, 否则返回 expr5</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="literal">TRUE</span> <span class="keyword">THEN</span> <span class="string">&#x27;jack&#x27;</span> <span class="comment">-- jack</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="literal">FALSE</span> <span class="keyword">THEN</span> <span class="string">&#x27;tom&#x27;</span> </span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;mary&#x27;</span> <span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询 emp 表, 如果 comm 是 null , 则显示 0.0</span></span><br><span class="line"><span class="comment">-- 判断是否为 null 要使用 is null, 判断不为空 使用 is not</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, IF(comm <span class="keyword">IS</span> <span class="keyword">NULL</span> , <span class="number">0.0</span>, comm)<span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> ename, IFNULL(comm, <span class="number">0.0</span>)<span class="keyword">FROM</span> emp; </span><br><span class="line"><span class="comment">-- 2. 如果 emp 表的 job 是 CLERK 则显示 职员， 如果是 MANAGER 则显示经理</span></span><br><span class="line"><span class="comment">-- 如果是 SALESMAN 则显示 销售人员，其它正常显示</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, (<span class="keyword">SELECT</span> <span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;职员&#x27;</span> <span class="keyword">WHEN</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;经理&#x27;</span> <span class="keyword">WHEN</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;销售人员&#x27;</span> <span class="keyword">ELSE</span> job <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">&#x27;job&#x27;</span> <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><h3 id="增强"><a href="#增强" class="headerlink" title="增强"></a><strong>增强</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询加强</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ■ 使用 where 子句</span></span><br><span class="line"><span class="comment">-- ?如何查找 1992.1.1 后入职的员工</span></span><br><span class="line"><span class="comment">-- 在 mysql 中,日期类型可以直接比较, 需要注意格式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> hiredate <span class="operator">&gt;</span> <span class="string">&#x27;1992-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ■ 如何使用 like 操作符(模糊)</span></span><br><span class="line"><span class="comment">-- %: 表示 0 到多个任意字符 _: 表示单个任意字符</span></span><br><span class="line"><span class="comment">-- ?如何显示首字符为 S 的员工姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- ?如何显示第三个字符为大写 O 的所有员工的姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;__O%&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ■ 如何显示没有上级的雇员的情况</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> mgr <span class="keyword">IS</span> <span class="keyword">NULL</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- ■ 查询表结构</span></span><br><span class="line"><span class="keyword">DESC</span> emp</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 order by 子句</span></span><br><span class="line"><span class="comment">-- ?如何按照工资的从低到高的顺序[升序]，显示雇员的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal;</span><br><span class="line"><span class="comment">-- ?按照部门号升序而雇员的工资降序排列 , 显示雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno <span class="keyword">ASC</span> , sal <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a><strong>分页查询</strong></h3><p>基本语法:select … limit start, rows</p><p>表示从start+1行开始取,取出rows行, start 从0开始计算</p><h3 id="分组函数和分组子句-group-by"><a href="#分组函数和分组子句-group-by" class="headerlink" title="分组函数和分组子句 group by"></a><strong>分组函数和分组子句 group by</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- (1) 显示每种岗位的雇员总数、平均工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">AVG</span>(sal), job <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2) 显示雇员总数，以及获得补助的雇员数。</span></span><br><span class="line"><span class="comment">-- 思路: 获得补助的雇员数 就是 comm 列为非 null, 就是 count(列)，如果该列的值为 null, 是</span></span><br><span class="line"><span class="comment">-- 不会统计 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">COUNT</span>(comm) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 扩展要求：统计没有获得补助的雇员数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">COUNT</span>(IF(comm <span class="keyword">IS</span> <span class="keyword">NULL</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">-</span> <span class="built_in">COUNT</span>(comm) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3) 显示管理者的总人数。小技巧:尝试写-&gt;修改-&gt;尝试[正确的]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> mgr) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4) 显示雇员工资的最大差额。</span></span><br><span class="line"><span class="comment">-- 思路： max(sal) - min(sal)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="operator">-</span> <span class="built_in">MIN</span>(sal) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><h3 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a><strong>顺序</strong></h3><p>如果select语句同时包含有group by ,having ,limit，order by</p><p>那么他们的顺序是group by , having , orderby,limit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 请统计各个部门的平均工资，并且是大于1000的,并且按照平均工资从高到低排序，取出前两行记录.</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="built_in">AVG</span>(sal)<span class="keyword">as</span> avg_sal <span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno  </span><br><span class="line"><span class="keyword">HAVING</span> avg_sal <span class="operator">&gt;</span><span class="number">1000</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>  avg_sal <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多表查询</span></span><br><span class="line"><span class="comment">-- ?显示雇员名,雇员工资及所在部门的名字 【笛卡尔集】</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 雇员名,雇员工资 来自 emp 表</span></span><br><span class="line"><span class="comment">2. 部门的名字 来自 dept 表</span></span><br><span class="line"><span class="comment">3. 需求对 emp 和 dept 查询 ename,sal,dname,deptno</span></span><br><span class="line"><span class="comment">4. 当我们需要指定显示某个表的列是，需要 表.列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname,emp.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp, dept</span><br><span class="line"><span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salgrade; </span><br><span class="line"><span class="comment">-- 小技巧：多表查询的条件不能少于 表的个数-1, 否则会出现笛卡尔集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ?如何显示部门号为 10 的部门名、员工名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname,emp.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp, dept</span><br><span class="line"><span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno <span class="keyword">AND</span> emp.deptno <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ?显示各个员工的姓名，工资，及其工资的级别</span></span><br><span class="line"><span class="comment">-- 思路 姓名，工资 来自 emp 13</span></span><br><span class="line"><span class="comment">-- 工资级别 salgrade 5</span></span><br><span class="line"><span class="comment">-- 写 sql , 先写一个简单，然后加入过滤条件... </span></span><br><span class="line"><span class="keyword">select</span> ename, sal, grade</span><br><span class="line"><span class="keyword">from</span> emp , salgrade</span><br><span class="line"><span class="keyword">where</span> sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.deptno<span class="operator">=</span>dept.deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> emp.deptno <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>自连接是指在同一张表的连接查询[将同一张表看做两张表]。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多表查询的 自连接</span></span><br><span class="line"><span class="comment">-- 思考题: 显示公司员工名字和他的上级的名字</span></span><br><span class="line"><span class="comment">-- 分析： 员工名字 在 emp, 上级的名字的名字 emp</span></span><br><span class="line"><span class="comment">-- 员工和上级是通过 emp 表的 mgr 列关联</span></span><br><span class="line"><span class="comment">-- 小结：</span></span><br><span class="line"><span class="comment">-- 自连接的特点 1. 把同一张表当做两张表使用</span></span><br><span class="line"><span class="comment">-- 2. 需要给表取别名 表名 表别名</span></span><br><span class="line"><span class="comment">-- 3. 列名不明确，可以指定列的别名 列名 as 列的别名</span></span><br><span class="line"><span class="keyword">SELECT</span> worker.ename <span class="keyword">AS</span> <span class="string">&#x27;职员名&#x27;</span> , boss.ename <span class="keyword">AS</span> <span class="string">&#x27;上级名&#x27;</span> <span class="keyword">FROM</span> emp worker, emp boss</span><br><span class="line"><span class="keyword">WHERE</span> worker.mgr <span class="operator">=</span> boss.empno;</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询是指嵌入在其它 sql 语句中的 select 语句,也叫嵌套查询</p><p>单行子查询是指只返回一行数据的子查询语句</p><p>多行子查询指返回多行数据的子查询 使用关键字 in</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 子查询的演示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何显示与 SMITH 同一部门的所有员工?</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 先查询到 SMITH 的部门号得到</span></span><br><span class="line"><span class="comment">2. 把上面的 select 语句当做一个子查询来使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多行子查询</span></span><br><span class="line"><span class="comment">-- 如何查询和部门 10 的工作相同的雇员的</span></span><br><span class="line"><span class="comment">-- 名字、岗位、工资、部门号, 但是不含 10 号部门自己的雇员.</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,job,sal,deptno </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> job <span class="keyword">IN</span> ( </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job</span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">) <span class="keyword">AND</span> deptno <span class="operator">!=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>在多行子查询中使用 all ，any操作符</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示工资比部门 30 的所有员工的工资高的员工的姓名、工资和部门号</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="keyword">ALL</span>(</span><br><span class="line"><span class="keyword">SELECT</span> sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal)</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何显示工资比部门 30 的其中一个员工的工资高的员工的姓名、工资和部门号</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="keyword">any</span>(</span><br><span class="line"><span class="keyword">SELECT</span> sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(sal)</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="当临时表使用"><a href="#当临时表使用" class="headerlink" title="当临时表使用"></a>当临时表使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 ecshop 中各个类别中，价格最高的商品</span></span><br><span class="line"><span class="comment">-- 查询 商品表</span></span><br><span class="line"><span class="comment">-- 先得到 各个类别中，价格最高的商品 max + group by cat_id, 当做临时表</span></span><br><span class="line"><span class="comment">-- 把子查询当做一张临时表可以解决很多很多复杂的查询</span></span><br><span class="line"><span class="keyword">select</span> goods_id, ecs_goods.cat_id, goods_name, shop_price</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">SELECT</span> cat_id , <span class="built_in">MAX</span>(shop_price) <span class="keyword">as</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> ecs_goods</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cat_id</span><br><span class="line">) temp , ecs_goods</span><br><span class="line"><span class="keyword">where</span> temp.cat_id <span class="operator">=</span> ecs_goods.cat_id</span><br><span class="line"><span class="keyword">and</span> temp.max_price <span class="operator">=</span> ecs_goods.shop_price;</span><br></pre></td></tr></table></figure><h3 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多列子查询</span></span><br><span class="line"><span class="comment">-- 请思考如何查询与 allen 的部门和岗位完全相同的所有雇员(并且不含 allen 本人)</span></span><br><span class="line"><span class="comment">-- (字段 1， 字段 2 ...) = (select 字段 1，字段 2）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> (deptno , job ) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> deptno ,job </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;ALLEN&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> ename <span class="operator">&lt;&gt;</span> <span class="string">&#x27;ALLEN&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> (math,english,chinese)<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> math,english,chinese </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;宋江&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="表复制"><a href="#表复制" class="headerlink" title="表复制"></a>表复制</h2><h3 id="自我复制数据-蠕虫复制"><a href="#自我复制数据-蠕虫复制" class="headerlink" title="自我复制数据(蠕虫复制)"></a>自我复制数据(蠕虫复制)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_tab01</span><br><span class="line">( id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>), sal <span class="keyword">DOUBLE</span>, job <span class="type">VARCHAR</span>(<span class="number">32</span>), deptno <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">DESC</span> my_tab01;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_tab01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示如何自我复制</span></span><br><span class="line"><span class="comment">-- 1. 先把 emp 表的记录复制到 my_tab01</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab01</span><br><span class="line">(id, `name`, sal, job,deptno)</span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, sal, job, deptno </span><br><span class="line"><span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 自我复制</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab01 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_tab01;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> my_tab01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何删除掉一张表重复记录</span></span><br><span class="line"><span class="comment">-- 1. 先创建一张表 my_tab02, </span></span><br><span class="line"><span class="comment">-- 2. 让 my_tab02 有重复的记录</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_tab02 <span class="keyword">LIKE</span> emp; </span><br><span class="line"><span class="comment">-- 这个语句 把 emp 表的结构(列)，复制到 my_tab02</span></span><br><span class="line"><span class="keyword">DESC</span> my_tab02;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab02 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_tab02; </span><br><span class="line"><span class="comment">-- 3. 考虑去重 my_tab02 的记录</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路</span></span><br><span class="line"><span class="comment">(1) 先创建一张临时表 my_tmp , 该表的结构和 my_tab02 一样</span></span><br><span class="line"><span class="comment">(2) 把 my_tmp 的记录 通过 distinct 关键字 处理后 把记录复制到 my_tmp</span></span><br><span class="line"><span class="comment">(3) 清除掉 my_tab02 记录</span></span><br><span class="line"><span class="comment">(4) 把 my_tmp 表的记录复制到 my_tab02</span></span><br><span class="line"><span class="comment">(5) drop 掉 临时表 my_tmp</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="comment">-- (1) 先创建一张临时表 my_tmp , 该表的结构和 my_tab02 一样</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> my_tmp <span class="keyword">like</span> my_tab02;</span><br><span class="line"><span class="comment">-- (2) 把 my_tmp 的记录 通过 distinct 关键字 处理后 把记录复制到 my_tmp</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_tmp <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="operator">*</span> <span class="keyword">from</span> my_tab02;</span><br><span class="line"><span class="comment">-- (3) 清除掉 my_tab02 记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> my_tab02; </span><br><span class="line"><span class="comment">-- (4) 把 my_tmp 表的记录复制到 my_tab02</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_tab02 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> my_tmp; </span><br><span class="line"><span class="comment">-- (5) drop 掉 临时表 my_tmp</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> my_tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> my_tab02;</span><br></pre></td></tr></table></figure><h2 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 合并查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2500</span>; <span class="comment">-- 5</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span>; <span class="comment">-- 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- union all 就是将两个查询结果合并，不会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2500</span> <span class="comment">-- 5</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span>; <span class="comment">-- 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- union 就是将两个查询结果合并，会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2500</span> <span class="comment">-- 5</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>1.左外连接(如果左侧的表完全显示我们就说是左外连接)</p><p>2.右外连接(如果右侧的表完全显示我们就说是右外连接)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu (</span><br><span class="line">id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;tom&#x27;</span>),(<span class="number">3</span>, <span class="string">&#x27;kity&#x27;</span>),(<span class="number">4</span>, <span class="string">&#x27;nono&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> stu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> exam(</span><br><span class="line">id <span class="type">INT</span>, grade <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> exam <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="number">56</span>),(<span class="number">2</span>,<span class="number">76</span>),(<span class="number">11</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> exam;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用左连接</span></span><br><span class="line"><span class="comment">-- （显示所有人的成绩，如果没有成绩，也要显示该人的姓名和 id 号,成绩显示为空）</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, stu.id, grade</span><br><span class="line"><span class="keyword">FROM</span> stu, exam</span><br><span class="line"><span class="keyword">WHERE</span> stu.id <span class="operator">=</span> exam.id; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改成左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, stu.id, grade</span><br><span class="line"><span class="keyword">FROM</span> stu </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> exam</span><br><span class="line"><span class="keyword">ON</span> stu.id <span class="operator">=</span> exam.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用右外连接（显示所有成绩，如果没有名字匹配，显示空)</span></span><br><span class="line"><span class="comment">-- 即：右边的表(exam) 和左表没有匹配的记录，也会把右表的记录显示出来</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, stu.id, grade</span><br><span class="line"><span class="keyword">FROM</span> stu </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> exam</span><br><span class="line"><span class="keyword">ON</span> stu.id <span class="operator">=</span> exam.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 列出部门名称和这些部门的员工信息(名字和工作)，</span></span><br><span class="line"><span class="comment">-- 同时列出那些没有员工的部门名。</span></span><br><span class="line"><span class="comment">-- 使用左外连接实现</span></span><br><span class="line"><span class="keyword">SELECT</span> dname,ename,job</span><br><span class="line"><span class="keyword">FROM</span> dept </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp</span><br><span class="line"><span class="keyword">ON</span> dept.deptno<span class="operator">=</span>emp.deptno; </span><br><span class="line"><span class="comment">-- 使用右外连接实现</span></span><br><span class="line"><span class="keyword">SELECT</span> dname,ename,job</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> dept</span><br><span class="line"><span class="keyword">ON</span> dept.deptno<span class="operator">=</span>emp.deptno; </span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>约束用于确保数据库的数据满足特定的商业规则。在mysql中，约束包括: not null，unique,primary key,foreign key,和check五种.</p><h3 id="primary-key（主键）"><a href="#primary-key（主键）" class="headerlink" title="primary key（主键）"></a>primary key（主键）</h3><p><strong>字段名 字段类型 primary key</strong></p><p>用于唯一的标示表行的数据,当定义主键约束后，该列不能重复。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208082204642.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 主键使用</span></span><br><span class="line"><span class="comment">-- id name email</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t17</span><br><span class="line">(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 表示 id 列是主键</span></span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>),email <span class="type">VARCHAR</span>(<span class="number">32</span>)); </span><br><span class="line"><span class="comment">-- 主键列的值是不可以重复</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t17</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;jack@sohu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t17</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;tom@sohu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t17</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;hsp&#x27;</span>, <span class="string">&#x27;hsp@sohu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t17; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键使用的细节讨论</span></span><br><span class="line"><span class="comment">-- primary key 不能重复而且不能为 null。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t17</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;hsp&#x27;</span>, <span class="string">&#x27;hsp@sohu.com&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一张表最多只能有一个主键, 但可以是复合主键(比如 id+name)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t18</span><br><span class="line">(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 表示 id 列是主键</span></span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>), <span class="keyword">PRIMARY</span> KEY <span class="comment">-- 错误的</span></span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">32</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示复合主键 (id 和 name 做成复合主键)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t18</span><br><span class="line">(id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">32</span>), <span class="keyword">PRIMARY</span> KEY (id, `name`) <span class="comment">-- 这里就是复合主键</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t18</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;tom@sohu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t18</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;jack@sohu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t18</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;xx@sohu.com&#x27;</span>); <span class="comment">-- 这里就违反了复合主键</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t18; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键的指定方式 有两种</span></span><br><span class="line"><span class="comment">-- 1. 直接在字段名后指定：字段名 primakry key</span></span><br><span class="line"><span class="comment">-- 2. 在表定义最后写 primary key(列名);</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t19</span><br><span class="line">(id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">PRIMARY</span> KEY, email <span class="type">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t20</span><br><span class="line">(id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>) , email <span class="type">VARCHAR</span>(<span class="number">32</span>), <span class="keyword">PRIMARY</span> KEY(`name`) <span class="comment">-- 在表定义最后写 primary key(列名)</span></span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 desc 表名，可以看到 primary key 的情况</span></span><br><span class="line"><span class="keyword">DESC</span> t20 <span class="comment">-- 查看 t20 表的结果，显示约束的情况</span></span><br><span class="line"><span class="keyword">DESC</span> t18</span><br></pre></td></tr></table></figure><h3 id="not-null-非空"><a href="#not-null-非空" class="headerlink" title="not null(非空)"></a>not null(非空)</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208082211314.png" alt=""></p><h3 id="unique-唯一）"><a href="#unique-唯一）" class="headerlink" title="unique(唯一）"></a>unique(唯一）</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208082211995.png" alt=""></p><h3 id="foreign-key-外键"><a href="#foreign-key-外键" class="headerlink" title="foreign key(外键)"></a>foreign key(外键)</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208082213171.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208082213801.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 外键演示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 主表 my_class</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_class (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY , <span class="comment">-- 班级编号</span></span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 从表 my_stu</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_stu (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY , <span class="comment">-- 学生编号</span></span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, class_id <span class="type">INT</span> , <span class="comment">-- 学生所在班级的编号</span></span><br><span class="line"><span class="comment">-- 下面指定外键关系</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (class_id) <span class="keyword">REFERENCES</span> my_class(id));</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> my_stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_class</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">100</span>, <span class="string">&#x27;java&#x27;</span>), (<span class="number">200</span>, <span class="string">&#x27;web&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_class</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">300</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_class;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_stu</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_stu</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_stu</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">&#x27;hsp&#x27;</span>, <span class="number">300</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_stu</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">4</span>, <span class="string">&#x27;mary&#x27;</span>, <span class="number">400</span>); <span class="comment">-- 这里会失败...因为 400 班级不存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_stu</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">5</span>, <span class="string">&#x27;king&#x27;</span>, <span class="keyword">NULL</span>); <span class="comment">-- 可以, 外键 没有写 not null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_class; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_stu; </span><br><span class="line"><span class="comment">-- 一旦建立主外键的关系，数据不能随意删除了</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> my_class</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><p>用于强制行数据必须满足的条件，假定在sal列上定义了check约束，并要求sal列值在1000-2000之间如果不再1000-2000之间就会提示出错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t23 (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">32</span>) , </span><br><span class="line">    sex <span class="type">VARCHAR</span>(<span class="number">6</span>) <span class="keyword">CHECK</span> (sex <span class="keyword">IN</span>(<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;woman&#x27;</span>)), </span><br><span class="line">    sal <span class="keyword">DOUBLE</span> <span class="keyword">CHECK</span> ( sal <span class="operator">&gt;</span> <span class="number">1000</span> <span class="keyword">AND</span> sal <span class="operator">&lt;</span> <span class="number">2000</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods(</span><br><span class="line">goods_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">goods_name <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">unitprice <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">CHECK</span> (unitprice <span class="keyword">BETWEEN</span> <span class="number">1.0</span> <span class="keyword">AND</span> <span class="number">9999.99</span>), </span><br><span class="line">provider <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer(</span><br><span class="line">customer_id  <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">64</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`sex` ENUM(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">card_Id <span class="type">VARCHAR</span>(<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> purchase(</span><br><span class="line">order_id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">customer_id <span class="type">VARCHAR</span>(<span class="number">16</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">goods_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">nums <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>, </span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (customer_id) <span class="keyword">REFERENCES</span> customer(customer_id), </span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (goods_id) <span class="keyword">REFERENCES</span> goods(goods_id));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> goods;</span><br><span class="line"><span class="keyword">DESC</span> customer;</span><br><span class="line"><span class="keyword">DESC</span> purchase;</span><br></pre></td></tr></table></figure><h2 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h2><p>1.一般来说自增长是和primary key配合使用的</p><p>2自增长也可以单独使用[但是需要配合一个unique]</p><p>3.自增长修饰的字段为整数型的(虽然小数也可以但是非常非常少这样使用)</p><p>4.自增长默认从1开始,你也可以通过如下命令修改alter table表名auto_increment=新的开始值;</p><p>5.如果你添加数据时，给自增长字段(列)指定的有值，则以指定的值为准,如果指定了自增长，一般来说，就按照自增长的规则来添加数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示自增长的使用</span></span><br><span class="line"><span class="operator">-</span></span><br><span class="line"><span class="operator">-</span> 创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t24</span><br><span class="line">(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, email <span class="type">VARCHAR</span>(<span class="number">32</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">DESC</span> t24;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试自增长的使用</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t24</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;tom@qq.com&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t24</span><br><span class="line">(email, `name`) <span class="keyword">VALUES</span>(<span class="string">&#x27;hsp@sohu.com&#x27;</span>, <span class="string">&#x27;hsp&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t24; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改默认的自增长开始值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t25</span><br><span class="line">(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, email <span class="type">VARCHAR</span>(<span class="number">32</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t25 AUTO_INCREMENT <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t25</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;mary@qq.com&#x27;</span>, <span class="string">&#x27;mary&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t25</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">666</span>, <span class="string">&#x27;hsp@qq.com&#x27;</span>, <span class="string">&#x27;hsp&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t25</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;fzy@qq.com&#x27;</span>, <span class="string">&#x27;fzy&#x27;</span>); <span class="comment">--667</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t25;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>类型</strong></p><p>1主键索引,主键自动的为主索引(类型Primary key)</p><p>2.唯一索引(UNIQUE)</p><p>3.普通索引(INDEX)</p><p>4.全文索引 (FULLTEXT)[适用于MylSAM]一般开发,不使用mysql自带的全文索引,而是使用:全文搜索Solr和 ElasticSearch (ES)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示 mysql 的索引的使用</span></span><br><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t25 (</span><br><span class="line">id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)); </span><br><span class="line"><span class="comment">-- 查询表是否有索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEXES <span class="keyword">FROM</span> t25;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加索引</span></span><br><span class="line"><span class="comment">-- 添加唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX id_index <span class="keyword">ON</span> t25 (id); </span><br><span class="line"><span class="comment">-- 添加普通索引方式 1</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX id_index <span class="keyword">ON</span> t25 (id); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何选择</span></span><br><span class="line"><span class="comment">-- 1. 如果某列的值，是不会重复的，则优先考虑使用 unique 索引, 否则使用普通索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加普通索引方式 2</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t25 <span class="keyword">ADD</span> INDEX id_index (id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加主键索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t26 (</span><br><span class="line">id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t26 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (id);</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> t26;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX id_index <span class="keyword">ON</span> t25;</span><br><span class="line"><span class="comment">-- 删除主键索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t26 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改索引 ， 先删除，在添加新的索引</span></span><br><span class="line"><span class="comment">-- 查询索引</span></span><br><span class="line"><span class="comment">-- 1. 方式</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> t25;</span><br><span class="line"><span class="comment">-- 2. 方式</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEXES <span class="keyword">FROM</span> t25;</span><br><span class="line"><span class="comment">-- 3. 方式</span></span><br><span class="line"><span class="keyword">SHOW</span> KEYS <span class="keyword">FROM</span> t25;</span><br><span class="line"><span class="comment">-- 4 方式</span></span><br><span class="line"><span class="keyword">DESC</span> t25;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208091340169.png" alt=""></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务用于保证数据的一致性,它由一组相关的dml语句组成，该组的dml语句要么全部成功，要么全部失败。如：转账就要用事务来处理，用以保证数据的一致性。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092127741.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务的一个重要的概念和具体操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 创建一张测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t27</span><br><span class="line">( id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)); </span><br><span class="line"><span class="comment">-- 2. 开始事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION</span><br><span class="line"><span class="comment">-- 3. 设置保存点</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> a</span><br><span class="line"><span class="comment">-- 执行 dml 操作</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t27 <span class="keyword">VALUES</span>(<span class="number">100</span>, <span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t27;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> b</span><br><span class="line"><span class="comment">-- 执行 dml 操作</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t27 <span class="keyword">VALUES</span>(<span class="number">200</span>, <span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="comment">-- 回退到 b</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> b</span><br><span class="line"><span class="comment">-- 继续回退 a</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a</span><br><span class="line"><span class="comment">-- 如果这样, 表示直接回退到事务开始的状态. ROLLBACK</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>1.多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性。</p><p>2.如果不考虑隔离性，可能会引发如下问题:脏读、不可重复读、幻读。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092139464.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092142382.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092156869.png" alt=""></p><h2 id="事务-ACID"><a href="#事务-ACID" class="headerlink" title="事务 ACID"></a>事务 ACID</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092207552.png" alt=""></p><h2 id="表类型和存储引擎"><a href="#表类型和存储引擎" class="headerlink" title="表类型和存储引擎"></a>表类型和存储引擎</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092212458.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092213888.png" alt=""></p><ol><li>MylSAM不支持事务、也不支持外键，但其访问速度快，对事务完整性没有要求</li><li>InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是比起MyISAM存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</li><li>MEMORY存储引擎使用存在内存中的内容来创建表。每个MEMORY表只实际对应上个磁盘文件。MEMORY类型的表访问非常得快，因为它的数据是放在内存中的,并且默认使用HASH索引。但是一旦MySQL服务关闭，表中的数据就会丢失掉,表的结构还在。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表类型和存储引擎</span></span><br><span class="line"><span class="comment">-- 查看所有的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br><span class="line"><span class="comment">-- innodb 存储引擎，</span></span><br><span class="line"><span class="comment">-- 1. 支持事务 2. 支持外键 3. 支持行级锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- myisam 存储引擎</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t28 (</span><br><span class="line">id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)) ENGINE MYISAM</span><br><span class="line"><span class="comment">-- 1. 添加速度快 2. 不支持外键和事务 3. 支持表级锁</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> t1</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t28 <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t28 <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;bob&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t28;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- memory 存储引擎</span></span><br><span class="line"><span class="comment">-- 1. 数据存储在内存中[关闭了 Mysql 服务，数据丢失, 但是表结构还在]</span></span><br><span class="line"><span class="comment">-- 2. 执行速度很快(没有 IO 读写) 3. 默认支持索引(hash 表)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t29 (</span><br><span class="line">id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)) ENGINE MEMORY;</span><br><span class="line"><span class="keyword">DESC</span> t29;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t29</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>), (<span class="number">2</span>,<span class="string">&#x27;jack&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;hsp&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t29;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指令修改存储引擎</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `t29` ENGINE <span class="operator">=</span> INNODB;</span><br></pre></td></tr></table></figure><p><strong>如何选择表的存储引擎</strong></p><p>1.如果你的应用不需要事务，处理的只是基本的CRUD操作，那么MylSAM是不二选择,速度快</p><p>2.如果需要支持事务,选择lnnoDB。</p><p>3.Memory存储引擎就是将数据存储在内存中，由于没有磁盘I./O的等待，速度极快。但由于是内存存储引擎，所做的任何修改在服务器重启后都将消失。(经典用法用户的在线状态().)</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>1.视图是根据基表(可以是多个基表)来创建的视图是虚拟的表</p><p>2.视图也有列，数据来自基表</p><p>3.通过视图可以修改基表的数据</p><p>4.基表的改变，也会影响到视图的数据</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208111918791.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 视图的使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个视图 emp_view01，只能查询 emp 表的(empno、ename, job 和 deptno ) 信息</span></span><br><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view01</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, job, deptno <span class="keyword">FROM</span> emp; </span><br><span class="line"><span class="comment">-- 查看视图</span></span><br><span class="line"><span class="keyword">DESC</span> emp_view01;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_view01;</span><br><span class="line"><span class="keyword">SELECT</span> empno, job <span class="keyword">FROM</span> emp_view01; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看创建视图的指令</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view01;</span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> emp_view01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 视图的细节</span></span><br><span class="line"><span class="comment">-- 1. 创建视图后，到数据库去看，对应视图只有一个视图结构文件(形式: 视图名.frm)</span></span><br><span class="line"><span class="comment">-- 2. 视图的数据变化会影响到基表，基表的数据变化也会影响到视图[insert update delete ]</span></span><br><span class="line"><span class="comment">-- 修改视图 会影响到基表</span></span><br><span class="line"><span class="keyword">UPDATE</span> emp_view01</span><br><span class="line"><span class="keyword">SET</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">WHERE</span> empno <span class="operator">=</span> <span class="number">7369</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp; <span class="comment">-- 查询基表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_view01;</span><br><span class="line"><span class="comment">-- 修改基本表， 会影响到视图</span></span><br><span class="line"><span class="keyword">UPDATE</span> emp</span><br><span class="line"><span class="keyword">SET</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">WHERE</span> empno <span class="operator">=</span> <span class="number">7369</span>;</span><br><span class="line"><span class="comment">-- 3. 视图中可以再使用视图 , 比如从 emp_view01 视图中，选出 empno,和 ename 做出新视图</span></span><br><span class="line"><span class="keyword">DESC</span> emp_view01;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view02</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename <span class="keyword">FROM</span> emp_view01;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_view02;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208111926381.png" alt=""></p><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><p><strong>创建用户</strong></p><p>create user ‘用户名’@’允许登录位置’ identified by ‘密码’</p><p>说明:创建用户，同时指定密码</p><p><strong>删除用户</strong></p><p>drop user ‘用户名’ @ ’允许登录位置’ ;</p><p><strong>用户修改密码</strong></p><p>修改自己的密码：</p><p>set password = password(密码’);</p><p>修改他人的密码(需要有修改用户密码权限):</p><p>set password for ‘用户名’@’登录位置= password(‘密码’);</p><p>SET PASSWORD FOR root@localhost = ‘123456’;</p><p><strong>权限</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208111939454.png" alt=""></p><p><strong>给用户授权</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208111949344.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208111952117.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示 用户权限的管理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户 fzy 密码 123 , 从本地登录</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;fzy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span> <span class="comment">-- 使用 root 用户创建 testdb ,表 news</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE testdb</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> news (</span><br><span class="line">id <span class="type">INT</span> , content <span class="type">VARCHAR</span>(<span class="number">32</span>)); </span><br><span class="line"><span class="comment">-- 添加一条测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> news <span class="keyword">VALUES</span>(<span class="number">100</span>, <span class="string">&#x27;北京新闻&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> news; </span><br><span class="line"><span class="comment">-- 给 shunping 分配查看 news 表和 添加 news 的权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> , <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> testdb.news</span><br><span class="line"><span class="keyword">TO</span> <span class="string">&#x27;shunping&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> </span><br><span class="line"><span class="comment">-- 可以增加 update 权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> testdb.news</span><br><span class="line"><span class="keyword">TO</span> <span class="string">&#x27;fzy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改 fzy 的密码为 abc</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> fzy<span class="variable">@localhost</span> <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="comment">-- 回收 fzy 用户在 testdb.news 表的所有权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> , <span class="keyword">UPDATE</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> testdb.news <span class="keyword">FROM</span> <span class="string">&#x27;fzy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> ;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> testdb.news <span class="keyword">FROM</span> <span class="string">&#x27;fzy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> ;</span><br><span class="line"><span class="comment">-- 删除 shunping</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;fzy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208112020822.png" alt=""></p><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>1.注册驱动–加载Driver类</p><p>2.获取连接–得到Connection</p><p>3.执行增删改查-发送SQL给mysql执行</p><p>4.释放资源–关闭相关连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbc01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//前置工作： 在项目下创建一个文件夹比如 libs</span></span><br><span class="line">        <span class="comment">// 将 mysql.jar 拷贝到该目录下，点击 add to project ..加入到项目</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.得到连接</span></span><br><span class="line">        <span class="comment">//(1) jdbc:mysql:// 规定好表示协议，通过 jdbc 的方式连接 mysql</span></span><br><span class="line">        <span class="comment">//(2) localhost 主机，可以是 ip 地址</span></span><br><span class="line">        <span class="comment">//(3) 3306 表示 mysql 监听的端口</span></span><br><span class="line">        <span class="comment">//(4) hsp_db02 连接到 mysql dbms 的哪个数据库</span></span><br><span class="line">        <span class="comment">//(5) mysql 的连接本质就是 socket 连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/fzy_db02&quot;</span>;</span><br><span class="line">        <span class="comment">//将 用户名和密码放入到 Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;mysql@lmh&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行sql</span></span><br><span class="line">        <span class="comment">//String sql =&quot;insert into actor values (null,&#x27;刘德华&#x27;,&#x27;男&#x27;,&#x27;1970-11-11&#x27;,&#x27;110&#x27;)&quot;;</span></span><br><span class="line">        <span class="comment">//String sql = &quot;update actor set name=&#x27;周星驰&#x27; where id = 1&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from actor where id = 1&quot;</span>;</span><br><span class="line">        <span class="comment">//statement 用于执行静态 SQL 语句并返回其生成的结果的对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connect.createStatement();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> statement.executeUpdate(sql); <span class="comment">// 如果是 dml 语句，返回的就是影响行数</span></span><br><span class="line">        System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span> : <span class="string">&quot;失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.关闭连接</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connect.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h2><p><strong>方式1</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141640386.png" alt=""></p><p><strong>方式2</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141640713.png" alt=""></p><p><strong>方式3</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141642801.png" alt=""></p><p><strong>方式4</strong>（推荐使用）</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141644806.png" alt=""></p><p><strong>方式5</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141648260.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConn</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 1</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>(); <span class="comment">//创建 driver 对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="comment">//将 用户名和密码放入到 Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//说明 user 和 password 是规定好，后面的值根据实际情况写</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">// 用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;hsp&quot;</span>); <span class="comment">//密码</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        System.out.println(connect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 2</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException &#123;</span><br><span class="line">        <span class="comment">//使用反射加载 Driver 类 , 动态加载，更加的灵活，减少依赖性</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="comment">//将 用户名和密码放入到 Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//说明 user 和 password 是规定好，后面的值根据实际情况写</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">// 用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;hsp&quot;</span>); <span class="comment">//密码</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式 2=&quot;</span> + connect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 3 使用 DriverManager 替代 driver 进行统一管理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//使用反射加载 Driver</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line">        <span class="comment">//创建 url 和 user 和 password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>;</span><br><span class="line">        DriverManager.registerDriver(driver);<span class="comment">//注册 Driver 驱动</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三种方式=&quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 4: 使用 Class.forName 自动完成注册驱动，简化代码</span></span><br><span class="line">    <span class="comment">//这种方式获取连接是使用的最多，推荐使用</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect04</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//使用反射加载了 Driver 类</span></span><br><span class="line">        <span class="comment">//在加载 Driver 类时，完成注册</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        源码: 1. 静态代码块，在类加载时，会执行一次. 2. DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">        3. 因此注册 driver 的工作已经完成</span></span><br><span class="line"><span class="comment">        static &#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">                throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//创建 url 和 user 和 password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;第 4 种方式~ &quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 5 , 在方式 4 的基础上改进，增加配置文件，让连接 mysql 更加灵活</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect05</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//通过 Properties 对象获取配置文件的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式 5 &quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141720915.png" alt=""></p><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141731535.png" alt=""></p><p><strong>好处</strong></p><p>1.不再使用+拼接sql语句，减少语法错误</p><p>2.有效的解决了sql注入问题!</p><p>3.大大减少了编译次数,效率较高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatement_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>); <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 老师说明，如果希望看到 SQL 注入，这里需要用 nextLine</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="comment">//通过 Properties 对象获取配置文件的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到 PreparedStatement</span></span><br><span class="line">        <span class="comment">//3.1 组织 SqL , Sql 语句的 ? 就相当于占位符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name , pwd from admin where name =? and pwd = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//3.2 preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//3.3 给 ? 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, admin_pwd);</span><br><span class="line">        <span class="comment">//4. 执行 select 语句使用 executeQuery</span></span><br><span class="line">        <span class="comment">// 如果执行的是 dml(update, insert ,delete) executeUpdate()</span></span><br><span class="line">        <span class="comment">// 这里执行 executeQuery ,不要在写 sql</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">//如果查询到一条记录，则说明该管理存在</span></span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜， 登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatement_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过 Properties 对象获取配置文件的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //3. 得到 PreparedStatement</span></span><br><span class="line"><span class="comment">//        //3.1 组织 SqL , Sql 语句的 ? 就相当于占位符</span></span><br><span class="line"><span class="comment">//        String sql = &quot;insert into admin values(?,?)&quot;;</span></span><br><span class="line"><span class="comment">//        //3.2 preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line"><span class="comment">//        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">//        //3.3 给 ? 赋值</span></span><br><span class="line"><span class="comment">//        Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        String admin_name=&quot;&quot;;</span></span><br><span class="line"><span class="comment">//        String admin_pwd=&quot;&quot;;</span></span><br><span class="line"><span class="comment">//        for(int i = 0; i &lt;5;i++)&#123;</span></span><br><span class="line"><span class="comment">//            //让用户输入管理员名和密码</span></span><br><span class="line"><span class="comment">//            System.out.print(&quot;请输入管理员的名字: &quot;);</span></span><br><span class="line"><span class="comment">//            admin_name = scanner.nextLine();</span></span><br><span class="line"><span class="comment">//            System.out.print(&quot;请输入管理员的密码: &quot;);</span></span><br><span class="line"><span class="comment">//            admin_pwd = scanner.nextLine();</span></span><br><span class="line"><span class="comment">//            preparedStatement.setString(1, admin_name);</span></span><br><span class="line"><span class="comment">//            preparedStatement.setString(2, admin_pwd);</span></span><br><span class="line"><span class="comment">//            preparedStatement.executeUpdate();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String sql = &quot;update admin set name=&#x27;king&#x27; where name=&#x27;abc&#x27;&quot;;</span></span><br><span class="line"><span class="comment">//        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">//        preparedStatement.executeUpdate();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String sql = &quot;delete from admin where name=&#x27;def&#x27;&quot;;</span></span><br><span class="line"><span class="comment">//        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">//        preparedStatement.executeUpdate();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from admin&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(resultSet.getString(<span class="number">1</span>) + <span class="string">&quot;  &quot;</span> + resultSet.getString(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API小结"><a href="#API小结" class="headerlink" title="API小结"></a>API小结</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141815529.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141815099.png" alt=""></p><h2 id="封装-JDBCUtils"><a href="#封装-JDBCUtils" class="headerlink" title="封装 JDBCUtils"></a>封装 JDBCUtils</h2><p>在jdbc操作中，获取连接和释放资源是经常使用到，可以将其封装JDBC连接的工具类JDBCUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc\\mysql.properties&quot;</span>));</span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭相关资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet set, Statement statement, Connection connection)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="literal">null</span>) &#123;</span><br><span class="line">                set.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils_Use</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//2.组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id = ? &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3.创建PreparedStatement  对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                System.out.println(resultSet.getString(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(resultSet, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> &#123;<span class="comment">//insert , update , delete</span></span><br><span class="line">        <span class="comment">//1.得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2.组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update actor set name = ? where id = ? &quot;</span>;</span><br><span class="line">        <span class="comment">//3.创建PreparedStatement  对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;王菲&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208162001330.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdbc.utils.JDBCUtills;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//在默认情况下，connection 是默认自动提交</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2.组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance -100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance -100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="comment">//3.创建PreparedStatement  对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtills.getConnection();</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtills.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useTransaction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1.得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2.组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance -100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance +100 where id = 2&quot;</span>;</span><br><span class="line">        <span class="comment">//3.创建PreparedStatement  对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtills.getConnection();</span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);<span class="comment">//将 connection 设置为不自动提交</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            connection.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生错误，回滚&quot;</span>);</span><br><span class="line">            connection.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtills.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208162020850.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdbc.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Batch_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用批量方式添加数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into admin2 values(null, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();<span class="comment">//开始时间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;<span class="comment">//5000 执行</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span> + i);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">            <span class="comment">//将 sql 语句加入到批处理包中 -&gt; 看源码</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            //1. //第一就创建 ArrayList - elementData =&gt; Object[]</span></span><br><span class="line"><span class="comment">            //2. elementData =&gt; Object[] 就会存放我们预处理的 sql 语句</span></span><br><span class="line"><span class="comment">            //3. 当 elementData 满后,就按照 1.5 扩容</span></span><br><span class="line"><span class="comment">            //4. 当添加到指定的值后，就 executeBatch</span></span><br><span class="line"><span class="comment">            //5. 批量处理会减少我们发送 sql 语句的网络开销，而且减少编译次数，因此效率提高</span></span><br><span class="line"><span class="comment">            public void addBatch() throws SQLException &#123;</span></span><br><span class="line"><span class="comment">                synchronized(this.checkClosed().getConnectionMutex()) &#123;</span></span><br><span class="line"><span class="comment">                    if (this.batchedArgs == null) &#123;</span></span><br><span class="line"><span class="comment">                    this.batchedArgs = new ArrayList();</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    for(int i = 0; i &lt; this.parameterValues.length; ++i) &#123;</span></span><br><span class="line"><span class="comment">                        this.checkAllParametersSet(this.parameterValues[i], this.parameterStreams[i], i);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    this.batchedArgs.add(new PreparedStatement.BatchParams(this.parameterValues, this.parameterStreams, this.isStream, this.streamLengths, this.isNull));</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            preparedStatement.addBatch();</span><br><span class="line">            <span class="comment">//当有 1000 条记录时，在批量执行</span></span><br><span class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span>) &#123;<span class="comment">//满 1000 条 sql</span></span><br><span class="line">                preparedStatement.executeBatch();</span><br><span class="line">                <span class="comment">//清空一把</span></span><br><span class="line">                preparedStatement.clearBatch();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;批量方式 耗时=&quot;</span> + (end - start));<span class="comment">//批量方式 耗时=843</span></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208162045574.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208162051368.png" alt=""></p><p><strong>数据库连接池种类</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208162046801.png" alt=""></p><h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式 1： 相关参数，在程序中指定 user, url , password 等</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//1. 创建一个数据源对象</span></span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">    <span class="comment">//2. 通过配置文件 mysql.properties 获取相关连接的信息</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc\\mysql.properties&quot;</span>));</span><br><span class="line">    <span class="comment">//读取相关的属性值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    <span class="comment">//给数据源 comboPooledDataSource 设置相关的参数</span></span><br><span class="line">    <span class="comment">//注意：连接管理是由 comboPooledDataSource 来管理</span></span><br><span class="line">    comboPooledDataSource.setDriverClass(driver);</span><br><span class="line">    comboPooledDataSource.setJdbcUrl(url);</span><br><span class="line">    comboPooledDataSource.setUser(user);</span><br><span class="line">    comboPooledDataSource.setPassword(password);</span><br><span class="line">    <span class="comment">//设置初始化连接数</span></span><br><span class="line">    comboPooledDataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//最大连接数</span></span><br><span class="line">    comboPooledDataSource.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//测试连接池的效率, 测试对 mysql 5000 次操作</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection(); <span class="comment">//这个方法就是从 DataSource 接口实现的</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;连接 OK&quot;);</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//c3p0 5000 连接 mysql 耗时=673</span></span><br><span class="line">    System.out.println(<span class="string">&quot;c3p0 5000 连接 mysql 耗时=&quot;</span> + (end - start));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式 使用配置文件模板来完成</span></span><br><span class="line"><span class="comment">//1. 将 c3p0 提供的 c3p0.config.xml 拷贝到 src 目录下</span></span><br><span class="line"><span class="comment">//2. 该文件指定了连接数据库和连接池的相关参数</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_02</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;my-config&quot;</span>);</span><br><span class="line">    <span class="comment">//测试 5000 次连接 mysql</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;开始执行....&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection();</span><br><span class="line">        System.out.println(<span class="string">&quot;连接 OK~&quot;</span>);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//c3p0 的第二种方式 耗时=413</span></span><br><span class="line">    System.out.println(<span class="string">&quot;c3p0 的第二种方式(500000) 耗时=&quot;</span> + (end - start));<span class="comment">//1917</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//1. 加入 Druid jar 包</span></span><br><span class="line">    <span class="comment">//2. 加入 配置文件 druid.properties , 将该文件拷贝项目的 src 目录</span></span><br><span class="line">    <span class="comment">//3. 创建 Properties 对象, 读取配置文件</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line">    <span class="comment">//4. 创建一个指定参数的数据库连接池, Druid 连接池</span></span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        <span class="comment">//System.out.println(connection.getClass());</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;连接成功!&quot;);</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;druid 连接池 操作 500000 耗时=&quot;</span> + (end - start));<span class="comment">//611</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtilsByDruid</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement st, Connection c)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (st != <span class="literal">null</span>) &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="literal">null</span>) &#123;</span><br><span class="line">                c.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Apache—DBUtils"><a href="#Apache—DBUtils" class="headerlink" title="Apache—DBUtils"></a>Apache—DBUtils</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208171031075.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtils_USE</span> &#123;</span><br><span class="line">    <span class="comment">//使用 apache-DBUtils 工具类 + druid 完成对表的 crud 操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryMany</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123; <span class="comment">//返回结果是多行的情况</span></span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入 DBUtils 相关的 jar , 加入到本 Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回 ArrayList 结果集</span></span><br><span class="line">        <span class="comment">//String sql = &quot;select * from actor where id &gt;= ?&quot;;</span></span><br><span class="line">        <span class="comment">// 注意: sql 语句也可以查询部分列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, name from actor where id &gt;= ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1) query 方法就是执行 sql 语句，得到 resultset ---封装到 --&gt; ArrayList 集合中</span></span><br><span class="line">        <span class="comment">//(2) 返回集合</span></span><br><span class="line">        <span class="comment">//(3) connection: 连接</span></span><br><span class="line">        <span class="comment">//(4) sql : 执行的 sql 语句</span></span><br><span class="line">        <span class="comment">//(5) new BeanListHandler&lt;&gt;(Actor.class): 在将 resultset -&gt; Actor 对象 -&gt; 封装到 ArrayList</span></span><br><span class="line">        <span class="comment">// 底层使用反射机制 去获取 Actor 类的属性，然后进行封装</span></span><br><span class="line">        <span class="comment">//(6) 1 就是给 sql 语句中的? 赋值，可以有多个值，因为是可变参数 Object... params</span></span><br><span class="line">        <span class="comment">//(7) 底层得到的 resultset ,会在 query 关闭, 关闭 PreparedStatment</span></span><br><span class="line"></span><br><span class="line">        List&lt;Actor&gt; list =</span><br><span class="line">                queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(Actor.class), <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;输出集合的信息&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Actor actor : list) &#123;</span><br><span class="line">            System.out.println(actor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示 apache-dbutils + druid 完成 返回的结果是单行记录(单个对象)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuerySingle</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入 DBUtils 相关的 jar , 加入到本 Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回单个对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 因为我们返回的单行记录&lt;---&gt;单个对象 , 使用的 Hander 是 BeanHandler</span></span><br><span class="line">        <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;&gt;(Actor.class), <span class="number">2</span>);</span><br><span class="line">        System.out.println(actor);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示 apache-dbutils + druid 完成查询结果是单行单列-返回的就是 object</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScalar</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入 DBUtils 相关的 jar , 加入到本 Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回单行单列 , 返回的就是 Object</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//因为返回的是一个对象, 使用的 handler 就是 ScalarHandler</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>(), <span class="number">1</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示 apache-dbutils + druid 完成 dml (update, insert ,delete)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入 DBUtils 相关的 jar , 加入到本 Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 这里组织 sql 完成 update, insert delete</span></span><br><span class="line">        <span class="comment">//String sql = &quot;update actor set name = ? where id = ?&quot;;</span></span><br><span class="line">        <span class="comment">//String sql = &quot;insert into actor values(null, ?, ?, ?, ?)&quot;`</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from actor where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1) 执行 dml 操作是 queryRunner.update()</span></span><br><span class="line">        <span class="comment">//(2) 返回的值是受影响的行数 (affected: 受影响)</span></span><br><span class="line">        <span class="comment">//int affectedRow = queryRunner.update(connection, sql, &quot;林青霞&quot;, &quot;女&quot;, &quot;1966-10-10&quot;, &quot;116&quot;);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectedRow</span> <span class="operator">=</span> queryRunner.update(connection, sql, <span class="number">1000</span>);</span><br><span class="line">        System.out.println(affectedRow &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行没有影响到表&quot;</span>);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BasicDao"><a href="#BasicDao" class="headerlink" title="BasicDao"></a>BasicDao</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208171122929.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208171131621.png" alt=""></p>]]></content>
    
    
    <summary type="html">数据库、JDBC、数据库连接池</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="sql" scheme="https://windcrain.top/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记03</title>
    <link href="https://windcrain.top/post/JAVA03/"/>
    <id>https://windcrain.top/post/JAVA03/</id>
    <published>2022-08-12T11:57:55.000Z</published>
    <updated>2023-05-27T03:11:56.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><ol><li>概念:用于唯一标识网络中的每台计算机/主机</li><li>查看ip地址: ipconfig</li><li>ip地址的表示形式:点分十进制XX.XX.XX.XX</li><li>每一个十进制数的范围:0~255</li><li>ip地址的组成=网络地址+主机地址，比如:192.168.16.69</li><li>IPv6是互联网工程任务组设计的用于替代IPv4的下一代IP协议，其地址数量号称可以为全世界的每一粒沙子编上一个地址。</li><li>由于IPv4最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展。IPv6的使用，不仅能解决网络地址资源数量的问题，而且也解决了多种接入设备连入互联网的障碍</li></ol><p><strong>ipv4地址分类</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207261934445.png" alt=""></p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>将ip地址映射成域名（HTTP协议）</p><p><strong>端口号</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207261938575.png" alt=""></p><h2 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h2><p>TCP/IP(Transmission Control Protocol/Internet Protocol)的简写，中文译名为传输控制协议/因特网互联协议,又叫网络通讯协议，这个协议是lnternet最基本的协议、Internet国际互联网络的基础，简单地说，就是由网络层的IP协议和传输层的TCP协议组成的。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207261948692.png" alt=""></p><h2 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207261954413.png" alt=""></p><h2 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h2><p>1.获取本机InetAddress对象getLocalHost</p><p>2.根据指定主机名/域名获取ip地址对象getByName</p><p>3.获取InetAddress对象的主机名getHostName</p><p>4.获取InetAddress对象的地址getHostAddress</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">API_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="comment">//1. 获取本机的InetAddress 对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(localHost);</span><br><span class="line">        <span class="comment">//2. 根据指定主机名 获取 InetAddress对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">host1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;DESKTOP-L57VJE8&quot;</span>);</span><br><span class="line">        System.out.println(host1);</span><br><span class="line">        <span class="comment">//3. 根据域名返回 InetAddress对象, 比如 www.baidu.com 对应</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">host2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;host2=&quot;</span> + host2);</span><br><span class="line">        <span class="comment">//4. 通过 InetAddress 对象，获取对应的地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostAddress</span> <span class="operator">=</span> host2.getHostAddress();</span><br><span class="line">        System.out.println(<span class="string">&quot;host2 对应的ip = &quot;</span> + hostAddress);</span><br><span class="line">        <span class="comment">//5. 通过 InetAddress 对象，获取对应的主机名/或者的域名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostName</span> <span class="operator">=</span> host2.getHostName();</span><br><span class="line">        System.out.println(<span class="string">&quot;host2对应的主机名/域名=&quot;</span> + hostName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>1.套接字(Socket)开发网络应用程序被广泛采用，以至于成为事实上的标准。</p><p>2.通信的两端都要有Socket，是两台机器间通信的端点</p><p>3.网络通信其实就是Socket间的通信。</p><p>4.Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</p><p>5.一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</p><h2 id="TCP-网络通信编程"><a href="#TCP-网络通信编程" class="headerlink" title="TCP 网络通信编程"></a>TCP 网络通信编程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP02Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bw.write(<span class="string">&quot;hello,server&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">        bw.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP02Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端，在9999端口监听，等待连接..&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bw.write(<span class="string">&quot;hello,client&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();<span class="comment">//注意需要手动的flush</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPFileUploadServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 服务端在本机监听8888端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端在8888端口监听....&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 等待连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 读取客户端发送的数据</span></span><br><span class="line">        <span class="comment">//   通过Socket得到输入流</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line">        <span class="comment">//4. 将得到 bytes 数组，写入到指定的路径，就得到一个文件了</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;src\\mg2.png&quot;</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line">        bos.write(bytes);</span><br><span class="line">        bos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向客户端回复 &quot;收到图片&quot;</span></span><br><span class="line">        <span class="comment">// 通过socket 获取到输出流(字符)</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        writer.write(<span class="string">&quot;收到图片&quot;</span>);</span><br><span class="line">        writer.flush();<span class="comment">//把内容刷新到数据通道</span></span><br><span class="line">        socket.shutdownOutput();<span class="comment">//设置写入结束标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭其他资源</span></span><br><span class="line">        writer.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPFileUploadClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//客户端连接服务端 8888，得到Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//创建读取磁盘文件的输入流</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\winsock_\\upload_\\mg.png&quot;</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//bytes 就是filePath对应的字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过socket获取到输出流, 将bytes数据发送给服务端</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        bos.write(bytes);<span class="comment">//将文件对应的字节数组的内容，写入到数据通道</span></span><br><span class="line">        bis.close();</span><br><span class="line">        socket.shutdownOutput();<span class="comment">//设置写入数据的结束标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//=====接收从服务端回复的消息=====</span></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//使用StreamUtils 的方法，直接将 inputStream 读取到的内容 转成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> StreamUtils.streamToString(inputStream);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭相关的流</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="netstat指令"><a href="#netstat指令" class="headerlink" title="netstat指令"></a>netstat指令</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207262217667.png" alt=""></p><h2 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h2><p>1.类 DatagramSocket和 DatagramPacket[数据包/数据报]实现了基于UDP协议网络程序。</p><p>2.UDP数据报通过数据报套接字DatagramSocket发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</p><p>3.DatagramPacket对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</p><p>4.UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPReceiverA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建一个 DatagramSocket 对象，准备在9999接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2. 构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="comment">//   UDP 协议一个数据包最大 64k</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br><span class="line">        <span class="comment">//3. 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        <span class="comment">//   当有数据包发送到 本机的9999端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//   如果没有数据包发送到 本机的9999端口, 就会阻塞等待.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收端A 等待接收数据..&quot;</span>);</span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="type">byte</span>[] data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//===回复信息给B端</span></span><br><span class="line">        <span class="comment">//将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        data = <span class="string">&quot;好的, 明天见&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        packet =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);<span class="comment">//发送</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;A端退出...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPSenderB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建 DatagramSocket 对象，准备在9998端口 接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="string">&quot;hello 明天吃火锅~&quot;</span>.getBytes(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.=== 接收从A端回复的信息</span></span><br><span class="line">        <span class="comment">//(1)   构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="comment">//   UDP 协议一个数据包最大 64k</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        packet = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br><span class="line">        <span class="comment">//(2)    调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        <span class="comment">//   当有数据包发送到 本机的9998端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//   如果没有数据包发送到 本机的9998端口, 就会阻塞等待.</span></span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3)  可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;B端退出&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021612799.png" alt=""></p><p><strong>Java 反射机制可以完成</strong></p><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时得到任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ol><p><strong>反射相关的主要类</strong></p><ol><li>java.lang.Class:代表一个类，Class对象表示某个类加载后在堆中的对象</li><li>java.lang.reflect.Method:代表类的方法,Method对象表示某个类的方法</li><li>java.lang.reflect.Field:代表类的成员变量, Field对象表示某个类的成员变量</li><li>java.lang.reflect.Constructor:代表类的构造方法,Constructor对象表示构造器</li><li>这些类在java.lang.reflection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 使用Properties 类, 可以读写配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\Java_Project\\basicOfJava\\reflection_\re.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">classfullpath</span> <span class="operator">=</span> properties.get(<span class="string">&quot;classfullpath&quot;</span>).toString();<span class="comment">//&quot;com.hspedu.Cat&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> properties.get(<span class="string">&quot;method&quot;</span>).toString();<span class="comment">//&quot;hi&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 使用反射机制解决</span></span><br><span class="line">        <span class="comment">//(1) 加载类, 返回Class类型的对象cls</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classfullpath);</span><br><span class="line">        <span class="comment">//(2) 通过 cls 得到你加载的类 .Cat 的对象实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;o的运行类型=&quot;</span> + o.getClass()); <span class="comment">//运行类型</span></span><br><span class="line">        <span class="comment">//(3) 通过 cls 得到你加载的类 .Cat 的 methodName&quot;hi&quot;  的方法对象</span></span><br><span class="line">        <span class="comment">//    即：在反射中，可以把方法视为对象（万物皆对象）</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//(4) 通过method1 调用方法: 即通过方法对象来实现调用方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line">        method1.invoke(o); <span class="comment">//传统方法 对象.方法() , 反射机制 方法.invoke(对象)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//java.lang.reflect.Field: 代表类的成员变量, Field对象表示某个类的成员变量</span></span><br><span class="line">        <span class="comment">//得到name字段</span></span><br><span class="line">        <span class="comment">//getField不能得到私有的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;age&quot;</span>); <span class="comment">//</span></span><br><span class="line">        System.out.println(nameField.get(o)); <span class="comment">// 传统写法 对象.成员变量 , 反射 :  成员变量对象.get(对象)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//java.lang.reflect.Constructor: 代表类的构造方法, Constructor对象表示构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getConstructor(); <span class="comment">//()中可以指定构造器参数类型, 返回无参构造器</span></span><br><span class="line">        System.out.println(constructor);<span class="comment">//Cat()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> cls.getConstructor(String.class); <span class="comment">//这里传入的 String.class 就是String类的Class对象</span></span><br><span class="line">        System.out.println(constructor2);<span class="comment">//Cat(String name)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;招财猫&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//public的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;&#125; <span class="comment">//无参构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123; <span class="comment">//常用方法</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;hi &quot; + name);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123; <span class="comment">//常用方法</span></span><br><span class="line">        System.out.println(name + <span class="string">&quot; 喵喵叫..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反射优点和缺点</strong></p><p>1.优点:可以动态的创建和使用对象(也是框架底层核心)，使用灵活,没有反射机制,框架技术就失去底层支撑。</p><p>2.缺点:使用反射基本是解释执行，对执行速度有影响.</p><p> <strong>反射调用优化-关闭访问检查</strong></p><ul><li>Method和Field、Constructor对象都有setAccessible(方法)</li><li>setAccessible作用是启动和禁用访问安全检查的开关</li><li>参数值为true表示反射的对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查</li></ul><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><ol><li>Class也是类,因此也继承Object类</li><li>Class类对象不是new出来的，而是系统创建的</li><li>对于某个类的Class类对象，在内存中只有一份，因为类只加载一次</li><li>每个类的实例都会记得自己是由哪个Class 实例所生成</li><li>通过Class对象可以完整地得到一个类的完整结构,通过一系列API</li><li>Class对象是存放在堆的</li><li>类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据(包括方法代码,变量名，方法名，访问权限等等）</li></ol><p><strong>Class 类的常用方法</strong></p><p><img src="D:\typora图片\image-20220802164207790.png" alt="image-20220802164207790"></p><p><strong>获取 Class 类对象</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021702127.png" alt=""></p><p><strong>如下类型有 Class 对象</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021712921.png" alt=""></p><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>反射机制是java实现动态语言的关键，也就是通过反射实现类动态加载。</p><p>1.静态加载:编译时加载相关的类，如果没有则报错,依赖性太强</p><p>2.动态加载:运行时加载需要的类，如果运行时不用该类，即使不存在该类，则不报错，降低了依赖性</p><p>1.当创建对象时(new)//静态加载</p><p>2.当子类被加载时，父类也加载//静态加载</p><p>3.调用类中的静态成员时//静态加载</p><p>4.通过反射//动态加载</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021729384.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021730799.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021731147.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021732249.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021732281.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021737281.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021738701.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection_.class_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoad03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 加载 B 类，并生成 B 的 class 对象</span></span><br><span class="line">        <span class="comment">//2. 链接 num = 0</span></span><br><span class="line">        <span class="comment">//3. 初始化阶段</span></span><br><span class="line">        <span class="comment">// 依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句,并合并</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        clinit() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;B 静态代码块被执行&quot;);</span></span><br><span class="line"><span class="comment">        //num = 300;</span></span><br><span class="line"><span class="comment">        num = 100;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        合并: num = 100</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//new B();//类加载</span></span><br><span class="line">        <span class="comment">//System.out.println(B.num);//100, 如果直接使用类的静态属性，也会导致类的加载</span></span><br><span class="line">        <span class="comment">//看看加载类的时候，是有同步机制控制</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span></span><br><span class="line"><span class="comment">        throws ClassNotFoundException</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            //正因为有这个机制，才能保证某个类在内存中, 只有一份 Class 对象</span></span><br><span class="line"><span class="comment">            synchronized (getClassLoadingLock(name)) &#123;</span></span><br><span class="line"><span class="comment">            //.... &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 静态代码块被执行&quot;</span>);</span><br><span class="line">        num = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;B() 构造器被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过反射获取类的结构信息"><a href="#通过反射获取类的结构信息" class="headerlink" title="通过反射获取类的结构信息"></a><strong>通过反射获取类的结构信息</strong></h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021749014.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021749961.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021750461.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021750413.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示如何通过反射获取类的结构信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">api_02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//得到Class对象</span></span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;reflection_.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line">        <span class="comment">//规定 说明: 默认修饰符 是0 ， public  是1 ，private 是 2 ，protected 是 4 , static 是 8 ，final 是 16</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName()</span><br><span class="line">                    + <span class="string">&quot; 该属性的修饰符值=&quot;</span> + declaredField.getModifiers()</span><br><span class="line">                    + <span class="string">&quot; 该属性的类型=&quot;</span> + declaredField.getType());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName()</span><br><span class="line">                    + <span class="string">&quot; 该方法的访问修饰符值=&quot;</span> + declaredMethod.getModifiers()</span><br><span class="line">                    + <span class="string">&quot; 该方法返回类型&quot;</span> + declaredMethod.getReturnType());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出当前这个方法的形参数组情况</span></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredMethod.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该方法的形参类型=&quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());<span class="comment">//这里只是输出名</span></span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredConstructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该构造器的形参类型=&quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一组方法API</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">api_01</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Class对象</span></span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;reflection_.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//getName:获取全类名</span></span><br><span class="line">        System.out.println(personCls.getName());<span class="comment">//reflection_.Person</span></span><br><span class="line">        <span class="comment">//getSimpleName:获取简单类名</span></span><br><span class="line">        System.out.println(personCls.getSimpleName());<span class="comment">//Person</span></span><br><span class="line">        <span class="comment">//getFields:获取所有public修饰的属性，包含本类以及父类的</span></span><br><span class="line">        Field[] fields = personCls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;<span class="comment">//增强for</span></span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的属性=&quot;</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getMethods:获取所有public修饰的方法，包含本类以及父类的</span></span><br><span class="line">        Method[] methods = personCls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的方法=&quot;</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getConstructors: 获取所有public修饰的构造器，包含本类</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personCls.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类的构造器=&quot;</span> + constructor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());<span class="comment">//这里只是输出名</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getPackage:以Package形式返回 包信息</span></span><br><span class="line">        System.out.println(personCls.getPackage());<span class="comment">//reflection_</span></span><br><span class="line">        <span class="comment">//getSuperClass:以Class形式返回父类信息</span></span><br><span class="line">        Class&lt;?&gt; superclass = personCls.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的class对象=&quot;</span> + superclass);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//getInterfaces:以Class[]形式返回接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = personCls.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接口信息=&quot;</span> + anInterface);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getAnnotations:以Annotation[] 形式返回注解信息</span></span><br><span class="line">        Annotation[] annotations = personCls.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注解信息=&quot;</span> + annotation);<span class="comment">//注解</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IB</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">IA</span>, IB &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">int</span> age; <span class="comment">// 4 + 8 = 12</span></span><br><span class="line">    String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021832476.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecCreateInstance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 先获取到 User 类的 Class 对象</span></span><br><span class="line">        Class&lt;?&gt; userClass = Class.forName(<span class="string">&quot;reflection_.User&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 通过 public 的无参构造器创建实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> userClass.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        <span class="comment">//3. 通过 public 的有参构造器创建实例</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        constructor 对象就是</span></span><br><span class="line"><span class="comment">        public User(String name) &#123;//public 的有参构造器</span></span><br><span class="line"><span class="comment">            this.name = name;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//3.1 先得到对应构造器</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = userClass.getConstructor(String.class);</span><br><span class="line">        <span class="comment">//3.2 创建实例，并传入实参</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">fzy</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;fzy&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;fzy=&quot;</span> + fzy);</span><br><span class="line">        <span class="comment">//4. 通过非 public 的有参构造器创建实例</span></span><br><span class="line">        <span class="comment">//4.1 得到 private 的构造器对象</span></span><br><span class="line">        Constructor&lt;?&gt; constructor1 = userClass.getDeclaredConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">        <span class="comment">//4.2 创建实例</span></span><br><span class="line">        <span class="comment">//暴破【暴力破解】 , 使用反射可以访问 private 构造器/方法/属性, 反射面前，都是纸老虎</span></span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user2</span> <span class="operator">=</span> constructor1.newInstance(<span class="number">100</span>, <span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user2=&quot;</span> + user2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123; <span class="comment">//User 类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Java学习&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;<span class="comment">//无参 public</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;<span class="comment">//public 的有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;<span class="comment">//private 有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过反射访问类中的成员"><a href="#通过反射访问类中的成员" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h2><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021859707.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示反射操作属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecAccessProperty</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到Student类对应的 Class对象</span></span><br><span class="line">        Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;reflection_.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stuClass.newInstance();<span class="comment">//o 的运行类型就是Student</span></span><br><span class="line">        System.out.println(o.getClass());<span class="comment">//Student</span></span><br><span class="line">        <span class="comment">//3. 使用反射得到age 属性对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> stuClass.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.set(o, <span class="number">88</span>);<span class="comment">//通过反射来操作属性</span></span><br><span class="line">        System.out.println(o);<span class="comment">//</span></span><br><span class="line">        System.out.println(age.get(o));<span class="comment">//返回age属性的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 使用反射操作name 属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//对name 进行暴破, 可以操作private 属性</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//name.set(o, &quot;老韩&quot;);</span></span><br><span class="line">        name.set(<span class="literal">null</span>, <span class="string">&quot;老韩~&quot;</span>);<span class="comment">//因为name是static属性，因此 o 也可以写出null</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">        System.out.println(name.get(o)); <span class="comment">//获取属性值</span></span><br><span class="line">        System.out.println(name.get(<span class="literal">null</span>));<span class="comment">//获取属性值, 要求name是static</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021904233.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示通过反射调用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecAccessMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到Boss类对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; bossCls = Class.forName(<span class="string">&quot;reflection_.Boss&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> bossCls.newInstance();</span><br><span class="line">        <span class="comment">//3. 调用public的hi方法</span></span><br><span class="line">        <span class="comment">//Method hi = bossCls.getMethod(&quot;hi&quot;, String.class);//OK</span></span><br><span class="line">        <span class="comment">//3.1 得到hi方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">hi</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;hi&quot;</span>, String.class);<span class="comment">//OK</span></span><br><span class="line">        <span class="comment">//3.2 调用</span></span><br><span class="line">        hi.invoke(o, <span class="string">&quot;Java学习~&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 调用private static 方法</span></span><br><span class="line">        <span class="comment">//4.1 得到 say 方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">say</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;say&quot;</span>, <span class="type">int</span>.class, String.class, <span class="type">char</span>.class);</span><br><span class="line">        <span class="comment">//4.2 因为say方法是private, 所以需要暴破，原理和前面讲的构造器和属性一样</span></span><br><span class="line">        say.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(say.invoke(o, <span class="number">100</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;男&#x27;</span>));</span><br><span class="line">        <span class="comment">//4.3 因为say方法是static的，还可以这样调用 ，可以传入null</span></span><br><span class="line">        System.out.println(say.invoke(<span class="literal">null</span>, <span class="number">200</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&#x27;女&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 在反射中，如果方法有返回值，统一返回Object , 但是他运行类型和方法定义的返回类型一致</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">reVal</span> <span class="operator">=</span> say.invoke(<span class="literal">null</span>, <span class="number">300</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;reVal 的运行类型=&quot;</span> + reVal.getClass());<span class="comment">//String</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在演示一个返回的案例</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">reVal2</span> <span class="operator">=</span> m1.invoke(o);</span><br><span class="line">        System.out.println(<span class="string">&quot;reVal2的运行类型=&quot;</span> + reVal2.getClass());<span class="comment">//Monster</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boss</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monster</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">say</span><span class="params">(<span class="type">int</span> n, String s, <span class="type">char</span> c)</span> &#123;<span class="comment">//静态方法</span></span><br><span class="line">        <span class="keyword">return</span> n + <span class="string">&quot; &quot;</span> + s + <span class="string">&quot; &quot;</span> + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(String s)</span> &#123;<span class="comment">//普通public方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hi &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">网络编程、反射</summary>
    
    
    
    <category term="学习笔记" scheme="https://windcrain.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://windcrain.top/tags/Java/"/>
    
  </entry>
  
</feed>
