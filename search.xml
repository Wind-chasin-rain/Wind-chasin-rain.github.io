<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用Docker部署GeminiPro Chat项目</title>
      <link href="/post/%E7%94%A8Docker%E9%83%A8%E7%BD%B2GeminiPro%20Chat%E9%A1%B9%E7%9B%AE/"/>
      <url>/post/%E7%94%A8Docker%E9%83%A8%E7%BD%B2GeminiPro%20Chat%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="https://gg.windcrain.top/">https://gg.windcrain.top/</a></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202312291707986.png" alt=""></p><p><br></p><h1 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h1><p>1）一台服务器</p><p>2）此项目的github<br><a href="https://github.com/babaohuang/GeminiProChat">https://github.com/babaohuang/GeminiProChat</a></p><p>3）一个谷歌账号<br>用来获取免费的API<br><a href="https://makersuite.google.com/app/apikey">https://makersuite.google.com/app/apikey</a></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202312291555312.png" alt=""></p><p><br></p><h1 id="一、Docker环境部署"><a href="#一、Docker环境部署" class="headerlink" title="一、Docker环境部署"></a>一、Docker环境部署</h1><p><strong>docker安装脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://cdn.jsdelivr.net/gh/SuperManito/LinuxMirrors@main/DockerInstallation.sh)</span><br></pre></td></tr></table></figure><p><strong>docker-compose安装脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose &amp;&amp; chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、创建docker-compose-yml文件"><a href="#二、创建docker-compose-yml文件" class="headerlink" title="二、创建docker-compose.yml文件"></a>二、创建docker-compose.yml文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo -i <span class="comment">#切换到root用户</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/GeminiProChat <span class="comment">#创建一个目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/GeminiProChat</span><br><span class="line"></span><br><span class="line">vim docker-compose.yml  </span><br><span class="line"></span><br><span class="line"><span class="comment">#英文输入法下，按 i进入编辑</span></span><br><span class="line"><span class="comment">#esc退出编辑</span></span><br><span class="line"><span class="comment"># :wq保存退出</span></span><br><span class="line"><span class="comment"># :q退出  :q!强制退出</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span>  <span class="comment"># 这是一个Docker Compose文件的版本声明，它表明该文件符合Docker Compose文件格式版本3.3</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">ywsj_gemini:</span>   <span class="comment">#服务名，可以自定义</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">ywsj_gemini</span>    <span class="comment">#容器名，可以自定义</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;3000:3000&#x27;</span>   <span class="comment"># 冒号:左边的3000可以改成任意vps上未使用过的端口记得打开防火墙,冒号右边是本docker镜像里的端口</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PUID=0</span>    <span class="comment"># 用户ID,在终端输入id可以查看当前用户的id</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PGID=0</span>    <span class="comment"># 组ID同上</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span>  <span class="comment">#时区，可以自定义</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">GEMINI_API_KEY=AIlls3SyAZAoLx6TO2W40ojhWUJf_uqEKwGp5NqFU</span>   <span class="comment">#这里填自己准备条件上获取到的谷歌AI的API</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span>    <span class="comment">#开启自启动其他选项看以下备注</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">babaohuang/geminiprochat:latest</span>    <span class="comment">#镜像名一般都是使用的哪个镜像就写哪个镜像。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h1 id="三、执行容器运行命令"><a href="#三、执行容器运行命令" class="headerlink" title="三、执行容器运行命令"></a>三、执行容器运行命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d <span class="comment">#运行容器</span></span><br><span class="line"></span><br><span class="line">docker-compose ps  <span class="comment">#查看是否开启成功</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h1 id="四、打开web页面使用"><a href="#四、打开web页面使用" class="headerlink" title="四、打开web页面使用"></a>四、打开web页面使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8181   <span class="comment">#打开自己VPS的端口加ip进入web页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以绑定域名来访问</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="五、更新网站"><a href="#五、更新网站" class="headerlink" title="五、更新网站"></a>五、更新网站</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/GeminiProChat   <span class="comment">#进入项目目录</span></span><br><span class="line"></span><br><span class="line">docker-compose down <span class="comment">#停止容器</span></span><br><span class="line"></span><br><span class="line">docker-compose pull <span class="comment">#拉取最新镜像</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d <span class="comment">#启动新容器</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习03</title>
      <link href="/post/Linux03/"/>
      <url>/post/Linux03/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><h2 id="Shell是什么"><a href="#Shell是什么" class="headerlink" title="Shell是什么"></a>Shell是什么</h2><p>Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。d&amp;kF%Nfti3s-</p><h2 id="Shell脚本的执行方式"><a href="#Shell脚本的执行方式" class="headerlink" title="Shell脚本的执行方式"></a>Shell脚本的执行方式</h2><h3 id="脚本格式要求"><a href="#脚本格式要求" class="headerlink" title="脚本格式要求"></a>脚本格式要求</h3><p>1.脚本以#!bin/bash开头（表明以bashell执行）</p><p>2.脚本需要有可执行权限</p><p>3.shell脚本一般以.sh结尾。虽然也可以以别的结尾，但是一般约定俗成以.sh结尾。</p><p><br></p><h3 id="脚本的常用执行方式"><a href="#脚本的常用执行方式" class="headerlink" title="脚本的常用执行方式"></a>脚本的常用执行方式</h3><p><strong>编写第一个Shell脚本</strong></p><p>需求说明：创建一个Shell脚本，输出hello,world~</p><p>方式1（输入脚本的绝对路径或相对路径）</p><p>说明：首先要赋予helloworld.sh脚本的+x权限，再执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /root/shcode <span class="comment"># 创建shcode目录，用于存放后续的shell脚本</span></span><br><span class="line"><span class="built_in">cd</span> /root/shcode/</span><br><span class="line">vim hello.sh   <span class="comment"># 第一行输入：#!/bin/bash 第二行输入：echo &quot;hello,world~&quot;</span></span><br><span class="line"><span class="built_in">chmod</span> u+x hello.sh <span class="comment"># 给所有者增加执行权限</span></span><br><span class="line">./hello.sh   <span class="comment"># 或使用绝对路径执行脚本：/root/shcode/hello.sh</span></span><br><span class="line">12345</span><br></pre></td></tr></table></figure><p>方法2（sh+脚本）</p><p>说明：不用赋予脚本+x权限，直接执行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u-x hello.sh <span class="comment"># 去掉执行权限</span></span><br><span class="line">sh hello.sh   <span class="comment"># 将hello.sh当脚本执行，此时不需要执行权限</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="Shell的变量"><a href="#Shell的变量" class="headerlink" title="Shell的变量"></a>Shell的变量</h2><h3 id="Shell变量介绍"><a href="#Shell变量介绍" class="headerlink" title="Shell变量介绍"></a>Shell变量介绍</h3><p>1.Linux Shell中的变量分为：系统变量和用户自定义变量</p><p>2.系统变量：$HOME, $PWD, $SHELL, $USER等等，比如：echo $HOME等等。</p><p>3.显示当前shell中所有变量：set</p><p><br></p><h3 id="shell变量的定义"><a href="#shell变量的定义" class="headerlink" title="shell变量的定义"></a>shell变量的定义</h3><p>基本语法</p><p>1.定义变量：变量名=值（不要打空格）</p><p>2.撤销变量：unset 变量</p><p>3.声明静态变量：readonly 变量，注意：不能unset</p><p>快速入门</p><p>案例1：定义变量A</p><p>案例2：撤销变量A</p><p>案例3：声明静态的变量B=2，不能unset（静态变量不会被反复定义和初始化，只会被定义一次)</p><p>案例4：可把变量提升为全局环境变量，可供其他shell程序使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：定义变量A</span></span><br><span class="line">A=100</span><br><span class="line"><span class="comment"># 定义变量不需要$，输出变量需要$</span></span><br><span class="line"><span class="built_in">echo</span> A=<span class="variable">$A</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;A=<span class="variable">$A</span>&quot;</span></span><br><span class="line"><span class="comment"># 案例2：撤销变量A</span></span><br><span class="line"><span class="built_in">unset</span> A</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;A=<span class="variable">$A</span>&quot;</span> <span class="comment"># 此时只会输出A= ，因为变量A已经被销毁了</span></span><br><span class="line"><span class="comment"># 案例3：声明静态的变量B=2，不能unset</span></span><br><span class="line"><span class="built_in">readonly</span> B=2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;B=<span class="variable">$B</span>&quot;</span></span><br><span class="line"><span class="built_in">unset</span> B     </span><br></pre></td></tr></table></figure><p><br></p><h3 id="shell变量的命名和赋值规则"><a href="#shell变量的命名和赋值规则" class="headerlink" title="shell变量的命名和赋值规则"></a>shell变量的命名和赋值规则</h3><p>定义变量的规则</p><p>1.变量名称可以由字母、数字和下划线组成，但是不能以数字开头。</p><p>5A=200(不可以)</p><p>2.等号两侧不能有空格。</p><p>3.变量名称一般习惯为大写</p><p>将命令的返回值赋给变量</p><p>1.A=``反引号，运行里面的命令，并把结果返回给变量A（没有反引号，会认为是单词赋给A）</p><p>2.A=$(date)等价于反引号</p><p><br></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p><strong>基本语法</strong></p><p>1.export 变量名=变量值（功能描述：将shell变量输出为环境变量/全局变量）</p><p>2.source 配置文件 （功能描述：让修改后的配置信息立即生效）</p><p>3.echo $变量名 （功能描述：查询环境变量的值）</p><p><strong>快速入门</strong></p><p>1.在/etc/profile文件中定义TOMCAT_HOME环境变量</p><p>2.查看环境变量TOMCAT_HOME的值</p><p>3.在另外一个shell程序中使用TOMCAT_HOME</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 在/etc/profile文件最后添加</span></span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/opt/tomcat</span><br><span class="line"><span class="comment"># wq保存退出</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile <span class="comment"># 刷一下profile文件，让配置信息生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$TOMCAT_HOME</span>   <span class="comment"># 返回/opt/tomcat</span></span><br></pre></td></tr></table></figure><p>注意：在输出TOMCAT_HOME环境变量前，需要让其生效source/etc/profile</p><p>补充：shell脚本的多行注释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;! </span><br><span class="line">内容</span><br><span class="line">! </span><br></pre></td></tr></table></figure><p><br></p><h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><p>当我们执行一个shell脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量</p><p>比如：./myshell.sh 100 200，这个就是一个执行shell的命令行，可以在myshell脚本中获取到参数信息</p><p><strong>基本语法</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827292.png" alt="image-20230717142522210"></p><p>案例</p><p>案例：编写一个shell脚本myshell.sh，在脚本中获取到命令行的各个参数信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;0=<span class="variable">$0</span>, 1=<span class="variable">$1</span>, 2=<span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有的参数=$*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数的个数=<span class="variable">$#</span>&quot;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><p>就是shell设计者事先已经定义好的变量，可以直接在shell脚本中使用</p><p><strong>基本语法</strong></p><p>$$ （功能描述：当前进程的进程号(PID))</p><p>$! （功能描述：后台运行的最后一个进程的进程号（PID））</p><p>$? （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</p><p><strong>应用实例：</strong></p><p>在一个shell脚本中简单使用一下预定义变量preVar.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前执行的进程id=$$&quot;</span></span><br><span class="line"><span class="comment"># 以后台的方式运行一个脚本(后面带个&amp;)，并获取他的进程号</span></span><br><span class="line">/root/shcode/myshell.sh &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;最后一个后台方式运行的进程id=$!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行的结果=$?&quot;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><strong>基本语法</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827294.png" alt="image-20230717143610960"></p><p><strong>应用实例oper.sh</strong></p><p>案例1：计算(2+3)*4的值</p><p>案例2：请求出命令行两个参数[整数]的和，比如20和50</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：计算（2+3）X4的值</span></span><br><span class="line">RES1=$(((<span class="number">2</span>+<span class="number">3</span>)*<span class="number">4</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;res1=<span class="variable">$RES1</span>&quot;</span></span><br><span class="line"><span class="comment"># 使用第二种方式，推荐使用</span></span><br><span class="line">RES2=$[(2+3)*4]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;res2=<span class="variable">$RES2</span>&quot;</span></span><br><span class="line"><span class="comment"># 使用第三种方式 expr</span></span><br><span class="line">TEMP=`<span class="built_in">expr</span> 2 + 3`</span><br><span class="line">RES3=`<span class="built_in">expr</span> <span class="variable">$TEMP</span> \* 4`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;temp=<span class="variable">$TEMP</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;res3=<span class="variable">$RES3</span>&quot;</span></span><br><span class="line"><span class="comment"># 案例2：请求出命令行的两个参数[整数]的和 20 50</span></span><br><span class="line">SUM=$[<span class="variable">$1</span>+<span class="variable">$2</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sum=<span class="variable">$SUM</span>&quot;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><strong>基本语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ] <span class="comment"># 注意condition前后要有空格</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>#非空返回true，可使用$?验证（0为true，&gt;1为false）</p><p>应用实例</p><p>[ Edu ] # 非空，返回true</p><p>[ ] # 返回false，中间一定要有空格</p><p>[ condition ] &amp;&amp; echo OK || echo notok 条件满足，执行后面的语句</p><p>常用判断条件</p><p>1）=字符串比较</p><p>2）两个整数的比较</p><p>-lt 小于</p><p>-le 小于等于</p><p>-eq 等于</p><p>-gt 大于</p><p>-ge 大于等于</p><p>-ne 不等于</p><p>3）按照文件权限进行判断</p><p>-r 有读的权限</p><p>-w 有写的权限</p><p>-x 有执行的权限</p><p>4）按照文件类型进行判断</p><p>-f 文件存在并且是一个常规的文件</p><p>-e 文件存在</p><p>-d 文件存在并是一个目录</p><p>应用实例</p><p>案例1：“ok”是否等于“ok”</p><p>判断语句：使用 =</p><p>案例2：23是否大于等于22</p><p>判断语句：使用 -ge</p><p>案例3：/root/shcode/aaa.txt目录中的文件是否存在</p><p>判断语句：使用 -f</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：“ok”是否等于“ok”</span></span><br><span class="line"><span class="comment"># 判断语句：使用 =</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;ok&quot;</span> = <span class="string">&quot;ok&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;equal&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 案例2：23是否大于等于22</span></span><br><span class="line"><span class="comment"># 判断语句：使用 -ge</span></span><br><span class="line"><span class="keyword">if</span> [ 23 -ge 22 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;大于&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 案例3：/root/shcode/aaa.txt目录中的文件是否存在</span></span><br><span class="line"><span class="comment"># 判断语句：使用 -f</span></span><br><span class="line"><span class="keyword">if</span> [ -f /root/shcode/aaa.txt ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;存在&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">代码</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>多分支-if判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">代码</span><br><span class="line"><span class="keyword">elif</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">代码</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>注意事项：[ 条件判断式 ]，中括号和条件判断式之间必须有空格</p><p>应用实例ifCase.sh</p><p>案例：请编写要给shell程序，如果输入的参数，大于等于60，则输出“及格了”，如果小于60，则输出”不及格“</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例：请编写要给shell程序，如果输入的参数，大于等于60，则输出“及格了”，如果小于60，则输出”不及格“</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -ge 60 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;及格了&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> -lt 60 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;不及格&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名 <span class="keyword">in</span></span><br><span class="line">”值1“)</span><br><span class="line">如果变量的值等于值1，则执行程序1</span><br><span class="line">;;</span><br><span class="line">“值2”)</span><br><span class="line">如果变量的值等于值2，则执行程序2</span><br><span class="line">;;</span><br><span class="line">...省略其他分支...</span><br><span class="line">*）</span><br><span class="line">如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span> <span class="comment"># case单词反写</span></span><br></pre></td></tr></table></figure><p>应用实例 testCase.sh</p><p>案例1：当命令行参数是1时，输出“周一”，是2时，就输出“周二”，其他情况输出“other”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：当命令行参数是1时，输出“周一”，是2时，就输出“周二”，其他情况输出“other”</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;周一&quot;</span></span><br><span class="line">;;</span><br><span class="line"><span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;周二&quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;other&quot;</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>基本语法1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 值1 值2 值3... <span class="comment"># 值外面可以加双引号</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序/代码</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>应用实例testFor1.sh</p><p>案例1：打印命令行输入的参数[这里可以看出$*和$@的区别]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：打印命令行输入的参数[这里可以看出$* 和$@ 的区别]</span></span><br><span class="line"><span class="comment"># 注意：$* 是把输入的参数，当作一个整体，所以，只会输出一句话</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;num is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 使用$@ 来获取输入的参数，注意，这时是分别对待，所以有几个参数，就输出几句</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;===========================&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;num is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>基本语法2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((初始值;循环控制条件;变量变化))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序/代码</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>应用实例testFor2.sh</p><p>案例1：从1加到100的值输出显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：从1加到100的值输出显示，如何把100做成一个变量</span></span><br><span class="line"><span class="comment"># 定义一个变量</span></span><br><span class="line">SUM=0</span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=<span class="variable">$1</span>; i++ ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 写上你的业务代码</span></span><br><span class="line">        SUM=$[<span class="variable">$SUM</span>+<span class="variable">$i</span>]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;总和SUM=<span class="variable">$SUM</span>&quot;</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>基本语法1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>注意：while和[有空格，条件判断式和[也有空格<br>应用实例testWhile.sh</p><p>案例1：从命令行输入一个数n，统计从1+…+n的值是多少？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：从命令行输入一个数n，统计从1+...+n的值是多少？</span></span><br><span class="line">SUM=0</span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le <span class="variable">$1</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        SUM=$[<span class="variable">$SUM</span>+<span class="variable">$i</span>]</span><br><span class="line">        <span class="comment"># i自增</span></span><br><span class="line">        i=$[<span class="variable">$i</span>+1]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行结果=<span class="variable">$SUM</span>&quot;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h2><p><strong>基本语法</strong></p><p>read(选项)(参数)</p><p>选项：</p><p>-p：指定读取值的提示符</p><p>-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了。</p><p>参数：</p><p>变量：指定读取值的变量名</p><p><strong>应用实例testRead.sh</strong></p><p>案例1：读取控制台输入一个NUM1值</p><p>案例2：读取控制台输入一个NUM2值，在10秒内输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：读取控制台输入一个NUM1值</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个数NUM1=&quot;</span> NUM1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你输入的NUM1=<span class="variable">$NUM1</span>&quot;</span></span><br><span class="line"><span class="comment"># 案例2：读取控制台输入一个NUM2值，在10秒内输入</span></span><br><span class="line"><span class="built_in">read</span> -t 10 -p <span class="string">&quot;请输入一个数NUM2=&quot;</span> NUM2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你输入的NUM2=<span class="variable">$NUM2</span>&quot;</span>                        </span><br></pre></td></tr></table></figure><p><br></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>shell编程和其他编程语言一样，有系统函数，也可以自定义函数。</p><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><p>basename基本语法</p><p>功能：返回完整路径最后/的部分，常用于获取文件名</p><p>basename [pathname] [suffix]</p><p>basename [string] [suffix] (功能描述：basename命令会删掉所有的前缀包括最后一个(‘/’)字符，然后将字符串显示出来。</p><p>选项：</p><p>suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉。</p><p>应用实例</p><p>案例1：请返回/home/aaa/test.txt的”test.txt“部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@lmh100 shcode]<span class="comment"># basename /home/aaa/test.txt</span></span><br><span class="line">test.txt</span><br><span class="line">[root@lmh100 shcode]<span class="comment"># basename /home/aaa/test.txt .txt</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>dirname基本语法</p><p>功能：返回完整路径最后/的前面的部分，常用于返回路径部分</p><p>dirname 文件绝对路径（功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）</p><p>应用实例</p><p>案例1：请返回/home/aaa/test.txt的/home/aaa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lmh100 shcode]<span class="comment"># dirname /home/aaa/test.txt</span></span><br><span class="line">/home/aaa</span><br></pre></td></tr></table></figure><p><br></p><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数定义</span></span><br><span class="line"><span class="keyword">function</span> funname[()]</span><br><span class="line">&#123;</span><br><span class="line">Action;</span><br><span class="line">[<span class="built_in">return</span> int;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 调用函数时，直接写函数名</span></span><br><span class="line">funname [值]</span><br></pre></td></tr></table></figure><p>应用实例</p><p>案例1：计算输入两个参数的和（动态获取），getSum</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 案例1：计算输入两个参数的和（动态获取），getSum</span></span><br><span class="line"><span class="comment"># 定义函数 getSum</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getSum</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">        SUM=$[<span class="variable">$n1</span>+<span class="variable">$n2</span>]</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;和是=<span class="variable">$SUM</span>&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入两个值</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个数n1=&quot;</span> n1</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个数n2=&quot;</span> n2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用自定义函数</span></span><br><span class="line">getSum <span class="variable">$n1</span> <span class="variable">$n2</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="Shell编程综合案例"><a href="#Shell编程综合案例" class="headerlink" title="Shell编程综合案例"></a>Shell编程综合案例</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>1.每天凌晨2：30备份数据库mzlmh到/data/backup/db</p><p>2.备份开始和备份结束能够给出相应的提示信息</p><p>3.备份后的文件要求以备份时间为文件名，并打包成.tar.gz的形式，比如：2021-03-12_230201.tar.gz</p><p>4.在备份的同时，检查是否有10天前备份的数据库文件，如果有就将其删除。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827295.png" alt="image-20230717185434628"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /user/sbin</span><br><span class="line">vim mysql_db_backup.sh</span><br><span class="line"></span><br><span class="line">//.sh文件内容</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 备份目录</span></span><br><span class="line">BACKUP=/data/backup/db</span><br><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">DATETIME=$(<span class="built_in">date</span> +%Y-%m-%d_%H%M%S)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$DATETIME</span></span><br><span class="line"><span class="comment"># 数据库的地址</span></span><br><span class="line">HOST=localhost</span><br><span class="line"><span class="comment"># 数据库的用户名</span></span><br><span class="line">DB_USER=root</span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line">DB_PW=hspedu100</span><br><span class="line"><span class="comment"># 备份的数据库名</span></span><br><span class="line">DATABASE=hspedu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建备份目录，如果不存在，就创建</span></span><br><span class="line">[ ! -d <span class="string">&quot;<span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>&quot;</span> ] &amp;&amp; <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份数据库</span></span><br><span class="line">mysqldump -u<span class="variable">$&#123;DB_USER&#125;</span> -p<span class="variable">$&#123;DB_PW&#125;</span> --host=<span class="variable">$&#123;HOST&#125;</span> -q -R --databases <span class="variable">$&#123;DATABASE&#125;</span> | gzip &gt; <span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>.sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件处理成 tar.gz(压缩打包）</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;BACKUP&#125;</span></span><br><span class="line">tar -zcvf <span class="variable">$DATETIME</span>.tar.gz <span class="variable">$&#123;DATETIME&#125;</span></span><br><span class="line"><span class="comment"># 删除对应的备份</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除十天前的备份文件(atime是访问时间)</span></span><br><span class="line">find <span class="variable">$&#123;BACKUP&#125;</span> -atime +10 -name <span class="string">&quot;*.tar.gz&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;备份数据库<span class="variable">$&#123;DATEBASE&#125;</span> 成功~&quot;</span></span><br><span class="line">//.sh文件内容结束</span><br><span class="line"></span><br><span class="line">crontab -e</span><br><span class="line"><span class="comment"># 填入内容</span></span><br><span class="line">30 2 * * * /usr/sbin/mysql_db_backup.s</span><br></pre></td></tr></table></figure><p><br></p><h1 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h1><p>1.日志文件是重要的系统信息文件，其中记录了许多<code>重要的系统事件</code>，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件的相关信息、各种服务相关信息等。</p><p>2.日志对于安全来说也很重要，它记录了系统每天发生的各种事情，通过日志来检查错误发生的原因，或者受到攻击时攻击者留下的痕迹。</p><p>3.可以这样理解，日志是用来记录重大事件的工具。</p><p><br></p><h2 id="系统常用的日志"><a href="#系统常用的日志" class="headerlink" title="系统常用的日志"></a>系统常用的日志</h2><p>/var/log/目录就是系统日志文件的保存位置</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827296.png" alt="image-20230718182430089"></p><p>（下表标红为必须要知道的）</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827297.png" alt="image-20230718182652837"></p><p>注意：这里lastlog拼错了</p><p><br></p><h2 id="日志管理服务rsyslogd"><a href="#日志管理服务rsyslogd" class="headerlink" title="日志管理服务rsyslogd"></a>日志管理服务rsyslogd</h2><p>CentOS7.6日志服务是rsyslogd，CentOS6.x日志服务是syslogd。rsyslogd功能更强大。</p><p>rsyslogd的使用、日志文件的格式，和syslogd服务兼容的。</p><p>原理示意图（日志管理服务和日志的关系）：</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827298.png" alt="image-20230718183702775"></p><p>查看Linux中的rsyslogd服务是否启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep “rsyslog” | grep -v “grep”</span><br><span class="line"><span class="comment"># grep -v “grep”中的-v表示反向进行匹配，这样可以过滤掉查询的本身这条grep指令</span></span><br></pre></td></tr></table></figure><p>查询rsyslogd服务的自启动状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files | grep <span class="string">&quot;rsyslog&quot;</span></span><br></pre></td></tr></table></figure><p>配置文件：<code>/etc/rsyslog.conf</code> [重点]</p><p>编辑文件时的格式为： *.*  存放日志文件</p><p>其中第一个*代表日志类型，第二个*代表日志级别</p><p>1.日志类型分为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">auth<span class="comment">## pam产生的日志</span></span><br><span class="line">authpriv<span class="comment">## ssh、ftp等登录信息的验证信息</span></span><br><span class="line">corn<span class="comment">## 时间任务相关</span></span><br><span class="line">kern<span class="comment">## 内核</span></span><br><span class="line">lpr<span class="comment">## 打印</span></span><br><span class="line">mail<span class="comment">## 邮件</span></span><br><span class="line">mark(syslog)-rsyslog<span class="comment">## 服务内部的信息，时间标识</span></span><br><span class="line">news<span class="comment">## 新闻组</span></span><br><span class="line">user<span class="comment">## 用户程序产生的相关信息</span></span><br><span class="line">uucp<span class="comment">## unix to unix copy主机之间相关的通信</span></span><br><span class="line"><span class="built_in">local</span> 1-7<span class="comment">## 自定义的日志设备</span></span><br></pre></td></tr></table></figure><p>2.日志级别分为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debug<span class="comment">## 有调用信息的，日志通信最多</span></span><br><span class="line">info<span class="comment">## 一般信息日志，最常用</span></span><br><span class="line">notice<span class="comment">## 最具有重要性的普通条件的信息</span></span><br><span class="line">warning<span class="comment">## 警告级别</span></span><br><span class="line">err<span class="comment">## 错误级别，阻止某个功能或者模块不能正常工作的信息</span></span><br><span class="line">crit<span class="comment">## 严重级别，阻止整个系统或者整个软件不能正常工作的信息</span></span><br><span class="line">alert<span class="comment">## 需要立刻修改的信息</span></span><br><span class="line">emerg<span class="comment">## 内核崩溃等重要信息</span></span><br><span class="line">none<span class="comment">## 什么都不记录</span></span><br></pre></td></tr></table></figure><p>注意：从上到下，级别从低到高，记录信息越来越少</p><p>由日志服务rsyslogd记录的日志文件，日志文件的格式包含以下4列：</p><p>1.事件产生的时间</p><p>2.产生事件的服务器的主机名</p><p>3.产生事件的服务名或程序名</p><p>4.事件的具体信息</p><p>日志如何查看实例</p><p>查看一下/var/log/secure日志，这个日志中记录的是用户验证和授权方面的信息，来分析如何查看</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827299.png" alt="image-20230718184930184"></p><p>日志管理服务应用实例</p><p>在/etc/rsyslog.conf中添加一个日志文件/var/log/mzl.log，当有事件发送时（比如sshd服务相关事件），该文件会接收到信息并保存，演示<code>重启，登录的情况</code>，看看是否有日志保存<br><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827300.png" alt="image-20230718185535289"></p><p><br></p><h2 id="日志轮替"><a href="#日志轮替" class="headerlink" title="日志轮替"></a>日志轮替</h2><p>日志轮替就是把旧的日志文件移动并改名，同时建立新的空日志文件，当旧日志文件超出保存的范围之后，就会进行删除</p><h3 id="日志轮替文件命名"><a href="#日志轮替文件命名" class="headerlink" title="日志轮替文件命名"></a>日志轮替文件命名</h3><p>1.centos7使用logrotate进行日志轮替管理，要想改变日志轮替文件名字，通过/etc/logrotate.conf配置文件中”dateext”参数；</p><p>2.如果配置文件中有“dateext”参数，那么日志会用<font color="red">日期</font>来作为日志文件的后缀，例如“secure-20201010”。这样日志文件名不会重叠，也就不需要日志文件的改名，只需要指定保存日志个数，删除多余的日志文件即可。</p><p>3.如果配置文件中没有“dateext”参数，日志文件就需要进行改名了。当第一次进行日志轮替时，<font color="red">当前的“secure”日志会自动改名为“secure.1”，然后新建”secure“日志，用来保存新的日志</font>。当第二次进行日志轮替时，”secure.1“会自动改名为”secure.2“，当前的”secure“日志会自动改名为”secure.1“，然后也会新建”secure“日志，用来保存新的日志，以此类推。</p><p>注意：</p><p>1./etc/logrotate.conf里既可以配置全局的日志轮替策略/规则，也可以单独给某个日志文件指定策略。</p><p>2.也可以把某个日志文件的轮替规则，写到/etc/logrotate.d目录，</p><p><br></p><h3 id="logrotate配置文件"><a href="#logrotate配置文件" class="headerlink" title="logrotate配置文件"></a>logrotate配置文件</h3><p>/etc/logrotate.conf为logrotate的全局配置文件</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827301.png" alt="image-20230718190105442"></p><p>参数说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">参数参数说明</span><br><span class="line">daily日志的轮替周期是每天</span><br><span class="line">weekly日志的轮替周期是每周</span><br><span class="line">monthly日志的轮替周期是每月</span><br><span class="line">rotate 数字保留的日志备份文件的个数。0指没有备份。</span><br><span class="line">compress日志轮替时，旧的日志进行压缩</span><br><span class="line">create mode owner group 建立新日志，同时指定新日志的权限与所有者和所属组</span><br><span class="line">mail address当日志轮替时，输出内容通过邮件发送到指定的邮件地址</span><br><span class="line">missingok如果日志不存在，则忽略该日志的警告信息</span><br><span class="line">notifempty如果日志为空文件，则不进行日志轮替</span><br><span class="line">minsize大小日志轮替的最小值。也就是日志一定要达到这个最小值才会轮替，否则就算时间达到也不轮替</span><br><span class="line">size大小日志只有大于指定大小才进行日志轮替，而不是按照时间轮替</span><br><span class="line">dateext使用日期作为日志轮替文件的后缀</span><br><span class="line">sharedscripts在此关键字后的脚本只执行一次</span><br><span class="line">prerotate/endscript在日志轮替之前执行脚本命令</span><br><span class="line">postrotate/endscript在日志轮替之后执行脚本命令</span><br></pre></td></tr></table></figure><p><br></p><h3 id="把自己的日志加入日志轮替"><a href="#把自己的日志加入日志轮替" class="headerlink" title="把自己的日志加入日志轮替"></a>把自己的日志加入日志轮替</h3><p>第一种方法是直接在/etc/logrotate.conf配置文件中写入该日志的轮替策略。</p><p>第二种方法是在/etc/logrotate.d/目录中新建立该日志的轮替文件，在该轮替文件中写入正确的轮替策略，因为该目录中的文件都会被”include“到主配置文件中，所以也可以把日志加入轮替。</p><p>推荐使用第二种方法，因为系统中需要轮替的日志非常多，如果全都直接写入/etc/logrotate.conf配置文件，那么这个文件的可管理性就会非常差，不利于此文件的维护。</p><p>在/etc/logrotate.d/配置轮替文件一览</p><p><strong>应用实例</strong></p><p>在/etc/logrotate.conf进行配置，或者直接在/etc/logrotate.d/下创建mzllog编写如下内容，具体轮替的效果可以参考/var/log下的boot.log情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/var/log/mzl.log</span><br><span class="line">&#123;</span><br><span class="line">missingok</span><br><span class="line">daily</span><br><span class="line">copytruncate <span class="comment"># 拷贝截断：用于还在打开中的日志文件，将当前日志备份重命名并将原文件清空</span></span><br><span class="line">rotate 7</span><br><span class="line">notifempty</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="日志轮替机制原理"><a href="#日志轮替机制原理" class="headerlink" title="日志轮替机制原理"></a>日志轮替机制原理</h2><p>日志轮替之所以可以在指定的时间备份日志，是依赖于系统定时任务。</p><p>在/etc/cron.daily/目录，就会发现这个目录中是由logrotate文件（可执行），logrotate通过这个文件依赖定时任务执行的。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827302.png" alt="image-20230718194530049"></p><p><br></p><h2 id="查看内存日志"><a href="#查看内存日志" class="headerlink" title="查看内存日志"></a>查看内存日志</h2><p>有一部分日志先写到内存里面，还没有写到文件里。</p><p>journalctl 可以查看内存日志，这里我们看看常用的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">journalctl <span class="comment">## 查看全部</span></span><br><span class="line">journalctl -n 3 <span class="comment">## 查看最新3条</span></span><br><span class="line">journalctl --since 19:00 --until 19:10:10 <span class="comment"># 查看起始时间到结束时间的日志可加日期</span></span><br><span class="line">journalctl -p err <span class="comment">## 报错日志</span></span><br><span class="line">journalctl -o verbose <span class="comment">## 日志详细内容</span></span><br><span class="line">journalctl _PID=1245 _COMM=sshd<span class="comment">##查看包含这些参数的日志（在详细日志查看）</span></span><br><span class="line">或者journalctl | grep sshd</span><br></pre></td></tr></table></figure><p>注意：journalctl 查看得是<code>内存日志</code>，重启会清空</p><p><br></p><h1 id="定制自己的Linux系统"><a href="#定制自己的Linux系统" class="headerlink" title="定制自己的Linux系统"></a>定制自己的Linux系统</h1><p>通过裁剪现有Linux系统（CentOS7.6），创建属于自己的min Linux小系统，可以加深我们对linux的理解。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>启动流程介绍：</p><p>制作Linux小系统前，再了解一下Linux的启动流程：</p><p>1.首先Linux要通过自检，检查硬件设备有没有故障</p><p>2.如果有多块启动盘的话，需要在BIOS中选择启动磁盘</p><p>3.启动MBR中的bootloader引导程序</p><p>4.加载内核文件</p><p>5.执行所有进程的父进程、老祖宗systemd</p><p>6.欢迎界面</p><p>在Linux的启动流程中，加载内核文件时关键文件:</p><p>1）kernel文件：vmlinuz-3.10.0-957.el7.x86_64</p><p>2）initrd文件：initramfs-3.10.0-957.el7.x86_64.img</p><p><br></p><h2 id="制作min-linux思路分析"><a href="#制作min-linux思路分析" class="headerlink" title="制作min linux思路分析"></a>制作min linux思路分析</h2><p>1.在现有的Linux系统（centos7.6）上加一块硬盘/dev/sdb，在硬盘上分两个分区，一个是/boot，一个是/，并将其格式化。需要明确的是，现在加的这个硬盘在现有的Linux系统中是/dev/sdb，但是，当我们把东西全部设置好时，要把这个硬盘拔除，放在新的系统上，此时，就是/dev/sda。</p><p>2.在/dev/sdb硬盘上，将其打造成独立的Linux系统，里面的所有文件是需要拷贝进去的</p><p>3.作为能独立运行的Linux系统，内核是一定不能少，要把内核文件和initramfs文件也一起拷到/dev/sdb上</p><p>4.以上步骤完成，我们的自制Linux就完成，创建一个新的linux虚拟机，将其硬盘指向我们创建的硬盘，启动即可</p><p><br></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1.首先，我们在现有的linux添加一块大小为20G的硬盘（注意添加过程中，一定要将虚拟磁盘存储为单个文件）</p><p>注意：由于之前在学习挂载的时候，添加了一块硬盘，所以移除后如果不在配置文件/etc/fstab将永久挂载点删除，则开机会进入紧急模式。解决的办法是：进入紧急模式后，输入root密码，编辑/etc/fstab，将之前的sdb硬盘挂载指示内容删除，再重启。如果开机进入了紧急模式，可能是因为刚刚移除硬盘后</p><p>2.接下来进行分区和格式化</p><p>1）先用lsblk查看目前有哪些硬盘。</p><p>2）对硬盘进行分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure><p>3）对硬盘进行格式化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdb1</span><br><span class="line">mkfs.ext4 /dev/sdb2</span><br></pre></td></tr></table></figure><p>4）创建目录，并挂载新的磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /mnt/boot /mnt/sysroot <span class="comment"># 创建目录</span></span><br><span class="line">mount /dev/sdb1 /mnt/boot/</span><br><span class="line">mount /dev/sdb2 /mnt/sysroot/</span><br></pre></td></tr></table></figure><p>5）安装grub2，内核文件拷贝至目标磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grub2-install --root-directory=/mnt /dev/sdb <span class="comment"># 安装grub2</span></span><br><span class="line">hexdump -C -n 512 /dev/sdb <span class="comment"># 验证是否安装成功</span></span><br><span class="line"><span class="built_in">rm</span> -rf /mnt/boot/* <span class="comment"># 清除/mnt/boot/下原有的内容</span></span><br><span class="line"><span class="built_in">cp</span> -rf /boot/* /mnt/boot/ <span class="comment"># 将sda的boot/中的所有内容拷贝到/mnt的boot/下（相当于到sdb1）</span></span><br></pre></td></tr></table></figure><p>6）修改grub2/grub.cfg文件中的UUID（指定那些盘是启动盘，哪些盘是根目录盘），标红的部分是需要使用指令来查看的</p><p>（用sed -i全部替换更方便）</p><p>在UTF-8后面要加一句话selinux=0 init=/bin/bash，代表不要走系统那条线，要走我自己定制的shell</p><p>在linux16最后也要加上selinux=0 init=/bin/bash</p><p>保存退出</p><p>7）创建目标主机根文件系统（将所有重要目录建起来，虽然是空的）(注意/mnt/sysroot和{}之间没有空格)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -pv /mnt/sysroot/&#123;etc/rc.d,usr,var,proc,sys,dev,lib,lib64,bin,sbin,boot,srv,mnt,media,home,root&#125;</span><br></pre></td></tr></table></figure><p>8）拷贝需要的bash(也可以拷贝你需要的指令）和库文件给新的系统使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /lib64/*.* /mnt/sysroot/lib64/</span><br><span class="line"><span class="built_in">cp</span> /bin/bash /mnt/sysroot/bin/</span><br></pre></td></tr></table></figure><p>9.原虚拟机先关机，然后新创建一个虚拟机，然后将默认分配的硬盘移除掉，指向我们刚刚创建的磁盘即可。</p><p>10）这时，很多指令都不能使用，比如ls，reboot等，可以将需要的指令拷贝到对应的目录即可</p><p>11)如果要拷贝指令，重新进入到原来的linux系统拷贝相应的指令即可，如将/bin/ls拷贝到/mnt/sysroot/bin，将/sbin/reboot拷贝到/mnt/sysroot/sbin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdb2 /mnt/sysroot/ <span class="comment"># 重新挂载</span></span><br><span class="line"><span class="built_in">cp</span> /bin/ls /mnt/sysroot/bin/</span><br><span class="line"><span class="built_in">cp</span> /bin/systemctl /mnt/sysroot/bin/</span><br><span class="line"><span class="built_in">cp</span> /sbin/reboot /mnt/sysroot/sbin/</span><br></pre></td></tr></table></figure><p>12）再重启新的min linux系统，就可以使用ls，reboot指令了</p><p><br></p><h1 id="额外阅读：Linux内核源码-介绍-amp-内核升级"><a href="#额外阅读：Linux内核源码-介绍-amp-内核升级" class="headerlink" title="额外阅读：Linux内核源码-介绍&amp;内核升级"></a>额外阅读：Linux内核源码-介绍&amp;内核升级</h1><p>linux0.01内核源码</p><p>基本介绍</p><p>Linux的内核源代码可以从网上下载，解压缩后文件文件一般也都位于linux目录下。内核源代码有很多版本，可以从linux0.01内核入手，总共的代码1w行左右，版本5.9.8总共代码超过700w行，非常庞大。</p><p>内核地址：<a href="https://www.kernel.org/">https://www.kernel.org/</a></p><p>linux0.01内核源码目录&amp;阅读</p><p>阅读内核源码技巧</p><p>1.linux0.01的阅读需要懂c语言</p><p>2.阅读源码前，应知道Linux内核源码的整体分布情况。现代的操作系统一般由进程管理、内存管理、文件系统、驱动程序和网络等组成。Linux内核源码的各个目录大致与此相对应。</p><p>3.在阅读方法或顺序上，有纵向与横向之分。所谓纵向就是顺着程序的执行顺序逐步进行（比如从主方法开始阅读）；所谓横向，就是按模块进行，它们常结合在一起进行（比如先看内存管理mm模块）。</p><p>4.对于Linux启动的代码可顺着Linux的启动顺序一步步来阅读；对于像内存管理部分，可以单独拿出来进行阅读分析。实际上这是一个反复的过程，不可能读一遍就理解</p><p>linux内核源码阅读&amp;目录介绍&amp;main.c说明</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827303.png" alt="image-20230719154218014"></p><p>main.c中</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827304.png" alt="image-20230719154646277"></p><p>linux内核升级应用实例</p><p>将Centos系统从7.6内核升级到7.8版本内核（兼容性问题）</p><p>具体步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a //查看当前的内核版本</span><br><span class="line">yum info kernel -q //检测内核版本，显示可以升级的内核</span><br><span class="line">yum update kernel //升级内核</span><br><span class="line">yum list kernel -q //查看已经安装的内核</span><br></pre></td></tr></table></figure><p>注意：装了新的内核后，使用uname -a，仍显示原内核。重启之后，在重启界面可以选择新内核。新内核是兼容原先的系统的。</p><p> <br></p><h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><p>实体机无法做快照，如果系统出现异常或者数据损坏，后果严重，要重做系统，还会造成数据丢失。所以我们可以使用备份和恢复技术</p><p>linux的备份和恢复很简单，有两种方式：</p><p>1.把需要的文件（或者分区）用TAR打包就行，下次需要恢复的时候，再解压开覆盖即可</p><p>2.使用dump和restore命令</p><h2 id="安装dump和restore"><a href="#安装dump和restore" class="headerlink" title="安装dump和restore"></a>安装dump和restore</h2><p>如果linux上没有dump和restore指令，需要先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install dump (可能会同时安装上restore）</span><br><span class="line">yum -y install restore</span><br></pre></td></tr></table></figure><p><br></p><h2 id="使用dump完成备份"><a href="#使用dump完成备份" class="headerlink" title="使用dump完成备份"></a>使用dump完成备份</h2><p>dump支持分卷和增量备份（所谓增量备份是指备份上次备份后 修改/增加过的文件，也称差异备份）。</p><p>示意图:</p><p>第一次备份层级为0，表示完整备份。后面的层级表示增量备份/差异备份/层级备份。<br><img src="https://img-blog.csdnimg.cn/3b59dad1b58d41c6a47556365d95c55c.png" alt="在这里插入图片描述"></p><p><br></p><h3 id="dump语法说明"><a href="#dump语法说明" class="headerlink" title="dump语法说明"></a>dump语法说明</h3><p>dump [-cu] [-123456789] [-f &lt;备份后文件名&gt;] [-T &lt;日期&gt;] [目录或文件系统]</p><p>dump []-wW</p><p>-c（c是一个数字，可以是0-9中的一个数字）：创建新的归档文件，并将由一个或多个文件参数所指定的内容写入归档文件的开头。</p><p>-0123456789：备份的层级。0为最完整备份，会备份所有文件。若指定0以上的层级，则备份自上一次备份以来修改或新增的文件，到9后，可以再次轮替。</p><p>-f &lt;备份后文件名&gt;：指定备份后文件名</p><p>-j：<code>调用bzlib库压缩备份文件</code>，也就是将备份后的文件压缩成bz2格式，让文件更小</p><p>-T &lt;日期&gt;：指定开始备份的时间与日期</p><p>-u：备份完成后，在/etc/dumpdares中记录备份的文件系统，层级，日期与时间等。（不带u则不知道备份到第几次了）</p><p>-t：指定文件名，若该文件已存在备份文件中，则列出名称</p><p>-W：显示需要备份的文件及其最后一次备份的层级，时间，日期。</p><p>-w：与-W类似，但仅显示需要备份的文件。</p><p><strong>应用案例1</strong></p><p>将/boot分区所有内容备份到/opt/boot.bak.bz2文件中，备份层级为’0’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dump -0uj -f /opt/boot.bak0.bz2 /boot</span><br></pre></td></tr></table></figure><p><strong>dump应用案例2</strong></p><p>在/boot目录下增加新文件，备份层级为”1”（只备份上次使用层级”0“备份后发生过改变的数据），<code>注意比较看看这次生成的boot1.bak有多大</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dump -1uj -f /opt/boot.bak1.bz2 /boot</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827305.png" alt="image-20230719162725892"></p><p>注意：通过dump命令在配合cronbtab可以实现无人值守备份</p><p><br></p><h3 id="dump-W"><a href="#dump-W" class="headerlink" title="dump -W"></a>dump -W</h3><p>显示需要备份的文件及其最后一次备份的层级，时间，日期<br><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827306.png" alt="image-20230719162813992"></p><p><br></p><h3 id="查看备份时间文件"><a href="#查看备份时间文件" class="headerlink" title="查看备份时间文件"></a>查看备份时间文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/dumpdates</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827307.png" alt="image-20230719162905785"></p><p><br></p><h3 id="dump备份文件或者目录"><a href="#dump备份文件或者目录" class="headerlink" title="dump备份文件或者目录"></a>dump备份文件或者目录</h3><p>前面我们在备份分区时，是可以支持增量备份的，如果备份<code>文件或者目录，不再支持增量备份</code>，即只能只用0级别备份</p><p>案例：使用dump备份/etc整个目录</p><p>dump -0j -f /opt/etc0.bak.bz2 /etc/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面这条语句会报错，提示DUMP：Only level0 dumps are allowed on a subdirectory</span></span><br><span class="line">dump -1j -f /opt/etc.bak.bz2 /etc/</span><br></pre></td></tr></table></figure><p>注意：重要的备份文件，比如数据区，建议将文件上传到其他服务器保存，不要将鸡蛋放在同一个篮子。</p><p><br></p><h2 id="使用restore完成恢复"><a href="#使用restore完成恢复" class="headerlink" title="使用restore完成恢复"></a>使用restore完成恢复</h2><p>restore命令用来恢复已备份的文件，可以从dump生成的备份文件中恢复原文件</p><h3 id="restore基本语法"><a href="#restore基本语法" class="headerlink" title="restore基本语法"></a>restore基本语法</h3><p>restore [模式选项] [选项]</p><p>说明下面四个模式，不能混用，在一次命令中，只能指定一种。</p><p>-C：使用对比模式，将备份的文件与已存在的文件相互对比。</p><p>-i：使用交互模式，在进行还原操作时，restores指令将依序询问用户</p><p>-r：进行还原模式（用的最多的模式）</p><p>-t：查看模式，看备份文件有哪些文件</p><p>选项</p><p>-f &lt;备份设备&gt;：从指定的文件中读取备份数据，进行还原操作</p><p><strong>应用案例1</strong></p><p>restore命令比较模式，比较备份文件和原文件的区别</p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> /boot/hello.java /boot/hello100.java</span><br><span class="line"></span><br><span class="line">restore -C -f boot.bak1.bz2 //注意和最新的文件比较</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827308.png" alt="image-20230719163513000"></p><p>mv /boot/hello100.java /boot/hello.java</p><p>restore -C -f boot.bak1.bz2</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827309.png" alt="image-20230719163618351"></p><p><strong>应用案例2</strong></p><p>restore命令查看模式，看备份文件中有哪些数据/文件</p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restore -t -f boot.bak1.bz2</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307191827310.png" alt="image-20230719163756410"></p><p><strong>应用案例3</strong></p><p>restore命令还原模式，<code>注意细节</code>：如果你有增量备份，需要把增量备份文件也进行恢复，有几个增量备份文件，就要恢复几个，按顺序来恢复即可。</p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/boottmp</span><br><span class="line"><span class="built_in">cd</span> /opt/boottmp</span><br><span class="line">restore -r -f /opt/boot.bak0.bz2 //恢复到第一次完全备份状态</span><br><span class="line">restore -r -f /opt/boot.bak1.bz2 //恢复到第二次增量备份状态</span><br></pre></td></tr></table></figure><p><strong>应用案例4</strong></p><p>restore命令恢复备份的文件，或者整个目录的文件</p><p>基本语法：restore -r -f 备份好的文件</p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> etctmp</span><br><span class="line"><span class="built_in">cd</span> etctmp/</span><br><span class="line">restore -r -f /opt/etc.bak0.bz2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习02</title>
      <link href="/post/Linux02/"/>
      <url>/post/Linux02/</url>
      
        <content type="html"><![CDATA[<h1 id="组管理和权限管理"><a href="#组管理和权限管理" class="headerlink" title="组管理和权限管理"></a>组管理和权限管理</h1><p>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件有所有者、所在组、其他组的概念。</p><p>1.所有者（谁创建谁就是所有者，但是后续可以修改）</p><p>2.所在组（创建者所属用户组，但后续可以修改）</p><p>3.其他组（除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组）</p><p>4.改变用户所在的组</p><p><br></p><h2 id="文件-目录-所有者"><a href="#文件-目录-所有者" class="headerlink" title="文件/目录 所有者"></a>文件/目录 所有者</h2><p>一般为文件的创建者，谁创建了该文件，就自然地成为该文件的所有者。</p><p><strong>查看文件的所有者</strong></p><p>指令：ls -ahl</p><p><strong>修改文件所有者（ch-ange own-er）</strong></p><p>指令：chown 用户名 文件名</p><p>要求：使用root创建一个文件apple.txt，然后将其所有者修改成tom：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> apple.txt</span><br><span class="line"><span class="built_in">chown</span> tom apple.txt <span class="comment"># tom用户必须存在</span></span><br></pre></td></tr></table></figure><p>注意：改变所有者，所在组不会变</p><p><br></p><h2 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h2><p>基本指令：groupadd 组名</p><p><strong>应用实例</strong></p><p>创建一个组，monster：groupadd monster</p><p>创建一个用户fox，并放入monster组中：useradd -g monster fox</p><p><br></p><h2 id="文件-目录-所在组"><a href="#文件-目录-所在组" class="headerlink" title="文件/目录 所在组"></a>文件/目录 所在组</h2><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组。(默认）</p><p><strong>查看文件/目录所在组</strong></p><p>基本指令：ls -ahl</p><p>应用实例</p><p>使用fox创建一个文件，看看该文件属于哪个组？</p><p>-rw-r–r–. 1 fox monster 0 1月 7 12:50 ok.txt</p><p><strong>修改文件/目录所在的组</strong></p><p>基本指令：chgrp 组名 文件名</p><p>应用实例</p><p>使用root用户创建文件orange.txt，看看当前这个文件属于哪个组，然后将这个文件所在组，修改到fruit组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupadd fruit</span><br><span class="line">touch orange.txt</span><br><span class="line">看看当前这个文件属于哪个组 -&gt; root组</span><br><span class="line">chgrp fruit orange.txt</span><br></pre></td></tr></table></figure><p><br></p><h2 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h2><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的，用root的管理权限可以改变某个用户所在的组。</p><p><strong>改变用户所在组</strong></p><p>1.usermod -g 新组名 用户名</p><p>2.usermod -d 目录名 用户名 改变该用户登录的初始目录（特别说明：用户需要有进入到新目录的权限）</p><p>应用实例</p><p>将zwj这个用户从原来所在组，修改到wudang组：usermod -g wudang zwj</p><p><br></p><h2 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h2><p>ls -l中显示的内容如下：</p><p><img src="D:\typora图片\image-20230713102605434.png" alt="image-20230713102605434"></p><p>第一列一共有10位，分别用0-9表示，下面是0-9位的说明：</p><p>1.第0位确定文件类型（d，-，l，c，b）</p><p>l是链接，相当于windows的快捷方式</p><p>d是目录，相当于windows的文件夹</p><p>-是普通文件</p><p>c是字符设备文件，鼠标，键盘（cd /dev可以看到）</p><p>b是块设备，比如硬盘（cd /dev可以看到）</p><p>2.第1-3位确定所有者（该文件的所有者）拥有该文件的权限。 —User</p><p>3.第4-6位确定所在组（同用户组的）拥有该文件的权限。—Group</p><p>4.第7-9位确定其他用户拥有该文件的权限。—Other</p><p><br></p><h2 id="rwx权限详解-难点）"><a href="#rwx权限详解-难点）" class="headerlink" title="rwx权限详解(难点）"></a>rwx权限详解(难点）</h2><p><strong>rwx作用到文件</strong></p><p>1.[r]代表可读（read）：可以读取，查看</p><p>2.[w]代表可写（write）：可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件</p><p>3.[x]代表可执行（execute）：可以被执行</p><p><strong>rwx作用到目录</strong></p><p>1.[r]代表可读（read）：可以读取，ls查看目录内容</p><p>2.[w]代表可写（write）：可以修改，对目录内创建+删除+重命名目录</p><p>3.[x]代表可执行（execute）：可以进入该目录</p><p><br></p><h2 id="文件及目录权限实际案例"><a href="#文件及目录权限实际案例" class="headerlink" title="文件及目录权限实际案例"></a>文件及目录权限实际案例</h2><p>=ls -l中显示的内容如下：</p><p>-rwxrw-r— 1 root root 1213 Feb 2 09:39 abc</p><ul><li><p>10个字符确定不同用户能对文件干什么</p><p>第一个字符代表文件类型：-代表该文件是普通文件</p><p>其余字符每3个一组（rwx）读（r）写（w）执行（x）</p><p>第一组rwx：文件拥有者的权限是读、写和执行</p><p>第二组rw-：所在组的用户的权限是读、写但不能执行</p><p>第三组r–： 其他组的用户的权限是读不能写和执行</p></li><li><p>可用数字表示：r=4，w=2，x=1，因此rwx=4+2+1=7，数字可以进行组合</p></li><li><p>其他说明</p><p>1 文件：该数一定为1 目录：该数对应子目录数</p><p>root 所有者</p><p>root 所在组</p><p>1213 大小（字节），如果是文件夹，显示4096字节</p><p>Feb 2 09:39 最后修改日期</p><p>abc 文件名</p></li></ul><p><br></p><h2 id="修改权限-chmod"><a href="#修改权限-chmod" class="headerlink" title="修改权限-chmod"></a>修改权限-chmod</h2><p><strong>第一种方式：+、-、=变更权限</strong></p><p>u:所有者 g：所有组 o：其他人 a：所有人（u、g、o的总和）</p><p>1.chmod u=rwx,g=rx,o=x 文件/目录名</p><p>2.chmod o+w 文件/目录名</p><p>3.chmod a-x 文件/目录名</p><p>案例演示</p><p>1.给abc文件的所有者读写执行的权限，给所在组读执行权限，给其他组读执行权限：chmod u=rwx, g=rx,o=rx abc</p><p>2.给abc文件的所有者除去执行的权限，增加组写的权限:chmod u-x g+w abc</p><p>3.给abc文件的所有用户添加读的权限:chmod a+r abc</p><p>注意：当文件可执行的时候，它的颜色会变成绿色</p><p><strong>第二种方式：通过数字变更权限</strong></p><p>r=4 w=2 x=1 rwx=4+2+1=7</p><p>chmod u=rwx,g=rx,o=x 文件目录名 相当于chmod 751 文件目录名</p><p>案例演示</p><p>要求：将/home/abc.txt 文件的权限修改成rwxr-xr-x，使用给数字的方式实现：</p><p>chmod 755 /home/abc.txt</p><p><br></p><h2 id="修改文件所有者-chown"><a href="#修改文件所有者-chown" class="headerlink" title="修改文件所有者-chown"></a>修改文件所有者-chown</h2><p>chown newowner 文件/目录 (功能描述：改变所有者）</p><p>chown newowner:newgroup 文件/目录 （功能描述：改变所有者和所在组）<br>-R 如果是目录，则使其下所有子文件或目录递归生效</p><p>案例演示</p><p>请将/home/abc.txt文件的所有者修改成tom：chown tom /home/abc.txt</p><p>请将/home/test目录下所有的文件和目录的所有者都修改成tom：chown -R tom /home/test</p><p><br></p><h2 id="修改文件-目录所在组-chgrp"><a href="#修改文件-目录所在组-chgrp" class="headerlink" title="修改文件/目录所在组-chgrp"></a>修改文件/目录所在组-chgrp</h2><p>基本介绍</p><p>chgrp newgroup 文件/目录</p><p>案例演示</p><p>请将/home/abc.txt文件的所在组修改成shaolin(少林)：chgrp shaolin /home/abc.txt</p><p>请将/home/test目录下所有的文件和目录的所在组都修改成shaolin（少林）：chgrp -R shaolin /home/test</p><p><br></p><h1 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h1><h2 id="Crond任务调度"><a href="#Crond任务调度" class="headerlink" title="Crond任务调度"></a>Crond任务调度</h2><p>任务调度：是指系统在某个时间执行的特定的<strong>命令</strong>或<strong>程序</strong>。</p><p>任务调度分类：</p><p>1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等</p><p>2.个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份</p><p><strong>基本语法：</strong> crontab [选项]</p><div class="table-container"><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-e</td><td>编辑crontab定时任务</td></tr><tr><td>-l</td><td>查询crontab任务</td></tr><tr><td>-r</td><td>删除当前用户所有的crontab任务</td></tr></tbody></table></div><p>注意</p><p><code>-r</code>  是删除当前用户所有任务，如果只想删除某个任务，使用 <code>-e</code> 进入编辑，删除那行任务或者 <code>#</code> 注释那行任务</p><p>案例</p><p>设置任务调度文件：/etc/crontab</p><p>设置个人任务调度。执行crontab -e命令</p><p>接着输入任务到调度文件</p><p>如：<em>/1 </em> <em> </em> <em> ls -l /etc/ &gt; /tmp/to.txt（注意：</em>之间有空格）</p><p>意思说每小时的每分钟执行ls -l /etc/ &gt; /tmp/to.txt命令</p><p><img src="D:\typora图片\image-20230714145621483.png" alt="image-20230714145621483"></p><p><img src="D:\typora图片\image-20230714145659346.png" alt="image-20230714145659346"></p><p><img src="D:\typora图片\image-20230714145815433.png" alt="image-20230714145815433"></p><p><br></p><h2 id="at定时任务"><a href="#at定时任务" class="headerlink" title="at定时任务"></a>at定时任务</h2><p>1.at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来运行。</p><p>2.默认情况下，atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。</p><p>3.at命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</p><p>4.在使用at命令的时候，一定要保证atd进程的启动，可以使用相关指令来查看</p><p>指令ps -ef（检测当前所有正在运行的进程有哪些）</p><p>指令ps -ef | grep atd （过滤其中的atd相关指令)//可以检测atd是否在运行</p><p><strong>at命令格式：</strong>at [选项] [时间]</p><p>Crtl + D 结束at命令的输入（按两次)</p><p><img src="D:\typora图片\image-20230714152821048.png" alt="image-20230714152821048"></p><p><strong>at时间定义</strong></p><p>at指定时间的方法:</p><p>1.接受在当天的hh:mm(小时：分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。例如：04：00</p><p>2.使用midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午4点）等比较模糊的词语来指定时间。</p><p>3.采用12小时计时制，即在时间后面加上AM（上午）或PM（下午）来说明是上午还是下午。例如：12pm</p><p>4.指定命令执行的具体日期，指定格式为month day（月 日）或mm/dd/yy（月/日/年）或dd.mm.yy（日.月.年），指定的日期必须跟在指定时间的后面。例如：04:00 2021-03-1</p><p>5.使用相对计时法。指定格式为：now + count time-units，now就是当前时间，time-units是时间单位，这里能够使minutes（分钟）、hours（小时）、days（天）、weeks（星期）。count是时间的数量，几天，几小时。例如：now + 5 minutes</p><p>6.直接使用today（今天）、tomorrow（明天）来指定完成命令的时间。</p><p><strong>应用案例</strong></p><p>案例1：2天后的下午5点执行/bin/ls /home</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at 5pm + 2days</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash">/bin/ls /home <span class="comment"># 然后按两次ctrl+D</span></span></span><br></pre></td></tr></table></figure><p>案例2：atq命令来查看系统中没有执行的工作任务：atq</p><p>案例3：明天17点钟，输出时间到指定文件内，比如/root/date100.log</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at 5pm tomorrow</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash"><span class="built_in">date</span> &gt; /root/date100.<span class="built_in">log</span> <span class="comment"># 然后按两次ctrl+D</span></span></span><br></pre></td></tr></table></figure><p>案例4：2分钟后，输出时间到指定文件内，比如/root/date200.log</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at now + 2 minutes</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash"><span class="built_in">date</span> &gt; /root/date200.<span class="built_in">log</span> <span class="comment"># 然后按两次ctrl+D</span></span></span><br></pre></td></tr></table></figure><p>案例5：删除已经设置的任务，atrm 编号（也可以使用at -d 任务编号：来删除设置的任务）</p><p>注意：当出现at&gt;，要输入指令时，退格会失效，要退格，需要使用ctrl+退格</p><p><br></p><h1 id="磁盘分区、挂载"><a href="#磁盘分区、挂载" class="headerlink" title="磁盘分区、挂载"></a>磁盘分区、挂载</h1><h2 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h2><p><strong>原理介绍</strong></p><p>1.Linux来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分。</p><p>2.Linux采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p><p>3.示意图<br><img src="D:\typora图片\image-20230714174037452.png" alt="image-20230714174037452"></p><p><strong>硬盘说明</strong></p><p>1.Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</p><p>2.对于IDE硬盘，驱动器标识符为‘hdx~’，其中’hd‘表明分区所在设备的类型，这里是指IDE硬盘。’x‘为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘），’ ~’代表分区，前四个分区用数字1-4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。例如，hda3表示为前一个IDE硬盘上的第三个主分区或扩展分区，hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。</p><p>3.对于SCSI硬盘则标识为’sdx~‘，SCSI硬盘使用’sd‘来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样。</p><p><img src="D:\typora图片\image-20230714174326670.png" alt="image-20230714174326670"></p><p>上图中，sda表示第一块SCSI硬盘，sda1表示第一块SCSI硬盘的第一个分区</p><p>sr0是光驱</p><p><strong>查看所有设备挂载情况</strong></p><p>命令：lsblk或者lsblk -f （list block的简称）</p><p>lsblk -f可以将分区的情况看的更加清晰</p><p><img src="D:\typora图片\image-20230714174448867.png" alt="image-20230714174448867"></p><p>FSTYPE是文件类型，UUID是当你格式化后，会给你的每一个分区分配一个唯一的不重复的40位的字符串（唯一标识符)，MOUNTPOINT是挂载点</p><p><br></p><h2 id="挂载的经典案例"><a href="#挂载的经典案例" class="headerlink" title="挂载的经典案例"></a>挂载的经典案例</h2><p><strong>如何增加一块硬盘</strong></p><p>1.虚拟机增加硬盘</p><p>2.分区</p><p>3.格式化</p><p>4.挂载</p><p>5.设置可以自动挂载</p><ul><li><p>虚拟机增加硬盘步骤1<br>在[虚拟机]菜单中，选择[设置]，然后设备列表里添加硬盘，然后一路[下一步]，中间只有选择磁盘大小的地方需要修改，直到完成。然后重启系统（才能识别）！</p></li><li><p>虚拟机增加硬盘步骤2<br>分区命令 fdisk /dev/sdb<br>开始对/sdb分区<br>m 显示命令列表<br>p 显示磁盘分区 同 fdisk -l<br>n 新增分区<br>d 删除分区<br>w 写入并退出<br>说明：开始分区后输入n，新增分区，然后选择p，分区类型为主分区。两次回车默认剩余全部空间。最后输入w写入分区并退出，若不保存退出输入q。</p></li><li><p>虚拟机增加硬盘步骤3<br>格式化磁盘<br>分区命令：mkfs [选项] [-t 分区格式] 分区路径，例如mkfs -t ext4 /dev/sdb1 （mkfs是make filesystem的简写）（也可以写成mkfs.ext4 /dev/sdb1)<br>其中ext4是分区类型</p></li><li><p>虚拟机增加磁盘步骤4<br>挂载：将一个分区与一个目录关联起来<br>mount 设备名称 挂载目录<br>例如：mount /dev/sdb1 /newdisk（必须先创建/newdisk目录）<br>卸载：<br>umount 设备名称 或者 挂载目录<br>例如：umount /dev/sdb1 或者 umount /newdisk<br><strong>注意</strong>：用命令行挂载重启后会失效（即这样操作的挂载关系是临时的）</p></li><li><p>虚拟机增加硬盘步骤5<br>永久挂载：通过修改/etc/fstab实现自动挂载（fstab是filesystem table的缩写）</p><p>补充：最后的两个数字：第一个是挂载点内备份，0表示不做dump备份，第二个表示磁盘检查，0表示不检查磁盘扇区，1表示其他目录文件检查，2表示根目录文件检查<br>添加完成后 执行mount -a即刻生效（或者执行reboot也会自动生效）<br>注意：永久挂载前最好保存快照。防止操作失误导致开不了机</p></li></ul><p><br></p><h2 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h2><p><strong>查询系统整体磁盘使用情况</strong></p><p>基本语法：df -h</p><p>应用实例</p><p>查询系统整体磁盘使用情况<br><img src="D:\typora图片\image-20230715151325928.png" alt="image-20230715151325928"></p><p>注意：如果磁盘使用率达到80%以上，就需要想办法清理空间了。</p><p><strong>查看指定目录的磁盘占用情况</strong></p><p>基本语法：du -h /目录</p><p>查询指定目录的磁盘占用情况，不指定则默认查询当前目录</p><p>-s 指定目录占用大小汇总</p><p>-h 带计量单位（人类可读）</p><p>-a 含文件</p><p>–max-depth=1 子目录深度（当前目录的1层子目录也显示）</p><p>-c 列出明细的同时，增加汇总值</p><p>应用案例</p><p>查询/opt目录的磁盘占用情况，深度为1：du -h —max-depth=1</p><p><br></p><h2 id="磁盘情况-工作使用指令"><a href="#磁盘情况-工作使用指令" class="headerlink" title="磁盘情况-工作使用指令"></a>磁盘情况-工作使用指令</h2><p>1.统计/opt文件夹下文件（以-开头）的个数</p><p>第一步：列出/opt目录下的内容：ls -l /opt</p><p>第二步：通过正则表达式‘^-’过滤（因为-开头的是文件类型）：ls -l /opt | grep ‘^-’</p><p>第三步：利用wc指令和-l选项统计行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /opt | grep &#x27;^-&#x27; | wc -l</span><br></pre></td></tr></table></figure><p>补充：</p><p>wc指令(wc就是wordcount的简写)选项：</p><p>-l：计算行数（line）</p><p>-c：计算字节数（character）</p><p>-m：计算字符数（char）</p><p>-w：计算单词数（word）</p><p>2.统计/opt文件夹下目录的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /opt | grep &#x27;^d&#x27; | wc -l</span><br></pre></td></tr></table></figure><p>3.统计/opt文件夹下文件的个数，包括子文件夹里的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /opt | grep &#x27;^-&#x27; | wc -l # 递归查看目录</span><br></pre></td></tr></table></figure><p>4.统计/opt文件夹下目录的个数，包括子文件夹里的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /opt | grep &#x27;^d&#x27; | wc -l # 递归查看目录</span><br></pre></td></tr></table></figure><p>5.以树状显示目录结构：tree 目录</p><p>注意：如果没有tree指令，则使用yum install tree，前提网络是畅通的</p><p><br></p><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><h2 id="网络配置原理图"><a href="#网络配置原理图" class="headerlink" title="网络配置原理图"></a>网络配置原理图</h2><p><img src="D:\typora图片\image-20230715185001874.png" alt="image-20230715185001874"></p><p><br></p><h2 id="linux网络环境配置"><a href="#linux网络环境配置" class="headerlink" title="linux网络环境配置"></a>linux网络环境配置</h2><p><strong>第一种方法（自动获取）：</strong></p><p>说明：登录后，通过界面来设置自动获取ip。</p><p>优点：linux启动后会自动获取IP，避免冲突</p><p>缺点：每次自动获取的ip地址可能不一样</p><p><strong>第二种方法（指定ip）：</strong></p><ul><li>说明<br>直接修改配置文件来指定ip，并可以连接到外网（程序员推荐）</li><li>编辑： <code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>（ens33就是网络设备，更准确地说是网卡）<br>要求：将ip地址配置成静态的：比如：ip地址为192.168.200.130<br><img src="D:\typora图片\image-20230715185907656.png" alt="image-20230715185907656"></li><li>ifcfg-ens33 文件说明</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TYPE=‘Ethernet’                     # 网络类型（通常是Ethenet）</span><br><span class="line">BOOTPROTO=‘dhcp’    # IP的配置方法[none|static|bootp|dhcp]（分别表示引导时不使用协议|静态分配IP|BOOTP协议|DHCP协议）</span><br><span class="line">UUID=<span class="number">926</span>a57ba。。。。。              # 随机id</span><br><span class="line">DEVICE=‘eth0’# 接口名（设备，网卡）</span><br><span class="line">HWADDR=‘<span class="number">00</span>:<span class="number">0</span>C:<span class="number">2</span><span class="keyword">x</span>:<span class="number">0</span><span class="keyword">x</span>:xx’           # MAC地址（这里没有)</span><br><span class="line">ONBOOT=‘yes’# 系统启动时，网络接口是否有效（yes/<span class="keyword">no</span>）</span><br></pre></td></tr></table></figure><p>要将ip地址配置成静态的，需要修改ifcfg-ens33文件，具体地</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要修改BOOTPROTO=‘static’   # 表示静态分配IP</span><br><span class="line">需要添加IPADDR=<span class="number">192.168</span>.<span class="number">200.130</span>    # 表示要固定的IP地址</span><br><span class="line">需要添加GATEWAY=<span class="number">192.168</span>.<span class="number">200.2</span>    # 表示网关</span><br><span class="line">需要添加DNS1=<span class="number">192.168</span>.<span class="number">200.2</span>   # 表示域名解析器</span><br></pre></td></tr></table></figure><p>修改后保存，接下来还需要打开虚拟机的虚拟网络编辑器，找到VMnet8，修改其子网IP为192.168.200.0</p><p>接下来打开NAT设置，修改网关IP为192.168.200.2</p><p>点应用和确定</p><ul><li>重启网络服务或者重启系统生效<br>service network restart # 重启网络服务<br>reboot # 重启系统</li></ul><p>注意：因为修改了虚拟机的ip，所有要在xshell中登录虚拟机，需要修改对应连接的属性中的ip</p><p><br></p><h2 id="设置主机名和hosts映射"><a href="#设置主机名和hosts映射" class="headerlink" title="设置主机名和hosts映射"></a>设置主机名和hosts映射</h2><p><strong>设置主机名</strong></p><p>1.为了方便记忆，可以给linux系统设置主机名，也可以根据需要修改主机名</p><p>2.指令hostname：查看主机名</p><p>3.修改文件在/etc/hostname指定</p><p>4.修改后，重启生效</p><p><strong>设置hosts映射</strong></p><p>思考：如何通过主机名能够找到（比如ping）某个linux系统?</p><ul><li>windows<br>在C:\Windows\System32\drivers\etc\hosts文件指定ip地址和主机名的关系即可<br>案例：192.168.200.130 lmh100</li><li>linux<br>在/etc/hosts 文件指定<br>案例：192.168.200.1 ThinkPad-PC（这个名字其实可以随意，但是ping的时候必须也是这个名称）</li></ul><p><br></p><h2 id="主机名解析过程分析（Hosts、DNS）"><a href="#主机名解析过程分析（Hosts、DNS）" class="headerlink" title="主机名解析过程分析（Hosts、DNS）"></a>主机名解析过程分析（Hosts、DNS）</h2><p><strong>Hosts</strong>是一个文本文件，用来记录IP和Hostname（主机名）的映射关系</p><p><strong>DNS</strong></p><p>1.DNS，就是Domain Name System的缩写，翻译过来就是域名系统</p><p>2.是互联网上作为域名和IP地址相互映射的一个分布式数据库</p><p>应用实例：</p><p>用户在浏览器输入了www.baidu.com</p><p>1.浏览器先检查浏览器缓存中有没有该域名和IP地址的对应关系，有就先调用这个IP完成解析；如果没有找到，就检查操作系统DNS解析器缓存，如果有直接返回IP完成解析。这两个缓存，可以理解为<strong>本地解析器缓存</strong>。</p><p>2.一般来说，当电脑第一次成功访问某一网站后，在一定时间内，浏览器或操作系统会缓存他的IP地址（DNS解析记录)。如在cmd窗口中输入</p><p>ipconfig /displaydns // 可以看到当前操作系统里面的DNS域名解析缓存</p><p>ipconfig /flushdns // 手动清理dns缓存</p><p>3.如果本地解析器缓存没有找到对应映射，检查系统中的hosts文件中有没有配置对应的域名IP映射，如果有，则完成解析并返回。</p><p>4.如果本地DNS解析器缓存和hosts文件中均没有找到对应的IP，则到域名服务DNS（公网的DNS，即分布式数据库）进行解析域</p><p>5.如果还没找到，返回域名不存在的信息</p><p>注意：<br>1.如果是ping 一个域名，则没有浏览器缓存</p><p>2.公网的DNS服务器不是一个服务器，而是分级的（这是为了优化而做的）</p><p>示意图</p><p><img src="D:\typora图片\image-20230715191804156.png" alt="image-20230715191804156"></p><p>补充：</p><p>dns域名劫持：黑客攻击，修改hosts文件，会让域名定向到假网站，（不过现在很多浏览器都有防域名劫持的机制)。</p><p><br></p><h1 id="进程管理（重点）"><a href="#进程管理（重点）" class="headerlink" title="进程管理（重点）"></a>进程管理（重点）</h1><p>1.在Linux中，每个<code>执行的程序</code>都成为一个进程。每一个进程都分配一个ID号(pid，也叫进程号）。<br>补充：程序（静态概念）不运行的时候，就是一段代码。当它加载到内存里时，它才是一个进程（动态概念)。</p><p>2.每个进程都可能以两种方式存在。<code>前台</code>与<code>后台</code>，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行，比如mysql服务。</p><p>3.一般系统的服务都是以后台进程的方式存在，如mysql，tomcat，而且都会常驻在系统中。直到关机才结束。</p><p><br></p><h2 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h2><p>ps命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数。</p><p><img src="D:\typora图片\image-20230716170005169.png" alt="image-20230716170005169"></p><p>一般将-a，-u和-x三个参数同时组合使用。</p><p><img src="D:\typora图片\image-20230716165907670.png" alt="image-20230716165907670"></p><p>USER是指”进程执行用户“</p><p>PID是指”进程号“</p><p>%CPU是指”占用CPU的百分比“</p><p>%MEM是指”占用物理内存百分比“</p><p>VSZ是指”占用虚拟内存大小“</p><p>RSS是指”驻留集合大小，即进程所使用的非交换区物理内存大小“</p><p>TTY是指”终端信息“</p><p>STAT是指”当前运行状态“，S表示sleep（休眠)、r表示正在运行</p><p>START是指”执行的开始时间“</p><p>TIME是指”占用CPU时间“</p><p>COMMAND是指”进程名，也可以理解为执行该进程的指令“</p><p><br></p><p><strong>ps详解</strong></p><p>1.指令：ps -aux | grep xxx，比如想看看有没有sshd服务</p><p>2.指令说明</p><ul><li>System V 展示风格</li><li>USER：用户名称</li><li>PID：进程号</li><li>%CPU：进程占用CPU百分比</li><li>%MEM：进程占用物理内存的百分比</li><li>VSZ：进程占用的虚拟内存大小（单位 ：KB）</li><li>RSS：进程占用的物理内存大小（单位：KB）</li><li>TTY：终端名称，缩写</li><li>STAT：进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等</li><li>STARTED：进程的启动时间</li><li>TIME：CPU时间，即进程使用CPU的总时间</li><li>COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</li></ul><p><strong>应用实例</strong></p><p>要求：以全格式显示当前所有的进程，查看进程的<code>父进程</code>。比如查看sshd的父进程信息：ps -ef | grep sshd</p><p><img src="D:\typora图片\image-20230716170731797.png" alt="image-20230716170731797"></p><p>可以看出，sshd的父进程的PID为1，通过指令ps -aux | more可以看到PID为1的进程为</p><p><img src="D:\typora图片\image-20230716170808364.png" alt="image-20230716170808364"></p><p>ps -ef是以全格式显示当前所有的进程</p><p>-e显示所有进程。-f 全格式</p><p>ps -ef | grep xxx</p><p>是BSD风格</p><p>UID：用户ID</p><p>PID：进程ID</p><p>PPID：父进程ID</p><p>C：CPU用于计算执行优先级的因子。数值越大， 表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高</p><p>STIME：进程启动的时间</p><p>TTY：完整的终端名称</p><p>TIME：CPU时间</p><p>CMD：启动进程所用的命令和参数</p><p><br></p><h2 id="终止进程kill和killall"><a href="#终止进程kill和killall" class="headerlink" title="终止进程kill和killall"></a>终止进程kill和killall</h2><p>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用kill命令来完成此项任务。</p><p><strong>基本语法</strong></p><p>kill [选项] 进程号（功能描述：通过进程号终止进程）</p><p>killall 进程名称 （功能描述：通过进程名称终止进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</p><p>补充：</p><p>1.通过kill只会终止父进程，其子进程会交给1号进程接管。</p><p>2.通过killall终止进程，会将该进程下面的所有子进程也一并终止。</p><p><strong>常用选项</strong></p><p>-9：表示强迫进程立即停止（因为在有些情况下，系统处于保护机制，它会忽略kill指令，但是带-9会强制终止进程）</p><p><strong>应用案例</strong></p><p>案例1：踢掉某个非法登录用户：kill 对应进程号，比如kill 11421</p><p>案例2：终止远程登录服务sshd，在适当时候再次启动sshd服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill sshd对应的进程号</span><br><span class="line">/bin/systemctl start sshd.service # 再次重启sshd服务</span><br></pre></td></tr></table></figure><p>案例3：终止多个gedit，演示killall：killall gedit</p><p>案例4：<code>强制</code>杀掉一个终端</p><p>kill 5480，没有反应。因为该终端正在工作，认为你可能是误操作。此时要终止必须要强制终止：kill -9 5480</p><p><br></p><h2 id="查看进程树pstree"><a href="#查看进程树pstree" class="headerlink" title="查看进程树pstree"></a>查看进程树pstree</h2><p><strong>基本语法</strong></p><p>pstree [选项] [进程号]，可以更加直观的来看进程信息，不写进程号，默认查看进程为1的进程树</p><p><strong>常用选项</strong></p><p>-p：显示进程的PID</p><p>-u：显示进程的所属用户</p><p><strong>应用实例：</strong></p><p>案例1：请以树状的形式显示进程pid：pstree -p （进程号）</p><p>案例2：请以树状的形式显示进程的用户：pstree -u</p><p><br></p><h2 id="服务（service）管理"><a href="#服务（service）管理" class="headerlink" title="服务（service）管理"></a>服务（service）管理</h2><p>服务（service）本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其他程序的请求，比如（mysqld，sshd，防火墙等），因此我们又称为守护进程，是Linux中非常重要的知识点。下图为原理图。</p><p><img src="D:\typora图片\image-20230716172920953.png" alt="image-20230716172920953"></p><p>补充：<br>1.SSHD，就是远程登陆服务，是通过SSH来登陆的。最后的一个符号D其实是daemon的简写，表示后台程序/守护进程/服务</p><p><strong>service管理指令</strong></p><p>1.service 服务名 [start | stop | restart | reload | status]</p><p>2.在CentOS7.0后，很多服务不再使用service，而是systemctl</p><p>3.在CentOS7.0后，被service指令管理的服务在/etc/init.d/查看（注意，必须最后带/）</p><p><strong>查看服务名：</strong></p><p>方式1：使用setup -&gt; 系统服务 就可以看到全部：setup</p><p>下图中打星号的表示会随着linux的启动，自动启动。没有带星号的则需要手动启动。</p><p>将光标移动到某一个服务上，按空格，可以将自动启动的服务改为需要手动启动，即可以去掉星号。</p><p>按tab可以切换选择框。</p><p><img src="D:\typora图片\image-20230716173557061.png" alt="image-20230716173557061"></p><p>方式2：/etc/init.d 看到service指令管理的服务：ls -l /etc/init.d</p><p><strong>服务的运行级别（runlevel）：</strong></p><p>Linux系统中有7种运行级别（runlevel）：<strong><font color="red">常用的是级别3和5</font></strong></p><p>运行级别0：系统停机状态（一旦启动马上关机），系统默认运行级别不能设为0，否则不能正常启动</p><p>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登录</p><p>运行级别2：多用户状态（没有NFS），不支持网络</p><p>运行级别3：完全的多用户状态（有NFS），无界面，登录后进入控制台命令行模式</p><p>运行级别4：系统未使用，保留</p><p>运行级别5：X11控制台，登录后进入图形GUI模式</p><p>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><p>开机的流程说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开机-&gt;BIOS-&gt;/boot-&gt;systemd进程1-&gt;运行级别-&gt;运行级对应的服务</span><br></pre></td></tr></table></figure><p><strong>CentOS7后运行级别说明</strong></p><p>在/etc/inittab中进行了简化，如下：</p><p>multi-user.target: analogous to runlevel 3</p><p>graphical.target: analogous to runlevel 5</p><p># To view current default target, run:</p><p>systemctl get-default</p><p># To set a default target, run:</p><p>systemctl set-default TARGET.target</p><p><strong>chkconfig指令</strong></p><p>1.通过chkconfig命令可以给服务的各个运行级别设置自启动/关闭</p><p>2.chkconfig指令管理的服务在/etc/init.d查看</p><p>3.注意：Centos7.0后，很多服务使用systemctl管理</p><p>chkconfig基本语法</p><ul><li><p>查看服务chkconfig —list [|grep xxx] (–list可加可不加）</p><p><img src="D:\typora图片\image-20230716175223326.png" alt="image-20230716175223326"></p><p>注意：sysv和systemd都是管理进程启动或关闭的程序，sysv启动服务慢，systemd启动服务快</p></li><li><p>chkconfig 服务名 —list</p></li><li>chkconfig —level 5 服务名 on/off：用这条指令可以设置某一个服务在某一个运行级别是自启动或者关闭自启动</li></ul><p>案例演示：对network 服务 进行各种操作，把network在3这个级别关闭自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 3 network off</span><br><span class="line">chkconfig --level 3 network on</span><br></pre></td></tr></table></figure><p>使用细节<br>chkconfig重新设置服务后自启动或关闭，需要重启机器reboot生效。</p><p><strong>systemctl管理指令</strong></p><p>1.基本语法：systemctl [start | stop | restart | status] 服务名</p><p>2.systemctl指令管理的服务在/usr/lib/systemd/system查看</p><p><strong>systemctl设置服务的自启动状态</strong></p><p>1.systemctl list-unit-files [| grep 服务名] （查看服务开机启动状态，grep可以进行过滤）</p><p>2.systemctl enable 服务名（设置服务开机启动）</p><p>3.systemctl disable 服务名（关闭服务开机启动）</p><p>4.systemctl is-enabled 服务名（查询某个服务是否是自启动的）</p><p><strong>应用案例：</strong></p><p>查看当前防火墙的状况，关闭防火墙和重启防火墙。</p><p>查看防火墙服务开机启动状态：systemctl list-unit-files | grep firewalld（.service可带可不带）</p><p>查看防火墙的状态：systemctl status firewalld</p><p>关闭防火墙：systemctl stop firewalld</p><p>重启防火墙：systemctl start firewalld</p><p>注意：</p><p>1.防火墙的服务名可以通过过滤查看/usr/lib/systemd/system文件来获得</p><p>2.static状态表示该服务与其他服务相关联，不能单独设置该服务的启动状态</p><p>3.与前面的chkconfig —level x 服务名 on/off不同的是，systemctl enable/disable 服务名的指令不需要带level，这是因为centos7.0以后，通过systemctl开启和关闭服务，默认是对级别3和5做操作，都生效。</p><p><strong>细节讨论：</strong></p><p>1.关闭或者启用防火墙后，立即生效。[<code>telnet</code>测试 某个端口即可]</p><p>可以通过<code>netstat -anp | more</code>指令查看网络状态</p><p>测试：telnet 192.168.200.130 111</p><p><img src="D:\typora图片\image-20230716180758053.png" alt="image-20230716180758053"></p><p>无法连接，说明防火墙是启动的，并且没有把111端口打开。</p><p>当关闭防火墙后，再测试连接端口，则可以通过。</p><p>补充：</p><p>防火墙基本原理：可以认为系统在监听端口前面加了一个防火墙，当一个请求来的时候，如果相应端口是放开的，则请求可以通过，否则不通过。防火墙可以理解为筛子，通过预先设置的大小，来过滤掉不符合尺寸的服务。</p><p>开启telnet命令需要：依次点击‘开始’-&gt;“控制面板”-&gt;“程序”-&gt;“在程序和功能”找到并点击“启用或关闭windows功能”进入windows系统功能设置对话框。找到并勾选“Telnet客户端”和“Telnet服务器”</p><p>这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。</p><p>如果希望设置某个服务自启动或关闭永久生效，要使用systemctl [enable|disable] 服务名。</p><p><strong>打开或者关闭指定端口</strong></p><p>在真正的生产环境，往往需要将防火墙打开，但问题来了，如果我们把防火墙打开，那么外部请求数据包就不能跟服务器监听端口通讯。这时，需要打开指定的端口。</p><p><strong>firewall指令</strong></p><p>打开端口：firewall-cmd —permanent —add-port=端口号/协议</p><p>关闭端口：firewall-cmd —permanent —remove-port=端口号/协议</p><p>重新载入，才能生效：firewall-cmd —reload</p><p>查询端口是否开放：firewall-cmd —query-port=端口/协议</p><p>补充：要知道对应端口的协议是什么，可以使用<code>netstat -anp</code>指令查看</p><p><strong>应用案例：</strong></p><p>1.启用防火墙，测试111端口是否能telnet，答案是不行：通过firewall-cmd —query-port=111/tcp可以发现111端口是未开放的 <code>no</code></p><p>2.开放111端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=111/tcp</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --query-port=111/tcp</span><br></pre></td></tr></table></figure><p>3.再次关闭111端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-port=111/tcp</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --query-port=111/tcp</span><br></pre></td></tr></table></figure><p><br></p><h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><p>top与ps命令很相似。它们都用来显示正在执行的进程。top与ps最大的不同之处，在于top指令可以每隔一段时间就更新正在运行的进程。</p><p><strong>基本语法：</strong> top [选项]</p><p><strong>选项说明：</strong></p><p><img src="D:\typora图片\image-20230716182051759.png" alt="image-20230716182051759"></p><p>执行top指令：<br><img src="D:\typora图片\image-20230716182221502.png" alt="image-20230716182221502"></p><p>说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">20：10：57 <span class="comment"># 当前时间</span></span><br><span class="line">4：47      <span class="comment"># 系统执行时间</span></span><br><span class="line">2 <span class="built_in">users</span>     <span class="comment"># 目前在线的用户数</span></span><br><span class="line">load average：0.00, 0.01, 0.05<span class="comment">#负载均衡：这三个值加起来除以3，如果在0.7以上，则负载较大，在0.7以下，则负载还行。</span></span><br><span class="line">Tasks: 185 total,   1 running, 184 sleeping,   0 stopped,   0 zombie <span class="comment"># 任务数，1个正在运行，231个休眠，0个终止，0个僵死</span></span><br><span class="line">%Cpu(s):  1.3 us,  5.1 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st <span class="comment"># us用户占用cpu；sy系统占用cpu；id空闲cpu比例</span></span><br><span class="line">KiB Mem :  2027892 total,   998752 free,   567012 used,   462128 buff/cache <span class="comment"># 共2G内存，大约1G空闲，用了0.5G，缓存占用0.5G</span></span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  1282572 avail Mem <span class="comment"># swap分区，共2G，大约2G空闲，使用0个，可获取的内存1G多</span></span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p>注意：这些单位可以按E或e切换，切换为KB/MB/GB/EB/PB。</p><p><strong>交互操作说明：</strong></p><p><img src="D:\typora图片\image-20230716182820644.png" alt="image-20230716182820644"></p><p><strong>应用实例</strong></p><p>案例1.监控特定用户，比如我们监控tom用户</p><p>top：输入此命令，按回车键，查看执行的进程。</p><p>u：然后输入“u”回车，再输入用户名tom，按回车键，即可</p><p>案例2：终止指定的进程，比如我们要结束tom登录</p><p>top：输入此命令，按回车键，查看执行的进程。</p><p>k：然后输入“k”回车，再输入要结束的进程ID号，按回车。此时一般会提示要输入信号量，输入9表示强制删除。</p><p>案例3：指定系统状态更新的时间（每隔10秒自动更新），默认是3秒：top -d 10</p><p><br></p><h2 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h2><p><strong>查看系统网络情况netstat</strong></p><p>基本语法：netstat [选项]</p><p><strong>选项说明</strong><br>-an 按一定顺序排列输出</p><p>-p 显示哪个进程在调用</p><p><img src="D:\typora图片\image-20230716183702368.png" alt="image-20230716183702368"></p><p>说明：</p><p>proto：网络协议</p><p>Local Address：本地地址（是指linux地址)，如0.0.0.0:22：指有一个程序在本地监听22号端口</p><p>Foreign Address：外部地址</p><p>State：LISTEN表示监听，ESTABLISHED表示连接建立，TIME_WAIT表示超时等待</p><p>补充：<br>（1）0.0.0.0表示本地地址，127.0.0.1也是本地，：：：三个冒号是ipv6的形式显示的本地地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>这两条说明22号端口既可以接受ipv4的地址连接，也可以接受ipv6的地址连接</p><p>（2）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp        0     36 192.168.200.130:22      192.168.200.1:55605     ESTABLISHED</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>这条ESTABLISHED表示连接成功（建立连接）了，其中<code>192.168.200.130</code>是linux的本地地址，与外部地址<code>192.168.200.1</code>的55605端口发生连接</p><p>（3）只要要建立通信，必须要有端口，发送端端口是随机产生的，接收端端口相对是固定的。</p><p>（4）当tcp协议的一方断开连接时，另一方会认为可能是网络临时有问题，所以会等待，直到超时（一般是一分钟或者更久），此时状态是TIME_WAIT。</p><p><strong>应用案例</strong></p><p>请查看服务名为sshd的服务的信息：netstat -anp | grep sshd</p><p><strong>检测主机连接命令ping：</strong></p><p>是一种网络检测工具，它主要是用来检测远程主机是否正常，或是两部主机间的网线或网卡故障。</p><p>如：ping 对方ip地址</p><p><br></p><h1 id="RPM与YUM"><a href="#RPM与YUM" class="headerlink" title="RPM与YUM"></a>RPM与YUM</h1><h2 id="rpm包的管理"><a href="#rpm包的管理" class="headerlink" title="rpm包的管理"></a>rpm包的管理</h2><p>rpm用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成具有.RPM扩展名的文件。RPM是RedHat Package Manager（RedHat软件包管理工具）的缩写，类似windows的setup.exe，这一文件格式名称虽然打上了RedHat的标志，但理念是通用的。</p><p>Linux的分发版本都有采用（suse，redhat，centos等等），可以算是公认的行业标准了。</p><p><strong>rpm包的简单查询指令</strong></p><p>查询已安装的rpm列表 rpm -qa | grep xx</p><p>举例：看看当前系统，是否安装了firefox：rpm -qa | grep firefox</p><p><strong>rpm包名基本格式</strong></p><p>一个rpm包名：<code>firefox-68.10.0-1.el7.centos.x86_64</code></p><p>名称：firefox</p><p>版本号：68.10.0-1</p><p>适用操作系统：el7.centos.x86_64表示centos7.x的64位系统，如果是i686、i386表示32位系统，noarch表示通用</p><p><strong>rpm包的其他查询指令：</strong></p><p>rpm - qa：查询所安装的所有rpm软件包（query all）</p><p>rpm -q 软件包名：查询指定软件包是否安装</p><p>案例：rpm -q firefox</p><p>rpm -qi 软件包名：查询软件包信息</p><p>案例：rpm -qi firefox</p><p>rpm -ql 软件包名：查询软件包中的文件</p><p>比如：rpm -ql firefox</p><p>rpm -qf 文件全路径名 查询文件所属的软件包</p><p>rpm -qf /etc/passwd</p><p><strong>卸载rpm包：</strong></p><p>基本语法</p><p>rpm -e RPM包的名称（e表示单词erase）</p><p>应用案例</p><p>删除firefox 软件包：rpm -e firefox</p><p>细节讨论</p><p>1.如果其他软件包依赖于您要卸载的软件包，卸载时则会产生错误信息。<br>如：</p><p>$ rpm -e foo<br>removing these packages would break dependencies: foo is needed by bar-1.0-1<br>2.如果我们就是要删除foo这个rpm包，可以增加参数–nodeps，就可以强制删除，但是一般不推荐这样做，因为依赖于该软件包的程序可能无法运行<br>如：$ rpm -e —nodeps foo</p><p><strong>安装rpm包</strong></p><p>基本语法</p><p>rpm -ivh RPM包全路径名称</p><p>参数说明</p><p>i=install 安装</p><p>v=verbose提示</p><p>h=hash进度条</p><p>应用实例</p><p>演示卸载和安装firefox浏览器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -e firefox <span class="comment"># 卸载firefox浏览器</span></span><br><span class="line">rpm -ivh /opt/firefox-68.10.0-1.el7.centos.x86_64.rpm <span class="comment"># 先将安装包放在/opt目录下</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><p>Yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p><p><strong>yum的基本指令</strong></p><p>查询yum服务器是否有需要安装的软件</p><p>yum list | grep xx软件列表</p><p><strong>安装指定的yum包</strong></p><p>yum install xxx 下载安装</p><p><strong>yum应用实例：</strong></p><p>案例：请使用yum的方式来安装firefox</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -e firefox <span class="comment"># 先卸载firefox</span></span><br><span class="line">yum list | grep firefox <span class="comment"># 如果有多个版本，都会显示出来</span></span><br><span class="line">yum install firefox</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习01</title>
      <link href="/post/Linux01/"/>
      <url>/post/Linux01/</url>
      
        <content type="html"><![CDATA[<p>Linux是一个强大、灵活且广泛使用的操作系统内核，它为用户提供了稳定性、安全性和自由度，成为了许多领域的首选操作系统。</p><h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li>linux的文件系统是采用级层式的树状目录机构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的目录。</li><li>深刻理解linux树状文件目录是非常重要的。(框架需要背)</li><li>记住一句经典的话：<strong>在Linux世界里，一切皆文件</strong>。(linux会将硬件映射成文件来进行管理)</li></ol><p><br></p><h2 id="具体的目录结构"><a href="#具体的目录结构" class="headerlink" title="具体的目录结构"></a>具体的目录结构</h2><ul><li>/bin [常用] (/usr/bin、/usr/local/bin)：<br>是Binary的缩写，这个目录存放着最经常使用的指令，如cd指令。</li><li>/sbin (/usr/sbin、/usr/local/sbin)：<br>s是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li>/home [常用]：<br>存放普通用户的根目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名。可以在终端用下面命令创建和删除linux用户：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd jack <span class="comment"># 创建名为jack的用户，同时在/home目录下会创建jack目录</span></span><br><span class="line">userdel -r jack <span class="comment"># 移除jack用户，同时在/home目录下会移除jack目录</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><ul><li>/root [常用]：<br>该目录为系统管理员，也称作超级权限者的用户主目录</li><li>/lib：系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</li><li>/lost+found这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件(lost+found目录一般是隐藏的，通过在终端，在根目录输入ls可以查看到)</li><li>/etc [常用]：所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库，则数据库的配置文件会默认放在etc下面。当然etc也有系统的一些配置文件。</li><li>/usr [常用]: 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录(windows下安装的程序默认的目录)。</li><li>/boot [常用]：存放的是启动Linux时的一些核心文件，包括一些连接文件以及镜像文件。</li><li>/proc [不能动]：这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。</li><li>/srv [不能动]: service缩写，该目录存放一些服务启动之后需要提取的数据。</li><li>/sys [不能动]: 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs。</li><li>/tmp: 这个目录是用来存放一些临时文件的。</li><li>/dev：类似于windows的设备管理器，把所有的硬件用文件的形式存储，如cpu，硬盘等</li><li>/media [常用]：linux系统会自动识别一些设备，如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li>/mnt [常用]：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里面的内容了。如共享文件夹。</li><li>/opt：这是给主机额外安装软件所存放的目录。如安装ORACLE数据库就可以放到该目录下。默认为空。</li><li>/usr/local [常用]：这是另一个给主机额外安装软件安装的目录。(软件安装好存放的目录)一般是通过编译源码方式安装的程序。</li><li>/var [常用]：这个目录中存放着不断扩充着的东西，习惯将经常被修改的目录放在该目录下。包括各种日志文件。</li><li>/selinux [security-enhanced linux]: SELinux是一种安全子系统，它能控制程序只访问呢特定文件，有三种工作模式，可自行设置。</li></ul><p><br></p><h1 id="远程登录到Linux服务器"><a href="#远程登录到Linux服务器" class="headerlink" title="远程登录到Linux服务器"></a>远程登录到Linux服务器</h1><h2 id="远程登陆Linux-Xshell7"><a href="#远程登陆Linux-Xshell7" class="headerlink" title="远程登陆Linux-Xshell7"></a>远程登陆Linux-Xshell7</h2><ol><li>Xshell是目前最好的远程登录到Linux操作系统的软件，流畅的速度并且完美解决了中文乱码的问题，是目前程序员首选的软件。</li><li>Xshell是一个强大的安全终端模拟软件，它支持SSH1，SSH2，以及Microsoft Windows平台的TELNET协议。</li><li>Xshell可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。</li></ol><p>xshell7的下载地址：<a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a></p><p><br></p><h2 id="远程上传下载文件-Xftp7"><a href="#远程上传下载文件-Xftp7" class="headerlink" title="远程上传下载文件-Xftp7"></a>远程上传下载文件-Xftp7</h2><p>Xftp7是一个基于windows平台的功能强大的SFTP、FTP文件传输软件。使用Xftp以后，windows用户能安全地在UNIX/Linux的和Windows PC之间传输文件。</p><p>如何处理Xftp中文乱码问题？<br>答：点击文件-当前会话属性-选项，在编码方式中选择UTF-8则可以处理乱码问题。</p><p><br></p><h1 id="Vi和Vim编辑器"><a href="#Vi和Vim编辑器" class="headerlink" title="Vi和Vim编辑器"></a>Vi和Vim编辑器</h1><p>Linux系统会内置vi文本编辑器。</p><p>Vim具有程序编程的能力，可以看作是Vi的增强版本，可以主动地以字体颜色辨别语法的正确性，方便程序设计。代码补全、编译及错误跳转等方便编程的功能特别丰富，再程序员中被广泛使用。</p><h2 id="vi和vim常用的三种模式"><a href="#vi和vim常用的三种模式" class="headerlink" title="vi和vim常用的三种模式"></a>vi和vim常用的三种模式</h2><p><strong>正常模式：</strong></p><p>以vim打开一个档案就直接进入一般模式(默认模式)。在这个模式中，你可以使用[上下左右]按键来移动光标，你可以使用[删除字符]或[删除整行]来处理档案内容，也可以使用[复制、粘贴]来处理你的文件数据。</p><p><strong>插入模式：</strong></p><p>按下i，I，o，O，a，A，r，R等任何一个字母之后才会进入编辑模式，一般来说按i即可。</p><p><strong>命令行模式：</strong></p><p>先输入esc，再输入冒号”:”或“/”，就能切换到命令行模式。在这个模式中，可以提供你相关指令，完成读取、写入(w)、替换、离开vim(q)、显示行号、写入并退出(wq)等动作。</p><p><strong>各种模式的相互切换</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307121822288.png" alt="image-20230712101906055"></p><p><br></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ol><li>拷贝当前行：在一般模式下输入yy ；拷贝当前行向下的5行：在一般模式下输入5yy ；并粘贴(输入p)</li><li>删除当前行：在一般模式下输入dd ；删除当前行向下的5行：在一般模式下输入5dd</li><li>在文件中查找某个单词：在命令行模式下输入“/单词”，回车就会对单词进行查找，输入n就是查找下一个</li><li>设置文件的行号，取消文件的行号：在命令行模式下，输入“:set nu”和“:set nonu”</li><li>编辑/etc/profile文件，在一般模式下，使用快捷键到该文档的最末行[G]和最首行[gg]</li><li>在一个文件中输入“hello”，然后又撤销这个动作：在一般模式下，输入“u”</li><li>编辑/etc/profile文件，并将光标移动到20行：在一般模式下，输入“20“再输入”shift+g”</li></ol><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307121822290.gif" alt="vi-vim-cheat-sheet-sch1"></p><p><br></p><h1 id="开机、重启和用户登录注销"><a href="#开机、重启和用户登录注销" class="headerlink" title="开机、重启和用户登录注销"></a>开机、重启和用户登录注销</h1><h2 id="关机-amp-重启命令"><a href="#关机-amp-重启命令" class="headerlink" title="关机&amp;重启命令"></a>关机&amp;重启命令</h2><ul><li>shutdown -h now ： 立刻进行关机</li><li>shutdown -h 1 “hello, 1分钟后会关机了” ：在终端提示“hello，1分钟后会关机了”，并且在1分钟后关机</li><li>shutdown -r now ： 现在重新启动计算机</li><li>halt ：关机，作用和上面一样</li><li>reboot ：现在重新启动计算机</li><li>sync ：把内存的数据同步到磁盘</li></ul><p>注意：</p><p>1.不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</p><p>2.目前的shutdown/reboot/halt等命令均已经在关机前进行了sync</p><p><br></p><h2 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h2><p>1.登录时尽量少用root账号登录，因为它是系统管理员，最大的权限，要避免使用它导致误操作。可以利用普通用户登录，然后登陆后再用‘su - 用户名’命令来切换成系统管理员身份。</p><p>2.在提示符下输入logout即可注销用户</p><p>3.logout注销指令在图形运行级别（如终端）无效，在运行级别3（如xshell登录）下有效</p><p><br></p><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p><strong>基本语法</strong></p><p>useradd 用户名</p><p><strong>应用案例</strong></p><p>案例1：添加一个用户milan，默认该用户的家目录在/home/milan(登录该用户后会默认切换到其家目录)</p><p><strong>说明</strong></p><p>1.当创建用户成功后，会自动创建和用户同名的家目录</p><p>2.也可以通过useradd -d 指定目录 新的用户名，给新创建的用户指定家目录</p><p><br></p><h2 id="指定-修改密码"><a href="#指定-修改密码" class="headerlink" title="指定/修改密码"></a>指定/修改密码</h2><p><strong>基本语法</strong></p><p>passwd 用户名</p><p>注意：如果不写用户名，则只会给当前用户修改密码</p><p><strong>应用案例</strong></p><p>给milan 指定密码：passwd milan</p><p>pwd命令（print working directory）：显示当前所在的工作目录</p><p><br></p><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p><strong>基本语法</strong></p><p>userdel 用户名</p><p><strong>应用案例</strong></p><p>1.删除用户milna，但是要保留家目录：userdel milan</p><p>2.删除用户以及用户家目录，比如tom：userdel -r tom</p><p><br></p><h2 id="查询用户信息指令"><a href="#查询用户信息指令" class="headerlink" title="查询用户信息指令"></a>查询用户信息指令</h2><p><strong>基本语法</strong></p><p>id 用户名</p><p><strong>细节说明</strong></p><p>当用户不存在时，返回无此用户</p><p><br></p><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><p>在操作LInux中，如果当前用户的权限不够，可以通过su - 指令，切换到高权限用户，比如root</p><p><strong>基本语法</strong></p><p>su - 切换用户名</p><p>或su 切换用户名</p><p>注意：su root，只是临时切换到root用户，切换后环境变量不变，取得root的部分权限，不能使用root在path中的独有命令；su - root切换后环境变量改变，几乎可以不受限制做任何事</p><p><strong>细节说明</strong></p><p>1.从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p><p>2.当需要返回到原来用户时，使用exit/logout指令</p><p>3.也可以使用“su 切换用户名”来切换用户，但这样登录不是通过shell登录，不能通过logout注销，只能通过exit退出登录</p><p><br></p><h2 id="查看当前用户-登录用户"><a href="#查看当前用户-登录用户" class="headerlink" title="查看当前用户/登录用户"></a>查看当前用户/登录用户</h2><p><strong>基本语法</strong></p><p>whoami/ who am i</p><p>注意：</p><p>1.whoami只显示当前使用的身份(切换后身份会变)，显示的信息少，只显示用户名</p><p>2.who am i显示的是最初登录的身份，无论后面切换了多少次用户都一样，显示的信息多，还会显示登录时间</p><p><br></p><h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><p>类似于角色，系统可以对有共性（权限）的多个用户进行统一的管理</p><p><strong>新增组</strong></p><p>指令：groupadd 组名</p><p><strong>删除组</strong></p><p>指令（基本语法）：groupdel 组名</p><p><strong>增加用户时直接加上组</strong></p><p>指令（基本语法）：useradd -g 用户组 用户名</p><ul><li>案例演示<br>增加一个用户 zwj， 直接将他指定到wudang<br>（前面我们使用useradd 用户名 新增用户时，没有分配组，系统会默认分配该用户到用户名同名的组中去）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd wudang</span><br><span class="line">useradd -g wudang zwj</span><br></pre></td></tr></table></figure><p><strong>修改用户的组</strong></p><p>指令（基本语法）：usermod -g 用户组 用户名</p><ul><li>案例演示<br>创建一个组 mojiao<br>把zwj放入到mojiao</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd mojiao</span><br><span class="line">usermod -g mojiao zwj</span><br></pre></td></tr></table></figure><p><br></p><h2 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h2><p><strong>/etc/passwd文件</strong></p><p>用户（user）的配置文件，记录用户的各种信息</p><p>每行的含义：用户名：口令：用户标识号（uid）：组标识号（gid）：注释性描述：主目录（家目录）：登录Shell</p><p>cd指令，linux内核无法识别，要通过shell翻译解释，而shell的种类很多，有bash，tcsh，csh等等</p><p><strong>/etc/shadow文件</strong></p><p>口令的配置文件</p><p>每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</p><p>注意：</p><p>1.每次输入的口令，会在shadow文件中验证</p><p>2.最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志都是用一种特殊的标识表示的</p><p><strong>/etc/group文件</strong></p><p>组（group）的配置文件，记录Linux包含的组的信息</p><p>每行含义：组名：口令：组标识号：组内用户列表</p><p>注意：组内用户列表看不到，它隐藏了</p><p><br></p><h1 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h1><h2 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h2><p>基本级别说明：</p><p>0：关机</p><p>1：单用户【找回丢失密码】</p><p>2：多用户状态没有网络服务（用的很少）</p><p>3：多用户状态有网络服务（用的最多的，不带图形界面，节省资源；支持多用户且有网络服务-在实际生产环境中使用最多）</p><p>4：系统未使用保留给用户（用的比较少）</p><p>5：图形界面（启动后默认进入的级别，是多用户的）</p><p>6：系统重启</p><p>常用运行级别是3和5，也可以指定默认运行级别，后面演示</p><p><strong>应用实例</strong></p><p>命令：init [0123456]</p><p>应用案例：通过init来切换不同的运行级别，比如修改级别为3：则命令为init 3</p><p><br></p><p><strong>CentOS7运行级别说明</strong></p><p>在centos7以前，我们是在/etc/inittab文件中进行修改，它里面有个数字。</p><p>到了centos7，进行了简化，在/etc/inittab文件中有如下：</p><p>multi-user.target：analogous to runlevel 3 (多用户，等价于级别3)</p><p>graphical.target：analogous to runlevel 5 (图形化，等价于级别5)</p><p><code>#</code> To view current default target, run:（以下指令可以查看当前运行级别）<br>systemctl get-default</p><p><code>#</code> To set a default target, run:（以下指令可以设置默认运行级别）<br>systemctl set-default TARGET.target</p><p><br></p><h2 id="找回root密码"><a href="#找回root密码" class="headerlink" title="找回root密码"></a>找回root密码</h2><p>注意：不同版本找回密码的方式可能有一些小区别</p><p>1.首先，启动系统，进入开机界面，在界面中按”e“进入编辑界面。</p><p>2.进入编辑界面，使用键盘的上下键将光标往下移动，找到以”Linux16“开头内容所在的行数，在行的最后面输入：init=/bin/sh。</p><p>3.接着，输入完成后，直接按快捷键：Ctrl+x进入单用户模式。</p><p>4.接着，在光标闪烁的位置中输入：mount -o remount,rw / （注意：各个单词间有空格），完成后按键盘的回车键.</p><p>5.在新的一行最后面输入：passwd，完成后按键盘的回车键(Enter)。输入密码，然后再次确认密码即可（密码长度最好是8位以上，但不是必须的），密码修改成功后，会显示passwd。。。的样式，说明密码修改成功。</p><p>6.接着，在光标闪烁的位置中(最后一行中)输入：touch /.autorelabel（注意：touch与 /之间有一个空格），完成后按键盘的回车键（Enter）。</p><p>7.继续在光标闪烁的位置中，输入：exec /sbin/init（注意： exec与 /之间有一个空格），完成后按键盘的回车键（Enter），等待系统自动修改密码（这个过程时间可能有点长，耐心等待)，完成后，系统会自动重启，新的密码生效了。</p><p><br></p><h2 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h2><p><strong>man获取帮助信息</strong></p><p>基本语法：man[命令或配置文件] （功能描述：获取帮助信息）</p><p>查看ls命令的帮助信息：man ls</p><p>注意：</p><p>1.如果帮助信息太长，没有显示完全，那么按空格键，会继续往下显示。</p><p>2.ls中常用的选项-a：列出所有文件，包括以”.“开头的隐含文件（在linux中，隐含文件是以”.“开头的，a代表all）。-l：单行输出。</p><p>3.按h寻求man指令的帮助，按q退出man指令。</p><p>4.选项可以组合使用，如-la（顺序无所谓，也可以是-al），则表示单行输出，且包含所有隐藏文件，如 ls -al /root</p><p>5.ls -al默认是查看当前目录的，如果要查看root目录下的文件，则可以用ls -al /root</p><p><strong>help指令</strong></p><p>基本语法：help命令（功能描述：获得shell内置命令的帮助信息）</p><p>注意：</p><p>help命令只能显示shell内置命令的帮助信息，而linux系统中绝大多数命令是外部命令。而通过man命令查看其它命令的详细文档。没有内建与外部命令的区分，因为 man 工具是显示系统手册页中的内容，man 得到的内容比 help 更多更详细。</p><p>查看shell内置的cd命令的帮助信息: help cd</p><p><br></p><h2 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h2><p><strong>pwd指令</strong></p><p>基本语法：pwd （功能描述：显示当前工作目录的绝对路径）</p><p><strong>ls指令</strong></p><p>基本语法：ls [选项] [目录或是文件]</p><p>常用选项</p><p>-a：显示当前目录所有的文件和目录，包括隐藏的</p><p>-l：以列表的方式显示信息</p><p><strong>cd指令</strong></p><p>基本语法：cd[参数] (功能描述：切换到指定目录)</p><p><strong>mkdir指令(make directory)</strong></p><p>mkdier指令用于创建目录</p><p>基本语法：mkdir [选项] 要创建的目录</p><p>常用选项</p><p>-p：创建多级目录</p><p>创建一个目录/home/dog：mkdir /home/dog</p><p>创建多级目录/home/animal/tiger：mkdir -p /home/animal/tiger</p><p><strong>rmdir指令</strong></p><p>rmdir指令删除空目录</p><p>基本语法：rmdir [选项] 要删除的空目录</p><p>使用细节</p><p>rmdir 删除的是空目录，如果目录下有内容时无法删除的。</p><p>提示：如果需要删除非空目录，需要使用 ’rm -rf 要删除的目录‘（-rf表示强制递归）</p><p>比如：rm -rf /home/animal</p><p>注意：</p><p>1.使用rm -rf进行删除时，要非常谨慎。</p><p>2.rm指令单独只能删除文件，加上参数-r可以删除包含文件的文件夹。但是在删除前shell会询问。</p><p><strong>touch指令</strong></p><p>touch指令创建空文件</p><p>基本语法：touch 文件名称</p><p>在/home目录下，创建一个空文件 hello.txt：touch hello.txt</p><p><strong>cp指令</strong></p><p>cp指令拷贝文件到指定目录</p><p>基本语法：cp [选项] source dest</p><p>常用选项</p><p>-r：递归复制整个文件夹</p><p>案例1：将/home/hello.txt拷贝到/home/bbb目录下：在/home目录下，cp hello.txt bbb</p><p>案例2：递归复制整个文件夹，比如将/home/bbb整个目录，拷贝到/opt：cp -r /home/bbb /opt（这样拷贝是将整个目录，包括目录bbb本身，都拷贝到/opt下的）</p><p>使用细节</p><p>强制覆盖不提示的方法：\cp：如上面的指令如果要强制覆盖，则为\cp -r /home/bbb /opt</p><p><strong>rm指令</strong></p><p>说明：rm指令移除文件或目录</p><p>基本语法：rm [选项] 要删除的文件或目录</p><p>常用选项</p><p>-r：递归删除整个文件夹</p><p>-f：强制删除不提示</p><p>案例1：将/home/hello.txt删除：rm /home/hello.txt ，在提示中选择y</p><p>案例2：递归删除整个目录 /home/bbb：rm -r /home/bbb（删除整个目录，但每删其中的一个文件都会提示）</p><p>使用细节：</p><p>强制删除不提示的方法：带上-f参数即可</p><p><strong>mv指令</strong></p><p>mv移动文件与目录或重命名</p><p>基本语法</p><p>mv oldNameFile newNameFile （功能描述：重命名）</p><p>mv /temp/movefile /targetFolder（功能描述：移动文件）</p><p>注意：</p><p>1.重命名是在同一个目录下</p><p>2.移动是在不同的目录下</p><p>案例1：将/home/cat.txt文件重新命名为pig.txt：在/home目录下，mv cat.txt pig.txt</p><p>案例2：将/home/pig.txt文件移动到/root目录下：在home目录下，mv cat.txt /root</p><p>案例3：移动整个目录，比如将/opt/bbb移动到/home下，并重命名为uuu：mv /opt/bbb /home/uuu（/home目录下本来没有/uuu目录）</p><p>注意：</p><p>对案例3，如果/home目录下本来有/uuu目录，则mv /opt/bbb /home/uuu命令会把/bbb目录移到/home/uuu目录下</p><p><strong>cat指令</strong></p><p>cat查看文件内容（与vim的区别是，cat只能查看，不能修改，更安全）</p><p>基本语法：cat [选项] 要查看的文件</p><p>常用选项<br>-n：显示行号</p><p>案例1：/etc/profile 文件内容，并显示行号：cat -n /etc/profile</p><p>使用细节</p><p>cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令：| more</p><p>补充：管道命令有点类似于，将前面的结果，再交给下一个指令进行处理，管道命令就是一个竖杠，再带一个其他命令</p><p><strong>more指令</strong></p><p>more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键（交互的指令），详见操作说明</p><p>基本语法：more要查看的文件</p><p>操作说明，如图</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307121822291.png" alt="image-20230712160719325"></p><p><strong>less指令</strong></p><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><p>基本语法：less 要查看的文件</p><p>操作说明</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307121822292.png" alt="image-20230712161125766"></p><p><strong>echo指令</strong></p><p>echo输出内容到控制台</p><p>基本语法：echo [选项] [输出内容]</p><p>案例1：使用echo指令输出环境变量，比如输出环境变量$PATH：echo $PATH ；输出主机名$HOSTNAME: echo $HOSTNAME</p><p>案例2：使用echo指令输出hello,world！：echo “hello，world~“（引号可加可不加）</p><p><strong>head指令</strong></p><p>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容</p><p>基本语法</p><p>head 文件（功能描述：查看文件头10行内容）</p><p>head -n 5 文件 （功能描述：查看文件头5行内容，5可以是任意行数）</p><p>案例：查看/etc/profile的前面5行代码：head -n 5 /etc/profile（去掉-n 5，默认看前10行）</p><p>注意：空行也算一行</p><p><strong>tail指令</strong></p><p>tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的前10行内容。</p><p>基本语法</p><p>1.tail 文件 (功能描述：查看文件尾10行内容）</p><p>2.tail -n 5 文件 （功能描述：查看文件尾5行内容，5可以是任意行数)</p><p>3.tail -f 文件 （功能描述：实时追踪该文档的所有更新）</p><p>案例1：查看/etc/profile最后5行的代码：tail -n 5 /etc/profile</p><p>案例2：实时监控mydate.txt，看看当该文件有变化时，是否看到，实时追加hello,world</p><p><strong>&gt;指令和&gt;&gt;指令</strong></p><p>>输出重定向和&gt;&gt;追加</p><p>基本语法</p><p>1.ls -l &gt;文件 （功能描述：列表的内容写入文件a.txt中（覆盖写））</p><p>2.ls -al &gt;&gt;文件 （功能描述：列表的内容追加到文件aa.txt的末尾）</p><p>3.cat 文件1&gt;文件2 （功能描述：将文件1的内容覆盖到文件2的内容）</p><p>4.echo ’内容‘ &gt;&gt; 文件 （功能描述：将内容追加到文件中）</p><p>案例1：将/home目录下的文件列表写入/home/info.txt中，覆盖写入：ls -l /home &gt; /home/info.txt（如果没有info.txt，则会创建）</p><p>案例2：将当前日历信息追加到/home/mycal文件中：cal &gt;&gt; /home/mycal </p><p><strong>ln指令</strong></p><p>软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径</p><p>基本语法：ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）</p><p>案例1：在/home目录下创建一个软链接myroot，连接到/root目录：ln -s /root /home/myroot</p><p>案例2：删除软连接myroot：rm /home/myroot（会提示是否删除符号链接）</p><p>注意：</p><p>如果rm /home/myroot/，会提示无法删除/home/myroot/，是一个目录</p><p>细节说明</p><p>当我们使用pwd指令查看目录时，仍然看到的是软链接所在目录</p><p><strong>history指令</strong></p><p>查看已经执行过的历史指令，也可以执行历史指令</p><p>基本语法：history（功能描述：查看已经执行过的历史命令）</p><p>案例1：显示所有的历史命令：history</p><p>案例2：显示最近使用过的10个指令：history 10</p><p>案例3：执行历史编号为5的指令：!5 （可以输入负数，表示倒数的指令）</p><p><br></p><h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><p><strong>date指令-显示当前日期</strong></p><p>基本语法</p><p>1.date （功能描述：显示当前时间）</p><p>2.date “+%Y” （功能描述：显示当前年份）</p><p>3.date “+%m” （功能描述：显示当前月份）</p><p>4.date “+%d”（功能描述：显示当前是哪一天）</p><p>5.date “+%Y-%m-%d %H:%M:%S”（功能描述：显示年月日时分秒）</p><p>案例1：显示当前时间信息：date （2023年 01月 06日 星期五 09:58:54 CST）</p><p>案例2：显示当前时间年月日：date “+%Y-%m-%d”</p><p>案例3：显示当前时间年月日时分秒：date “+%Y-%m-%d %H:%M:%S”</p><p><strong>date指令-设置日期</strong></p><p>基本语法：date -s 字符串时间</p><p>案例1：设置系统当前时间，比如设置成2021-11-11 11:22:22：date -s “2021-11-11 11:22:22”</p><p><strong>cal指令</strong></p><p>查看日历指令</p><p>基本语法：cal [选项] （功能描述：不加选项，显示本月日历）</p><p>案例1：显示当前日历：cal</p><p>案例2：显示2020年日历：cal 2020</p><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><p><strong>find指令</strong></p><p>find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p><p>基本语法：find [搜索范围] [选项]</p><p>选项说明<br>-name &lt;查询方式&gt;         按照指定的文件名查找模式查找文件</p><p>-user &lt;用户名&gt;               查找属于指定用户名所有文件</p><p>-size &lt;文件大小&gt;            按照指定的文件大小查找文件</p><p>案例1：按文件名：根据名称查找/home目录下的hello.txt文件：find /home -name hello.txt(没找到就没有信息)</p><p>案例2：按拥有者：查找/opt目录下，用户名称为nobody的文件：find /opt -user nobody</p><p>案例3：查找整个linux系统下大于200M的文件（+n大于 -n小于 n等于，单位有k,M,G)：find / -size +200M</p><p>补充：ls -lh，h表示人可以看清楚的形式展示，此时显示的文件大小会自动转化为人可以看明白的xx M</p><p><strong>locate指令</strong></p><p>locate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</p><p>基本语法：locate 搜索文件</p><p>由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库</p><p>案例1：请使用locate指令快速定位hello.txt文件所在目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">updatedb</span><br><span class="line">locate hello.txt</span><br></pre></td></tr></table></figure><p>which指令，可以查看某个指令在哪个目录下，比如ls指令在哪个目录：which ls</p><p><strong>指令和管道符号|</strong></p><p>grep过滤查找，管道符，“|”，表示将前一个命令的处理结果传递给后面的命令处理</p><p>基本语法：grep [选项] 查找内容 源文件</p><p>常用选项</p><p>-n                显示匹配行及行号</p><p>-i                  忽略字母大小写</p><p>案例1：请在hello.txt文件中，查找’yes‘所在行，并显示行号</p><p>方法1：cat /home/hello.txt | grep -n ’yes‘</p><p>方法2：grep -n ’yes‘ /home/hello.txt</p><p><br></p><h2 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h2><p><strong>gzip/gunzip指令</strong></p><p>gzip用于压缩文件，gunzip用于解压的</p><p>基本语法</p><p>gzip文件 （功能描述：压缩文件，只能将文件压缩为*.gz文件）</p><p>gunzip文件.gz （功能描述：解压缩文件命令）</p><p>案例1：gzip压缩，将/home下的hello.txt文件进行压缩：gzip /home/hello.txt</p><p>案例2：gunzip压缩，将/home下的hello.txt.gz文件进行解压缩：gunzip /home/hello.txt.gz</p><p><strong>zip/unzip指令</strong></p><p>zip用于压缩文件（或目录），unzip用于解压的，这个在项目打包发布中很有用的</p><p>基本语法</p><p>zip [选项] xxx.zip 将要压缩的内容（功能描述：压缩文件和目录的命令）</p><p>unzip [选项] xxx.zip （功能描述：解压缩文件）</p><p>zip常用选项</p><p>-r：递归压缩，即压缩目录</p><p>unzip的常用选项</p><p>-d&lt;目录&gt;：指定解压后文件的存放目录</p><p>案例1：将/home下的所有文件进行压缩成myhome.zip：zip -r myhome.zip /home(将home目录及其包含的文件和子文件夹都压缩）</p><p>案例2：将myhome.zip解压到/opt/tmp目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/tmp</span><br><span class="line">unzip -d /opt/tmp /home/myhome.zip</span><br></pre></td></tr></table></figure><p><strong>tar指令</strong></p><p>tar指令是打包指令，最后打包后的文件是.tar.gz的文件</p><p>基本语法</p><p>tar [选项] xxx.tar.gz 打包的内容 （功能描述：打包目录，压缩后的文件格式.tar.gz）<br>选项说明</p><div class="table-container"><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr></tbody></table></div><p>案例1：压缩多个文件，将/home/pig.txt和/home/cat.txt压缩成pc.tar.gz：</p><p>tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt<br>(压缩时候在绝对路径下压缩，会把/home目录也压缩进去，在相对路径下压缩则不会这样）</p><p>案例2：将/home的文件夹压缩成myhome.tar.gz:</p><p>tar -zcvf myhome.tar.gz /home</p><p>案例3：将pc.tar.gz解压到当前目录tar -zxvf pc.tar.gz</p><p>案例4：将myhome.tar.gz解压到/opt/tmp2目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/tmp2</span><br><span class="line">tar -zxvf /home/myhome.tar.gz -C /opt/tmp2</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.-C 目标目录表示指定目标目录</p><p>2.任何压缩方法，被压缩文件路径最好使用相对路径，否则会自动压缩绝对路径多创文件夹</p><p>补充：打包解包是针对.tar文件而言的，.tar文件就是将多个文件合并成一个单文件，解压和压缩是针对.gz文件而言，-c是打包成.tar文件，-x是把.tar包解开，-z会根据带的x还是c来决定解压还是压缩</p><p>[目录或是文件]: </p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3前端框架</title>
      <link href="/post/Vue3/"/>
      <url>/post/Vue3/</url>
      
        <content type="html"><![CDATA[<p>技术选型</p><ul><li>Vue <ul><li><strong>选项式 API</strong> 还是 <strong>组合式 API</strong>✔️</li><li><strong>HTML</strong> 还是 <strong>单文件组件</strong>✔️</li></ul></li><li>语法<ul><li><strong>javascript</strong> 还是 <strong>typescript</strong>✔️</li></ul></li><li>构建工具<ul><li><strong>@vue/cli</strong> 还是 <strong>vite</strong>✔️</li></ul></li><li>路由<ul><li><strong>vue-router</strong>✔️</li></ul></li><li>共享存储<ul><li><strong>vuex</strong> 还是 <strong>pinia</strong>✔️</li></ul></li><li>视图组件<ul><li><strong>ElementUI</strong> 还是 <strong>Antdv</strong>✔️</li></ul></li></ul><p><br></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>采用 vite 作为前端项目的打包，构建工具</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure><p>按提示操作</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目目录</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><br></p><h2 id="编码-IDE"><a href="#编码-IDE" class="headerlink" title="编码 IDE"></a>编码 IDE</h2><p>推荐采用微软的 VSCode 作为开发工具，到它的官网 <a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a> 下载安装即可</p><p>要对 *.vue 做语法支持，还要安装一个 Volar 插件</p><p><br></p><h2 id="安装-devtools"><a href="#安装-devtools" class="headerlink" title="安装 devtools"></a>安装 devtools</h2><ul><li>devtools 插件网址：<a href="https://devtools.vuejs.org/guide/installation.html">https://devtools.vuejs.org/guide/installation.html</a></li></ul><p><br></p><h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><p>打开项目根目录下 vite.config.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>文档地址：<a href="https://vitejs.cn/config/#server-port">配置 Vite | Vite中文网 (vitejs.cn)</a></li></ul><p><br></p><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理，同样是修改项目根目录下 vite.config.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">index.html</span><br><span class="line">package.json</span><br><span class="line">tsconfig.json</span><br><span class="line">vite.config.ts</span><br><span class="line">├─public</span><br><span class="line">└─src</span><br><span class="line">    ├─assets</span><br><span class="line">    ├─components</span><br><span class="line">    ├─model</span><br><span class="line">    ├─router</span><br><span class="line">    ├─store</span><br><span class="line">    └─views</span><br></pre></td></tr></table></figure><ul><li>index.html 为主页面</li><li>package.json npm 配置文件</li><li>tsconfig.json typescript 配置文件</li><li>vite.config.ts vite 配置文件</li><li>public 静态资源</li><li>src/components 可重用组件</li><li>src/model 模型定义</li><li>src/router 路由</li><li>src/store 共享存储</li><li>src/views 视图组件</li></ul><p><br></p><h1 id="Vue-组件"><a href="#Vue-组件" class="headerlink" title="Vue 组件"></a>Vue 组件</h1><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>script 代码部分，控制模板的数据来源和行为</li><li>template 模板部分，由它生成 html 代码</li><li>style 样式部分，一般不咋关心</li></ul><p>根组件是 src/App.vue，先来个 Hello,world 例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">let msg = ref(&quot;hello&quot;); // 把数据变成响应式的</span><br><span class="line"></span><br><span class="line">function change() &#123;</span><br><span class="line">  msg.value = &quot;world&quot;;</span><br><span class="line">  console.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;修改msg&quot; @click=&quot;change&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li> 用来把一个变量绑定到页面上某个位置</li><li>绑定的变量必须用 ref 函数来封装<ul><li>ref 返回的是【响应式】数据，即数据一旦变化，页面展示也跟着变化</li></ul></li></ul><p><br></p><h2 id="main-ts"><a href="#main-ts" class="headerlink" title="main.ts"></a>main.ts</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">  .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>createApp 是创建一个 Vue 应用程序，它接收的参数 App 即之前我们看到的根组件</li><li>mount 就是把根组件生成的 html 代码片段【挂载】到 index.html 中 id 为 app 的 html 元素上</li></ul><p>可以修改自己的组件文件，挂载到主页面</p><p>新建 src/views/E0.vue，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const msg = ref(&#x27;Hello, World!!&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>修改 main.ts 将自己的组件文件挂载</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="comment">// import App from &#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">E0</span> <span class="keyword">from</span> <span class="string">&#x27;./views/E0.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="variable constant_">E0</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="ref-与-reactive"><a href="#ref-与-reactive" class="headerlink" title="ref 与 reactive"></a>ref 与 reactive</h2><p>vue 提供了两个函数，都可以将数据变为【响应式】的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">const msg = ref(&#x27;Hello, World&#x27;)</span><br><span class="line">const user = reactive(&#123; name: &#x27;张三&#x27; &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;user.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>ref 能将任意类型的数据变为【响应式】的</li><li>reactive 只能将对象类型变为【响应式】，对基本类型无效（例如 string，number，boolean）</li></ul><p>还有一点不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">const u1 = ref(&#123; name: &#x27;张三&#x27; &#125;)</span><br><span class="line">const u2 = reactive(&#123; name: &#x27;张三&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">function test() &#123;</span><br><span class="line">  console.log(u1.value)</span><br><span class="line">  console.log(u2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;u1.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;u2.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>在 template 模板中使用 ref 包装的数据，直接写【变量名】就可以了</li><li>但在代码中要使用 ref 包装的数据，必须用【变量名.value】才能访问到</li><li>reactive 包装的数据，在模板中和代码中都是一致的</li></ul><p><br></p><h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const path = ref(&#x27;/src/assets/vue.svg&#x27;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img :src=&quot;path&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>【:属性名】用来将标签属性与【响应式】变量绑定</li></ul><p><br></p><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br><span class="line">function dec() &#123;</span><br><span class="line">  count.value--</span><br><span class="line">&#125;</span><br><span class="line">function inc() &#123;</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;-&quot; @click=&quot;dec&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;+&quot; @click=&quot;inc&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>【@事件名】用来将标签属性与函数绑定，事件发生后执行函数内代码</li></ul><p><br></p><h2 id="表单绑定"><a href="#表单绑定" class="headerlink" title="表单绑定"></a>表单绑定</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">const user = ref(&#123;</span><br><span class="line">  name:&#x27;张三&#x27;,</span><br><span class="line">  age:18,</span><br><span class="line">  sex:&#x27;男&#x27;,</span><br><span class="line">  fav:[&#x27;游泳&#x27;,&#x27;打球&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function saveUser() &#123;</span><br><span class="line">  console.log(user.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label for=&quot;&quot;&gt;请输入姓名&lt;/label&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;user.name&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label for=&quot;&quot;&gt;请输入年龄&lt;/label&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;user.age&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label for=&quot;&quot;&gt;请选择性别&lt;/label&gt;</span><br><span class="line">      男 &lt;input type=&quot;radio&quot; value=&quot;男&quot; v-model=&quot;user.sex&quot;/&gt; </span><br><span class="line">      女 &lt;input type=&quot;radio&quot; value=&quot;女&quot; v-model=&quot;user.sex&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label for=&quot;&quot;&gt;请选择爱好&lt;/label&gt;</span><br><span class="line">      游泳 &lt;input type=&quot;checkbox&quot; value=&quot;游泳&quot; v-model=&quot;user.fav&quot;/&gt; </span><br><span class="line">      打球 &lt;input type=&quot;checkbox&quot; value=&quot;打球&quot; v-model=&quot;user.fav&quot;/&gt; </span><br><span class="line">      健身 &lt;input type=&quot;checkbox&quot; value=&quot;健身&quot; v-model=&quot;user.fav&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;保存&quot; @click=&quot;saveUser&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    margin-bottom: 8px;</span><br><span class="line">  &#125;</span><br><span class="line">  .outer &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    position: relative;</span><br><span class="line">    padding-left: 80px;</span><br><span class="line">  &#125;</span><br><span class="line">  label &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left :0;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>用 v-model 实现双向绑定，即 <ul><li>javascript 数据可以同步到表单标签</li><li>反过来用户在表单标签输入的新值也会同步到 javascript 这边</li></ul></li><li>双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了</li><li>复选框这种标签，双向绑定的 javascript 数据类型一般用数组</li></ul><p><br></p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>有时在数据展示时要做简单的计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const firstName = ref(&#x27;三&#x27;)</span><br><span class="line">const lastName = ref(&#x27;张&#x27;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;lastName + firstName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;lastName + firstName&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h4&gt;&#123;&#123;lastName + firstName&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>看起来较为繁琐，可以用计算属性改进</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">const firstName = ref(&#x27;三&#x27;)</span><br><span class="line">const lastName = ref(&#x27;张&#x27;)</span><br><span class="line">const fullName = computed(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;enter&#x27;)</span><br><span class="line">  return lastName.value + firstName.value</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;fullName&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h4&gt;&#123;&#123;fullName&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>fullName 即为计算属性，它具备缓存功能，即 firstName 和 lastName 的值发生了变化，才会重新计算</li><li>如果用函数实现相同功能，则没有缓存功能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const firstName = ref(&#x27;三&#x27;)</span><br><span class="line">const lastName = ref(&#x27;张&#x27;)</span><br><span class="line">function fullName() &#123;</span><br><span class="line">  console.log(&#x27;enter&#x27;)</span><br><span class="line">  return lastName.value + firstName.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fullName()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;fullName()&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h4&gt;&#123;&#123;fullName()&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="xhr"><a href="#xhr" class="headerlink" title="xhr"></a>xhr</h2><p>浏览器中有两套 API 可以和后端交互，发送请求、接收响应，fetch api 前面我们已经介绍过了，另一套 api 是 xhr，基本用法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:8080/api/students&#x27;</span>)</span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><p>但这套 api 虽然功能强大，但比较老，不直接支持 Promise，因此有必要对其进行改造</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(xhr.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(xhr.<span class="property">response</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(xhr.<span class="property">status</span> === <span class="number">404</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(xhr.<span class="property">response</span>)</span><br><span class="line">      &#125; <span class="comment">// 其它情况也需考虑，这里简化处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url)</span><br><span class="line">    xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Promise 对象适合用来封装异步操作，并可以配合 await 一齐使用</li><li>Promise 在构造时，需要一个箭头函数，箭头函数有两个参数 resolve 和 reject<ul><li>resolve 是异步操作成功时被调用，把成功的结果传递给它，最后会作为 await 的结果返回</li><li>reject 在异步操作失败时被调用，把失败的结果传递给它，最后在 catch 块被捉住</li></ul></li><li>await 会一直等到 Promise 内调用了 resolve 或 reject 才会继续向下运行</li></ul><p>调用示例1：同步接收结果，不走代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">get</span>(<span class="string">&quot;http://localhost:8080/api/students&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(resp)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用示例2：走代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">get</span>(<span class="string">&#x27;/api/students&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(resp)  </span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>走代理明显慢不少</li></ul><p><br></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p><strong>基本用法</strong></p><p>axios 就是对 xhr api 的封装，语法与前面例子类似</p><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>一个简单的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">let count = ref(0);</span><br><span class="line"></span><br><span class="line">async function getStudents() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const resp = await axios.get(&quot;/api/students&quot;);</span><br><span class="line">    count.value = resp.data.data.length;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  getStudents()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;学生人数为：&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>onMounted 指 vue 组件生成的 html 代码片段，挂载完毕后被执行</li></ul><p>再来看一个 post 例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">const student = ref(&#123;</span><br><span class="line">  name: &#x27;&#x27;,</span><br><span class="line">  sex: &#x27;男&#x27;,</span><br><span class="line">  age: 18</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">async function addStudent() &#123;</span><br><span class="line">  console.log(student.value)</span><br><span class="line">  const resp = await axios.post(&#x27;/api/students&#x27;, student.value)</span><br><span class="line">  console.log(resp.data.data)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; placeholder=&quot;请输入姓名&quot; v-model=&quot;student.name&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label for=&quot;&quot;&gt;请选择性别&lt;/label&gt;</span><br><span class="line">      男 &lt;input type=&quot;radio&quot; value=&quot;男&quot; v-model=&quot;student.sex&quot;/&gt; </span><br><span class="line">      女 &lt;input type=&quot;radio&quot; value=&quot;女&quot; v-model=&quot;student.sex&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;number&quot; placeholder=&quot;请输入年龄&quot; v-model=&quot;student.age&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;添加&quot; @click=&quot;addStudent&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>环境变量</strong></p><ul><li>开发环境下，联调的后端服务器地址是 <code>http://localhost:8080</code>，</li><li>上线改为生产环境后，后端服务器地址为 <code>http://itheima.com</code></li></ul><p>这就要求我们区分开发环境和生产环境，这件事交给构建工具 vite 来做</p><p>默认情况下，vite 支持上面两种环境，分别对应根目录下两个配置文件 </p><ul><li>.env.development - 开发环境</li><li>.env.production - 生产环境</li></ul><p>针对以上需求，分别在两个文件中加入</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">VITE_BACKEND_API_BASE_URL</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">VITE_BACKEND_API_BASE_URL</span> = <span class="string">&#x27;http://itheima.com&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在代码中使用 vite 给我们提供的特殊对象 <code>import.meta.env</code>，就可以获取到 <code>VITE_BACKEND_API_BASE_URL</code> 在不同环境下的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_BACKEND_API_BASE_URL</span></span><br></pre></td></tr></table></figure><p>默认情况下，不能智能提示自定义的环境变量，做如下配置：新增文件 <code>src/env.d.ts</code> 并添加如下内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ImportMetaEnv</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">VITE_BACKEND_API_BASE_URL</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="comment">// 更多环境变量...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ImportMeta</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">env</span>: <span class="title class_">ImportMetaEnv</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参考文档地址 <a href="https://cn.vitejs.dev/guide/env-and-mode.html">环境变量和模式 | Vite 官方中文文档 (vitejs.dev)</a></li></ul><p><br></p><p><strong>baseURL</strong></p><p>可以自己创建一个 axios 对象，方便添加默认设置，新建文件 /src/api/request.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新的 axios 对象</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">const</span> _axios = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_BACKEND_API_BASE_URL</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> _axios</span><br></pre></td></tr></table></figure><p>然后在其它组件中引用这个 ts 文件，例如 /src/views/E8.vue，就不用自己拼接路径前缀了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &#x27;../api/request&#x27;</span><br><span class="line">// ...</span><br><span class="line">await axios.post(&#x27;/api/students&#x27;, ...)    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>拦截器</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新的 axios 对象</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">const</span> _axios = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_BACKEND_API_BASE_URL</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">_axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>)=&gt;</span>&#123; <span class="comment">// 统一添加请求头</span></span><br><span class="line">    config.<span class="property">headers</span> = &#123;</span><br><span class="line">      <span class="title class_">Authorization</span>: <span class="string">&#x27;aaa.bbb.ccc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>)=&gt;</span>&#123; <span class="comment">// 请求出错时的处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">_axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>)=&gt;</span>&#123; <span class="comment">// 状态码  2xx</span></span><br><span class="line">    <span class="comment">// 这里的code是自定义的错误码</span></span><br><span class="line">    <span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">401</span>) &#123;       </span><br><span class="line">      <span class="comment">// 情况1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>)=&gt;</span>&#123; <span class="comment">// 状态码 &gt; 2xx, 400,401,403,404,500</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error) <span class="comment">// 处理了异常</span></span><br><span class="line">    <span class="keyword">if</span>(error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">400</span>) &#123;</span><br><span class="line">      <span class="comment">// 情况1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="comment">// 情况2</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> _axios</span><br></pre></td></tr></table></figure><p>处理响应时，又分成两种情况</p><ol><li>后端返回的是标准响应状态码，这时会走响应拦截器第二个箭头函数，用 error.response.status 做分支判断</li><li>后端返回的响应状态码总是200，用自定义错误码表示出错，这时会走响应拦截器第一个箭头函数，用 response.data.code 做分支判断</li></ol><p>另外</p><ul><li>Promise.reject(error) 类似于将异常继续向上抛出，异常由调用者（Vue组件）来配合 try … catch 来处理</li><li>Promise.resolve({}) 表示错误已解决，返回一个空对象，调用者中接到这个空对象时，需要配合 ?. 来避免访问不存在的属性</li></ul><p><br></p><h2 id="条件与列表"><a href="#条件与列表" class="headerlink" title="条件与列表"></a>条件与列表</h2><p>首先，新增模型数据 src/model/Model8080.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 spring 错误，返回的对象格式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SpringError</span> &#123;</span><br><span class="line">  <span class="attr">timestamp</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">error</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 spring 成功，返回 list 情况</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SpringList</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: T[],</span><br><span class="line">  message?: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 spring 成功，返回 page 情况</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SpringPage</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">list</span>: T[], <span class="attr">total</span>: <span class="built_in">number</span> &#125;,</span><br><span class="line">  message?: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 spring 成功，返回 string 情况</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SpringString</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">string</span>,</span><br><span class="line">  message?: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRespError</span> <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">SpringError</span>&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRespList</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">SpringList</span>&lt;T&gt;&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRespPage</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">SpringPage</span>&lt;T&gt;&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRespString</span> <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">SpringString</span>&gt; &#123; &#125;</span><br></pre></td></tr></table></figure><p>其中 </p><ul><li>AxiosRespPage 代表分页时的响应类型</li><li>AxiosRespList 代表返回集合时的响应类型</li><li>AxiosRespString 代表返回字符串时的响应类型</li><li>AxiosRespError 代表 Spring 出错时时的响应类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; Student, SpringList &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line"></span><br><span class="line">// 说明 students 数组类型为 Student[]</span><br><span class="line">const students = ref&lt;Student[]&gt;([]);</span><br><span class="line"></span><br><span class="line">async function getStudents() &#123;</span><br><span class="line">  // 说明 resp.data 类型是 SpringList&lt;Student&gt;</span><br><span class="line">  const resp = await axios.get&lt;SpringList&lt;Student&gt;&gt;(&quot;/api/students&quot;);  </span><br><span class="line">  console.log(resp.data.data);</span><br><span class="line">  students.value = resp.data.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; getStudents());</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;thead&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;row bold&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;tbody&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;students.length === 0&quot;&gt;暂无数据&lt;/div&gt;</span><br><span class="line">      &lt;template v-else&gt;</span><br><span class="line">        &lt;div class=&quot;row&quot; v-for=&quot;s of students&quot; :key=&quot;s.id&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;col&quot;&gt;&#123;&#123; s.id &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;col&quot;&gt;&#123;&#123; s.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;col&quot;&gt;&#123;&#123; s.sex &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;col&quot;&gt;&#123;&#123; s.age &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.outer &#123;</span><br><span class="line">  font-family: 华文行楷;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  width: 500px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">  color: #333;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.row &#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.col &#123;</span><br><span class="line">  border: 1px solid #f0f0f0;</span><br><span class="line">  width: 15%;</span><br><span class="line">  height: 35px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 35px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.bold .col &#123;</span><br><span class="line">  background-color: #f1f1f1;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>加入泛型是为了更好的提示</li><li>v-if 与 v-else 不能和 v-for 处于同一标签</li><li>template 标签还有一个用途，就是用它少生成一层真正 html 代码</li><li>可以看到将结果封装为响应式数据还是比较繁琐的，后面会使用 useRequest 改进</li></ul><p><br></p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>利用监听器，可以在【响应式】的基础上添加一些副作用，把更多的东西变成【响应式的】</p><ul><li><p>原本只是数据变化 =&gt; 页面更新</p></li><li><p>watch 可以在数据变化时 =&gt; 其它更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;name&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &quot;vue&quot;;</span><br><span class="line">function useStorage(name: string) &#123;</span><br><span class="line">  const data = ref(sessionStorage.getItem(name) ?? &quot;&quot;);</span><br><span class="line">  watch(data, (newValue) =&gt; &#123;</span><br><span class="line">    sessionStorage.setItem(name, newValue);</span><br><span class="line">  &#125;);</span><br><span class="line">  return data;</span><br><span class="line">&#125;</span><br><span class="line">const name = useStorage(&quot;name&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>名称为 useXXXX 的函数，作用是返回带扩展功能的【响应式】数据</li><li>localStorage   即使浏览器关闭，数据还在</li><li>sessionStorage  数据工作在浏览器活动期间</li></ul><p><br></p><h2 id="vueuse"><a href="#vueuse" class="headerlink" title="vueuse"></a>vueuse</h2><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vueuse/core</span><br></pre></td></tr></table></figure><p>一些函数的用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;X: &#123;&#123;x&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;Y: &#123;&#123;y&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h3&gt;&#123;&#123;count&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; @click=&quot;inc()&quot; value=&quot;+&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; @click=&quot;dec()&quot; value=&quot;-&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useMouse, useCounter, useStorage &#125; from &#x27;@vueuse/core&#x27;</span><br><span class="line"></span><br><span class="line">const &#123;x, y&#125; = useMouse()</span><br><span class="line"></span><br><span class="line">const &#123;count, inc, dec&#125; = useCounter()</span><br><span class="line"></span><br><span class="line">const name = useStorage(&quot;name&quot;, &quot;&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="useRequest"><a href="#useRequest" class="headerlink" title="useRequest"></a>useRequest</h2><p>响应式的 axios 封装，官网地址 <a href="https://next.cn.attojs.org/">一个 Vue 请求库 | VueRequest (attojs.org)</a></p><p>首先安装 vue-request</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-request@next</span><br></pre></td></tr></table></figure><p>组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3 v-if=&quot;students.length === 0&quot;&gt;暂无数据&lt;/h3&gt;</span><br><span class="line">  &lt;ul v-else&gt;</span><br><span class="line">    &lt;li v-for=&quot;s of students&quot; :key=&quot;s.id&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.sex&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.age&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;</span><br><span class="line">import &#123; useRequest &#125; from &#x27;vue-request&#x27;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; AxiosRespList, Student &#125; from &#x27;../model/Model8080&#x27;</span><br><span class="line"></span><br><span class="line">// data 代表就是 axios 的响应对象</span><br><span class="line">const &#123; data &#125; = useRequest&lt;AxiosRespList&lt;Student&gt;&gt;(() =&gt; axios.get(&#x27;/api/students&#x27;))</span><br><span class="line"></span><br><span class="line">const students = computed(()=&gt;&#123;</span><br><span class="line">  return data?.value?.data.data || []</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">ul li &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  font-family: &quot;华文行楷&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li span:nth-child(1) &#123;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line">li span:nth-child(2) &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  color: crimson;</span><br><span class="line">  vertical-align: bottom;</span><br><span class="line">&#125;</span><br><span class="line">li span:nth-child(3) &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  color: darkblue;</span><br><span class="line">  vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>data.value 的取值一开始是 undefined，随着响应返回变成 axios 的响应对象</li><li>用 computed 进行适配</li></ul><p><br></p><h2 id="usePagination"><a href="#usePagination" class="headerlink" title="usePagination"></a>usePagination</h2><p>在 src/model/Model8080.ts 中补充类型说明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">StudentQueryDto</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>,</span><br><span class="line">  sex?: <span class="built_in">string</span>,</span><br><span class="line">  age?: <span class="built_in">string</span>, <span class="comment">// 18,20</span></span><br><span class="line">  <span class="attr">page</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">size</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>js 中类似于 18,20 这样以逗号分隔字符串，会在 get 传参时转换为 java 中的整数数组</li></ul><p>编写组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入姓名&quot; v-model=&quot;dto.name&quot;&gt;</span><br><span class="line">  &lt;select v-model=&quot;dto.sex&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;&quot; selected&gt;请选择性别&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;男&quot;&gt;男&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;女&quot;&gt;女&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入年龄范围&quot; v-model=&quot;dto.age&quot;&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入页码&quot; v-model=&quot;dto.page&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入页大小&quot; v-model=&quot;dto.size&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;搜索&quot; @click=&quot;search&quot;&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h3 v-if=&quot;students.length === 0&quot;&gt;暂无数据&lt;/h3&gt;</span><br><span class="line">  &lt;ul v-else&gt;</span><br><span class="line">    &lt;li v-for=&quot;s of students&quot; :key=&quot;s.id&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.sex&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;s.age&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  总记录数&#123;&#123;total&#125;&#125; 总页数&#123;&#123;totalPage&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;</span><br><span class="line">import &#123; usePagination &#125; from &#x27;vue-request&#x27;</span><br><span class="line">import &#123; computed, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; AxiosRespPage, Student, StudentQueryDto &#125; from &#x27;../model/Model8080&#x27;</span><br><span class="line"></span><br><span class="line">const dto = ref&lt;StudentQueryDto&gt;(&#123;name:&#x27;&#x27;, sex:&#x27;&#x27;, age:&#x27;&#x27;, page:1, size:5&#125;)</span><br><span class="line"></span><br><span class="line">// data 代表就是 axios 的响应对象</span><br><span class="line">// 泛型参数1: 响应类型</span><br><span class="line">// 泛型参数2: 请求类型</span><br><span class="line">const &#123; data, total, totalPage, run &#125; = usePagination&lt;AxiosRespPage&lt;Student&gt;, StudentQueryDto[]&gt;(</span><br><span class="line">  (d) =&gt; axios.get(&#x27;/api/students/q&#x27;, &#123;params: d&#125;), // 箭头函数</span><br><span class="line">  &#123;</span><br><span class="line">    defaultParams: [ dto.value ], // 默认参数, 会作为参数传递给上面的箭头函数</span><br><span class="line">    pagination: &#123;</span><br><span class="line">      currentKey: &#x27;page&#x27;, // 指明当前页属性</span><br><span class="line">      pageSizeKey: &#x27;size&#x27;, // 指明页大小属性</span><br><span class="line">      totalKey: &#x27;data.data.total&#x27; // 指明总记录数属性</span><br><span class="line">    &#125; </span><br><span class="line">  &#125; // 选项</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const students = computed(()=&gt;&#123;</span><br><span class="line">  return data?.value?.data.data.list || []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function search() &#123;</span><br><span class="line">  run(dto.value) // 会作为参数传递给usePagination的箭头函数</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">ul li &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  font-family: &quot;华文行楷&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li span:nth-child(1) &#123;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line">li span:nth-child(2) &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  color: crimson;</span><br><span class="line">  vertical-align: bottom;</span><br><span class="line">&#125;</span><br><span class="line">li span:nth-child(3) &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  color: darkblue;</span><br><span class="line">  vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line">input,select &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>usePagination 只需要定义一次，后续还想用它内部的 axios 发请求，只需调用 run 函数</li><li><br></li></ul><h2 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h2><p><strong>例1</strong></p><p>定义子组件 Child1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;card&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p class=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;location&quot;&gt;&#123;&#123;country&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;img :src=&quot;avatar || &#x27;/src/assets/vue.svg&#x27;&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 定义属性,  编译宏</span><br><span class="line">defineProps&lt;&#123;name:string,country:string,avatar?:string&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  justify-content: space-evenly;</span><br><span class="line">  flex-direction: row-reverse;</span><br><span class="line">&#125;</span><br><span class="line">.name &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.location &#123;</span><br><span class="line">  font-size: 0.8em;</span><br><span class="line">  color: #6d597a;</span><br><span class="line">&#125;</span><br><span class="line">.card &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-evenly;</span><br><span class="line">  padding: 1em;</span><br><span class="line">  margin: 1rem;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  width: 200px;</span><br><span class="line">  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card:hover &#123;</span><br><span class="line">  transform: rotate(-5deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card img &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  max-width: 55px;</span><br><span class="line">  max-height: 55px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>父组件引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child1 name=&quot;张三&quot; country=&quot;中国&quot; avatar=&quot;/src/assets/vue.svg&quot;&gt;&lt;/Child1&gt;</span><br><span class="line">  &lt;Child1 name=&quot;李四&quot; country=&quot;印度&quot; avatar=&quot;/vite.svg&quot;&gt;&lt;/Child1&gt;</span><br><span class="line">  &lt;Child1 name=&quot;王五&quot; country=&quot;韩国&quot; &gt;&lt;/Child1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import Child1 from &#x27;../components/Child1.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>例2</strong></p><p>首先添加类型说明 model/ModelRandomUser.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRespResults</span> <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">Results</span>&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Results</span> &#123;</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">page</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">results</span>: <span class="built_in">number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">results</span>: <span class="title class_">Result</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> | <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="built_in">string</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">location</span>: &#123;</span><br><span class="line">    <span class="attr">country</span>: <span class="built_in">string</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">picture</span>: &#123;</span><br><span class="line">    <span class="attr">medium</span>: <span class="built_in">string</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">login</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件不变，父组件使用子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child1 v-for=&quot;u of users&quot; </span><br><span class="line">    :name=&quot;u.name.first&quot; </span><br><span class="line">    :country=&quot;u.location.country&quot; </span><br><span class="line">    :avatar=&quot;u.picture.medium&quot;</span><br><span class="line">    :key=&quot;u.login.username&quot;&gt;&lt;/Child1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import &#123; useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; AxiosRespResults &#125; from &#x27;../model/ModelRandomUser&#x27;</span><br><span class="line">import Child1 from &quot;../components/Child1.vue&quot;;</span><br><span class="line"></span><br><span class="line">const &#123; data &#125; = useRequest&lt;AxiosRespResults&gt;(</span><br><span class="line">  ()=&gt;axios.get(&#x27;https://randomuser.me/api/?results=3&#x27;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const users = computed(()=&gt;&#123;</span><br><span class="line">  return data.value?.data.results || []</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果觉得 Result 数据结构嵌套太复杂，还可以做一个类型映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child1 v-for=&quot;u of users&quot; </span><br><span class="line">    :name=&quot;u.name&quot; </span><br><span class="line">    :country=&quot;u.country&quot; </span><br><span class="line">    :avatar=&quot;u.avatar&quot;</span><br><span class="line">    :key=&quot;u.username&quot;&gt;&lt;/Child1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import &#123; useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; AxiosRespResults, Result &#125; from &#x27;../model/ModelRandomUser&#x27;</span><br><span class="line">import Child1 from &quot;../components/Child1.vue&quot;;</span><br><span class="line"></span><br><span class="line">const &#123; data &#125; = useRequest&lt;AxiosRespResults&gt;(</span><br><span class="line">  ()=&gt;axios.get(&#x27;https://randomuser.me/api/?results=3&#x27;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const users = computed(()=&gt;&#123;</span><br><span class="line">  return data.value?.data.results.map(resultToUser) || []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">interface User &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  country: string,</span><br><span class="line">  avatar: string,</span><br><span class="line">  username: string</span><br><span class="line">&#125;</span><br><span class="line">function resultToUser(r:Result):User &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    name: r.name.first,</span><br><span class="line">    country: r.location.country,</span><br><span class="line">    avatar: r.picture.medium,</span><br><span class="line">    username: r.login.username</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>resultToUser 将 Result 类型映射为 User 类型</li></ul><p><br></p><h1 id="Antdv"><a href="#Antdv" class="headerlink" title="Antdv"></a>Antdv</h1><p>添加必要插件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ant-design-vue</span><br></pre></td></tr></table></figure><ul><li>ant-design-vue 组件库插件</li></ul><p>引入 antdv 功能，修改 main.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> antd <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;ant-design-vue/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(antd).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- &lt;a-table :columns=&quot;columns&quot; :dataSource=&quot;students&quot; rowKey=&quot;id&quot;&gt;&lt;/a-table&gt; --&gt;</span><br><span class="line">  &lt;a-table :columns=&quot;columns&quot; :dataSource=&quot;students&quot; :rowKey=&quot;rowKey&quot;&gt;&lt;/a-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; AxiosRespList, Student &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line"></span><br><span class="line">const &#123;data&#125; = useRequest&lt;AxiosRespList&lt;Student&gt;&gt;(</span><br><span class="line">  ()=&gt;axios.get(&#x27;/api/students&#x27;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const students = computed(()=&gt;&#123;</span><br><span class="line">  return data.value?.data.data || []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function rowKey(r:Student) &#123;</span><br><span class="line">  return r.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const columns = ref([</span><br><span class="line">  &#123;</span><br><span class="line">    title:&#x27;编号&#x27;,</span><br><span class="line">    dataIndex:&#x27;id&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title:&#x27;姓名&#x27;,</span><br><span class="line">    dataIndex:&#x27;name&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title:&#x27;性别&#x27;,</span><br><span class="line">    dataIndex:&#x27;sex&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title:&#x27;年龄&#x27;,</span><br><span class="line">    dataIndex:&#x27;age&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-table :columns=&quot;columns&quot; :data-source=&quot;students&quot; row-key=&quot;id&quot;</span><br><span class="line">   :pagination=&quot;pagination&quot; @change=&quot;tableChange&quot;&gt;&lt;/a-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; usePagination &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; AxiosRespPage, Student, StudentQueryDto &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line">import &#123; PaginationProps &#125; from &quot;ant-design-vue&quot;;</span><br><span class="line">import DateBody from &quot;ant-design-vue/lib/vc-picker/panels/DatePanel/DateBody&quot;;</span><br><span class="line"></span><br><span class="line">const dto = ref(&#123;page: 1, size: 5&#125;)</span><br><span class="line"></span><br><span class="line">const &#123;data, total, run&#125; = usePagination&lt;AxiosRespPage&lt;Student&gt;, StudentQueryDto[]&gt;(</span><br><span class="line">  (d)=&gt; axios.get(&#x27;/api/students/q&#x27;, &#123;params:d&#125;),</span><br><span class="line">  &#123;</span><br><span class="line">    defaultParams: [dto.value],</span><br><span class="line">    pagination: &#123;</span><br><span class="line">      currentKey: &quot;page&quot;,</span><br><span class="line">      pageSizeKey: &#x27;size&#x27;,</span><br><span class="line">      totalKey: &#x27;data.data.total&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 在页号或页大小改变时调用</span><br><span class="line">function tableChange(pagination: PaginationProps) &#123; </span><br><span class="line">  console.log(pagination)</span><br><span class="line">  dto.value.page = pagination.current ?? 1</span><br><span class="line">  dto.value.size = pagination.pageSize ?? 5</span><br><span class="line">  run(dto.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const pagination = computed&lt;PaginationProps&gt;(()=&gt;&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    current: dto.value.page, // 当前页</span><br><span class="line">    pageSize: dto.value.size, // 页大小</span><br><span class="line">    total: total.value,       // 总记录数</span><br><span class="line">    showSizeChanger: true,    // 显示页大小的下拉列表</span><br><span class="line">    pageSizeOptions: [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;] // 自定义下拉列表内容</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const students = computed(()=&gt;&#123;</span><br><span class="line">  return data.value?.data.data.list || []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const columns = ref([</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;编号&quot;,</span><br><span class="line">    dataIndex: &quot;id&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;姓名&quot;,</span><br><span class="line">    dataIndex: &quot;name&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;性别&quot;,</span><br><span class="line">    dataIndex: &quot;sex&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;年龄&quot;,</span><br><span class="line">    dataIndex: &quot;age&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="搜索、删除"><a href="#搜索、删除" class="headerlink" title="搜索、删除"></a>搜索、删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-row&gt;</span><br><span class="line">    &lt;a-col :span=&quot;2&quot;&gt;</span><br><span class="line">      &lt;a-button type=&quot;primary&quot; size=&quot;small&quot;&gt;新增&lt;/a-button&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">      &lt;a-popconfirm title=&quot;确认要删除选中学生吗?&quot;</span><br><span class="line">        ok-text=&quot;确定&quot; cancel-text=&quot;取消&quot; @confirm=&quot;onDeleteIds&quot;</span><br><span class="line">        @visibleChange=&quot;onVisibleChange&quot; :visible=&quot;visible&quot;&gt;</span><br><span class="line">        &lt;a-button type=&quot;primary&quot; size=&quot;small&quot;&gt;删除选中&lt;/a-button&gt;</span><br><span class="line">      &lt;/a-popconfirm&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">      &lt;a-input v-model:value=&quot;dto.name&quot; placeholder=&quot;输姓名&quot; size=&quot;small&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">      &lt;a-select v-model:value=&quot;dto.sex&quot; placeholder=&quot;选性别&quot; :allowClear=&quot;true&quot; size=&quot;small&quot;&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;男&quot;&gt;男&lt;/a-select-option&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;女&quot;&gt;女&lt;/a-select-option&gt;</span><br><span class="line">      &lt;/a-select&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">      &lt;a-select v-model:value=&quot;dto.age&quot; placeholder=&quot;选年龄&quot; :allowClear=&quot;true&quot; size=&quot;small&quot;&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;0,20&quot;&gt;20以下&lt;/a-select-option&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;21,30&quot;&gt;21~30&lt;/a-select-option&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;31,40&quot;&gt;31~40&lt;/a-select-option&gt;</span><br><span class="line">        &lt;a-select-option value=&quot;40,120&quot;&gt;40以上&lt;/a-select-option&gt;</span><br><span class="line">      &lt;/a-select&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">    &lt;a-col :span=&quot;2&quot;&gt;</span><br><span class="line">      &lt;a-button @click=&quot;tableChange&quot; type=&quot;primary&quot; size=&quot;small&quot;&gt;搜索&lt;/a-button&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">  &lt;/a-row&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;a-table :columns=&quot;columns&quot; :data-source=&quot;students&quot; row-key=&quot;id&quot;</span><br><span class="line">    :pagination=&quot;pagination&quot; @change=&quot;tableChange&quot;</span><br><span class="line">    :row-selection=&quot;&#123;selectedRowKeys:ids,onChange:onSelectChange&#125;&quot;&gt;</span><br><span class="line">    &lt;template #bodyCell=&quot;&#123;column, record&#125;&quot;&gt;</span><br><span class="line">      &lt;template v-if=&quot;column.dataIndex===&#x27;name&#x27;&quot;&gt;</span><br><span class="line">      &#123;&#123;record.name + (record.sex===&#x27;男&#x27;?&#x27;(大侠)&#x27;:&#x27;(女侠)&#x27;)&#125;&#125;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;template v-else-if=&quot;column.dataIndex===&#x27;operation&#x27;&quot;&gt;</span><br><span class="line">      &lt;a&gt;修改&lt;/a&gt;</span><br><span class="line">      &lt;a-divider type=&quot;vertical&quot;&gt;&lt;/a-divider&gt;</span><br><span class="line">      &lt;a-popconfirm title=&quot;确认要删除该学生吗?&quot;</span><br><span class="line">        ok-text=&quot;确定&quot; cancel-text=&quot;取消&quot; @confirm=&quot;onDelete(record.id)&quot;&gt;</span><br><span class="line">        &lt;a&gt;删除&lt;/a&gt;   </span><br><span class="line">      &lt;/a-popconfirm&gt;         </span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/a-table&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; usePagination, useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; AxiosRespPage, AxiosRespString, Student, StudentQueryDto &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line">import &#123; PaginationProps &#125; from &quot;ant-design-vue&quot;;</span><br><span class="line"></span><br><span class="line">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 搜索功能开始</span><br><span class="line">const dto = ref(&#123;page: 1, size: 5, name: &#x27;&#x27;, sex: null, age: null&#125;)</span><br><span class="line"></span><br><span class="line">const &#123;data, total, run: search&#125; = usePagination&lt;AxiosRespPage&lt;Student&gt;, StudentQueryDto[]&gt;(</span><br><span class="line">  (d) =&gt; axios.get(&#x27;/api/students/q&#x27;, &#123;params:d&#125;),</span><br><span class="line">  &#123;</span><br><span class="line">    defaultParams: [dto.value],</span><br><span class="line">    pagination: &#123;</span><br><span class="line">      currentKey: &quot;page&quot;,</span><br><span class="line">      pageSizeKey: &#x27;size&#x27;,</span><br><span class="line">      totalKey: &#x27;data.data.total&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">function tableChange(pagination: PaginationProps) &#123; </span><br><span class="line">  // console.log(pagination)</span><br><span class="line">  dto.value.page = pagination.current ?? 1</span><br><span class="line">  dto.value.size = pagination.pageSize ?? 5</span><br><span class="line">  search(dto.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const pagination = computed&lt;PaginationProps&gt;(()=&gt;&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    current: dto.value.page, // 当前页</span><br><span class="line">    pageSize: dto.value.size, // 页大小</span><br><span class="line">    total: total.value,       // 总记录数</span><br><span class="line">    showSizeChanger: true,    // 显示页大小的下拉列表</span><br><span class="line">    pageSizeOptions: [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;] // 自定义下拉列表内容</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const students = computed(()=&gt;&#123;</span><br><span class="line">  return data.value?.data.data.list || []</span><br><span class="line">&#125;)</span><br><span class="line">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 搜索功能结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 删除功能开始</span><br><span class="line">async function onDelete(id:number) &#123;</span><br><span class="line">  // console.log(&quot;学生id是:&quot;+id)</span><br><span class="line">  await deleteById(id)      // 删除请求 删除响应</span><br><span class="line">  search(dto.value)        //                   查询请求 查询响应</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123; runAsync: deleteById &#125; = useRequest&lt;AxiosRespString, number[]&gt;(</span><br><span class="line">  (id) =&gt; axios.delete(`/api/students/$&#123;id&#125;`),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 删除功能结束</span><br><span class="line"></span><br><span class="line">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 删除选中开始</span><br><span class="line">const ids = ref&lt;number[]&gt;([])</span><br><span class="line"></span><br><span class="line">function onSelectChange(keys:number[]) &#123;</span><br><span class="line">  // console.log(keys)</span><br><span class="line">  ids.value = keys</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function onDeleteIds() &#123;</span><br><span class="line">  await deleteByIds(ids.value)</span><br><span class="line">  ids.value = []</span><br><span class="line">  search(dto.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123; runAsync: deleteByIds &#125; = useRequest&lt;AxiosRespString, number[][]&gt;(</span><br><span class="line">  (ids)=&gt;axios.delete(&#x27;/api/students&#x27;, &#123;data: ids&#125;),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const visible = ref(false)</span><br><span class="line"></span><br><span class="line">function onVisibleChange(v:boolean) &#123;</span><br><span class="line">  if(!v) &#123; // 希望隐藏</span><br><span class="line">    visible.value = false</span><br><span class="line">  &#125; else &#123; // 希望显示</span><br><span class="line">    visible.value = ids.value.length &gt; 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 删除选中结束</span><br><span class="line"></span><br><span class="line">const columns = ref([</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;编号&quot;,</span><br><span class="line">    dataIndex: &quot;id&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;姓名&quot;,</span><br><span class="line">    dataIndex: &quot;name&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;性别&quot;,</span><br><span class="line">    dataIndex: &quot;sex&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &quot;年龄&quot;,</span><br><span class="line">    dataIndex: &quot;age&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;操作&#x27;,</span><br><span class="line">    dataIndex: &#x27;operation&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .ant-input, .ant-select &#123;</span><br><span class="line">    width: 80px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="新增、修改"><a href="#新增、修改" class="headerlink" title="新增、修改"></a>新增、修改</h2><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-modal :visible=&quot;visible&quot; :title=&quot;title&quot; </span><br><span class="line">    @ok=&quot;onOk&quot; @cancel=&quot;onCancel&quot;&gt;</span><br><span class="line">    &lt;a-form&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;编号&quot; v-if=&quot;id&quot;&gt;</span><br><span class="line">        &lt;a-input readonly v-model:value=&quot;id&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;姓名&quot;&gt;</span><br><span class="line">        &lt;a-input v-model:value=&quot;dto.name&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;性别&quot;&gt;</span><br><span class="line">        &lt;a-radio-group v-model:value=&quot;dto.sex&quot;&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;男&quot;&gt;男&lt;/a-radio-button&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;女&quot;&gt;女&lt;/a-radio-button&gt;</span><br><span class="line">        &lt;/a-radio-group&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;年龄&quot;&gt;</span><br><span class="line">        &lt;a-input-number v-model:value=&quot;dto.age&quot;&gt;&lt;/a-input-number&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">    &lt;/a-form&gt;</span><br><span class="line">  &lt;/a-modal&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; StudentSaveDto, AxiosRespString &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line">import &#123; Form &#125; from &#x27;ant-design-vue&#x27;</span><br><span class="line"></span><br><span class="line">// 定义属性</span><br><span class="line">const props = defineProps&lt;&#123;id:number, dto:StudentSaveDto, visible:boolean&#125;&gt;()</span><br><span class="line"></span><br><span class="line">const title = computed(()=&gt; props.id===0?&#x27;新增学生&#x27;:&#x27;修改学生&#x27;)</span><br><span class="line"></span><br><span class="line">// 定义事件</span><br><span class="line">const emit = defineEmits([&#x27;update:visible&#x27;, &#x27;saved&#x27;])</span><br><span class="line"></span><br><span class="line">async function onOk() &#123;</span><br><span class="line">  if(props.id === 0) &#123;</span><br><span class="line">    await insert(props.dto)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    await update(props.dto)</span><br><span class="line">  &#125;</span><br><span class="line">  emit(&#x27;saved&#x27;)</span><br><span class="line">  // 发送事件给父组件, 希望把 visible 改为 false</span><br><span class="line">  emit(&#x27;update:visible&#x27;, false) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function onCancel() &#123;</span><br><span class="line">  // 发送事件给父组件, 希望把 visible 改为 false</span><br><span class="line">  emit(&#x27;update:visible&#x27;, false)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123;runAsync:insert&#125; = useRequest&lt;AxiosRespString,StudentSaveDto[]&gt;(</span><br><span class="line">  (dto)=&gt;axios.post(&#x27;/api/students&#x27;, dto),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const &#123;runAsync:update&#125; = useRequest&lt;AxiosRespString,StudentSaveDto[]&gt;(</span><br><span class="line">  (dto)=&gt;axios.put(`/api/students/$&#123;props.id&#125;`, dto),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件使用子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;A4Save :id=&quot;id&quot; :dto=&quot;saveDto&quot; v-model:visible=&quot;saveVisible&quot;&gt;&lt;/A4Save&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// ...</span><br><span class="line">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 新增、修改开始</span><br><span class="line">const saveVisible = ref(false)</span><br><span class="line">const id = ref(0)</span><br><span class="line">const saveDto = reactive(&#123;name:&#x27;&#x27;, sex:&#x27;男&#x27;, age:18&#125;)</span><br><span class="line"></span><br><span class="line">function onInsert() &#123;</span><br><span class="line">  saveVisible.value = true</span><br><span class="line">  id.value = 0</span><br><span class="line">  Object.assign(saveDto, &#123;name:&#x27;&#x27;, sex:&#x27;男&#x27;, age:18&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function onUpdate(record: Student) &#123;</span><br><span class="line">  saveVisible.value = true</span><br><span class="line">  id.value = record.id</span><br><span class="line">  Object.assign(saveDto, record)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function onSaved() &#123;</span><br><span class="line">  search(dto.value)</span><br><span class="line">&#125;    </span><br><span class="line">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 新增、修改结束</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>saveDto 使用 reactive 包装，是为了解决后续表单校验失效问题</p></li><li><p>Object.assign 是将源对象（参数2）的属性值赋值给目标对象（参数1）的同名属性，效果等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">saveDto.<span class="property">name</span> = record.<span class="property">name</span></span><br><span class="line">saveDto.<span class="property">sex</span> = record.<span class="property">sex</span></span><br><span class="line">saveDto.<span class="property">age</span> = record.<span class="property">age</span></span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="全局消息"><a href="#全局消息" class="headerlink" title="全局消息"></a>全局消息</h2><p>在 request.ts 中对响应消息统一处理</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">_axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>)=&gt;</span>&#123; <span class="comment">// 状态码  2xx</span></span><br><span class="line">    <span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">      message.<span class="title function_">success</span>(response.<span class="property">data</span>.<span class="property">message</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>)=&gt;</span>&#123; <span class="comment">// 状态码 &gt; 2xx, 400,401,403,404,500</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-modal :visible=&quot;visible&quot; :title=&quot;title&quot; </span><br><span class="line">    @ok=&quot;onOk&quot; @cancel=&quot;onCancel&quot;&gt;</span><br><span class="line">    &lt;a-form&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;编号&quot; v-if=&quot;id&quot;&gt;</span><br><span class="line">        &lt;a-input readonly v-model:value=&quot;id&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;姓名&quot; v-bind=&quot;validateInfos.name&quot;&gt;</span><br><span class="line">        &lt;a-input v-model:value=&quot;dto.name&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;性别&quot; v-bind=&quot;validateInfos.sex&quot;&gt;</span><br><span class="line">        &lt;a-radio-group v-model:value=&quot;dto.sex&quot;&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;男&quot;&gt;男&lt;/a-radio-button&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;女&quot;&gt;女&lt;/a-radio-button&gt;</span><br><span class="line">        &lt;/a-radio-group&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;年龄&quot; v-bind=&quot;validateInfos.age&quot;&gt;</span><br><span class="line">        &lt;a-input-number v-model:value=&quot;dto.age&quot;&gt;&lt;/a-input-number&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">    &lt;/a-form&gt;</span><br><span class="line">  &lt;/a-modal&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &quot;../api/request&quot;;</span><br><span class="line">import &#123; ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRequest &#125; from &quot;vue-request&quot;;</span><br><span class="line">import &#123; StudentSaveDto, AxiosRespString &#125; from &quot;../model/Model8080&quot;;</span><br><span class="line">import &#123; Form &#125; from &#x27;ant-design-vue&#x27;</span><br><span class="line"></span><br><span class="line">// 定义属性</span><br><span class="line">const props = defineProps&lt;&#123;id:number, dto:StudentSaveDto, visible:boolean&#125;&gt;()</span><br><span class="line"></span><br><span class="line">const title = computed(()=&gt; props.id===0?&#x27;新增学生&#x27;:&#x27;修改学生&#x27;)</span><br><span class="line"></span><br><span class="line">// 定义事件</span><br><span class="line">const emit = defineEmits([&#x27;update:visible&#x27;, &#x27;saved&#x27;])</span><br><span class="line"></span><br><span class="line">async function onOk() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    // 提交前校验</span><br><span class="line">    await validate()</span><br><span class="line">    if(props.id === 0) &#123;</span><br><span class="line">      await insert(props.dto)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      await update(props.dto)</span><br><span class="line">    &#125;</span><br><span class="line">    emit(&#x27;saved&#x27;)</span><br><span class="line">    // 发送事件给父组件, 希望把 visible 改为 false</span><br><span class="line">    emit(&#x27;update:visible&#x27;, false) </span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function onCancel() &#123;</span><br><span class="line">  // 发送事件给父组件, 希望把 visible 改为 false</span><br><span class="line">  emit(&#x27;update:visible&#x27;, false)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123;runAsync:insert&#125; = useRequest&lt;AxiosRespString,StudentSaveDto[]&gt;(</span><br><span class="line">  (dto)=&gt;axios.post(&#x27;/api/students&#x27;, dto),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const &#123;runAsync:update&#125; = useRequest&lt;AxiosRespString,StudentSaveDto[]&gt;(</span><br><span class="line">  (dto)=&gt;axios.put(`/api/students/$&#123;props.id&#125;`, dto),</span><br><span class="line">  &#123;</span><br><span class="line">    manual: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const rules = ref(&#123;</span><br><span class="line">  name: [</span><br><span class="line">    &#123;required: true, message:&#x27;姓名必须&#x27;&#125;,</span><br><span class="line">    &#123;min:2, message:&#x27;字符数至少为2&#x27;&#125;</span><br><span class="line">  ],</span><br><span class="line">  sex: [</span><br><span class="line">    &#123;required: true, message:&#x27;性别必须&#x27;&#125;</span><br><span class="line">  ],</span><br><span class="line">  age: [</span><br><span class="line">    &#123;required: true, message:&#x27;年龄必须&#x27;&#125;,</span><br><span class="line">    &#123;min:10, message:&#x27;年龄最小为10岁&#x27;, type:&#x27;number&#x27;&#125;,</span><br><span class="line">    &#123;max:120, message:&#x27;年龄最大为120岁&#x27;, type:&#x27;number&#x27;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 参数1: 待校验的数据</span><br><span class="line">// 参数2: 校验规则</span><br><span class="line">const &#123; validateInfos, validate &#125; = Form.useForm(props.dto, rules)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@<span class="number">4</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="创建-router"><a href="#创建-router" class="headerlink" title="创建 router"></a>创建 router</h2><p>首先创建一个 /src/router/a5router.ts 文件，在其中定义路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A51</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A51.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A52</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A52.vue&#x27;</span></span><br><span class="line"><span class="comment">// 路由 =&gt; 路径和组件之间的对应关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a1&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="variable constant_">A51</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a2&#x27;</span>, </span><br><span class="line">    <span class="attr">component</span>: <span class="variable constant_">A52</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; </span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(), <span class="comment">// 路径格式</span></span><br><span class="line">  <span class="attr">routes</span>: routes <span class="comment">// 路由数组</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ul><li><p>createWebHashHistory 是用 # 符号作为【单页面】跳转技术，上面两个路由访问时路径格式为</p><ul><li><a href="http://localhost:7070/#/a1">http://localhost:7070/#/a1</a></li><li><a href="http://localhost:7070/#/a2">http://localhost:7070/#/a2</a></li></ul></li><li><p>每个路由都有两个必须属性</p><ul><li><p>path：路径</p></li><li><p>component：组件</p></li></ul></li><li><p>createRouter 用来创建 router 对象，作为默认导出</p></li></ul><p>需要在 main.ts 中导入 router 对象：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A5</span> <span class="keyword">from</span> <span class="string">&#x27;./views/A5.vue&#x27;</span>  <span class="comment">// vue-router</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/a5router&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="variable constant_">A5</span>).<span class="title function_">use</span>(antdv).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>A5 是根组件，不必在 router 中定义，但需要在其中定义 router-view，用来控制路由跳转后，A51、A52 这些组件的显示位置，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a5&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A51</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A51.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A52</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A52.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a3&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A53.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>用 import 关键字导入，效果是打包时会将组件的 js 代码都打包成一个大的 js 文件，如果组件非常多，会影响页面加载速度</li><li>而 import 函数导入（动态导入），则是按需加载，即<ul><li>当路由跳转到 /a3 路径时，才会去加载 A53 组件对应的 js 代码</li><li>vue-router 官方推荐采用动态导入</li></ul></li></ul><p><br></p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>如果希望再嵌套更深层次的路由跳转，例如：希望在 A53 组件内再进行路由跳转</p><p>首先，修改 A53.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a53&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>其次，再修改 /src/router/a5router.ts 文件 内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A51</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A51.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A52</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A52.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a3&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A53.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;student&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A531.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;teacher&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A532.vue&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>用法1</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A51</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A51.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A52</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A52.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a3&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A53.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/a3/student&#x27;</span>, <span class="comment">// 重定向到另外路径</span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;student&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A531.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;teacher&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A532.vue&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>效果是，页面输入 /a3，紧接着会重定向跳转到 /a3/student</p><p>用法2</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A51</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A51.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A52</span> <span class="keyword">from</span> <span class="string">&#x27;../views/A52.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a1&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="variable constant_">A51</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a2&#x27;</span>, </span><br><span class="line">    <span class="attr">component</span>: <span class="variable constant_">A52</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:pathMatcher(.*)*&#x27;</span>, <span class="comment">// 可以匹配剩余的路径</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/a2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>效果是，当页面输入一个不存在路径 /aaa 时，会被 <code>path: &#39;/:pathMatcher(.*)*&#39;</code> 匹配到，然后重定向跳转到 A52 组件去</p><p><br></p><h2 id="主页布局"><a href="#主页布局" class="headerlink" title="主页布局"></a>主页布局</h2><p>借助 antdv 的 layout 组件，可以实现主页【上】【左】【右】布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a53&quot;&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header&gt;&lt;/a-layout-header&gt;</span><br><span class="line">      &lt;a-layout&gt;</span><br><span class="line">        &lt;a-layout-sider&gt;&lt;/a-layout-sider&gt;</span><br><span class="line">        &lt;a-layout-content&gt;</span><br><span class="line">          &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/a-layout-content&gt;</span><br><span class="line">      &lt;/a-layout&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.a53 &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background-color: rgb(220, 225, 255);</span><br><span class="line">  background-image: url(&quot;data:image/svg+xml,%3Csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27;%3E%3Ctext x=&#x27;35&#x27; y=&#x27;10&#x27; font-size=&#x27;14&#x27; font-family=&#x27;system-ui, sans-serif&#x27; text-anchor=&#x27;middle&#x27; dominant-baseline=&#x27;middle&#x27;%3EA53(主页)%3C/text%3E%3C/svg%3E&quot;);</span><br><span class="line">  padding: 20px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.ant-layout-header &#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background-color:darkseagreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-sider &#123;</span><br><span class="line">  background-color:lightsalmon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-content &#123;</span><br><span class="line">  background-color: aliceblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-footer &#123;</span><br><span class="line">  background-color:darkslateblue;</span><br><span class="line">  height: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-has-sider &#123;</span><br><span class="line">  height: calc(100% - 50px);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="侧边栏菜单"><a href="#侧边栏菜单" class="headerlink" title="侧边栏菜单"></a>侧边栏菜单</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a53&quot;&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header&gt;&lt;/a-layout-header&gt;</span><br><span class="line">      &lt;a-layout&gt;</span><br><span class="line">        &lt;a-layout-sider&gt;</span><br><span class="line">          &lt;a-menu theme=&quot;dark&quot; mode=&quot;inline&quot;&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;1&quot;&gt;</span><br><span class="line">              &lt;router-link to=&quot;/a3/student&quot;&gt;菜单1&lt;/router-link&gt;</span><br><span class="line">            &lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;2&quot;&gt;</span><br><span class="line">              &lt;router-link to=&quot;/a3/teacher&quot;&gt;菜单2&lt;/router-link&gt;</span><br><span class="line">            &lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;3&quot;&gt;菜单3&lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-sub-menu :key=&quot;4&quot; title=&quot;菜单4&quot;&gt;</span><br><span class="line">              &lt;a-menu-item :key=&quot;41&quot;&gt;菜单41&lt;/a-menu-item&gt;</span><br><span class="line">              &lt;a-menu-item :key=&quot;42&quot;&gt;菜单42&lt;/a-menu-item&gt;</span><br><span class="line">            &lt;/a-sub-menu&gt;</span><br><span class="line">          &lt;/a-menu&gt;</span><br><span class="line">        &lt;/a-layout-sider&gt;</span><br><span class="line">        &lt;a-layout-content&gt;</span><br><span class="line">          &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/a-layout-content&gt;</span><br><span class="line">      &lt;/a-layout&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>a-menu-item 与 a-sub-menu 都必须为 key 属性唯一赋值，否则会产生混乱</li><li>router-link 标签用来切换路由，to 是目标路由的路径</li><li>theme 属性定义菜单的主题（默认亮色主题，dark 为暗色主题）</li><li>mode 属性定义子菜单的展示模式（默认弹出，inline 显示在下方）</li></ul><h2 id="菜单图标"><a href="#菜单图标" class="headerlink" title="菜单图标"></a>菜单图标</h2><p>安装图标依赖</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @ant-design/icons-vue</span><br></pre></td></tr></table></figure><p>菜单中使用图标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a53&quot;&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header&gt;&lt;/a-layout-header&gt;</span><br><span class="line">      &lt;a-layout&gt;</span><br><span class="line">        &lt;a-layout-sider&gt;</span><br><span class="line">          &lt;a-menu theme=&quot;dark&quot; mode=&quot;inline&quot;&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;1&quot;&gt;</span><br><span class="line">              &lt;template #icon&gt;</span><br><span class="line">                &lt;highlight-outlined /&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">              &lt;router-link to=&quot;/a3/student&quot;&gt;菜单1&lt;/router-link&gt;</span><br><span class="line">            &lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;2&quot;&gt;</span><br><span class="line">              &lt;template #icon&gt;</span><br><span class="line">                &lt;align-center-outlined /&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">              &lt;router-link to=&quot;/a3/teacher&quot;&gt;菜单2&lt;/router-link&gt;</span><br><span class="line">            &lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-menu-item :key=&quot;3&quot;&gt;</span><br><span class="line">              &lt;template #icon&gt;</span><br><span class="line">                &lt;strikethrough-outlined /&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">              菜单3&lt;/a-menu-item&gt;</span><br><span class="line">            &lt;a-sub-menu :key=&quot;4&quot; title=&quot;菜单4&quot;&gt;</span><br><span class="line">              &lt;template #icon&gt;</span><br><span class="line">                &lt;sort-descending-outlined /&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">              &lt;a-menu-item :key=&quot;41&quot;&gt;菜单41&lt;/a-menu-item&gt;</span><br><span class="line">              &lt;a-menu-item :key=&quot;42&quot;&gt;菜单42&lt;/a-menu-item&gt;</span><br><span class="line">            &lt;/a-sub-menu&gt;</span><br><span class="line">          &lt;/a-menu&gt;</span><br><span class="line">        &lt;/a-layout-sider&gt;</span><br><span class="line">        &lt;a-layout-content&gt;</span><br><span class="line">          &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/a-layout-content&gt;</span><br><span class="line">      &lt;/a-layout&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;HighlightOutlined, AlignCenterOutlined, StrikethroughOutlined, SortDescendingOutlined&#125; from &#x27;@ant-design/icons-vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>图标组件没有全局绑定，需要 import 之后才能使用</li><li>用 <code>&lt;template #icon&gt;&lt;/template&gt;</code> 插槽，才能确定图标展示的位置（菜单文字之前）</li></ul><p><br></p><h2 id="二次封装图标组件"><a href="#二次封装图标组件" class="headerlink" title="二次封装图标组件"></a>二次封装图标组件</h2><p>最终希望用统一的图标组件去使用图标，图标名只是作为一个属性值传递进去，例如：</p><p>使用者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-icon icon=&quot;highlight-outlined&quot;&gt;&lt;/a-icon&gt;</span><br><span class="line">  &lt;a-icon icon=&quot;align-center-outlined&quot;&gt;&lt;/a-icon&gt;</span><br><span class="line">  &lt;a-icon icon=&quot;strikethrough-outlined&quot;&gt;&lt;/a-icon&gt;</span><br><span class="line">  &lt;a-icon icon=&quot;sort-descending-outlined&quot;&gt;&lt;/a-icon&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import AIcon from &#x27;../components/AIcon1.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>方法1，使用 vue 组件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123;HighlightOutlined, AlignCenterOutlined, StrikethroughOutlined, SortDescendingOutlined&#125; from &#x27;@ant-design/icons-vue&#x27;</span><br><span class="line">const props = defineProps&lt;&#123;icon:string&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;highlight-outlined v-if=&quot;icon===&#x27;highlight-outlined&#x27;&quot;&gt;&lt;/highlight-outlined&gt;</span><br><span class="line">  &lt;align-center-outlined v-else-if=&quot;icon===&#x27;align-center-outlined&#x27;&quot;&gt;&lt;/align-center-outlined&gt;</span><br><span class="line">  &lt;strikethrough-outlined v-else-if=&quot;icon===&#x27;strikethrough-outlined&#x27;&quot;&gt;&lt;/strikethrough-outlined&gt;</span><br><span class="line">  &lt;sort-descending-outlined v-else-if=&quot;icon===&#x27;sort-descending-outlined&#x27;&quot;&gt;&lt;/sort-descending-outlined&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>缺点：实现太笨</li></ul><p><br></p><p><strong>方法2，使用函数式组件</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Icons</span> <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Module</span> &#123;</span><br><span class="line">  [<span class="attr">p</span>:<span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1: 组件属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AIcon</span> = (<span class="params">props:&#123;icon:<span class="built_in">string</span>&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// console.log(props.icon)</span></span><br><span class="line">  <span class="comment">// console.log(Icons)</span></span><br><span class="line">  <span class="comment">// 参数1: 组件对象</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">im</span>: <span class="title class_">Module</span> = <span class="title class_">Icons</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(im[<span class="title function_">toCamelCase</span>(props.<span class="property">icon</span>)])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AIcon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将-分隔的单词转换为大驼峰命名的单词</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toCamelCase</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123; <span class="comment">// highlight-outlined</span></span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>) <span class="comment">// [&#x27;highlight&#x27;, &#x27;outlined&#x27;]</span></span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>)=&gt;</span> e.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + e.<span class="title function_">slice</span>(<span class="number">1</span>) ) <span class="comment">// [&#x27;Highlight&#x27;, &#x27;Outlined&#x27;]</span></span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Icons 的结构如下</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  HighlightOutlined: HighlightOutlined组件对象,</span></span><br><span class="line"><span class="comment">  MonitorOutlined: MonitorOutlined组件对象,</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>需要动态生成标签的时候，可以考虑使用函数式组件</li></ul><p><br></p><p><strong>方法3，使用 jsx 组件</strong></p><p>首先，安装  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vitejs/plugin-vue-jsx -D</span><br></pre></td></tr></table></figure><p>配置 vite.config.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">vueJsx</span>()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>编写一个 Hi.tsx 组件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props: &#123; msg: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;props.msg&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后被其它组件使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import Hi from &#x27;../components/Hi&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Hi msg=&quot;Hello,World&quot;&gt;&lt;/Hi&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>用 jsx 实现图标组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Icons</span> <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Module</span> &#123;</span><br><span class="line">  [<span class="attr">p</span>:<span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toCamelCase</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123; <span class="comment">// highlight-outlined</span></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>) <span class="comment">// [&#x27;highlight&#x27;, &#x27;outlined&#x27;]</span></span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + e.<span class="title function_">slice</span>(<span class="number">1</span>)) <span class="comment">// [&#x27;Highlight&#x27;, &#x27;Outlined&#x27;]</span></span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// HighlightOutlined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props: &#123;icon: <span class="built_in">string</span>&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">im</span>: <span class="title class_">Module</span> = <span class="title class_">Icons</span></span><br><span class="line">    <span class="keyword">const</span> tag = im[<span class="title function_">toCamelCase</span>(props.<span class="property">icon</span>)] <span class="comment">// 图标组件</span></span><br><span class="line">    <span class="comment">// HighlightOutlined</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">tag</span>&gt;</span><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span> <span class="comment">// 返回组件标签</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="动态路由与菜单"><a href="#动态路由与菜单" class="headerlink" title="动态路由与菜单"></a>动态路由与菜单</h2><p><strong>路由文件</strong></p><p>a6router.js</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStorage &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">Menu</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/Model8080&#x27;</span></span><br><span class="line"><span class="keyword">const</span> clientRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A6Login.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A6NotFound.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/A6Main.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:pathMatcher(.*)*&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;remaining&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: clientRoutes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> serverMenus = useStorage&lt;<span class="title class_">Menu</span>[]&gt;(<span class="string">&#x27;serverMenus&#x27;</span>, [])</span><br><span class="line"><span class="keyword">const</span> serverRoutes = useStorage&lt;<span class="title class_">Route</span>[]&gt;(<span class="string">&#x27;serverRoutes&#x27;</span>, [])</span><br><span class="line"><span class="title function_">addServerRoutes</span>(serverRoutes.<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addServerRoutes</span>(<span class="params">routeList: Route[]</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> r <span class="keyword">of</span> routeList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r.<span class="property">parentName</span>) &#123;</span><br><span class="line">      router.<span class="title function_">addRoute</span>(r.<span class="property">parentName</span>, &#123;</span><br><span class="line">        <span class="attr">path</span>: r.<span class="property">path</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(r.<span class="property">component</span>),</span><br><span class="line">        <span class="attr">name</span>: r.<span class="property">name</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  serverRoutes.<span class="property">value</span> = routeList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resetRoutes</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> r <span class="keyword">of</span> clientRoutes) &#123;</span><br><span class="line">    router.<span class="title function_">addRoute</span>(r)</span><br><span class="line">  &#125;</span><br><span class="line">  serverRoutes.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">  serverMenus.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>本文件重要的函数及变量</p><ul><li>addServerRoutes 函数向路由表中添加由服务器提供的路由，路由分成两部分<ul><li>clientRoutes 这是客户端固定的路由</li><li>serverRoutes 这是服务器变化的路由，存储于 localStorage</li></ul></li><li>resetRoutes 函数用来将路由重置为 clientRoutes <ul><li>vue-router@4 中的 addRoute 方法会【覆盖】同名路由，这是这种实现的关键</li><li>因此，服务器返回的路由最好是 main 的子路由，这样重置时就会比较简单，用之前的 main 一覆盖就完事了</li></ul></li><li>serverMenus 变量记录服务器变化的菜单，存储于 localStorage</li></ul><p><br></p><p><strong>登录组件</strong></p><p>动态路由应当在登录时生成，A6Login.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login&quot;&gt;</span><br><span class="line">    &lt;a-form :label-col=&quot;&#123; span: 6 &#125;&quot; autocomplete=&quot;off&quot;&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;用户名&quot; v-bind=&quot;validateInfos.username&quot;&gt;</span><br><span class="line">        &lt;a-input v-model:value=&quot;dto.username&quot; /&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;密码&quot; v-bind=&quot;validateInfos.password&quot;&gt;</span><br><span class="line">        &lt;a-input-password v-model:value=&quot;dto.password&quot; /&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item :wrapper-col=&quot;&#123; offset: 6, span: 16 &#125;&quot;&gt;</span><br><span class="line">        &lt;a-button type=&quot;primary&quot; @click=&quot;onClick&quot;&gt;Submit&lt;/a-button&gt;</span><br><span class="line">      &lt;/a-form-item&gt;      </span><br><span class="line">    &lt;/a-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; Form &#125; from &#x27;ant-design-vue&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import axios from &#x27;../api/request&#x27;</span><br><span class="line">import &#123; useRequest &#125; from &#x27;vue-request&#x27;</span><br><span class="line">import &#123; AxiosRespToken, LoginDto, AxiosRespMenuAndRoute &#125; from &#x27;../model/Model8080&#x27;</span><br><span class="line">import &#123; resetRoutes, addServerRoutes, serverMenus &#125; from &#x27;../router/a6router&#x27;</span><br><span class="line">const dto = ref(&#123;username:&#x27;&#x27;, password:&#x27;&#x27;&#125;)</span><br><span class="line">const rules = ref(&#123;</span><br><span class="line">  username: [</span><br><span class="line">    &#123;required: true, message:&#x27;用户名必填&#x27;&#125;</span><br><span class="line">  ],</span><br><span class="line">  password:[</span><br><span class="line">    &#123;required: true, message:&#x27;密码必填&#x27;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">const &#123; validateInfos, validate &#125; = Form.useForm(dto, rules)</span><br><span class="line">const router = useRouter()</span><br><span class="line">const &#123; runAsync:login &#125; = useRequest&lt;AxiosRespToken, LoginDto[]&gt;((dto)=&gt; axios.post(&#x27;/api/loginJwt&#x27;, dto), &#123;manual:true&#125;)</span><br><span class="line">const &#123; runAsync:menu &#125; = useRequest&lt;AxiosRespMenuAndRoute, string[]&gt;((username)=&gt; axios.get(`/api/menu/$&#123;username&#125;`), &#123;manual:true&#125;)</span><br><span class="line">async function onClick() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await validate()</span><br><span class="line">    const loginResp = await login(dto.value</span><br><span class="line">    if(loginResp.data.code === 200) &#123; // 登录成功</span><br><span class="line">      const token = loginResp.data.data.token</span><br><span class="line">      const menuResp = await menu(dto.value.username)</span><br><span class="line">      const routeList = menuResp.data.data.routeList</span><br><span class="line">      addServerRoutes(routeList)</span><br><span class="line">      serverMenus.value = menuResp.data.data.menuTree</span><br><span class="line">      router.push(&#x27;/&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  resetRoutes()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.login&#123;</span><br><span class="line">  margin: 200px auto;</span><br><span class="line">  width: 25%;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  height: 180px;</span><br><span class="line">  background-color: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>登录成功后去请求 <code>/api/menu/&#123;username&#125;</code>  获取该用户的菜单和路由</li><li>router.push 方法用来以编程方式跳转至主页路由</li></ul><p><br></p><p><strong>主页组件</strong></p><p>A6Main.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a6main&quot;&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header&gt;</span><br><span class="line">      &lt;/a-layout-header&gt;</span><br><span class="line">      &lt;a-layout&gt;</span><br><span class="line">        &lt;a-layout-sider&gt;</span><br><span class="line">          &lt;a-menu mode=&quot;inline&quot; theme=&quot;dark&quot;&gt;</span><br><span class="line">            &lt;template v-for=&quot;m1 of serverMenus&quot;&gt;</span><br><span class="line">              &lt;a-sub-menu v-if=&quot;m1.children&quot; :key=&quot;m1.id&quot; :title=&quot;m1.title&quot;&gt;</span><br><span class="line">                &lt;template #icon&gt;&lt;a-icon :icon=&quot;m1.icon&quot;&gt;&lt;/a-icon&gt;&lt;/template&gt;</span><br><span class="line">                &lt;a-menu-item v-for=&quot;m2 of m1.children&quot; :key=&quot;m2.id&quot;&gt;</span><br><span class="line">                  &lt;template #icon&gt;&lt;a-icon :icon=&quot;m2.icon&quot;&gt;&lt;/a-icon&gt;&lt;/template&gt;</span><br><span class="line">                  &lt;router-link v-if=&quot;m2.routePath&quot; :to=&quot;m2.routePath&quot;&gt;&#123;&#123;m2.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">                  &lt;span v-else&gt;&#123;&#123;m2.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;/a-menu-item&gt;</span><br><span class="line">              &lt;/a-sub-menu&gt;</span><br><span class="line">              &lt;a-menu-item v-else :key=&quot;m1.id&quot;&gt;</span><br><span class="line">                &lt;template #icon&gt;&lt;a-icon :icon=&quot;m1.icon&quot;&gt;&lt;/a-icon&gt;&lt;/template&gt;</span><br><span class="line">                &lt;router-link v-if=&quot;m1.routePath&quot; :to=&quot;m1.routePath&quot;&gt;&#123;&#123;m1.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">                &lt;span v-else&gt;&#123;&#123;m1.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">              &lt;/a-menu-item&gt;</span><br><span class="line">            &lt;/template&gt;            </span><br><span class="line">          &lt;/a-menu&gt;</span><br><span class="line">        &lt;/a-layout-sider&gt;</span><br><span class="line">        &lt;a-layout-content&gt;</span><br><span class="line">          &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/a-layout-content&gt;</span><br><span class="line">      &lt;/a-layout&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import AIcon from &#x27;../components/AIcon3&#x27; // jsx icon 组件</span><br><span class="line">import &#123; serverMenus &#125; from &#x27;../router/a6router&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.a6main &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background-color: rgb(220, 225, 255);</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.ant-layout-header &#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background-color:darkseagreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-sider &#123;</span><br><span class="line">  background-color:lightsalmon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-content &#123;</span><br><span class="line">  background-color: aliceblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-footer &#123;</span><br><span class="line">  background-color:darkslateblue;</span><br><span class="line">  height: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ant-layout-has-sider &#123;</span><br><span class="line">  height: calc(100% - 50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="token-使用"><a href="#token-使用" class="headerlink" title="token 使用"></a>token 使用</h2><ol><li>获取用户信息，例如服务器端可以把用户名、该用户的路由、菜单信息都统一从 token 返回</li><li>前端路由跳转依据，例如跳转前检查 token，如果不存在，表示未登录，就避免跳转至某些路由</li><li>后端 api 访问依据，例如每次发请求携带 token，后端需要身份校验的 api 需要用到</li></ol><p><br></p><h1 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h1><p>需求：在组件 p1 里更新了数据，主页组件也同步更新显示</p><ul><li>storage 虽然可以实现多个组件的数据共享，但是需要【主动访问】才能获取更新后的数据</li><li>本例中由于没有涉及主页组件的 mounted 操作，因此并不会【主动】获取 storage 的数据 </li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><p>在 main.ts 中引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="variable constant_">A6</span>).<span class="title function_">use</span>(antdv).<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>()).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="定义Store"><a href="#定义Store" class="headerlink" title="定义Store"></a>定义Store</h2><p>再新建 store 目录来管理共享数据，下面是 /src/store/UserInfo.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;../api/request&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserInfoDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/Model8080&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserInfo = <span class="title function_">defineStore</span>(<span class="string">&#x27;userInfo&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">get</span>(<span class="params">username: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> resp = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`/api/info/<span class="subst">$&#123;username&#125;</span>`</span>)</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>, resp.<span class="property">data</span>.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">update</span>(<span class="params">dto: UserInfoDto</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/info&#x27;</span>, dto)</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>, dto)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>定义了 useUserInfo 函数，用来获取共享数据，它可能用于多个组件</p><ul><li>命名习惯上，函数变量以 use 打头</li></ul></li><li><p>state 定义数据格式</p></li><li><p>actions 定义操作数据的方法</p><ul><li><p>get 方法用来获取用户信息</p></li><li><p>update 方法用来修改用户信息</p></li></ul></li></ul><ul><li>由于 useRequest 必须放在 setup 函数内，这里简化起见，直接使用了 axios</li></ul><p>获取用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a6main&quot;&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;serverUsername&#125;&#125; 【&#123;&#123;userInfo.name&#125;&#125; - &#123;&#123;userInfo.sex&#125;&#125;】&lt;/span&gt;</span><br><span class="line">      &lt;/a-layout-header&gt;</span><br><span class="line">      &lt;a-layout&gt;</span><br><span class="line">        &lt;!-- ... --&gt;</span><br><span class="line">      &lt;/a-layout&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">import AIcon from &#x27;../components/AIcon3&#x27; // jsx icon 组件</span><br><span class="line">import &#123; serverMenus, serverUsername &#125; from &#x27;../router/a6router&#x27;</span><br><span class="line">import &#123; useUserInfo &#125; from &#x27;../store/UserInfo&#x27;</span><br><span class="line">const userInfo = useUserInfo()</span><br><span class="line"></span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  userInfo.get(serverUsername.value)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>修改用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a6p1&quot;&gt;</span><br><span class="line">    &lt;h3&gt;修改用户信息&lt;/h3&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;a-form&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;用户名&quot;&gt;</span><br><span class="line">        &lt;a-input readonly v-model:value=&quot;dto.username&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;姓名&quot; v-bind=&quot;validateInfos.name&quot;&gt;</span><br><span class="line">        &lt;a-input v-model:value=&quot;dto.name&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;性别&quot;&gt;</span><br><span class="line">        &lt;a-radio-group v-model:value=&quot;dto.sex&quot;&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;男&quot;&gt;男&lt;/a-radio-button&gt;</span><br><span class="line">          &lt;a-radio-button value=&quot;女&quot;&gt;女&lt;/a-radio-button&gt;</span><br><span class="line">        &lt;/a-radio-group&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">    &lt;/a-form&gt;</span><br><span class="line">    &lt;a-button type=&quot;primary&quot; @click=&quot;onClick&quot;&gt;确定&lt;/a-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Form &#125; from &#x27;ant-design-vue&#x27;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; UserInfoDto &#125; from &#x27;../model/Model8080&#x27;</span><br><span class="line">import &#123; useUserInfo &#125; from &#x27;../store/UserInfo&#x27;;</span><br><span class="line">const dto = ref&lt;UserInfoDto&gt;(&#123; username: &#x27;&#x27;, name: &#x27;&#x27;, sex: &#x27;&#x27; &#125;)</span><br><span class="line">const userInfo = useUserInfo()</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  Object.assign(dto.value, userInfo)</span><br><span class="line">&#125;)</span><br><span class="line">const rules = ref(&#123;</span><br><span class="line">  name: [</span><br><span class="line">    &#123;required: true, message:&#x27;姓名必填&#x27;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">const &#123; validateInfos, validate &#125; = Form.useForm(dto, rules)</span><br><span class="line">async function onClick() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await validate()</span><br><span class="line">    await userInfo.update(dto.value)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>不能直接把 userInfo 绑定到表单，需要 dto 中转一下</li><li>userInfo.update 和 useInfo.get 返回的都是 Promise 对象，可以配合 await 一起用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript基础</title>
      <link href="/post/TypeScript/"/>
      <url>/post/TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="动态类型的问题"><a href="#动态类型的问题" class="headerlink" title="动态类型的问题"></a>动态类型的问题</h1><p> js 属于动态类型语言，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">obj</span>) &#123;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obj 可能只是个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;hello, world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>obj 也有可能是个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello, world&#x27;</span>))</span><br></pre></td></tr></table></figure><p>obj 类型不确定，就给后期使用者带来了麻烦，一旦参数传不对，代码就崩溃了</p><p>动态类型意味着</p><ul><li>运行代码时才知道发生什么 (running the code to see what happens)</li></ul><p>静态类型意味着</p><ul><li>在代码运行前，就对它的行为做出预测 (make predications about what code is expected before it runs)</li></ul><p>下面的 typescript 代码，就在代码运行前对参数加入了约束限制</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">msg : <span class="built_in">string</span></span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>限制了参数只能做 string 那些事</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">msg : <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">  <span class="title function_">msg</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>限制了参数只能做函数那些事</li></ul><p><br></p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>安装 typescript 编译器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>编写 ts 代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">msg: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>(<span class="string">&#x27;hello,world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行 tsc 编译命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts</span><br></pre></td></tr></table></figure><p>编译生成 js 代码，编译后进行了类型擦除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hello</span>(<span class="string">&#x27;hello,world&#x27;</span>);</span><br></pre></td></tr></table></figure><p>再来一个例子，用 interface 定义用户类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">u: User</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">name</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhangs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">u</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhangs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br></pre></td></tr></table></figure><p>可见，typescript 属于编译时实施类型检查（静态类型）的技术</p><p><br></p><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><div class="table-container"><table><thead><tr><th>类型</th><th>例</th><th>备注</th></tr></thead><tbody><tr><td>字符串类型</td><td>string</td><td></td></tr><tr><td>数字类型</td><td>number</td><td></td></tr><tr><td>布尔类型</td><td>boolean</td><td></td></tr><tr><td>数组类型</td><td>number[],string[], boolean[] 依此类推</td><td></td></tr><tr><td>任意类型</td><td>any</td><td>相当于又回到了没有类型的时代</td></tr><tr><td>复杂类型</td><td>type 与 interface</td><td></td></tr><tr><td>函数类型</td><td>() =&gt; void</td><td>对函数的参数和返回值进行说明</td></tr><tr><td>字面量类型</td><td>“a”\</td><td>“b”\</td><td>“c”</td><td>限制变量或参数的取值</td></tr><tr><td>nullish类型</td><td>null 与 undefined</td><td></td></tr><tr><td>泛型</td><td><code>&lt;T&gt;</code>，<code>&lt;T extends 父类型&gt;</code></td></tr></tbody></table></div><p><br></p><h2 id="标注位置"><a href="#标注位置" class="headerlink" title="标注位置"></a>标注位置</h2><p><strong>标注变量</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&#x27;hello,world&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>一般可以省略，因为可以根据后面的字面量推断出前面变量类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;hello,world&#x27;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>标注参数</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候，都能够推断出参数类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Eve&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> lowercaseNames = names.<span class="title function_">map</span>(<span class="function">(<span class="params">e: <span class="built_in">string</span></span>) =&gt;</span> e.<span class="title function_">toLowerCase</span>())</span><br></pre></td></tr></table></figure><ul><li>可以用类型推断，推断出 e 是 string 类型</li></ul><p><br></p><p><strong>标注返回值</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) : <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一般也可以省略，因为可以根据返回值做类型推断</li></ul><p><br></p><h2 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h2><p><strong>type</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Cat</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c1</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c2</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span> &#125;  <span class="comment">// 错误: 缺少 age 属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c3</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小黑&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="string">&#x27;公&#x27;</span> &#125; <span class="comment">// 错误: 多出 sex 属性</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>interface</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c1</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c2</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span> &#125;  <span class="comment">// 错误: 缺少 age 属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c3</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小黑&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="string">&#x27;公&#x27;</span> &#125; <span class="comment">// 错误: 多出 sex 属性</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>可选属性</strong></p><p>如果需要某个属性可选，可以用下面的语法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c1</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c2</span>: <span class="title class_">Cat</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span> &#125;  <span class="comment">// 正确: age 属性可选</span></span><br></pre></td></tr></table></figure><ul><li>可选属性要注意处理 undefined 值</li></ul><p><br></p><p><strong>鸭子类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">cat: Cat</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125; </span><br><span class="line"><span class="title function_">test</span>(c1)</span><br></pre></td></tr></table></figure><ul><li>const c1 并没有声明类型为 Cat，但它与 Cat 类型有一样的属性，也可以被当作是 Cat 类型</li></ul><p><br> </p><h2 id="方法类型"><a href="#方法类型" class="headerlink" title="方法类型"></a>方法类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Api</span> &#123;</span><br><span class="line">  <span class="title function_">foo</span>(): <span class="built_in">void</span>,</span><br><span class="line">  <span class="title function_">bar</span>(<span class="attr">str</span>: <span class="built_in">string</span>): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">api: Api</span>) &#123;</span><br><span class="line">  api.<span class="title function_">foo</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(api.<span class="title function_">bar</span>(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(&#123;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>) &#125;,</span><br><span class="line">  <span class="title function_">bar</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123; <span class="keyword">return</span> str.<span class="title function_">toUpperCase</span>() &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printText</span>(<span class="params">s: <span class="built_in">string</span>, alignment: <span class="string">&quot;left&quot;</span> | <span class="string">&quot;right&quot;</span> | <span class="string">&quot;center&quot;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s, alignment)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printText</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="title function_">printText</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>) <span class="comment">// 错误: 取值只能是 left | right | center</span></span><br></pre></td></tr></table></figure><h2 id="nullish-类型"><a href="#nullish-类型" class="headerlink" title="nullish 类型"></a>nullish 类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">x?: <span class="built_in">string</span> | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x?.<span class="title function_">toUpperCase</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="title function_">test</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><ul><li>x?: string | null 表示可能是 undefined 或者是 string 或者是 null</li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>下面的几个类型声明显然有一定的相似性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">RefString</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RefNumber</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RefBoolean</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">r1</span>: <span class="title class_">RefString</span> = &#123; <span class="attr">value</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r2</span>: <span class="title class_">RefNumber</span> = &#123; <span class="attr">value</span>: <span class="number">123</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r3</span>: <span class="title class_">RefBoolean</span> = &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure><p>可以改进为</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Ref</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">value</span>: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">r1</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">string</span>&gt; = &#123; <span class="attr">value</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r2</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">number</span>&gt; = &#123; <span class="attr">value</span>: <span class="number">123</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r3</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">boolean</span>&gt; = &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>泛型的要点就是 <code>&lt;类型参数&gt;</code>，把【类型】也当作一个变化的要素，像参数一样传递过来，这样就可以派生出结构相似的新类型</li></ul><p>函数定义也支持泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> ref&lt;T&gt;(<span class="attr">n</span>: T): <span class="title class_">Ref</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">value</span>: n &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v1 = <span class="title function_">ref</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// Ref&lt;string&gt;</span></span><br><span class="line"><span class="keyword">const</span> v2 = <span class="title function_">ref</span>(<span class="number">123.3333</span>);<span class="comment">// Ref&lt;number&gt;</span></span><br><span class="line"></span><br><span class="line">v1.<span class="property">value</span>.<span class="title function_">toLocaleLowerCase</span>()</span><br><span class="line">v2.<span class="property">value</span>.<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><br></p><h1 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h1><h2 id="更好理解框架"><a href="#更好理解框架" class="headerlink" title="更好理解框架"></a>更好理解框架</h2><p>现在越来越多的前端框架采用 typescript，如果懂 typescript 语法，可以更好地阅读框架代码</p><p>以 Map 为例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;()</span><br><span class="line">map</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value,key,m</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value, key)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>注意编译需要 <code>tsc --target es6 .\xxx.ts</code></li></ul><p><br></p><h2 id="更好的提示"><a href="#更好的提示" class="headerlink" title="更好的提示"></a>更好的提示</h2><p>例如，从服务器返回的一段 json，如果不用 typescript，则编辑器也不能给出准确的提示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">`&#123; &quot;name&quot;:&quot;张三&quot;, &quot;age&quot;:18 &#125;`</span>)</span><br></pre></td></tr></table></figure><p><br></p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><blockquote><p>关于 TypeScript 与 JavaScript 中的类语法不是重点，class 相关语法只是起到辅助作用，更重要的是前面讲的 interface</p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其实会被编译成这个样子（默认 —target=es3）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = <span class="comment">/** <span class="doctag">@class</span> */</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">User</span>;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure><p>所以 js 中的 class，并不等价于 java 中的 class，它还是基于原型实现的。</p><p><br></p><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">u.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span><span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><ul><li>readonly 是 typescript 特有的，表示该属性只读</li></ul><p><br></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>]正在学习`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">u.<span class="title function_">study</span>()</span><br></pre></td></tr></table></figure><p><br></p><h2 id="get，set"><a href="#get，set" class="headerlink" title="get，set"></a>get，set</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">name</span>)</span><br><span class="line">u.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><ul><li>注意，需要在编译时加上 <code>tsc --target es6 .\xxx.ts</code> 选项</li><li>es6 等价于 es2015，再此之上还有 es2016 … es2022</li></ul><p><br></p><h2 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">study</span>(<span class="attr">course</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">implements</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">study</span>(<span class="params">course: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>]正在学习[<span class="subst">$&#123;course&#125;</span>]`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = <span class="keyword">new</span> <span class="title class_">UserImpl</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">user.<span class="title function_">study</span>(<span class="string">&#x27;Typescript&#x27;</span>)</span><br><span class="line">user.<span class="title function_">foo</span>() <span class="comment">// 错误，必须是接口中定义的方法</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="继承与接口"><a href="#继承与接口" class="headerlink" title="继承与接口"></a>继承与接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在飞翔`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">Flyable</span> &amp; <span class="title class_">Animal</span> = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;小花&quot;</span>)</span><br><span class="line">b.<span class="title function_">fly</span>()</span><br></pre></td></tr></table></figure><ul><li>Flyable &amp; Animal 表示变量是 flyable 类型，同时也是 Animal 类型</li></ul><p><br></p><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">  <span class="title function_">study</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`father study`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;  </span><br><span class="line">  <span class="title function_">study</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">study</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`son study`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f</span>: <span class="title class_">Father</span> = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line">f.<span class="title function_">study</span>()</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java前端技术基础</title>
      <link href="/post/Java%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
      <url>/post/Java%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML与CSS"><a href="#HTML与CSS" class="headerlink" title="HTML与CSS"></a>HTML与CSS</h1><p>HTML是超文本标记语言（HyperText Markup Language）的缩写。它是一种用于创建网页和Web应用程序的标准标记语言。HTML使用标签来标记文档中的元素，定义它们的结构和内容。</p><p>CSS是级联（层叠）样式表（Cascading Style Sheets）。它是一种用于描述网页的表现和展示效果。</p><p>CSS与HTML结合使用，可以控制网页中各个元素的布局、颜色、字体、大小、背景等外观特征。</p><p><br></p><h2 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML 元素"></a>HTML 元素</h2><p>HTML 由一系列元素 <code>elements</code> 组成，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>整体称之为元素</li><li><code>&lt;p&gt;</code> 和 <code>&lt;/p&gt;</code> 分别称为起始和结束标签</li><li><p>标签包围起来的 Hello, world 称之为内容</p></li><li><p>p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落</p></li></ul><p>元素还可以有属性，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识</li></ul><p>元素之间可以嵌套，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大<span class="tag">&lt;/<span class="name">b</span>&gt;</span>的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误嵌套写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不包含内容的元素称之为空元素，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>img 作用是用来展示图片</li><li>src 属性用来指明图片路径</li></ul><p><br></p><h2 id="HTML-页面"><a href="#HTML-页面" class="headerlink" title="HTML 页面"></a>HTML 页面</h2><p>前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>html</code> 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素</li><li><code>head</code> 元素包含的是那些不用于展现内容的元素，如 <code>title</code>，<code>link</code>，<code>meta</code> 等</li><li><code>body</code> 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素</li></ul><p><br></p><h2 id="常见元素"><a href="#常见元素" class="headerlink" title="常见元素"></a>常见元素</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p><strong>Heading</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2号标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3号标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4号标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>5号标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>6号标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Paragraph</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>List</strong></p><p>无序列表 unordered list</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多级列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    北京市</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>海淀区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>朝阳区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>昌平区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    河北省</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>石家庄<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>保定<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Anchor</strong></p><p>锚，超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;网页地址&quot;</span>&gt;</span>超链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><p><strong>Image</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>src 格式有 3 种</p><ul><li><p>文件地址</p></li><li><p>data URL，格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:媒体类型;base64,数据</span><br></pre></td></tr></table></figure></li><li><p>object URL，需要配合 javascript 使用</p></li></ul><p><br><strong>Video</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><strong>Audio</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p><strong>作用与语法</strong></p><p>表单的作用：<strong>收集</strong>用户填入的<strong>数据</strong>，并将这些数据<strong>提交给服务器</strong></p><p>表单的语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;服务器地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;请求方式&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;数据格式&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单项 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>method 请求方式有 <ul><li>get （默认）提交时，数据跟在 URL 地址之后</li><li>post 提交时，数据在请求体内</li></ul></li><li>enctype 在 post 请求时，指定请求体的数据格式<ul><li>application/x-www-form-urlencoded（默认）</li><li>multipart/form-data</li></ul></li><li>其中表单项提供多种收集数据的方式<ul><li>有 name 属性的表单项数据，才会被发送给服务器</li></ul></li></ul><p><strong>常见的表单项</strong></p><p>文本框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uesrname&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>密码框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>隐藏框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日期框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;唱歌&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;逛街&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><h3 id="请求组成"><a href="#请求组成" class="headerlink" title="请求组成"></a>请求组成</h3><p>请求由三部分组成</p><ol><li>请求行</li><li>请求头</li><li>请求体</li></ol><p>可以用 telnet 程序测试</p><p><br></p><h3 id="请求方式与数据格式"><a href="#请求方式与数据格式" class="headerlink" title="请求方式与数据格式"></a>请求方式与数据格式</h3><p><strong>get 请求示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /test2?name=%E5%BC%A0&amp;age=20 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><ul><li>%E5%BC%A0 是【张】经过 URL 编码后的结果</li></ul><p><br></p><p><strong>post 请求示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 21</span><br><span class="line"></span><br><span class="line">name=%E5%BC%A0&amp;age=18</span><br></pre></td></tr></table></figure><p>application/x-www-form-urlencoed 格式细节：</p><ul><li>参数分成名字和值，中间用 = 分隔</li><li>多个参数使用 &amp; 进行分隔</li><li>【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送</li></ul><p><br><strong>json 请求示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test3 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 25</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure><p>json 对象格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;属性名&quot;:属性值&#125;</span><br></pre></td></tr></table></figure><p>其中属性值可以是</p><ul><li>字符串 “”</li><li>数字</li><li>true, false</li><li>null</li><li>对象</li><li>数组</li></ul><p>json 数组格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[元素1, 元素2, ...]</span><br></pre></td></tr></table></figure><p><br><strong>multipart 请求示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: multipart/form-data; boundary=123</span><br><span class="line">Content-Length: 125</span><br><span class="line"></span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">lisi</span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;age&quot;</span><br><span class="line"></span><br><span class="line">30</span><br><span class="line">--123--</span><br></pre></td></tr></table></figure><ul><li>boundary=123 用来定义分隔符</li><li>起始分隔符是 <code>--分隔符</code></li><li>结束分隔符是 <code>--分隔符--</code></li></ul><p><br><strong>数据格式小结</strong></p><p>客户端发送</p><ul><li>编码 <ul><li>application/x-www-form-urlencoded ：url 编码</li><li>application/json：utf-8 编码</li><li>multipart/form-data：每部分编码可以不同</li></ul></li><li>表单只支持以 application/x-www-form-urlencoded 和 multipart/form-data 格式发送数据</li><li>文件上传需要用 multipart/form-data 格式</li><li>js 代码可以支持任意格式发送数据 </li></ul><p>服务端接收</p><ul><li>对 application/x-www-form-urlencoded 和 multipart/form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可</li><li>对于 applicaiton/json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式</li></ul><p><br></p><h3 id="session-原理"><a href="#session-原理" class="headerlink" title="session 原理"></a>session 原理</h3><p>Http 无状态，有会话</p><ul><li>无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用</li><li>有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享</li></ul><p>服务端使用了 session 技术来暂存数据</p><p>存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /s1?name=zhang HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /s2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Cookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D</span><br></pre></td></tr></table></figure><p><br></p><p>session 技术实现身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line">participant Session</span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L -&gt;&gt; +Session : 存入用户名</span><br><span class="line">Session --&gt;&gt; -L: </span><br><span class="line">L --&gt;&gt; -Client: 登录成功</span><br><span class="line">end</span><br><span class="line">rect rgb(200, 190, 255)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求</span><br><span class="line">i -&gt;&gt; +Session : 获取用户名</span><br><span class="line">Session --&gt;&gt; -i : </span><br><span class="line">i -&gt;&gt; i: 用户名存在，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307051027890.png" alt=""></p><p><br></p><h3 id="jwt-原理"><a href="#jwt-原理" class="headerlink" title="jwt 原理"></a>jwt 原理</h3><p>jwt 技术实现身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line"></span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L --&gt;&gt; -Client : 登录成功，返回token</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rect rgb(150, 190, 155)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求，携带token</span><br><span class="line">i -&gt;&gt; i : 校验token，校验无误，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202307051027856.png" alt=""></p><p>生成 token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /j1?name=zhang&amp;pass=123 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>校验 token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /j2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Authorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28</span><br></pre></td></tr></table></figure><p><br></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>即 Cascading  Style  Sheets，它描述了网页的表现与展示效果</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>type 选择器 - 根据标签名进行匹配（元素选择器）<code>p</code></li><li><p>class 选择器 - 根据元素的 class 属性进行匹配<code>.c</code></p></li><li><p>id 选择器  - 根据元素的 id 属性进行匹配<code>#id</code></p></li></ul><p><br></p><h3 id="属性和值"><a href="#属性和值" class="headerlink" title="属性和值"></a>属性和值</h3><ul><li>background-color : red;</li><li>…</li><li>display</li></ul><p><br></p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>与布局相关的 html 元素</p><ul><li>div</li><li>template</li></ul><p><br></p><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p>Javascript是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等。</p><p><br></p><h2 id="变量与数据类型"><a href="#变量与数据类型" class="headerlink" title="变量与数据类型"></a>变量与数据类型</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p><strong>let :star:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名 = 值;</span><br></pre></td></tr></table></figure><ul><li>let 声明的变量可以被多次赋值，例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;  <span class="comment">// 初始值是 100</span></span><br><span class="line">a = <span class="number">200</span>;  <span class="comment">// ok, 被重新赋值为 200</span></span><br></pre></td></tr></table></figure><p><br><strong>const :star:</strong></p><ul><li>const 修饰的叫常量，只能赋值一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="number">300</span>; <span class="comment">// 初始值是 300</span></span><br><span class="line">b = <span class="number">400</span>;   <span class="comment">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure><ul><li>const 并不意味着它引用的内容不可修改，例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">c[<span class="number">2</span>] = <span class="number">4</span>;         <span class="comment">// ok, 数组内容被修改成 [1,2,4]</span></span><br><span class="line">c = [<span class="number">5</span>,<span class="number">6</span>];<span class="comment">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>var</strong></p><p>var 声明的变量可以被多次赋值，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="number">100</span>;</span><br><span class="line">f = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ul><li><p><a href="#1.undefined 和 null">undefined 和 null</a></p></li><li><p><a href="#2.string">string ⭐</a></p></li><li><p><a href="#3.number 和 bigint">number 和 bigint⭐</a></p></li><li><p><a href="#4.boolean">boolean⭐</a></p></li><li><p><a href="#5.symbol">symbol</a></p></li></ul><hr><p><strong>undefined 和 null</strong><span id="1.undefined 和 null"></span></p><ul><li>执行表达式或函数，没有返回结果，出现 undefined</li><li>访问数组不存在的元素，访问对象不存在的属性，出现 undefined</li><li>定义变量，没有初始化，出现 undefined</li></ul><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);  <span class="comment">// 函数没有返回值, 结果是  undefined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>; <span class="comment">// 表达式没有返回值, 结果是 undefined</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b[<span class="number">10</span>]); <span class="comment">// 数组未定义元素是 undefined</span></span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="property">age</span>); <span class="comment">// 对象未定义属性是 undefined</span></span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">// 变量未初始化是 undefined</span></span><br></pre></td></tr></table></figure><p>二者共同点</p><ul><li>都没有属性、方法</li><li>二者合称 Nullish</li></ul><p>二者区别</p><ul><li>undefined 由 js 产生</li><li>null 由程序员提供</li></ul><p><br></p><p><strong>string⭐</strong><span id="2.string"></span></p><p>js 字符串三种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;hello&quot;</span>;  <span class="comment">// 双引号</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;world&#x27;</span>;  <span class="comment">// 单引号</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">`hello`</span>;  <span class="comment">// 反引号</span></span><br></pre></td></tr></table></figure><p>html 代码如下，用 java 和 js 中的字符串如何表示？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.html&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java 显得比较繁琐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;&lt;a href=\&quot;1.html\&quot;&gt;超链接&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>js 就比较灵活</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&#x27;&lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">`&lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;`</span>;</span><br></pre></td></tr></table></figure><p>模板字符串（Template strings）</p><p>需求：拼接 URI 的请求参数，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/test?name=zhang&amp;age=18</span><br><span class="line">/test?name=li&amp;age=20</span><br></pre></td></tr></table></figure><p>传统方法拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ; <span class="comment">// zhang li ...</span></span><br><span class="line"><span class="keyword">let</span> age = ; <span class="comment">// 18 20 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;/test?name=&quot;</span> + name + <span class="string">&quot;&amp;age=&quot;</span> + age;</span><br></pre></td></tr></table></figure><p>模板字符串方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ; <span class="comment">// zhang li ...</span></span><br><span class="line"><span class="keyword">let</span> age = ; <span class="comment">// 18 20 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">`/test?name=<span class="subst">$&#123;name&#125;</span>&amp;age=<span class="subst">$&#123;age&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p><br><strong>number 和 bigint⭐</strong><span id="3.number 和 bigint"></span></p><p>number 类型标识的是双精度浮动小数，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">3</span>;   <span class="comment">// 结果 3.3333333333333335</span></span><br></pre></td></tr></table></figure><p>既然是浮点小数，那么可以除零</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">0</span>;  <span class="comment">// 结果 Infinity 正无穷大</span></span><br><span class="line">-<span class="number">10</span> / <span class="number">0</span>;  <span class="comment">// 结果 -Infinity 负无穷大</span></span><br></pre></td></tr></table></figure><p>浮点小数都有运算精度问题，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.0</span> - <span class="number">1.1</span>; <span class="comment">// 结果 0.8999999999999999</span></span><br></pre></td></tr></table></figure><p>字符串转数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>); <span class="comment">// 结果是数字 10 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10.5&quot;</span>);<span class="comment">// 结果是数字 10, 去除了小数部分</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>) / <span class="number">3</span>; <span class="comment">// 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 转换失败，结果是特殊值 NaN (Not a Number)</span></span><br></pre></td></tr></table></figure><p>要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10n</span> / <span class="number">3n</span>;<span class="comment">// 结果 3n, 按整数除法处理</span></span><br></pre></td></tr></table></figure><p><br><strong>boolean⭐</strong><span id="4.boolean"></span></p><ul><li>Truthy</li><li>Falsy</li></ul><p>在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】… 作为判断条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b) &#123; <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy</p><p>下面值都是 falsy</p><ul><li><code>false</code></li><li><code>Nullish (null, undefined)</code></li><li><code>0, 0n, NaN</code></li><li><code>&quot;&quot; &#39;&#39; `` </code>  即长度为零的字符串</li></ul><p>剩余的值绝大部分都是 truthy</p><p>有几个容易被当作 falsy 实际是 truthy 的</p><ul><li><code>&quot;false&quot;, &quot;0&quot;</code> 即字符串的 false 和 字符串的零</li><li><code>[]</code> 空数组</li><li><code>&#123;&#125;</code> 空对象</li></ul><p><br> <strong>symbol</strong><span id="5.symbol"></span></p><ul><li>Symbol的值是唯一的，用来解决命名冲突问题</li><li>Symbol值不能与其他数据进行运算</li><li>Symbol定义的对象属性不能使用for…in循环遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</li></ul><p><br></p><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><ul><li><a href="#1.Function">Function⭐⭐</a></li><li><a href="#2.Array">Array⭐</a></li><li><a href="#3.Object">Object⭐⭐</a></li></ul><hr><p><strong>1) Function⭐⭐</strong><span id="1.Function"></span></p><p><strong>定义函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><strong>调用函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(实参);</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);     <span class="comment">// 返回 3</span></span><br></pre></td></tr></table></figure><p>js 中的函数调用特点：对参数的<strong>类型</strong>和<strong>个数</strong>都没有限制，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);  <span class="comment">// 返回 ab</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);   <span class="comment">// 返回 9, 第三个参数没有被用到, 不会报错</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>);<span class="comment">// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN</span></span><br></pre></td></tr></table></figure><p><br><strong>默认参数</strong></p><p>java 中（spring）要实现默认参数的效果得这么做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">page</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(defaultValue=&quot;1&quot;)</span> <span class="type">int</span> page, </span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(defaultValue=&quot;10&quot;)</span> <span class="type">int</span> size</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pagination</span>(<span class="params">page = <span class="number">1</span>, size = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(page, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>匿名函数</strong></p><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">参数</span>) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第一种场景：定义完毕后立刻调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>第二种场景：作为其它对象的方法，例如</p><p>页面有元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>点我啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此元素有一个 onclick 方法，会在鼠标单击这个元素后被执行，onclick 方法刚开始是 null，需要赋值后才能使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标单击了...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><strong>箭头函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(参数) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有参数，() 还是要保留</li><li>如果只有一个参数，() 可以省略</li><li>如果函数体内只有一行代码，{} 可以省略</li><li>如果这一行代码就是结果，return 可以省略</li></ul><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span>  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aa&quot;</span>);</span><br></pre></td></tr></table></figure><p><br></p><p> <strong>函数是对象</strong></p><p>以下形式在 js 中非常常见！</p><ol><li>可以参与赋值，例，具名函数也能参与赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = abc;</span><br></pre></td></tr></table></figure><ol><li>有属性、有方法，执行 <code>console.dir(abc)</code>，输出结果如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ƒ abc()</span><br><span class="line">    arguments: null</span><br><span class="line">    caller: null</span><br><span class="line">    length: 0</span><br><span class="line">    name: &quot;abc&quot;</span><br><span class="line">    ➡prototype: &#123;constructor: ƒ&#125;</span><br><span class="line">    [[FunctionLocation]]: VM1962:1</span><br><span class="line">    ➡[[Prototype]]: ƒ ()</span><br><span class="line">    ➡[[Scopes]]: Scopes[1]</span><br></pre></td></tr></table></figure><ul><li>其中带有 f 标记的是方法，不带的是属性</li><li><p>带有 ➡ 符号的可以继续展开，限于篇幅省略了</p></li><li><p>带有 <code>[[ ]]</code> 的是内置属性，不能访问，只能查看</p></li><li>相对重要的是 <code>[[Prototype]]</code> 和 <code>[[Scopes]]</code> 会在后面继承和作用域时讲到</li></ul><ol><li>可以作为方法参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">fn</span>) &#123;          <span class="comment">// fn 将来可以是一个函数对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="title function_">fn</span>();                 <span class="comment">// 调用函数对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">b</span>(a)</span><br></pre></td></tr></table></figure><ol><li>可以作为方法返回值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">c</span>()()</span><br></pre></td></tr></table></figure><p><br></p><p><strong>函数作用域</strong></p><p>函数可以嵌套（js 代码中很常见，只是嵌套的形式更多是匿名函数，箭头函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 看这里</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>();</span><br></pre></td></tr></table></figure><ul><li>以函数为分界线划定作用域，所有函数之外是全局作用域</li><li>查找变量时，由内向外查找<ul><li>在内层作用域找到变量，就会停止查找，不会再找外层</li><li>所有作用域都找不到变量，报错</li></ul></li><li>作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试</li></ul><p><br></p><p><strong>闭包</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()();  <span class="comment">// 在外面执行了 b</span></span><br></pre></td></tr></table></figure><ul><li>函数定义时，它的作用域已经确定好了，因此无论函数将来去了哪，都能从它的作用域中找到当时那些变量</li><li>别被概念忽悠了，闭包就是指<strong>函数能够访问自己的作用域中变量</strong></li></ul><p><br></p><p><strong>let、var 与作用域</strong></p><p>如果函数外层引用的是 let 变量，那么外层普通的 {} 也会作为作用域边界，最外层的 let 也占一个 script 作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 因为是同一个变量，还是打印 20</span></span><br></pre></td></tr></table></figure><p>如果是 let，则视为两个作用域中的两个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 10</span></span><br></pre></td></tr></table></figure><p>要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br></pre></td></tr></table></figure><p><br></p><p><strong>2) Array</strong>⭐<span id="2.Array"></span></p><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]); <span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组元素</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="number">5</span>; <span class="comment">// 数组元素变成了 [5,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组元素，其中 length 是数组属性，代表数组长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API</p><ul><li>push、shift、splice</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);    <span class="comment">// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]</span></span><br><span class="line">arr.<span class="title function_">shift</span>();<span class="comment">// 从数组头部(左侧)移除元素, 结果 [2,3,4]</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]</span></span><br></pre></td></tr></table></figure><ul><li>join</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">join</span>(); <span class="comment">// 默认使用【,】作为连接符，结果 &#x27;a,b,c&#x27;</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);<span class="comment">// 结果 &#x27;abc&#x27;</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>);<span class="comment">// 结果 &#x27;a-b-c&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>map、filter、forEach</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">i</span>) &#123;   <span class="comment">// 代表的新旧元素之间的变换规则</span></span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map(a) // 具名函数，结果 [10,20,30,60]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map( (i) =&gt; &#123;return i * 10&#125; ); // 箭头函数</span></span><br><span class="line">arr.<span class="title function_">map</span>( <span class="function"><span class="params">i</span> =&gt;</span> i * <span class="number">10</span> ); <span class="comment">// 箭头函数</span></span><br></pre></td></tr></table></figure><ul><li>传给 map 的函数，参数代表旧元素，返回值代表新元素</li></ul><p>map 的内部实现（伪代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">a</span>) &#123; <span class="comment">// 参数是一个函数</span></span><br><span class="line">    <span class="keyword">let</span> narr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> o = arr[i]; <span class="comment">// 旧元素</span></span><br><span class="line">        <span class="keyword">let</span> n = <span class="title function_">a</span>(o);   <span class="comment">// 新元素</span></span><br><span class="line">        narr.<span class="title function_">push</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> narr;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>filter 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line">arr.<span class="title function_">filter</span>( <span class="function">(<span class="params">i</span>)=&gt;</span> i % <span class="number">2</span> == <span class="number">1</span> ); <span class="comment">// 结果 [1,3]</span></span><br></pre></td></tr></table></figure><ul><li>传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素</li></ul><p>forEach 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for(let i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">    console.log(arr[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>( <span class="function">(<span class="params">i</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i) );</span><br></pre></td></tr></table></figure><p>两个称呼</p><ul><li>高阶函数，map，filter，forEach</li><li>回调函数，例如作为参数传入的函数</li></ul><p><br></p><p><strong>3) Object⭐⭐</strong><span id="3.Object"></span></p><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    属性名: 值,</span><br><span class="line">    方法名: 函数,</span><br><span class="line">    get 属性名() &#123;&#125;,</span><br><span class="line">    set 属性名(新值) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">study</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;小黑&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> study = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123; name, age, study &#125;</span><br></pre></td></tr></table></figure><p>例3（重点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu3 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="title function_">study</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：对象方法这么写，仅限于对象内部</li></ul><p>例4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu4 = &#123;</span><br><span class="line">    <span class="attr">_name</span>: <span class="literal">null</span>, <span class="comment">/*类似于java中私有成员变量*/</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了get&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了set&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 get，set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu4.<span class="property">name</span> = <span class="string">&quot;小白&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu4.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><p><strong>特色：属性增删</strong></p><p>对比一下 Java 中的 Object</p><ul><li>Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的</li><li>js 的对象，不需要什么模板，它的属性和方法可以随时加减</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;;</span><br><span class="line">stu.<span class="property">age</span> = <span class="number">18</span>;<span class="comment">// 添加属性</span></span><br><span class="line"><span class="keyword">delete</span> stu.<span class="property">age</span>;<span class="comment">// 删除属性</span></span><br><span class="line"></span><br><span class="line">stu.<span class="property">study</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">// 添加方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 get，set，需要借助 Object.definePropery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">_name</span>:<span class="literal">null</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(stu, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>参数1：目标对象</li><li>参数2：属性名</li><li>参数3：get，set 的定义</li></ul><p><strong>特色：this</strong></p><p>先来对 Java 中的 this 有个理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">(Student <span class="built_in">this</span>, String subject)</span> &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;在学习 &quot;</span> + subject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下面的代码，本质上是执行 study(stu, &quot;java&quot;)，因此 this 就是 stu</span></span><br><span class="line">        stu.study(<span class="string">&quot;java&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java 中的 this 是个隐式参数</li><li>Java 中，我们说 this 代表的就是调用方法的那个对象</li></ul><p>js 中的 this 也是隐式参数，但它与函数运行时上下文相关</p><p>例如，一个“落单”的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">study</span>(<span class="params">subject</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在学习 &quot;</span> + subject)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">study</span>(<span class="string">&quot;js&quot;</span>);  <span class="comment">// 输出 在学习 js</span></span><br></pre></td></tr></table></figure><p>这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串</p><p>同样的函数，如果作为对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    study</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，会将当前对象作为 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stu.<span class="title function_">study</span>(<span class="string">&#x27;js&#x27;</span>); <span class="comment">// 输出 小白在学习 js</span></span><br></pre></td></tr></table></figure><p>还可以动态改变 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">name</span>:<span class="string">&quot;小黑&quot;</span>&#125;;</span><br><span class="line">study.<span class="title function_">call</span>(stu, <span class="string">&quot;js&quot;</span>);<span class="comment">// 输出 小黑在学习 js</span></span><br></pre></td></tr></table></figure><p>这回 study 执行时，就把 call 的第一个参数 stu 作为 this</p><p>一个<em>例外</em>是，在<strong>箭头函数</strong>内出现的 this，以外层 this 理解 </p><p>用匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">stu.<span class="title function_">play</span>()</span><br></pre></td></tr></table></figure><ul><li>this.name 所在的函数是【落单】的函数，因此 this 代表 window</li></ul><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">与小白在玩耍</span><br><span class="line">与小黑在玩耍</span><br><span class="line">与小明在玩耍</span><br></pre></td></tr></table></figure><p>用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象</li></ul><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小花与小白在玩耍</span><br><span class="line">小花与小黑在玩耍</span><br><span class="line">小花与小明在玩耍</span><br></pre></td></tr></table></figure><p>不用箭头函数的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> me = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(me.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特色：原型继承</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> father = &#123;</span><br><span class="line">    <span class="attr">f1</span>: <span class="string">&#x27;父属性&#x27;</span>,</span><br><span class="line">    <span class="attr">m1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="title class_">Object</span>.<span class="title function_">create</span>(father);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">f1</span>);  <span class="comment">// 打印 父属性</span></span><br><span class="line">son.<span class="title function_">m1</span>();  <span class="comment">// 打印 父方法</span></span><br></pre></td></tr></table></figure><ul><li>father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找</li><li>son 自己可以添加自己的属性和方法</li><li>son 里有特殊属性 <code>__proto__</code> 代表它的父对象，js 术语： son 的原型对象</li><li>不同浏览器对打印 son 的 <code>__proto__</code> 属性时显示不同<ul><li>Edge 打印 console.dir(son) 显示 <code>[[Prototype]]</code></li><li>Firefox 打印 console.dir(son) 显示 <code>&lt;prototype&gt;</code></li></ul></li></ul><p><strong>特色：基于函数的原型继承</strong></p><p>出于方便的原因，js 又提供了一种基于函数的原型继承</p><blockquote><p><strong>函数职责</strong></p><ol><li><p>负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法</p></li><li><p>函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象</p><p><strong>注意！</strong>名字有差异，这个属性的作用就是为新对象提供原型</p></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cons</span>(<span class="params">f2</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建子对象(this), 给子对象提供属性和方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">f2</span> = f2;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">m2</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cons.prototype 就是父对象</span></span><br><span class="line">cons.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">f1</span> = <span class="string">&quot;父属性&quot;</span>;</span><br><span class="line">cons.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">m1</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合 new 关键字，创建子对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title function_">cons</span>(<span class="string">&quot;子属性&quot;</span>)</span><br></pre></td></tr></table></figure><p>子对象的 <code>__proto__</code> 就是函数的 <code>prototype</code> 属性</p><p><strong>JSON</strong></p><p>之前我们讲 http 请求格式时，讲过 json 这种数据格式，它的语法看起来与 js 对象非常相似，例如：</p><p>一个 json 对象可以长这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>一个 js 对象长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么他们的区别在哪儿呢？我总结了这么几点</p><ol><li>本质不同<ul><li>json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货</li><li>js 对象是切切实实的对象，可以有属性方法</li></ul></li><li>语法细节不同<ul><li>json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组</li><li>json 中不能有除以上的其它 js 对象的特性，如方法等</li><li>json 中的属性必须用双引号引起来</li></ul></li></ol><p>json 字符串与 js 对象的转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(json字符串);  <span class="comment">// 返回js对象</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(js对象);  <span class="comment">// 返回json字符串</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h3><p>静态类型语言，如 Java，值有类型，变量也有类型、赋值给变量时，类型要相符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;  <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>而 js 属于动态类型语言，值有类型，但变量没有类型，赋值给变量时，没要求</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100</span>;</span><br><span class="line">b = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">b = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>动态类型看起来比较灵活，但变量没有类型，会给后期维护带来困难，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// obj 的类型未知，必须根据不同类型做出相应的容错处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><ul><li><code>+ - * / % **</code></li><li><code>+= -= *= /= %= **=</code></li><li><code>++ --</code></li><li>位运算、移位运算</li><li><code>== != &gt; &gt;= &lt; &lt;=</code></li><li><code>=== !==</code> ⭐</li><li><code>&amp;&amp; || !</code> ⭐</li><li><code>?? ?.</code> ⭐</li><li><code>...</code> ⭐</li><li>解构赋值⭐</li></ul><hr><h3 id=""><a href="#" class="headerlink" title="==="></a>===</h3><p>严格相等运算符，用作逻辑判等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1</span>    <span class="comment">// 返回 true </span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 true，会先将右侧的字符串转为数字，再做比较</span></span><br><span class="line"><span class="number">1</span> === <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 false，类型不等，直接返回 false</span></span><br></pre></td></tr></table></figure><p>typeof 查看某个值的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span><span class="comment">// 返回 &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="-1"><a href="#-1" class="headerlink" title="||"></a>||</h3><p>需求，如果参数 n 没有传递，给它一个【男】</p><p><strong>推荐</strong>做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n = <span class="string">&#x27;男&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        n = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可能是这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = (n === <span class="literal">undefined</span>) ? <span class="string">&#x27;男&#x27;</span> : n;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些老旧代码中可能的做法（不推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = n || <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的语法是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值<span class="number">1</span> || 值<span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2</p><p><br></p><h3 id="与"><a href="#与" class="headerlink" title="?? 与 ?."></a>?? 与 ?.</h3><p><strong>??</strong></p><p>需求，如果参数 n 没有传递或是 null，给它一个【男】</p><p>如果用传统办法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="literal">undefined</span> || n === <span class="literal">null</span>) &#123;</span><br><span class="line">        n = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 ??</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = n ?? <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值1 ?? 值2</span><br></pre></td></tr></table></figure><ul><li>值1 是 nullish，返回值2</li><li>值1 不是 nullish，返回值1</li></ul><p><br></p><p><strong>?.</strong></p><p>需求，函数参数是一个对象，可能包含有子属性</p><p>例如，参数可能是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu3 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在要访问子属性（有问题）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>?.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用传统办法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(stu.<span class="property">address</span> === <span class="literal">undefined</span> || stu.<span class="property">address</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><p>展开运算符</p><p>作用1：打散数组，把元素传递给多个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b,c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求，把数组元素依次传递给函数参数</p><p>传统写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>]);<span class="comment">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure><p>展开运算符写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(...arr);<span class="comment">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure><ul><li>打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素</li></ul><p>作用2：复制数组或对象</p><p>数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1];<span class="comment">// 复制数组</span></span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;...obj1&#125;;<span class="comment">// 复制对象</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：展开运算符复制属于浅拷贝，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">address</span>: &#123;<span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span>&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;...o1&#125;;</span><br></pre></td></tr></table></figure><p>作用3：合并数组或对象</p><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> a2 = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b1 = [...a1,...a2];<span class="comment">// 结果 [1,2,3,4]</span></span><br><span class="line"><span class="keyword">let</span> b2 = [...a2,<span class="number">5</span>,...a1]<span class="comment">// 结果 [3,4,5,1,2]</span></span><br></pre></td></tr></table></figure><p>合并对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o3 = &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n1 = &#123;...o1, ...o2&#125;;<span class="comment">// 结果 &#123;name:&#x27;张三&#x27;,age:18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n2 = &#123;...o3, ...o2, ...o1&#125;; <span class="comment">// 结果&#123;name:&#x27;李四&#x27;,age:18&#125;</span></span><br></pre></td></tr></table></figure><ul><li>复制对象时出现同名属性，后面的会覆盖前面的</li></ul><p><br></p><h3 id="-2"><a href="#-2" class="headerlink" title="[] {}"></a>[] {}</h3><p>解构赋值</p><p><strong>[]</strong></p><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;<span class="comment">// 结果 a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">[a,b,c]</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c) <span class="comment">// 结果 a=1, b=2, c=3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(arr);</span><br></pre></td></tr></table></figure><be><p><strong>{}</strong></p><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = obj;<span class="comment">// 结果 name=张三, age=18</span></span><br></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">&#123;name, age&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age); <span class="comment">// 结果 name=张三, age=18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(obj)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><ul><li><code>if ... else</code></li><li><code>switch</code></li><li><code>while</code></li><li><code>do ... while</code></li><li><code>for</code> </li><li><code>for ... in</code> ⭐</li><li><code>for ... of</code> ⭐</li><li><code>try ... catch</code> ⭐</li></ul><hr><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><p>主要用来遍历对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> father = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">study</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> father) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中 const n 代表遍历出来的属性名</li><li>注意1：方法名也能被遍历出来（它其实也算一种特殊属性）</li><li>注意2：遍历子对象时，父对象的属性会跟着遍历出来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="title class_">Object</span>.<span class="title function_">create</span>(father);</span><br><span class="line">son.<span class="property">sex</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> son) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> son) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n, son[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><p>主要用来遍历数组，也可以是其它可迭代对象，如 Map，Set 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> a1) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a2 = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>:<span class="number">22</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> obj <span class="keyword">of</span> a2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> &#123;name,age&#125; <span class="keyword">of</span> a2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">address</span>: &#123;<span class="attr">city</span>:<span class="string">&#x27;北京&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)   </span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现了异常&#x27;</span>, e.<span class="property">message</span>)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><strong>1) 安装 nvm</strong></p><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p><p>安装注意事项</p><ol><li>要卸载掉现有的 nodejs</li><li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li><li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li><li>首次运行前设置好国内镜像地址</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror http://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><p>首先查看有哪些可用版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |</span><br><span class="line">|--------------|--------------|--------------|--------------|</span><br><span class="line">|    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    |</span><br><span class="line">|    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    |</span><br><span class="line">|    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    |</span><br><span class="line">|    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    |</span><br><span class="line">|    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    |</span><br><span class="line">|    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    |</span><br><span class="line">|    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    |</span><br><span class="line">|    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    |</span><br><span class="line">|    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    |</span><br><span class="line">|    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    |</span><br><span class="line">|    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    |</span><br><span class="line">|    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    |</span><br><span class="line">|    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    |</span><br><span class="line">|    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    |</span><br><span class="line">|    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    |</span><br><span class="line">|    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    |</span><br><span class="line">|    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    |</span><br><span class="line">|    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    |</span><br><span class="line">|    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    |</span><br><span class="line">|    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |</span><br></pre></td></tr></table></figure><p>建议安装 LTS（长期支持版）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install 16.16.0</span><br><span class="line">nvm install 14.20.0</span><br></pre></td></tr></table></figure><p>执行 <code>nvm list</code> 会列出已安装版本</p><p>切换到 16.16.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 16.16.0</span><br></pre></td></tr></table></figure><p>切换到 14.20.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 14.20.0</span><br></pre></td></tr></table></figure><p>安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量</p><p><br></p><p><strong>2) 检查 npm</strong></p><p>npm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p><p>检查镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure><p>如果返回的不是 <code>https://registry.npm.taobao.org/</code>，需要做如下设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p><br><strong>3) 搭建前端服务器</strong></p><p>新建一个保存项目的 client 文件夹，进入文件夹执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save-dev</span><br></pre></td></tr></table></figure><p>修改 package.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.18.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>其中 devDependencies 是 npm install —save-dev 添加的</li></ul><p>编写 main.js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./&#x27;</span>))</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">7070</span>)</span><br></pre></td></tr></table></figure><p>执行 js 代码（运行前端服务器）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node main.js</span><br></pre></td></tr></table></figure><h3 id="前端案例"><a href="#前端案例" class="headerlink" title="前端案例"></a>前端案例</h3><ul><li>前端只有静态页面，使用 Express 服务器</li><li>后端使用 Tomcat 服务器，通过 SpringBoot、MyBatis 等框架获取数据库数据</li></ul><p><strong>1) 查找元素</strong></p><ul><li>document.getElementById - 根据 id 值查找一个元素</li><li>[document|元素].querySelector - 根据选择器查找第一个匹配元素</li><li>[document|元素].querySelectorAll - 根据选择器查找所有匹配元素</li></ul><p>例如，有下面的 html 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thead&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row bold&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>); <span class="comment">// 找到 &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.col&#x27;</span>); <span class="comment">// 找到 &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.col&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  找到的是一个集合</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;1&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;张三&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;男&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;18&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thead = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.thead&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只在 thead 元素范围内找</span></span><br><span class="line">thead.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.col&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  找到的是一个集合</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>根据 id 属性查找既可以用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id值&quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以用 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#id值&quot;</span>)</span><br></pre></td></tr></table></figure><p><br></p><p><strong>2) 修改元素内容</strong></p><ul><li>元素.innerHTML</li><li>元素.textContent</li></ul><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;侠客列表&#x27;</span></span><br></pre></td></tr></table></figure><p>innerHTML  会解析内容中的标签</p><p>textContext 不会解析内容中的标签</p><p>给 innerHTML 或 textContent 赋值空串，可以实现清空标签内容的效果</p><p><br></p><p><strong>3) 利用模板</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thead&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row bold&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将来这些数据从 java 端返回</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> array = [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    ];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">        c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">        c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">        c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">        c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.<span class="title function_">importNode</span>(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 建立父子关系，左边父，右边子</span></span></span><br><span class="line"><span class="language-javascript">        tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>4) Fetch API</strong></p><p>Fetch API 可以用来获取远程数据，它有两种方式接收结果，同步方式与异步方式</p><p>格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, options) <span class="comment">// 返回 Promise</span></span><br></pre></td></tr></table></figure><p>同步方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 结果 = <span class="keyword">await</span> <span class="title class_">Promise</span></span><br><span class="line"><span class="comment">// 后续代码</span></span><br></pre></td></tr></table></figure><ul><li>await 关键字必须在一个标记了 async 的 function 内来使用</li><li>后续代码不会在结果返回前执行</li></ul><p>异步方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">then</span>(结果 =&gt; &#123; ... &#125;)</span><br><span class="line"><span class="comment">// 后续代码                 </span></span><br></pre></td></tr></table></figure><ul><li>后续代码不必等待结果返回就可以执行</li></ul><p>例：</p><p>在 express 服务器上有 students.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">17</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>现在用 fetch api 获取这些数据，并展示</p><p>同步方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findStudents</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取响应对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;students.json&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取响应体, 按json格式转换为js数组</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> array = <span class="keyword">await</span> resp.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 显示数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">                c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">                c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">                c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">                c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.<span class="title function_">importNode</span>(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 建立父子关系</span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">findStudents</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>fetch(‘students.json’) 内部会发送请求，但响应结果不能立刻返回，因此 await 就是等待响应结果返回</li><li>其中 resp.json() 也不是立刻能返回结果，它返回的也是 Promise 对象，也要配合 await 取结果</li></ul><p>异步方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&#x27;students.json&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>( <span class="function"><span class="params">resp</span> =&gt;</span> resp.<span class="title function_">json</span>() )</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>( <span class="function"><span class="params">array</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 显示数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">                c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">                c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">                c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">                c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.<span class="title function_">importNode</span>(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 建立父子关系</span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>( <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e) )</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第一个 then 是在响应返回后，才会调用它里面的箭头函数，箭头函数参数即 resp  响应对象</li><li>第二个 then 是在 json 解析完成后，才会调用它里面的箭头函数，箭头函数参数即解析结果（本例是 array 数组）</li><li>上一个 then 返回的是 Promise 对象时，才能链式调用下一个 then</li></ul><p><br></p><p><strong>跨域问题</strong></p><ul><li>只要协议、主机、端口之一不同，就不同源，例如<ul><li><a href="http://localhost:7070/a">http://localhost:7070/a</a> 和 <a href="https://localhost:7070/b">https://localhost:7070/b</a> 就不同源</li></ul></li><li>同源检查是浏览器的行为，而且只针对 fetch、xhr 请求<ul><li>如果是其它客户端，例如 java http client，postman，它们是不做同源检查的</li><li>通过表单提交、浏览器直接输入 url 地址这些方式发送的请求，也不会做同源检查</li></ul></li><li>更多相关知识请参考<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></li></ul></li></ul><p>请求响应头解决</p><ul><li>fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域<ul><li>我们的例子中：student.html 发送 fetch 请求，告诉 tomcat，我源自 localhost:7070</li></ul></li><li>目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】<ul><li>我们的例子中：tomcat 返回 fetch 响应，告诉浏览器，这个响应允许源自 localhost:7070 的资源使用</li></ul></li></ul><p>代理解决</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-proxy-middleware --save-dev</span><br></pre></td></tr></table></figure><p>在 express 服务器启动代码中加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createProxyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;http-proxy-middleware&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, <span class="title function_">createProxyMiddleware</span>(&#123; <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>, <span class="attr">changeOrigin</span>: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure><p>fetch 代码改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:7070/api/students&#x27;</span>)</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/students&#x27;</span>)</span><br></pre></td></tr></table></figure><p><br></p><p><strong>5) 模块化</strong></p><p>单个导出 const、let、function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一齐导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;a,b,c&#125;</span><br></pre></td></tr></table></figure><p>导出 default，只能有一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> b;</span><br></pre></td></tr></table></figure><p>import 语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> 语句</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>import 需要遵循同源策略</li></ul><p>整个导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable language_">module</span> <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">a</span>)<span class="comment">// 输出10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">b</span>)<span class="comment">// 输出20</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">c</span>()<span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><p>单个导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a,c&#125; <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// 输出10</span></span><br><span class="line"><span class="title function_">c</span>()<span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><p>导入默认</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> x <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)<span class="comment">// 输出20</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git快速入门</title>
      <link href="/post/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/post/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Git是一种分布式版本控制系统，用于跟踪代码的变化和版本历史并支持多人协作开发。它已成为许多软件开发团队的首选工具，并被广泛使用于各种类型的项目中。</p><hr><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><p>版本控制又称为版本管理，是一种记录文件内容变化，以及对这些变化进行跟踪和控制的技术。它主要应用于软件开发、文档编写等领域，旨在协助多人协作开发或编辑同一项目时有效地管理文件的变化历史和版本。</p><p>版本控制系统通常可以帮助团队记录文件的每一个版本，即可跟踪整个项目的历史，并允许开发人员回滚到之前的版本，查看某个特定版本的变化，比较不同版本之间的差异等。同时，版本控制系统也能够处理文件的冲突，避免不同开发人员之间出现代码混乱、重复或矛盾的情况。</p><p><br></p><h1 id="版本控制软件"><a href="#版本控制软件" class="headerlink" title="版本控制软件"></a>版本控制软件</h1><p>版本控制软件的基础<strong>功能</strong>包括：</p><ol><li>提供源代码管理：版本控制软件能够管理和跟踪文件的历史版本，包括源代码、二进制文件、文本文件等。</li><li>支持多人协作开发：版本控制软件允许多个开发人员在同一代码库或文件上进行协作开发。它可以帮助团队协调不同人员之间的工作，标记代码更改，并合并代码。</li><li>版本历史记录：版本控制软件可以跟踪每个文件在整个开发过程中的变化历史，记录了每个版本或提交的详细信息，例如时间、作者、注释等。</li><li>分支和合并：版本控制软件支持分支和合并，使开发人员可以独立地开发新功能或修复错误，而不干扰其他开发人员的工作。它还可以将不同的代码分支合并到一个通用的代码库中。</li><li>冲突解决：版本控制软件可以标记由于同时修改同一个文件而产生的冲突，并提供工具来解决这些冲突。</li><li>标签和版本号：版本控制软件允许开发人员对重要版本进行标记和归档，以便于查找和恢复早期版本。它还可以为每个提交分配唯一的版本号，以便于跟踪和管理。</li></ol><p>版本控制软件可以分为两种不同的<strong>类型</strong>：集中式和分布式。</p><ol><li>集中式版本控制软件（Centralized Version Control System, CVCS）：集中式版本控制系统将所有文件存储在中央仓库中，并且开发人员需要从该中央仓库中获得最新版本，然后开始工作。开发人员进行更改后，必须将其提交回中央仓库。CVCS通常具有较好的稳定性和可靠性，但是当多个开发人员同时访问同一个文件时，可能会发生冲突，需要手动解决。</li><li>分布式版本控制软件（Distributed Version Control System, DVCS）：分布式版本控制系统允许每个开发人员都拥有完整的代码库副本，并可以在本地对代码进行更改，而不必连接到中央服务器。开发人员可以方便地保存本地历史记录并跟踪文件变化。当需要与其他开发人员共享代码时，可以通过合并来处理更改冲突。DVCS通常具有更高的灵活性和可伸缩性，但也需要更多的硬盘空间和计算能力。</li></ol><p>常见的集中式版本控制软件包括Subversion (SVN)、Perforce、ClearCase等；而Git、Mercurial等则是分布式版本控制软件的代表。在选择使用哪种版本控制软件时，需要考虑团队规模、开发流程、安全性、可用性等方面的需求和限制。</p><p><br></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Git下载：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> </p><p>GitHub Desktop下载：<a href="https://desktop.github.com/">https://desktop.github.com/</a></p><p>IDEA集成Github：<code>VCS</code>  ~&gt;   <code>Share Project on Github</code></p><p><br></p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>以下是一些Git常用指令的代码：</p><ul><li>初始化Git仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>克隆一个远程Git仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure><ul><li>添加文件到Git仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [file]</span><br></pre></td></tr></table></figure><ul><li>提交更改到Git仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m [message]</span><br></pre></td></tr></table></figure><ul><li>查看当前Git仓库状态</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li>查看Git仓库中文件变化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff [file]</span><br></pre></td></tr></table></figure><ul><li>查看Git提交历史记录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><ul><li>恢复Git仓库到某个历史版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore [commit]</span><br></pre></td></tr></table></figure><ul><li>创建新的Git分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [branch-name]</span><br></pre></td></tr></table></figure><ul><li>切换到指定Git分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch-name]</span><br></pre></td></tr></table></figure><ul><li>创建并切换到指定Git分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branch-name]</span><br></pre></td></tr></table></figure><ul><li>合并指定Git分支到当前分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [branch-name]</span><br></pre></td></tr></table></figure><ul><li>删除Git分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [branch-name]</span><br></pre></td></tr></table></figure><ul><li>从本地Git仓库推送更改到远程分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote] [branch]</span><br></pre></td></tr></table></figure><ul><li>从远程Git仓库拉取更新到本地</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [remote] [branch]</span><br></pre></td></tr></table></figure><ul><li>设置Git全局配置信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;[name]&quot;</span><br><span class="line">git config --global user.email &quot;[email]&quot;</span><br></pre></td></tr></table></figure><ul><li>将本地仓库与远程仓库关联</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [远程仓库URL]</span><br></pre></td></tr></table></figure><p>这些Git指令只是Git命令集的一部分，涵盖了Git基本操作的核心指令。在实际使用中，还需要不断学习和掌握更多其他Git指令，以更好地管理和协作开发代码。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 8 新特性</title>
      <link href="/post/Java%208%20%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/post/Java%208%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。</p><hr><h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br><span class="line">或</span><br><span class="line">(parameters) -&gt;&#123; statements; &#125;</span><br></pre></td></tr></table></figure><p>以下是lambda表达式的重要特征:</p><ul><li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</li><li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号。</li><li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 类型声明</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">addition</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a + b;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 不用类型声明</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">subtraction</span> <span class="operator">=</span> (a, b) -&gt; a - b;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 大括号中的返回语句</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">multiplication</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123; <span class="keyword">return</span> a * b; &#125;;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 没有大括号及返回语句</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">division</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a / b;</span><br><span class="line">        </span><br><span class="line">      System.out.println(<span class="string">&quot;10 + 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, addition));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 - 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, subtraction));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 x 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, multiplication));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 / 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, division));</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 不用括号</span></span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService1</span> <span class="operator">=</span> message -&gt;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello &quot;</span> + message);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 用括号</span></span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService2</span> <span class="operator">=</span> (message) -&gt;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello &quot;</span> + message);</span><br><span class="line">        </span><br><span class="line">      greetService1.sayMessage(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">      greetService2.sayMessage(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">MathOperation</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="title function_">operation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">GreetingService</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">operate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, MathOperation mathOperation)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> mathOperation.operation(a, b);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Lambda 表达式需要注意以下两点：</p><ul><li>Lambda 表达式主要用来定义行内执行的方法类型接口（例如，一个简单方法接口）。在上面例子中，我们使用各种类型的 Lambda 表达式来定义 MathOperation 接口的方法，然后我们定义了 operation 的执行。</li><li>Lambda 表达式免去了使用匿名方法的麻烦，并且给予 Java 简单但是强大的函数化的编程能力。</li></ul><p><br></p><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul><li>只包含<code>一个抽象方法</code>（Single Abstract Method，简称SAM）的接口，称为函数式接口。当然该接口可以包含其他非抽象方法。</li><li>你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。</li><li>我们可以在一个接口上使用 <code>@FunctionalInterface</code> 注解，这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</li><li>在<code>java.util.function</code>包下定义了Java 8 的丰富的函数式接口</li></ul><p><br></p><h2 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h2><div class="table-container"><table><thead><tr><th>函数式接口</th><th>称谓</th><th>参数类型</th><th>用途</th></tr></thead><tbody><tr><td><code>Consumer&lt;T&gt;</code></td><td>消费型接口</td><td>T</td><td>对类型为T的对象应用操作，包含方法：  <code>void accept(T t)</code></td></tr><tr><td><code>Supplier&lt;T&gt;</code></td><td>供给型接口</td><td>无</td><td>返回类型为T的对象，包含方法：<code>T get()</code></td></tr><tr><td><code>Function&lt;T, R&gt;</code></td><td>函数型接口</td><td>T</td><td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：<code>R apply(T t)</code></td></tr><tr><td><code>Predicate&lt;T&gt;</code></td><td>判断型接口</td><td>T</td><td>确定类型为T的对象是否满足某约束，并返回 boolean 值。包含方法：<code>boolean test(T t)</code></td></tr></tbody></table></div><p><strong>类型1：消费型接口</strong></p><p>消费型接口的抽象方法特点：有形参，但是返回值类型是void</p><div class="table-container"><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>BiConsumer<T,U></td><td>void accept(T t, U u)</td><td>接收两个对象用于完成功能</td></tr><tr><td>DoubleConsumer</td><td>void accept(double value)</td><td>接收一个double值</td></tr><tr><td>IntConsumer</td><td>void accept(int value)</td><td>接收一个int值</td></tr><tr><td>LongConsumer</td><td>void accept(long value)</td><td>接收一个long值</td></tr><tr><td>ObjDoubleConsumer<T></td><td>void accept(T t, double value)</td><td>接收一个对象和一个double值</td></tr><tr><td>ObjIntConsumer<T></td><td>void accept(T t, int value)</td><td>接收一个对象和一个int值</td></tr><tr><td>ObjLongConsumer<T></td><td>void accept(T t, long value)</td><td>接收一个对象和一个long值</td></tr></tbody></table></div><p><strong>类型2：供给型接口</strong></p><p>这类接口的抽象方法特点：无参，但是有返回值</p><div class="table-container"><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>BooleanSupplier</td><td>boolean getAsBoolean()</td><td>返回一个boolean值</td></tr><tr><td>DoubleSupplier</td><td>double getAsDouble()</td><td>返回一个double值</td></tr><tr><td>IntSupplier</td><td>int getAsInt()</td><td>返回一个int值</td></tr><tr><td>LongSupplier</td><td>long getAsLong()</td><td>返回一个long值</td></tr></tbody></table></div><p><strong>类型3：函数型接口</strong></p><p>这类接口的抽象方法特点：既有参数又有返回值</p><div class="table-container"><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>UnaryOperator<T></td><td>T apply(T t)</td><td>接收一个T类型对象，返回一个T类型对象结果</td></tr><tr><td>DoubleFunction<R></td><td>R apply(double value)</td><td>接收一个double值，返回一个R类型对象</td></tr><tr><td>IntFunction<R></td><td>R apply(int value)</td><td>接收一个int值，返回一个R类型对象</td></tr><tr><td>LongFunction<R></td><td>R apply(long value)</td><td>接收一个long值，返回一个R类型对象</td></tr><tr><td>ToDoubleFunction<T></td><td>double applyAsDouble(T value)</td><td>接收一个T类型对象，返回一个double</td></tr><tr><td>ToIntFunction<T></td><td>int applyAsInt(T value)</td><td>接收一个T类型对象，返回一个int</td></tr><tr><td>ToLongFunction<T></td><td>long applyAsLong(T value)</td><td>接收一个T类型对象，返回一个long</td></tr><tr><td>DoubleToIntFunction</td><td>int applyAsInt(double value)</td><td>接收一个double值，返回一个int结果</td></tr><tr><td>DoubleToLongFunction</td><td>long applyAsLong(double value)</td><td>接收一个double值，返回一个long结果</td></tr><tr><td>IntToDoubleFunction</td><td>double applyAsDouble(int value)</td><td>接收一个int值，返回一个double结果</td></tr><tr><td>IntToLongFunction</td><td>long applyAsLong(int value)</td><td>接收一个int值，返回一个long结果</td></tr><tr><td>LongToDoubleFunction</td><td>double applyAsDouble(long value)</td><td>接收一个long值，返回一个double结果</td></tr><tr><td>LongToIntFunction</td><td>int applyAsInt(long value)</td><td>接收一个long值，返回一个int结果</td></tr><tr><td>DoubleUnaryOperator</td><td>double applyAsDouble(double operand)</td><td>接收一个double值，返回一个double</td></tr><tr><td>IntUnaryOperator</td><td>int applyAsInt(int operand)</td><td>接收一个int值，返回一个int结果</td></tr><tr><td>LongUnaryOperator</td><td>long applyAsLong(long operand)</td><td>接收一个long值，返回一个long结果</td></tr><tr><td>BiFunction<T,U,R></td><td>R apply(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个R类型对象结果</td></tr><tr><td>BinaryOperator<T></td><td>T apply(T t, T u)</td><td>接收两个T类型对象，返回一个T类型对象结果</td></tr><tr><td>ToDoubleBiFunction<T,U></td><td>double applyAsDouble(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个double</td></tr><tr><td>ToIntBiFunction<T,U></td><td>int applyAsInt(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个int</td></tr><tr><td>ToLongBiFunction<T,U></td><td>long applyAsLong(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个long</td></tr><tr><td>DoubleBinaryOperator</td><td>double applyAsDouble(double left, double right)</td><td>接收两个double值，返回一个double结果</td></tr><tr><td>IntBinaryOperator</td><td>int applyAsInt(int left, int right)</td><td>接收两个int值，返回一个int结果</td></tr><tr><td>LongBinaryOperator</td><td>long applyAsLong(long left, long right)</td><td>接收两个long值，返回一个long结果</td></tr></tbody></table></div><p><strong>类型4：判断型接口</strong></p><p>这类接口的抽象方法特点：有参，但是返回值类型是boolean结果。</p><div class="table-container"><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>BiPredicate<T,U></td><td>boolean test(T t, U u)</td><td>接收两个对象</td></tr><tr><td>DoublePredicate</td><td>boolean test(double value)</td><td>接收一个double值</td></tr><tr><td>IntPredicate</td><td>boolean test(int value)</td><td>接收一个int值</td></tr><tr><td>LongPredicate</td><td>boolean test(long  value)</td><td>接收一个long值</td></tr></tbody></table></div><p><br></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>Lambda表达式是可以简化函数式接口的变量或形参赋值的语法。而方法引用和构造器引用是为了简化Lambda表达式的。</p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><ul><li><p>格式：使用方法引用操作符 “<code>::</code>” 将类(或对象) 与 方法名分隔开来。</p><ul><li>两个:中间不能有空格，而且必须英文状态下半角输入</li></ul><p>如下三种主要使用情况：</p><ul><li>情况1：<code>对象 :: 实例方法名</code></li><li>情况2：<code>类 :: 静态方法名</code></li><li>情况3：<code>类 :: 实例方法名</code></li></ul></li><li><p>方法引用使用前提</p><p><strong>要求1：</strong>Lambda体只有一句语句，并且是通过调用一个对象的/类现有的方法来完成的</p><p>例如：System.out对象，调用println()方法来完成Lambda体</p><p>​           Math类，调用random()静态方法来完成Lambda体</p><p><strong>要求2：</strong></p><p>针对情况1：函数式接口中的抽象方法a在被重写时使用了某一个对象的方法b。如果方法a的形参列表、返回值类型与方法b的形参列表、返回值类型都相同，则我们可以使用方法b实现对方法a的重写、替换。</p></li></ul><p>  针对情况2：函数式接口中的抽象方法a在被重写时使用了某一个类的静态方法b。如果方法a的形参列表、返回值类型与方法b的形参列表、返回值类型都相同，则我们可以使用方法b实现对方法a的重写、替换。</p><p>  针对情况3：函数式接口中的抽象方法a在被重写时使用了某一个对象的方法b。如果方法a的返回值类型与方法b的返回值类型相同，同时方法a的形参列表中有n个参数，方法b的形参列表有n-1个参数，且方法a的第1个参数作为方法b的调用者，且方法a的后n-1参数与方法b的n-1参数匹配（类型相同或满足多态场景也可以）</p><p>  例如：t-&gt;System.out.println(t)</p><p>  ​        () -&gt; Math.random() 都是无参</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodRefTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况一：对象 :: 实例方法</span></span><br><span class="line"><span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line"><span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);</span><br><span class="line">con1.accept(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">con2.accept(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Supplier中的T get()</span></span><br><span class="line"><span class="comment">//Employee中的String getName()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>,<span class="number">5600</span>);</span><br><span class="line"></span><br><span class="line">Supplier&lt;String&gt; sup1 = () -&gt; emp.getName();</span><br><span class="line">System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">Supplier&lt;String&gt; sup2 = emp::getName;</span><br><span class="line">System.out.println(sup2.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二：类 :: 静态方法</span></span><br><span class="line"><span class="comment">//Comparator中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">//Integer中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);</span><br><span class="line">System.out.println(com1.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">System.out.println(com2.compare(<span class="number">12</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">Function&lt;Double,Long&gt; func = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Double, Long&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Double d)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.round(d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Function&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);</span><br><span class="line">System.out.println(func1.apply(<span class="number">12.3</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Function&lt;Double,Long&gt; func2 = Math::round;</span><br><span class="line">System.out.println(func2.apply(<span class="number">12.6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三：类 :: 实例方法  (有难度)</span></span><br><span class="line"><span class="comment">// Comparator中的int comapre(T t1,T t2)</span></span><br><span class="line"><span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">Comparator&lt;String&gt; com1 = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class="line">System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Comparator&lt;String&gt; com2 = String :: compareTo;</span><br><span class="line">System.out.println(com2.compare(<span class="string">&quot;abd&quot;</span>,<span class="string">&quot;abm&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line"><span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class="line">System.out.println(pre1.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">BiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class="line">System.out.println(pre2.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee中的String getName();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">23</span>, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();</span><br><span class="line">System.out.println(func1.apply(employee));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">Function&lt;Employee,String&gt; func2 = Employee::getName;</span><br><span class="line">System.out.println(func2.apply(employee));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><p>当Lambda表达式是创建一个对象，并且满足Lambda表达式形参，正好是给创建这个对象的构造器的实参列表，就可以使用构造器引用。</p><p>格式：<code>类名::new</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.BiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Function&lt;Integer, Dog&gt; func1 = Dog::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(func1.apply(<span class="number">11</span>));</span><br><span class="line">        BiFunction&lt;Integer, String, Dog&gt; func2 = Dog::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(func2.apply(<span class="number">11</span>, <span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="数组构造引用"><a href="#数组构造引用" class="headerlink" title="数组构造引用"></a>数组构造引用</h2><p>当Lambda表达式是创建一个数组对象，并且满足Lambda表达式形参，正好是给创建这个数组对象的长度，就可以数组构造引用。</p><p>格式：<code>数组类型名::new</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">    String[] arr1 = func1.apply(<span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Integer,String[]&gt; func2 = String[] :: <span class="keyword">new</span>;</span><br><span class="line">    String[] arr2 = func2.apply(<span class="number">10</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h1><h2 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h2><p>Stream 是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。</p><p>Stream 和 Collection 集合的区别：<strong>Collection 是一种静态的内存数据结构，讲的是数据，而 Stream 是有关计算的，讲的是计算。</strong>前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</p><p>注意：</p><p>①Stream 自己不会存储元素。</p><p>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</p><p>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。即一旦执行终止操作，就执行中间操作链，并产生结果。</p><p>④ Stream一旦执行了终止操作，就不能再调用其它中间操作或终止操作了。</p><p><br></p><h2 id="Stream的操作三个步骤"><a href="#Stream的操作三个步骤" class="headerlink" title="Stream的操作三个步骤"></a>Stream的操作三个步骤</h2><p><strong>1- 创建 Stream</strong><br>一个数据源（如：集合、数组），获取一个流</p><p><strong>2- 中间操作</strong><br>每次处理都会返回一个持有结果的新Stream，即中间操作的方法返回值仍然是Stream类型的对象。因此中间操作可以是个<code>操作链</code>，可对数据源的数据进行n次处理，但是在终结操作前，并不会真正执行。</p><p><strong>3- 终止操作(终端操作)</strong><br>终止操作的方法返回值类型就不再是Stream了，因此一旦执行终止操作，就结束整个Stream操作了。一旦执行终止操作，就执行中间操作链，最终产生结果并结束Stream。</p><h3 id="创建Stream实例"><a href="#创建Stream实例" class="headerlink" title="创建Stream实例"></a>创建Stream实例</h3><p><strong>方式一：通过集合</strong></p><p>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：</p><ul><li><p>default Stream<E> stream() : 返回一个顺序流</p></li><li><p>default Stream<E> parallelStream() : 返回一个并行流</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JDK1.8中，Collection系列集合增加了方法</span></span><br><span class="line">    Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二：通过数组</strong></p><p>Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：</p><ul><li>static <T> Stream<T> stream(T[] array): 返回一个流</li><li>public static IntStream stream(int[] array)</li><li>public static LongStream stream(long[] array)</li><li>public static DoubleStream stream(double[] array)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">    String[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">    Stream&lt;String&gt; stream = Arrays.stream(arr); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式三：通过Stream的of()</strong></p><p>可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。</p><ul><li>public static<T> Stream<T> of(T… values) : 返回一个流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式四：创建无限流(了解)</strong></p><p>可以使用静态方法 Stream.iterate() 和 Stream.generate(), 创建无限流。</p><ul><li><p>迭代<br>public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) </p></li><li><p>生成<br>public static<T> Stream<T> generate(Supplier<T> s) </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式四：创建无限流</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final</span></span><br><span class="line"><span class="comment">// UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">0</span>, x -&gt; x + <span class="number">2</span>);</span><br><span class="line">stream.limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成</span></span><br><span class="line"><span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">Stream&lt;Double&gt; stream1 = Stream.generate(Math::random);</span><br><span class="line">stream1.limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一系列中间操作"><a href="#一系列中间操作" class="headerlink" title="一系列中间操作"></a>一系列中间操作</h3><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。</p><p>1-筛选与切片</p><div class="table-container"><table><thead><tr><th><strong>方   法</strong></th><th><strong>描   述</strong></th></tr></thead><tbody><tr><td><strong>filter(Predicatep)</strong></td><td>接收  Lambda ， 从流中排除某些元素</td></tr><tr><td><strong>distinct()</strong></td><td>筛选，通过流所生成元素的  hashCode() 和 equals() 去除重复元素</td></tr><tr><td><strong>limit(long maxSize)</strong></td><td>截断流，使其元素不超过给定数量</td></tr><tr><td><strong>skip(long n)</strong></td><td>跳过元素，返回一个扔掉了前  n 个元素的流。<br>若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</td></tr></tbody></table></div><p>2-映射</p><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>map(Function f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td></tr><tr><td><strong>mapToDouble(ToDoubleFunction f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</td></tr><tr><td><strong>mapToInt(ToIntFunction  f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的  IntStream。</td></tr><tr><td><strong>mapToLong(ToLongFunction  f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的  LongStream。</td></tr><tr><td><strong>flatMap(Function  f)</strong></td><td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td></tr></tbody></table></div><p>3-排序</p><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>sorted()</strong></td><td>产生一个新流，其中按自然顺序排序</td></tr><tr><td><strong>sorted(Comparator</strong> <strong>com)</strong></td><td>产生一个新流，其中按比较器顺序排序</td></tr></tbody></table></div><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamMiddleOperate</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1、创建Stream</span></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、加工处理</span></span><br><span class="line">        <span class="comment">//过滤：filter(Predicate p)</span></span><br><span class="line">        <span class="comment">//把里面的偶数拿出来</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * filter(Predicate p)</span></span><br><span class="line"><span class="comment">         * Predicate是函数式接口，抽象方法：boolean test(T t)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        stream = stream.filter(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、终结操作：例如：遍历</span></span><br><span class="line">        stream.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">                .filter(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .distinct()</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">                .distinct()  <span class="comment">//(1,2,3,4,5,6,7)</span></span><br><span class="line">                .filter(t -&gt; t%<span class="number">2</span>!=<span class="number">0</span>) <span class="comment">//(1,3,5,7)</span></span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .skip(<span class="number">5</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .skip(<span class="number">5</span>)</span><br><span class="line">                .distinct()</span><br><span class="line">                .filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .distinct()</span><br><span class="line">                .peek(System.out::println)  <span class="comment">//Consumer接口的抽象方法  void accept(T t)</span></span><br><span class="line">                .count();</span><br><span class="line">        System.out.println(<span class="string">&quot;count=&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//希望能够找出前三个最大值，前三名最大的，不重复</span></span><br><span class="line">        Stream.of(<span class="number">11</span>,<span class="number">2</span>,<span class="number">39</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">54</span>)</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted((t1,t2) -&gt; -Integer.compare(t1, t2))<span class="comment">//Comparator接口  int compare(T t1, T t2)</span></span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .map(t -&gt; t+=<span class="number">1</span>)<span class="comment">//Function&lt;T,R&gt;接口抽象方法 R apply(T t)</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.stream(arr)</span><br><span class="line">                .map(t-&gt;t.toUpperCase())</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span>&#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line">        Arrays.stream(arr)</span><br><span class="line">                .flatMap(t -&gt; Stream.of(t.split(<span class="string">&quot;|&quot;</span>)))<span class="comment">//Function&lt;T,R&gt;接口抽象方法 R apply(T t)  现在的R是一个Stream</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><ul><li><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。</p></li><li><p>流进行了终止操作后，不能再次使用。</p></li></ul><p>1-匹配与查找</p><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>allMatch(Predicate  p)</strong></td><td>检查是否匹配所有元素</td></tr><tr><td><strong>anyMatch(Predicate  p)  </strong></td><td>检查是否至少匹配一个元素</td></tr><tr><td><strong>noneMatch(Predicate</strong>  <strong>p)</strong></td><td>检查是否没有匹配所有元素</td></tr><tr><td><strong>findFirst()</strong></td><td>返回第一个元素</td></tr><tr><td><strong>findAny()</strong></td><td>返回当前流中的任意元素</td></tr><tr><td><strong>count()</strong></td><td>返回流中元素总数</td></tr><tr><td><strong>max(Comparator c)</strong></td><td>返回流中最大值</td></tr><tr><td><strong>min(Comparator c)</strong></td><td>返回流中最小值</td></tr><tr><td><strong>forEach(Consumer c)</strong></td><td>内部迭代(使用  Collection  接口需要用户去做迭代，称为外部迭代。<br>相反，Stream  API 使用内部迭代——它帮你把迭代做了)</td></tr></tbody></table></div><p>2-归约</p><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>reduce(T  identity, BinaryOperator b)</strong></td><td>可以将流中元素反复结合起来，得到一个值。返回  T</td></tr><tr><td><strong>reduce(BinaryOperator  b)</strong></td><td>可以将流中元素反复结合起来，得到一个值。返回 Optional<T></td></tr></tbody></table></div><p>备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它来进行网络搜索而出名。</p><p>3-收集</p><div class="table-container"><table><thead><tr><th><strong>方   法</strong></th><th><strong>描   述</strong></th></tr></thead><tbody><tr><td><strong>collect(Collector  c)</strong></td><td>将流转换为其他形式。接收一个  Collector接口的实现，<br>用于给Stream中元素做汇总的方法</td></tr></tbody></table></div><p>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。</p><p>另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toList</strong></td><td>Collector<T, ?, List<T>&gt;</td><td>把流中元素收集到List</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; emps= list.stream().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toSet</strong></td><td>Collector<T, ?, Set<T>&gt;</td><td>把流中元素收集到Set</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Employee&gt; emps= list.stream().collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toCollection</strong></td><td>Collector<T, ?, C></td><td>把流中元素收集到创建的集合</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Employee&gt; emps =list.stream().collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>counting</strong></td><td>Collector<T, ?, Long></td><td>计算流中元素的个数</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().collect(Collectors.counting());</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>summingInt</strong></td><td>Collector<T, ?, Integer></td><td>对流中元素的整数属性求和</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> total=list.stream().collect(Collectors.summingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>averagingInt</strong></td><td>Collector<T, ?, Double></td><td>计算流中元素Integer属性的平均值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">avg</span> <span class="operator">=</span> list.stream().collect(Collectors.averagingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>summarizingInt</strong></td><td>Collector<T, ?, IntSummaryStatistics></td><td>收集流中Integer属性的统计值。如：平均值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> SummaryStatisticsiss= list.stream().collect(Collectors.summarizingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>joining</strong></td><td>Collector<CharSequence, ?, String></td><td>连接流中每个字符串</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str= list.stream().map(Employee::getName).collect(Collectors.joining());</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>maxBy</strong></td><td>Collector<T, ?, Optional<T>&gt;</td><td>根据比较器选择最大值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Emp&gt;max= list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary)));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>minBy</strong></td><td>Collector<T, ?, Optional<T>&gt;</td><td>根据比较器选择最小值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Emp&gt; min = list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary)));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>reducing</strong></td><td>Collector<T, ?, Optional<T>&gt;</td><td>从一个作为累加器的初始值开始，利用BinaryOperator与流中元素逐个结合，从而归约成单个值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> total=list.stream().collect(Collectors.reducing(<span class="number">0</span>, Employee::getSalar, Integer::sum));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>collectingAndThen</strong></td><td>Collector<T,A,RR></td><td>包裹另一个收集器，对其结果转换函数</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> how= list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>groupingBy</strong></td><td>Collector<T, ?, Map<K, List<T>&gt;&gt;</td><td>根据某属性值对流分组，属性为K，结果为V</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Emp.Status, List&lt;Emp&gt;&gt; map= list.stream().collect(Collectors.groupingBy(Employee::getStatus));</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>partitioningBy</strong></td><td>Collector<T, ?, Map<Boolean, List<T>&gt;&gt;</td><td>根据true或false进行分区</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean,List&lt;Emp&gt;&gt; vd = list.stream().collect(Collectors.partitioningBy(Employee::getManage));</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamEndding</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .count();</span><br><span class="line">        System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">                .allMatch(t -&gt; t%<span class="number">2</span>!=<span class="number">0</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">                .anyMatch(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Integer&gt; opt = Stream.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>).findFirst();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Integer&gt; opt = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">                .filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                .findFirst();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Integer&gt; opt = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                .findFirst();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Integer&gt; max = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .max((t1,t2) -&gt; Integer.compare(t1, t2));</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">reduce</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .reduce(<span class="number">0</span>, (t1,t2) -&gt; t1+t2);<span class="comment">//BinaryOperator接口   T apply(T t1, T t2)</span></span><br><span class="line">        System.out.println(reduce);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Integer&gt; max = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .reduce((t1,t2) -&gt; t1&gt;t2?t1:t2);<span class="comment">//BinaryOperator接口   T apply(T t1, T t2)</span></span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .filter(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="新语法结构"><a href="#新语法结构" class="headerlink" title="新语法结构"></a>新语法结构</h1><h2 id="Java的REPL工具：-jShell命令"><a href="#Java的REPL工具：-jShell命令" class="headerlink" title="Java的REPL工具： jShell命令"></a>Java的REPL工具： jShell命令</h2><p><strong>JDK9的新特性</strong></p><p>Java 终于拥有了像Python 和 Scala 之类语言的REPL工具（交互式编程环境，read - evaluate - print - loop）：<code>jShell</code>。以交互式的方式对语句和表达式进行求值。<code>即写即得</code>、<code>快速运行</code>。</p><p>利用jShell在没有创建类的情况下，在命令行里直接声明变量，计算表达式，执行语句。无需跟人解释”public static void main(String[] args)”这句”废话”。</p><p><br></p><h2 id="异常处理之try-catch资源关闭"><a href="#异常处理之try-catch资源关闭" class="headerlink" title="异常处理之try-catch资源关闭"></a>异常处理之try-catch资源关闭</h2><p><strong>JDK7的新特性</strong></p><p>在try的后面可以增加一个()，在括号中可以声明流对象并初始化。try中的代码执行完毕，会自动把流对象释放，就不用写finally了。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(资源对象的声明和初始化)&#123;</span><br><span class="line">    业务逻辑代码,可能会产生异常</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> e)&#123;</span><br><span class="line">    处理异常代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> e)&#123;</span><br><span class="line">    处理异常代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>1、在try()中声明的资源，无论是否发生异常，无论是否处理异常，都会自动关闭资源对象，不用手动关闭了。</p><p>2、这些资源实现类必须实现AutoCloseable或Closeable接口，实现其中的close()方法。Closeable是AutoCloseable的子接口。Java7几乎把所有的“资源类”（包括文件IO的各种类、JDBC编程的Connection、Statement等接口…）都进行了改写，改写后资源类都实现了AutoCloseable或Closeable接口，并实现了close()方法。</p><p>3、写到try()中的资源类的变量默认是final声明的，不能修改。</p><p><strong>JDK9的新特性</strong></p><p>try的前面可以定义流对象，try后面的()中可以直接引用流对象的名称。在try代码执行完毕后，流对象也可以释放掉，也不用写finally了。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line"><span class="keyword">try</span>(a;b)&#123;</span><br><span class="line">    可能产生的异常代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名 变量名)&#123;</span><br><span class="line">    异常处理的逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in);</span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out);</span><br><span class="line">    <span class="keyword">try</span> (reader; writer) &#123;</span><br><span class="line">        <span class="comment">//reader是final的，不可再被赋值</span></span><br><span class="line">        <span class="comment">//   reader = null;</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h2><p><strong>JDK 10的新特性</strong></p><p>局部变量的显示类型声明，常常被认为是不必须的，给一个好听的名字反而可以很清楚的表达出下面应该怎样继续。本新特性允许开发人员省略通常不必要的局部变量类型声明，以增强Java语言的体验性、可读性。</p><ul><li>使用举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.局部变量的实例化</span></span><br><span class="line"><span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.增强for循环中的索引</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v : list) &#123;</span><br><span class="line">    System.out.println(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.传统for循环中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 返回值类型含复杂泛型结构</span></span><br><span class="line"><span class="type">var</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line"><span class="comment">//Iterator&lt;Map.Entry&lt;Integer, Student&gt;&gt; iterator = set.iterator();</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>不适用场景<ul><li>声明一个成员变量</li><li>声明一个数组变量，并为数组静态初始化（省略new的情况下）</li><li>方法的返回值类型</li><li>方法的参数类型</li><li>没有初始化的方法内的局部变量声明</li><li>作为catch块中异常类型</li><li>Lambda表达式中函数式接口的类型</li><li>方法引用中函数式接口的类型</li></ul></li></ul><p><br></p><h2 id="instanceof的模式匹配"><a href="#instanceof的模式匹配" class="headerlink" title="instanceof的模式匹配"></a>instanceof的模式匹配</h2><p><strong>JDK14中预览特性：</strong></p><p>instanceof 模式匹配通过提供更为简便的语法，来提高生产力。有了该功能，可以减少Java程序中显式强制转换的数量，实现更精确、简洁的类型安全的代码。</p><p>Java 14之前旧写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)obj; <span class="comment">//需要强转</span></span><br><span class="line">    .. str.contains(..)..</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 14新特性写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String str)&#123;</span><br><span class="line">    .. str.contains(..)..</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * instanceof的模式匹配（预览）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 上午 11:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Feature01</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello,Java14&quot;</span>);</span><br><span class="line">        obj = <span class="literal">null</span>;<span class="comment">//在使用null 匹配instanceof 时，返回都是false.</span></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj;</span><br><span class="line">            System.out.println(str.contains(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;非String类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例1：</span></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String str)&#123; <span class="comment">//新特性：省去了强制类型转换的过程</span></span><br><span class="line">            System.out.println(str.contains(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;非String类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InstanceOf</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String str)&#123;<span class="comment">//此时的str的作用域仅限于if结构内。</span></span><br><span class="line">            System.out.println(str.toUpperCase());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(str.toLowerCase());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//举例3：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monitor</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public boolean equals(Object o)&#123;</span></span><br><span class="line"><span class="comment">//        if(o instanceof Monitor other)&#123;</span></span><br><span class="line"><span class="comment">//            if(model.equals(other.model) &amp;&amp; price == other.price)&#123;</span></span><br><span class="line"><span class="comment">//                return true;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> Monitor other &amp;&amp; model.equals(other.model) &amp;&amp; price == other.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="switch表达式"><a href="#switch表达式" class="headerlink" title="switch表达式"></a>switch表达式</h2><p>传统switch声明语句的弊端：</p><ul><li>匹配是自上而下的，如果忘记写break，后面的case语句不论匹配与否都会执行； —-&gt;case穿透</li><li>所有的case语句共用一个块范围，在不同的case语句定义的变量名不能重复；</li><li>不能在一个case里写多个执行结果一致的条件；</li><li>整个switch不能作为表达式返回值；</li></ul><p><strong>JDK12中预览特性：</strong></p><ul><li><p>Java 12将会对switch声明语句进行扩展，使用<code>case L -&gt;</code>来替代以前的<code>break;</code>，省去了 break 语句，避免了因少写 break 而出错。</p></li><li><p>同时将多个 case 合并到一行，显得简洁、清晰，也更加优雅的表达逻辑分支。</p></li><li><p>为了保持兼容性，case 条件语句中依然可以使用字符<code>:</code> ，但是同一个 switch 结构里不能混用<code>-&gt;</code> 和<code>:</code> ，否则编译错误。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> Fruit.GRAPE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numberOfLetters</span> <span class="operator">=</span> <span class="keyword">switch</span>(fruit)&#123;</span><br><span class="line">            <span class="keyword">case</span> PEAR -&gt; <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">case</span> APPLE,MANGO,GRAPE -&gt; <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">case</span> ORANGE,PAPAYA -&gt; <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No Such Fruit:&quot;</span> + fruit);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(numberOfLetters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JDK13中二次预览特性：</strong></p><p>JDK13中引入了yield语句，用于返回值。这意味着，switch表达式(返回值)应该使用yield，switch语句(不返回值)应该使用break。</p><p>yield和return的区别在于：return会直接跳出当前循环或者方法，而yield只会跳出当前switch块。</p><p>在JDK13中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSwitch2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">            yield <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSwitch3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            yield <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            yield <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            yield <span class="number">3</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h2><p>现实问题：</p><p>在Java中，通常需要使用String类型表达HTML，XML，SQL或JSON等格式的字符串，在进行字符串赋值时需要进行转义和连接操作，然后才能编译该代码，这种表达方式难以阅读并且难以维护。</p><p><strong>JDK13的新特性</strong></p><p>使用”””作为文本块的开始符和结束符，在其中就可以放置多行的字符串，不需要进行任何转义。因此，文本块将提高Java程序的可读性和可写性。</p><p>基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;line1\nline2\nline3\n&quot;</span></span><br></pre></td></tr></table></figure><p>或者一个连接的字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;line1\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;line2\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;line3\n&quot;</span></span><br></pre></td></tr></table></figure><p>如果字符串末尾不需要行终止符，则结束分隔符可以放在最后一行内容上。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;line1\nline2\nline3&quot;</span></span><br></pre></td></tr></table></figure><p>文本块可以表示空字符串，但不建议这样做，因为它需要两行源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">empty</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>JDK14中二次预览特性</strong></p><p>JDK14的版本主要增加了两个escape sequences，分别是<code>\  取消换行</code>与<code>\s  空格</code>。</p><p><br></p><h2 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h2><p><code>record</code> 是一种全新的类型，它本质上是一个 <code>final</code> 类，同时所有的属性都是 <code>final</code> 修饰，它会自动编译出 <code>public get</code> 、<code>hashcode</code> 、<code>equals</code>、<code>toString</code>、构造器等结构，减少了代码编写量。</p><p>具体来说：当你用<code>record</code> 声明一个类时，该类将自动拥有以下功能：</p><ul><li>获取成员变量的简单方法，比如例题中的 name() 和 partner() 。注意区别于我们平常getter()的写法。</li><li>一个 equals 方法的实现，执行比较时会比较该类的所有成员属性。</li><li>重写 hashCode() 方法。</li><li>一个可以打印该类所有成员属性的 toString() 方法。</li><li>只有一个构造方法。</li></ul><p>此外：</p><ul><li>还可以在record声明的类中定义静态字段、静态方法、构造器或实例方法。</li><li>不能在record声明的类中定义实例字段；类不能声明为abstract；不能声明显式的父类等。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Dog</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java14Record</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;牧羊犬&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;田园犬&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;哈士奇&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(dog1);</span><br><span class="line">        System.out.println(dog2);</span><br><span class="line">        System.out.println(dog3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>记录不适合哪些场景</code></p><p>record的设计目标是提供一种将数据建模为数据的好方法。它也不是 JavaBeans 的直接替代品，因为record的方法不符合 JavaBeans 的 get 标准。另外 JavaBeans 通常是可变的，而记录是不可变的。尽管它们的用途有点像，但记录并不会以某种方式取代 JavaBean。</p><p><br></p><h2 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h2><p>背景：</p><p>在 Java 中如果想让一个类不能被继承和修改，这时我们应该使用 <code>final</code> 关键字对类进行修饰。不过这种要么可以继承，要么不能继承的机制不够灵活，有些时候我们可能想让某个类可以被某些类型继承，但是又不能随意继承，是做不到的。Java 15 尝试解决这个问题，引入了 <code>sealed</code> 类，被 <code>sealed</code> 修饰的类可以指定子类。这样这个类就只能被指定的类继承。</p><p><strong>JDK15的预览特性：</strong></p><p>通过密封的类和接口来限制超类的使用，密封的类和接口限制其它可能继承或实现它们的其它类或接口。</p><p>具体使用：</p><ul><li>使用修饰符<code>sealed</code>，可以将一个类声明为密封类。密封的类使用保留关键字<code>permits</code>列出可以直接扩展（即extends）它的类。</li></ul><ul><li><code>sealed</code> 修饰的类的机制具有传递性，它的子类必须使用指定的关键字进行修饰，且只能是 <code>final</code>、<code>sealed</code>、<code>non-sealed</code> 三者之一。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Shape</span> permits Circle, Rectangle, Square &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;...&#125; <span class="comment">//final表示Circle不能再被继承了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> permits TransparentRectangle, FilledRectangle &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransparentRectangle</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FilledRectangle</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">non-sealed</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;...&#125; <span class="comment">//non-sealed表示可以允许任何类继承</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="其它变化"><a href="#其它变化" class="headerlink" title="其它变化"></a>其它变化</h1><h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h2><p><strong>JDK8的新特性</strong></p><p>到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google在著名的Guava项目引入了Optional类，通过检查空值的方式避免空指针异常。受到Google的启发，Optional类已经成为Java 8类库的一部分。</p><p><code>Optional&lt;T&gt;</code> 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。如果值存在，则isPresent()方法会返回true，调用get()方法会返回该对象。</p><p>Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</p><ul><li><code>创建Optional类对象的方法：</code></li><li><p>static <T> Optional<T> empty() ：用来创建一个空的Optional实例</p><ul><li>static <T> Optional<T> of(T value) ：用来创建一个Optional实例，value必须非空</li><li><code>static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</code> ：用来创建一个Optional实例，value可能是空，也可能非空</li></ul></li><li><p><code>判断Optional容器中是否包含对象：</code></p><ul><li>boolean isPresent() : 判断Optional容器中的值是否存在</li><li>void ifPresent(Consumer&lt;? super T&gt; consumer) ：判断Optional容器中的值是否存在，如果存在，就对它进行Consumer指定的操作，如果不存在就不做</li></ul></li><li><p><code>获取Optional容器的对象：</code></p></li><li><p>T get(): 如果调用对象包含值，返回该值。否则抛异常。T get()与of(T value)配合使用</p></li><li><p><code>T orElse(T other)</code>：orElse(T other) 与ofNullable(T value)配合使用，如果Optional容器中非空，就返回所包装值，如果为空，就用orElse(T other)other指定的默认值（备胎）代替</p></li><li><p>T orElseGet(Supplier&lt;? extends T&gt; other) ：如果Optional容器中非空，就返回所包装值，如果为空，就用Supplier接口的Lambda表达式提供的值代替</p></li><li><p>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) ：如果Optional容器中非空，就返回所包装值，如果为空，就抛出你指定的异常类型代替原来的NoSuchElementException</p></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOptional</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.of(str);</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.empty();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.of(str);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.get();</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line"><span class="comment">//System.out.println(opt.get());//java.util.NoSuchElementException: No value present</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElse(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElseGet(String::<span class="keyword">new</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElseThrow(()-&gt;<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;值不存在&quot;</span>));</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello1&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="comment">//判断是否是纯字母单词，如果是，转为大写，否则保持不变</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> opt.filter(s-&gt;s.matches(<span class="string">&quot;[a-zA-Z]+&quot;</span>))</span><br><span class="line">                .map(s -&gt; s.toUpperCase()).orElse(str);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这是JDK9-11的新特性</strong></p><div class="table-container"><table><thead><tr><th><strong>新增方法</strong></th><th><strong>描述</strong></th><th><strong>新增的版本</strong></th></tr></thead><tbody><tr><td>boolean isEmpty()</td><td>判断value是否为空</td><td>JDK  11</td></tr><tr><td>ifPresentOrElse(Consumer&lt;? super T&gt; action, Runnable emptyAction)</td><td>value非空，执行参数1功能；如果value为空，执行参数2功能</td><td>JDK  9</td></tr><tr><td>Optional<T> or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</td><td>value非空，返回对应的Optional；value为空，返回形参封装的Optional</td><td>JDK  9</td></tr><tr><td>Stream<T> stream()</td><td>value非空，返回仅包含此value的Stream；否则，返回一个空的Stream</td><td>JDK  9</td></tr><tr><td>T orElseThrow()</td><td>value非空，返回value；否则抛异常NoSuchElementException</td><td>JDK  10</td></tr></tbody></table></div><p><br></p><h2 id="GC方面新特性"><a href="#GC方面新特性" class="headerlink" title="GC方面新特性"></a>GC方面新特性</h2><h3 id="G1-GC"><a href="#G1-GC" class="headerlink" title="G1 GC"></a>G1 GC</h3><p>JDK9以后默认的垃圾回收器是G1GC。</p><p><strong>JDK10 : 为G1提供并行的Full GC</strong></p><p>G1最大的亮点就是可以尽量的避免full gc。但毕竟是“尽量”，在有些情况下，G1就要进行full gc了，比如如果它无法足够快的回收内存的时候，它就会强制停止所有的应用线程然后清理。</p><p>在Java10之前，一个单线程版的标记-清除-压缩算法被用于full gc。为了尽量减少full gc带来的影响，在Java10中，就把之前的那个单线程版的标记-清除-压缩的full gc算法改成了支持多个线程同时full gc。这样也算是减少了full gc所带来的停顿，从而提高性能。</p><p>你可以通过<code>-XX:ParallelGCThreads</code>参数来指定用于并行GC的线程数。</p><p><strong>JDK12：可中断的 G1 Mixed GC</strong></p><p><strong>JDK12：增强G1，自动返回未用堆内存给操作系统</strong></p><h3 id="henandoah-GC"><a href="#henandoah-GC" class="headerlink" title="henandoah GC"></a>henandoah GC</h3><p><strong>JDK12：Shenandoah GC：低停顿时间的GC</strong></p><p>Shenandoah 垃圾回收器是 Red Hat 在 2014 年宣布进行的一项垃圾收集器研究项目 Pauseless GC 的实现，旨在<strong>针对 JVM 上的内存收回实现低停顿的需求</strong>。</p><h3 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h3><p><strong>JDK11：引入革命性的 ZGC</strong></p><p>ZGC，这应该是JDK11最为瞩目的特性，没有之一。 </p><p>ZGC是一个并发、基于region、压缩型的垃圾收集器。</p><p>ZGC的设计目标是：支持TB级内存容量，暂停时间低（&lt;10ms），对整个程序吞吐量的影响小于15%。 将来还可以扩展实现机制，以支持不少令人兴奋的功能，例如多层堆（即热对象置于DRAM和冷对象置于NVMe闪存），或压缩堆。</p><p><strong>JDK13：ZGC:将未使用的堆内存归还给操作系统</strong></p><p><strong>JDK14：ZGC on macOS和windows</strong></p><p><strong>JDK15：ZGC 功能转正</strong></p><p><strong>JDK16：ZGC 并发线程处理</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费临时邮箱合集</title>
      <link href="/post/%E5%85%8D%E8%B4%B9%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E5%90%88%E9%9B%86/"/>
      <url>/post/%E5%85%8D%E8%B4%B9%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>临时邮箱是一种可以临时使用的电子邮箱地址。它通常可以免费获得，不需要注册，也不需要提供个人资料。临时邮箱通常只能在一定时间内使用，这个时间通常是几分钟到几小时不等。使用临时邮箱可以保护您的真实电子邮箱地址和个人信息，避免被垃圾邮件、广告和恶意软件骚扰。临时邮箱也可以用于注册一些不太重要的网站和服务，以避免您的真实邮箱地址被泄露或滥用。</p><h2 id="1-mail-tm"><a href="#1-mail-tm" class="headerlink" title="1.mail.tm"></a>1.mail.tm</h2><p>网站地址：<a href="https://mail.tm/zh/">https://mail.tm/zh/</a> </p><p>非常赞的一个临时邮箱，一个临时账号可以反复用，只有点击右上角的退出按钮才会更换账号，关闭浏览器或电脑也没问题。</p><h2 id="2-YOPMAIL"><a href="#2-YOPMAIL" class="headerlink" title="2.YOPMAIL"></a>2.YOPMAIL</h2><p>官方网址：<a href="https://www.yopmail.com/">http://www.yopmail.com</a></p><p>支持手动刷新，国内用户需要挂代理。</p><h2 id="3-Guerrilla-Mail"><a href="#3-Guerrilla-Mail" class="headerlink" title="3.Guerrilla Mail"></a>3.Guerrilla Mail</h2><p>官方网址：<a href="https://www.guerrillamail.com/zh/">https://www.guerrillamail.com/zh/</a></p><p>特点：支持10秒自动更新，支持自定义邮箱地址，多种邮箱后缀。</p><h2 id="4-查错IT网"><a href="#4-查错IT网" class="headerlink" title="4.查错IT网"></a>4.查错IT网</h2><p>官方网址：<a href="http://24mail.chacuo.net/">http://24mail.chacuo.net</a></p><p>手动，自动刷新，支持两种邮箱后缀。</p><h2 id="5-10分钟邮箱"><a href="#5-10分钟邮箱" class="headerlink" title="5.10分钟邮箱"></a>5.10分钟邮箱</h2><p>官方网址：<a href="https://mail.xiuvi.cn/">https://mail.xiuvi.cn/</a></p><p>自动刷新。</p><h2 id="6-Temp-mail"><a href="#6-Temp-mail" class="headerlink" title="6.Temp mail"></a>6.Temp mail</h2><p>地址： <a href="https://temp-mail.org/zh/">https://temp-mail.org/zh/</a> </p><p>支持IOS和安卓移动端。</p><h2 id="7-Gmailnator"><a href="#7-Gmailnator" class="headerlink" title="7.Gmailnator"></a>7.Gmailnator</h2><p>地址：<a href="https://www.emailnator.com/">https://www.emailnator.com/</a></p><p>以gmail结尾的临时邮箱，降低放进垃圾邮件的概率。邮件会在 24 小时后自动删除，且对所有电子邮件进行 7 天备份。</p><h2 id="8-Temp-Gmail"><a href="#8-Temp-Gmail" class="headerlink" title="8.Temp Gmail"></a>8.Temp Gmail</h2><p>地址：<a href="https://smailpro.com/advanced">https://smailpro.com/advanced</a></p><p>gmail后缀的临时邮箱，同时网站还包括免费在线接收短信、免费临时信用卡生成以及免费用户名生成等服务。</p><h2 id="9-Eooc-Mail"><a href="#9-Eooc-Mail" class="headerlink" title="9.Eooc Mail"></a>9.Eooc Mail</h2><p>地址：<a href="https://eeooc.com/">https://eeooc.com/</a></p><p>中文名字叫易欧克临时邮箱。即阅即焚，小巧免费,可以自定义，使用无限制，打开网站随机生成，程序仅提供临时邮箱接收邮件的功能。</p><h2 id="10-EduMail"><a href="#10-EduMail" class="headerlink" title="10. EduMail"></a>10. EduMail</h2><p>地址：<a href="https://edumail.icu/mailbox">https://edumail.icu/mailbox</a></p><h2 id="11-ETEMPMAIL"><a href="#11-ETEMPMAIL" class="headerlink" title="11.ETEMPMAIL"></a>11.ETEMPMAIL</h2><p>地址：<a href="https://etempmail.com/">https://etempmail.com/</a></p><p>免费教育邮箱，具有自由选择的临时电子邮件。您可以将 Edu 或 .com 临时邮件与 eTempMail 一起使用。</p>]]></content>
      
      
      <categories>
          
          <category> 工具资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邮箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高速交通摄像头实时监控视频</title>
      <link href="/post/%E9%AB%98%E9%80%9F%E4%BA%A4%E9%80%9A%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E8%A7%86%E9%A2%91/"/>
      <url>/post/%E9%AB%98%E9%80%9F%E4%BA%A4%E9%80%9A%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<ul><li>河南：<a href="https://weixin.hngscloud.com/">https://weixin.hngscloud.com/</a> 公众号：河南高速</li><li>浙江：监控视频 (zjt.gov.cn) 公众号：浙里畅行</li><li>四川：<a href="https://etc.scjtonline.cn/ScWeChatAvatar/#/homePage">https://etc.scjtonline.cn/ScWeChatAvatar/#/homePage</a></li><li>黑龙江：帮车宝APP，路况：<a href="https://gzh.hljtit.com/gis#/home">https://gzh.hljtit.com/gis#/home</a></li><li>江西：小程序江西交通监控云</li><li>江苏：江苏路网 (gandongyun.com) （还有零星省道）公众号：江苏高速</li><li>安徽：安徽高速出行服务（试运行） (u-road.com) （手动点亮右上角监控按钮）</li><li>上海：<a href="https://epsn.jtw.sh.gov.cn/wxgzh/html/ssjt.html">https://epsn.jtw.sh.gov.cn/wxgzh/html/ssjt.html</a> （手动点亮右上角监控按钮）</li><li>陕西（需在微信使用）：<a href="https://gaoguantong.ruitong369.com/GaoGuanTongServer/gaoguantongHTML/html/direction/12122/MainTest.html">https://gaoguantong.ruitong369.com/GaoGuanTongServer/gaoguantongHTML/html/direction/12122/MainTest.html</a></li><li>公众号：陕西交通12122</li><li>广西（微信）：<a href="https://traffic.gxxfzjt.com/traffic.html">https://traffic.gxxfzjt.com/traffic.html</a></li><li>河北：公众号：畅行燕赵；路况：河北省高速公路出行信息服务网 (hebecc.com)</li><li>新疆：新疆交通公众出行信息服务网 (xinjiang.gov.cn)</li><li>云南：云南高速通APP（现在只有点播），路况：<a href="https://wxyngst.u-road.com/YunNanWeChatServer/html/SVG/map.html">https://wxyngst.u-road.com/YunNanWeChatServer/html/SVG/map.html</a></li><li>吉林：（目前只有平台没有设备）<a href="https://www.hikjtxx.com/app?indexCode=190729111253050980&amp;code=051AE3100tGe6L1JWh000m6BoH3AE31a&amp;state=123#/live_traffic">https://www.hikjtxx.com/app?indexCode=190729111253050980&amp;code=051AE3100tGe6L1JWh000m6BoH3AE31a&amp;state=123#/live_traffic</a></li><li>广东：（目前仅开放内部用户）小程序高速视频云，二维码：<a href="https://img1.imgtp.com/2023/02/17/h5dQcHPh.jpg">https://img1.imgtp.com/2023/02/17/h5dQcHPh.jpg</a></li><li>宁夏：<a href="https://pubvideo.nxjtglgs.com/public/page/index?project=nx，公众号：宁夏高速服务（只有俩摄像头，一个还是坏的）">https://pubvideo.nxjtglgs.com/public/page/index?project=nx，公众号：宁夏高速服务（只有俩摄像头，一个还是坏的）</a></li></ul><p>以下省份只有路况无监控</p><ul><li>湖北：<a href="http://www.02712122.com/oss/gst-hubei/svg/index.html">http://www.02712122.com/oss/gst-hubei/svg/index.html</a></li><li>甘肃：<a href="http://gstgansuapi.u-road.com/Ga">http://gstgansuapi.u-road.com/Ga</a> … /roadCondition.html</li><li>福建（微信）：<a href="https://jjzd.fzga.gov.cn/3g/sslkxx.msw">https://jjzd.fzga.gov.cn/3g/sslkxx.msw</a></li><li>内蒙：实时路况_内蒙古自治区交通运输厅 (nmg.gov.cn)</li><li>辽宁：<a href="https://app.ln-gst.com/nuxtH5/epidemicSituation、辽宁高速通APP">https://app.ln-gst.com/nuxtH5/epidemicSituation、辽宁高速通APP</a></li><li>湖南（快拍）：湖南高速公众出行服务网 (u-road.com)、湖南高速通APP</li><li>山东：e高速APP</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将网页做成APP</title>
      <link href="/post/%E5%A6%82%E4%BD%95%E5%B0%86%E7%BD%91%E9%A1%B5%E5%81%9A%E6%88%90APP/"/>
      <url>/post/%E5%A6%82%E4%BD%95%E5%B0%86%E7%BD%91%E9%A1%B5%E5%81%9A%E6%88%90APP/</url>
      
        <content type="html"><![CDATA[<p>如果我们有一个网页需要经常访问，以打开浏览器输入网址或者点击书签的方式就让人感到麻烦。本文将介绍如何通过iAPP将你的网站制作成APP，只要点击就可以直接访问。</p><hr><h1 id="iAPP"><a href="#iAPP" class="headerlink" title="iAPP"></a>iAPP</h1><p>iAPP是一款在手机上制作APP的应用，可以在应用商店搜索到。</p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>1.打开iAPP，在左上角点击新建项目，输入标题，语言选择裕V3，创建应用</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035732.png" alt="20230403100208" style="zoom:25%;" /></p><p>2.点击<strong>可视编程设计</strong>我们就可以进入项目设计页面了</p><p>3.新项目建立后系统会自动生成一个“hello world”页面，我们可以直接在页面中删掉这个页面</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035733.png" alt="20230403100005" style="zoom:25%;" /></p><p>4.新页面，我们要添加一个浏览器控件，在右侧控件点开，找到<strong>浏览器</strong>控件进行添加</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035734.png" alt="20230403100657" style="zoom:25%;" /></p><p>5.在控件属性页面将控件高和宽都设置为<strong>-1</strong>（-1的意思为最大）</p><p>6.点击界面事件，添加一个<strong>载入事件</strong></p><p>我们需要在载入事件面板中填写代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s a=<span class="string">&quot;https://www.doubt-fact.top&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s申明一个变量,设置变量a为网址</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">us</span>(<span class="number">1</span>,<span class="string">&quot;url&quot;</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1为控件的代号</span></span><br></pre></td></tr></table></figure><p>补充一点，如果需要每次访问都清理缓存的话可以添加这句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hs(&quot;del cookie&quot;)</span><br></pre></td></tr></table></figure><p>这样，我们就创建好了，测试一下，是不是可以访问了呢？</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035735.png" alt="20230403101701" style="zoom:25%;" /></p><p>7.在界面事件中添加<strong>按键按下事件</strong></p><p>输入以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">f</span>(st_kC==<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//按下返回键</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">ug</span>(<span class="number">1</span>,<span class="string">&quot;cangoback&quot;</span>,c)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断是否存在可以后退的网页</span></span><br><span class="line"></span><br><span class="line"> <span class="title function_ invoke__">f</span>(c==<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果存在</span></span><br><span class="line"></span><br><span class="line">   <span class="title function_ invoke__">us</span>(<span class="number">1</span>,<span class="string">&quot;gobackorforward&quot;</span>,-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//网页后退一步（这里整数为前进,负数为后退）</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果不存在</span></span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="title function_ invoke__">ends</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//退回桌面</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存退出设计</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035736.png" alt="20230403102113" style="zoom:25%;" /></p><p>8.点击<strong>权限配置管理</strong>，将访问网络的权限打开，<strong>打包测试</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035737.png" alt="20230403102525" style="zoom:25%;" /></p><p>安装APP即可使用</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202304031035738.png" alt="16" style="zoom:25%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI工具合集</title>
      <link href="/post/AI%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/"/>
      <url>/post/AI%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="📙AI文本"><a href="#📙AI文本" class="headerlink" title="📙AI文本"></a>📙AI文本</h1><p>ChatGPT： <a href="https://chat.openai.com/">https://chat.openai.com/</a><br>NotionAI： <a href="https://www.notion.so/product/ai">https://www.notion.so/product/ai</a><br>A.I. Data Sidekick：AI工具编写 SQL、文档等的速度提高10倍<br><a href="https://www.airops.com/">https://www.airops.com/</a><br>Writesonic：人工智能写作辅助工具<br><a href="https://writesonic.com/">https://writesonic.com/</a><br>copy.ai：使用 AI 编写更好的营销文案和内容<br><a href="https://www.copy.ai/">https://www.copy.ai/</a><br>Character.AI：AI人工交互<br><a href="https://beta.character.ai/">https://beta.character.ai/</a><br>Fireflies：该工具可插入 Zoom、Teams 或 Webex 等流行的视频会议工具，并自动执行做笔记和创建转录的过程<br><a href="https://fireflies.ai/">https://fireflies.ai/</a><br>Jasper： AI文案写作工具<br><a href="https://www.jasper.ai/">https://www.jasper.ai/</a><br>Outplay： <a href="https://outplayhq.com/">https://outplayhq.com/</a><br>CoWriter：AI辅助写作<br><a href="https://cowriter.org/login">https://cowriter.org/login</a></p><h1 id="🎨AI绘画"><a href="#🎨AI绘画" class="headerlink" title="🎨AI绘画"></a>🎨AI绘画</h1><p>Midjourney：AI绘画神器<br>网站： <a href="https://www.midjourney.com/">https://www.midjourney.com/</a><br>教程： <a href="https://www.uisdc.com/midjourney">https://www.uisdc.com/midjourney</a><br>PhotoRoom：擦除任何背景、对象<br><a href="https://www.photoroom.com/">https://www.photoroom.com/</a><br>造梦师：只需一句话，让你的文字变成画作<br><a href="https://printidea.art/">https://printidea.art/</a><br>ARC Lab：一款提供照片修复、抠图、画质增强的在线工具<br><a href="https://arc.tencent.com/zh/ai-demos/faceRestoration">https://arc.tencent.com/zh/ai-demos/faceRestoration</a><br>Artbreeder：人工智能合成创意工具<br><a href="https://www.artbreeder.com/">https://www.artbreeder.com/</a><br>Stockimg AI：生成各种各样的设计元素,包括logo、插画、图片壁纸等<br><a href="https://stockimg.ai/">https://stockimg.ai/</a><br>niji·journey：二次元ai绘画<br><a href="https://nijijourney.com/zh/">https://nijijourney.com/zh/</a><br>Getimg.ai：关键词生成图片的AI工具<br><a href="https://getimg.ai/">https://getimg.ai/</a><br>Dreamlike.art：AI图像生成<br><a href="https://dreamlike.art/">https://dreamlike.art/</a><br>文心一格 飞桨：AI艺术和创意辅助平台<br><a href="https://yige.baidu.com/">https://yige.baidu.com/</a><br>Phygital+：AI图像生成<br><a href="https://phygital.plus/">https://phygital.plus/</a><br>Beautiful.ai：AI生成PPT<br><a href="https://www.beautiful.ai/">https://www.beautiful.ai/</a></p><h1 id="🎧AI音频"><a href="#🎧AI音频" class="headerlink" title="🎧AI音频"></a>🎧AI音频</h1><p>Brain.fm：专注、放松、冥想和睡眠，聆听为您的大脑量身打造的音乐<br><a href="https://www.brain.fm/">https://www.brain.fm/</a><br>Soundraw：人工智障生成音乐<br><a href="https://soundraw.io/">https://soundraw.io/</a><br>Endel：个性化背景音，帮助您集中注意力、放松和睡眠<br><a href="https://endel.io/">https://endel.io/</a><br>Riffusion：实时音乐和音频生成库<br><a href="https://www.riffusion.com/">https://www.riffusion.com/</a><br><a href="https://github.com/riffusion/riffusion">https://github.com/riffusion/riffusion</a><br>Papercup：人工智障配音和视频翻译软件<br><a href="https://www.papercup.com/">https://www.papercup.com/</a><br>LALAL.AI：从任何音频和视频中提取人声、伴奏和各种乐器<br><a href="https://www.lalal.ai/">https://www.lalal.ai/</a><br>Murf：使用多功能AI语音生成器从文本到语音<br><a href="https://murf.ai/">https://murf.ai/</a><br>PolyAI：语音助手<br><a href="https://poly.ai/">https://poly.ai/</a><br>Voicemod：语音实时变声器<br><a href="https://www.voicemod.net/zh/">https://www.voicemod.net/zh/</a><br>Boomy：人工智障生成音乐<br><a href="https://boomy.com/">https://boomy.com/</a><br>Mubert：人工智障生成音乐<br><a href="https://mubert.com/">https://mubert.com/</a></p><h1 id="🕸AI视频"><a href="#🕸AI视频" class="headerlink" title="🕸AI视频"></a>🕸AI视频</h1><p>Runway： AI 魔法工具<br><a href="https://runwayml.com/">https://runwayml.com/</a><br>Cascadeur：人工智障辅助关键帧动画软件<br><a href="https://cascadeur.com/">https://cascadeur.com/</a><br>Synthesia：人工智障视频生成<br><a href="https://www.synthesia.io/">https://www.synthesia.io/</a><br>Pollinations：文本转视频、图片<br><a href="https://pollinations.ai/">https://pollinations.ai/</a><br>Zubtitle：为视频添加字幕和在线编辑视频<br><a href="https://zubtitle.com/">https://zubtitle.com/</a><br>Munch：人工智障提取视频中的最引人入胜、最流行和最有影响力的片段<br><a href="https://www.getmunch.com/">https://www.getmunch.com/</a><br>Fliki：将文本变成带有 AI 语音的视频<br><a href="https://fliki.ai/">https://fliki.ai/</a><br>Peech：个性化的自动视频编辑和管理平台<br><a href="https://www.peech-ai.com/">https://www.peech-ai.com/</a><br>DreamFace：AI 动画照片应用程序<br><a href="https://dreamfaceapp.com/">https://dreamfaceapp.com/</a><br>D-ID：人工智障视频生成<br><a href="https://www.d-id.com/">https://www.d-id.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永久免费域名注册eu.org</title>
      <link href="/post/%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8Ceu.org/"/>
      <url>/post/%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8Ceu.org/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：<a href="https://nic.eu.org">EU.org</a>, free domain names since 1996</strong></p><h1 id="一、注册账号"><a href="#一、注册账号" class="headerlink" title="一、注册账号"></a>一、注册账号</h1><p>首先进入注册页面注册一个网站的账号<br>打开<br><a href="https://nic.eu.org/arf/en/login/?next=/arf/en/">https://nic.eu.org/arf/en/login/?next=/arf/en/</a><br>点击Register注册</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241016334.png" alt=""></p><p>按照报错提示要求补充其他信息</p><p>可以参考地址生成器生成地址<br><a href="https://www.meiguodizhi.com/">https://www.meiguodizhi.com/</a></p><h1 id="二、注册成功"><a href="#二、注册成功" class="headerlink" title="二、注册成功"></a>二、注册成功</h1><p>注册账号成功以后，邮箱会收到一份激活邮件，按要求激活即可</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241028759.png" alt=""></p><h1 id="三、申请域名"><a href="#三、申请域名" class="headerlink" title="三、申请域名"></a>三、申请域名</h1><p>登录成功以后新创建一个域名</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241030170.png" alt=""></p><p>dns地址可以填写这这个<br><code>edmund.dnspod.net</code><br><code>dempsey.dnspod.net</code></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241047593.png" alt=""></p><h1 id="四、等待审核"><a href="#四、等待审核" class="headerlink" title="四、等待审核"></a>四、等待审核</h1><p><img src="D:\Typora\图片\202304022345330.png" alt=""></p><p>没有错误，就代表成功了，剩下的就是等待，一两天的样子。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242027609.png" alt=""></p><h1 id="五、绑定Cloudflare"><a href="#五、绑定Cloudflare" class="headerlink" title="五、绑定Cloudflare"></a>五、绑定Cloudflare</h1><p>注册Cloudflare账号<br><a href="https://www.cloudflare.com/zh-cn/">https://www.cloudflare.com/zh-cn/</a></p><p>登录Cloudflare账号</p><p>添加站点-填入自己要绑定的域名</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242031222.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242036935.png" alt=""></p><p>选择免费</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242037418.png" alt=""></p><p>添加  Cloudflare  名称服务器</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242042128.png" alt=""></p><p>在eu.org中-选择自己的域名-Nameservers</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242043921.png" alt=""></p><p>将Cloudflare中的两个地址替换到这里，选择server names，Submit提交</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242049778.png" alt=""></p><p>添加完后，cloudflare个人主页的 <code>网站</code></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242051929.png" alt=""></p><p>等待一段时间（不到一小时）</p><p>即可收到绑定成功的邮件-变成了这样-有效</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242110748.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无需服务器无需域名搭建自己的ChatGPT3.5网站</title>
      <link href="/post/%E6%97%A0%E9%9C%80%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E9%9C%80%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ChatGPT3.5%E7%BD%91%E7%AB%99/"/>
      <url>/post/%E6%97%A0%E9%9C%80%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E9%9C%80%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ChatGPT3.5%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h1><ol><li><p>ChatGPT的API-KEY<br>获取地址：<br><a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a></p></li><li><p>注册好的github账号<br>注册地址：<br><a href="https://github.com/">https://github.com/</a></p></li><li><p>注册好的vercel账号<br>用github登录即可，需要手机号验证<br><a href="https://vercel.com/login">https://vercel.com/login</a></p></li><li><p>本开源项目作者的GitHub<br><a href="https://github.com/ddiu8081/chatgpt-demo">https://github.com/ddiu8081/chatgpt-demo</a></p></li></ol><h1 id="搭建开始"><a href="#搭建开始" class="headerlink" title="搭建开始"></a>搭建开始</h1><h2 id="1-打开这个项目"><a href="#1-打开这个项目" class="headerlink" title="1)打开这个项目"></a>1)打开这个项目</h2><p><a href="https://github.com/nezha001/chatgpt-ywsj">https://github.com/nezha001/chatgpt-ywsj</a><br>登录好自己的GitHub账号</p><p><a href="#others"><strong><em><u>其他类似项目见最后</u></em></strong></a></p><h2 id="2-点击项目左下侧的Deploy进入Vercel页面"><a href="#2-点击项目左下侧的Deploy进入Vercel页面" class="headerlink" title="2)点击项目左下侧的Deploy进入Vercel页面"></a>2)点击项目左下侧的Deploy进入Vercel页面</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241152265.png" alt=""></p><h2 id="3-然后用github登录成功-需要验证手机号"><a href="#3-然后用github登录成功-需要验证手机号" class="headerlink" title="3)然后用github登录成功(需要验证手机号)"></a>3)然后用github登录成功(需要验证手机号)</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241154700.png" alt=""></p><h2 id="4-选择github"><a href="#4-选择github" class="headerlink" title="4)选择github"></a>4)选择github</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241153222.png" alt=""></p><p>然后自定义一个自己的名称-点击创建</p><h2 id="5-填入自己的chatgpt的api-key，部署即可"><a href="#5-填入自己的chatgpt的api-key，部署即可" class="headerlink" title="5)填入自己的chatgpt的api-key，部署即可"></a>5)填入自己的chatgpt的api-key，部署即可</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241200045.png" alt=""></p><h2 id="6）大约等待1分钟即可成功"><a href="#6）大约等待1分钟即可成功" class="headerlink" title="6）大约等待1分钟即可成功"></a>6）大约等待1分钟即可成功</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241203899.png" alt=""></p><h2 id="7-点击Continue-To-Dashboard进入管理页面"><a href="#7-点击Continue-To-Dashboard进入管理页面" class="headerlink" title="7) 点击Continue To Dashboard进入管理页面"></a>7) 点击Continue To Dashboard进入管理页面</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241208597.png" alt=""></p><p>点击<code>Visit</code>即可进入vercel官方分配的网址</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303241211855.png" alt=""></p><h1 id="绑定自定义域名（可选）"><a href="#绑定自定义域名（可选）" class="headerlink" title="绑定自定义域名（可选）"></a>绑定自定义域名（可选）</h1><p>选中自己的项目-打开下图-View Domains</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242111478.png" alt=""></p><p>将自己要绑定的域名填入以下的位置并ADD增加</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242112332.png" alt=""></p><p>此时他会要求我们做如下CNAME</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242121663.png" alt=""></p><p>那么我们将自己的域名CNAME到vercel给你的域名即可</p><p>打开Cloudflare做如下配置</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242120271.png" alt=""></p><p>添加一条点下保存，再添加下一条</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242123056.png" alt=""></p><p>稍微等待一会，刷新，直到没有错误提示即可</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242124806.png" alt=""></p><p>此时(有可能还得等待一会5分钟)就可以用自己的域名来访问了</p><p>Demo:</p><p><del><a href="https://www.mzlfreegpt.eu.org/">https://www.mzlfreegpt.eu.org/</a></del></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202303242128213.png" alt=""></p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p><a name="others"></a></p><p>其他类似项目：</p><ul><li><a href="https://github.com/Chanzhaoyu/chatgpt-web">https://github.com/Chanzhaoyu/chatgpt-web</a></li></ul><ul><li><a href="https://github.com/ourongxing/chatgpt-vercel">https://github.com/ourongxing/chatgpt-vercel</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> chatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSSL SSL_read：Connection was reset, errno 10054</title>
      <link href="/post/OpenSSL%20SSL_read%20errno%2010054/"/>
      <url>/post/OpenSSL%20SSL_read%20errno%2010054/</url>
      
        <content type="html"><![CDATA[<p><strong><big>❌  git 报错信息 ：</big></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL SSL_read: Connection was reset, errno 10054 ...</span><br></pre></td></tr></table></figure><p><strong><big>❗   异常信息</big></strong></p><p><code>Git Bash</code> 中，<code>push</code> 或者<code>hexo deploy</code>时，出现错误</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><strong><big>⭕  解决方案</big></strong></p><p>1.邮箱问题</p><p>查看用户名，邮箱</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>修改，用户名，邮箱</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><p>移除仓库，重新添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin https:<span class="comment">//github.com/XXX</span></span><br></pre></td></tr></table></figure><p>2.解除SSL认证</p><p>在 Git Bash 中输入以下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure><p>3.更新 DNS 缓存</p><p>cmd 窗口输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><p>4.文件过大，超过上限</p><p>修改为 500MB，在 Git Bash 中输入以下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config http.postBuffer <span class="number">5242880003</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记本键盘禁用</title>
      <link href="/post/%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%94%AE%E7%9B%98%E7%A6%81%E7%94%A8/"/>
      <url>/post/%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%94%AE%E7%9B%98%E7%A6%81%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>1、搜索cmd，以管理员身份运行命令指令符</p><p>2、输入以下代码，回车确定，重启电脑生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config i8042prt start= disabled</span><br></pre></td></tr></table></figure><p>tip：若要再次开启笔记本键盘</p><p>输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config i8042prt start= auto</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 键盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>一个正则表达式，就是用某种模式去匹配字符串的一个公式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;1998 年 12 月 8 日，第二代 Java 平台的企业版 J2EE 发布。1999 年 6 月，Sun 公司发布了&quot;</span> +</span><br><span class="line">                <span class="string">&quot;第二代 Java 平台（简称为 Java2）的 3 个版本：J2ME（Java2 Micro Edition，Java2 平台的微型&quot;</span> +</span><br><span class="line">                <span class="string">&quot;版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2 平台的&quot;</span> +</span><br><span class="line">                <span class="string">&quot;标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2 平台的企业版），应&quot;</span> +</span><br><span class="line">                <span class="string">&quot;用 3443 于基于 Java 的应用服务器。Java 2 平台的发布，是 Java 发展过程中最重要的一个&quot;</span> +</span><br><span class="line">                <span class="string">&quot;里程碑，标志着 Java 的应用开始普及 9889 &quot;</span>;</span><br><span class="line">        <span class="comment">//目标：匹配所有四个数字</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. \\d 表示一个任意的数字</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(\\d\\d)(\\d\\d)&quot;</span>;</span><br><span class="line">        <span class="comment">//2. 创建模式对象[即正则表达式对象]</span></span><br><span class="line">                <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="comment">//3. 创建匹配器</span></span><br><span class="line">        <span class="comment">//说明：创建匹配器 matcher， 按照 正则表达式的规则 去匹配 content 字符串</span></span><br><span class="line">                <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="comment">//4.开始匹配</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * matcher.find() 完成的任务 （考虑分组）</span></span><br><span class="line"><span class="comment"> * 什么是分组，比如 (\d\d)(\d\d) ,正则表达式中有() 表示分组,第 1 个()表示第 1 组,第 2 个()表示第 2 组... * 1. 根据指定的规则 ,定位满足规则的子字符串(比如(19)(98))</span></span><br><span class="line"><span class="comment"> * 2. 找到后，将 子字符串的开始的索引记录到 matcher 对象的属性 int[] groups;</span></span><br><span class="line"><span class="comment"> *      2.1 groups[0] = 0 , 把该子字符串的结束的索引+1 的值记录到 groups[1] = 4</span></span><br><span class="line"><span class="comment"> *      2.2 记录 1 组()匹配到的字符串 groups[2] = 0 groups[3] = 2</span></span><br><span class="line"><span class="comment"> *      2.3 记录 2 组()匹配到的字符串 groups[4] = 2 groups[5] = 4</span></span><br><span class="line"><span class="comment"> *      2.4.如果有更多的分组..... * 3. 同时记录 oldLast 的值为 子字符串的结束的 索引+1 的值即 35, 即下次执行 find 时，就从 35 开始匹</span></span><br><span class="line"><span class="comment"> 配</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * matcher.group(0) 分析</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 源码:</span></span><br><span class="line"><span class="comment"> * public String group(int group) &#123;</span></span><br><span class="line"><span class="comment"> * if (first &lt; 0)</span></span><br><span class="line"><span class="comment"> * throw new IllegalStateException(&quot;No match found&quot;);</span></span><br><span class="line"><span class="comment"> * if (group &lt; 0 || group &gt; groupCount())</span></span><br><span class="line"><span class="comment"> * throw new IndexOutOfBoundsException(&quot;No group &quot; + group);</span></span><br><span class="line"><span class="comment"> * if ((groups[group*2] == -1) || (groups[group*2+1] == -1))</span></span><br><span class="line"><span class="comment"> * return null;</span></span><br><span class="line"><span class="comment"> * return getSubSequence(groups[group * 2], groups[group * 2 + 1]).toString();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * 1. 根据 groups[0]=31 和 groups[1]=35 的记录的位置，从 content 开始截取子字符串返回</span></span><br><span class="line"><span class="comment"> * 就是 [31,35) 包含 31 但是不包含索引为 35 的位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果再次指向 find 方法.仍然安上面分析来执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="comment">//小结</span></span><br><span class="line">            <span class="comment">//1. 如果正则表达式有() 即分组</span></span><br><span class="line">            <span class="comment">//2. 取出匹配的字符串规则如下</span></span><br><span class="line">            <span class="comment">//3. group(0) 表示匹配到的子字符串</span></span><br><span class="line">            <span class="comment">//4. group(1) 表示匹配到的子字符串的第一组字串</span></span><br><span class="line">            <span class="comment">//5. group(2) 表示匹配到的子字符串的第 2 组字串</span></span><br><span class="line">            <span class="comment">//6. ... 但是分组的数不能越界.</span></span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 1 组()匹配到的值=&quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 2 组()匹配到的值=&quot;</span> + matcher.group(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="转义号"><a href="#转义号" class="headerlink" title="转义号\\"></a>转义号\\</h2><p>\\符号 说明:在我们使用正则表达式去检索某些特殊字符的时候，需要用到转义符号，否则检索不到结果，甚至会报错的。 </p><p>需要用到转义符号的字符有以下: <strong>. * + ( ) $ / \ ? [ ]  ^ { }</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;abc$(a.bc(123( )&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr = &quot;\\$&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;\\(&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符匹配符"><a href="#字符匹配符" class="headerlink" title="字符匹配符"></a>字符匹配符</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201724351.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201724539.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;a11c8abc _ABCy @&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr = &quot;[a-z]&quot;;//匹配 a-z 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[A-Z]&quot;;//匹配 A-Z 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;abc&quot;;//匹配 abc 字符串[默认区分大小写]</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;(?i)abc&quot;;//匹配 abc 字符串[不区分大小写]</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[0-9]&quot;;//匹配 0-9 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[^a-z]&quot;;//匹配 不在 a-z 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[^0-9]&quot;;//匹配 不在 0-9 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[abcd]&quot;;//匹配 在 abcd 中任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\D&quot;;//匹配 不在 0-9 的任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\w&quot;;//匹配 大小写英文字母, 数字，下划线</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\W&quot;;//匹配 等价于 [^a-zA-Z0-9_]</span></span><br><span class="line">        <span class="comment">//\\s 匹配任何空白字符(空格,制表符等)</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\s&quot;;</span></span><br><span class="line">        <span class="comment">//\\S 匹配任何非空白字符 ,和\\s 刚好相反</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\S&quot;;</span></span><br><span class="line">        <span class="comment">// . 匹配出 \n 之外的所有字符,如果要匹配.本身则需要使用 \\.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当创建 Pattern 对象时，指定 Pattern.CASE_INSENSITIVE, 表示匹配是不区分字母大小写.</span></span><br><span class="line">        <span class="comment">// Pattern pattern = Pattern.compile(regStr, Pattern.CASE_INSENSITIVE)</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择匹配符"><a href="#选择匹配符" class="headerlink" title="选择匹配符"></a>选择匹配符</h2><p>在匹配某个字符串的时候是选择性的，即:既可以匹配这个，又可以匹配那个，这时需<br>要用到选择匹配符号|</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201744698.png" alt=""></p><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>用于指定其前面的字符和组合项连续出现多少次</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201745278.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;a211111aaaaaahello&quot;</span>;</span><br><span class="line">        <span class="comment">//a&#123;3&#125;,1&#123;4&#125;,\\d&#123;2&#125;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;a&#123;3&#125;&quot;;// 表示匹配 aaa</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1&#123;4&#125;&quot;;// 表示匹配 1111</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d&#123;2&#125;&quot;;// 表示匹配 两位的任意数字字符</span></span><br><span class="line">        <span class="comment">//a&#123;3,4&#125;,1&#123;4,5&#125;,\\d&#123;2,5&#125;</span></span><br><span class="line">        <span class="comment">//细节：java 匹配默认贪婪匹配，即尽可能匹配多的</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;a&#123;3,4&#125;&quot;; //表示匹配 aaa 或者 aaaa</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1&#123;4,5&#125;&quot;; //表示匹配 1111 或者 11111</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d&#123;2,5&#125;&quot;; //匹配 2 位数或者 3,4,5</span></span><br><span class="line">        <span class="comment">//1+</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1+&quot;; //匹配一个 1 或者多个 1</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d+&quot;; //匹配一个数字或者多个数字</span></span><br><span class="line">        <span class="comment">//1*</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1*&quot;; //匹配 0 个 1 或者多个 1</span></span><br><span class="line">        <span class="comment">//演示?的使用, 遵守贪婪匹配</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;a1?&quot;</span>; <span class="comment">//匹配 a 或者 a1</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr<span class="comment">/*, Pattern.CASE_INSENSITIVE*/</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到 &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符, 规定要匹配的字符串出现的位置，比如在字符串的开始还是在结束的位置.</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201754813.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hanshunping sphan nnhan&quot;</span>;</span><br><span class="line">        <span class="comment">//String content = &quot;123-abc&quot;;</span></span><br><span class="line">        <span class="comment">//以至少 1 个数字开头，后接任意个小写字母的字符串</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;^[0-9]+[a-z]*&quot;;</span></span><br><span class="line">        <span class="comment">//以至少 1 个数字开头, 必须以至少一个小写字母结束</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;^[0-9]+\\-[a-z]+$&quot;;</span></span><br><span class="line">        <span class="comment">//表示匹配边界的 han[这里的边界是指：被匹配的字符串最后, // 也可以是空格的子字符串的后面]</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;han\\b&quot;;</span></span><br><span class="line">        <span class="comment">//和\\b 的含义刚刚相反</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;han\\B&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到=&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201820067.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hanshunping s7789 nn1189han&quot;</span>;</span><br><span class="line">        <span class="comment">//下面就是非命名分组</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">// 1. matcher.group(0) 得到匹配到的字符串</span></span><br><span class="line">        <span class="comment">// 2. matcher.group(1) 得到匹配到的字符串的第 1 个分组内容</span></span><br><span class="line">        <span class="comment">// 3. matcher.group(2) 得到匹配到的字符串的第 2 个分组内容</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;(\\d\\d)(\\d\\d)&quot;;//匹配 4 个数字的字符串</span></span><br><span class="line">        <span class="comment">//命名分组： 即可以给分组取名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(?&lt;g1&gt;\\d\\d)(?&lt;g2&gt;\\d\\d)&quot;</span>;<span class="comment">//匹配 4 个数字的字符串</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到=&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 1 个分组内容=&quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 1 个分组内容[通过组名]=&quot;</span> + matcher.group(<span class="string">&quot;g1&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 2 个分组内容=&quot;</span> + matcher.group(<span class="number">2</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 2 个分组内容[通过组名]=&quot;</span> + matcher.group(<span class="string">&quot;g2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201821410.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello 韩顺平教育 jack 韩顺平老师 韩顺平同学 hello 韩顺平学生&quot;</span>;</span><br><span class="line">        <span class="comment">// 找到 韩顺平教育 、韩顺平老师、韩顺平同学 子字符串</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;韩顺平教育|韩顺平老师|韩顺平同学&quot;;</span></span><br><span class="line">        <span class="comment">//上面的写法可以等价非捕获分组, 注意：不能 matcher.group(1)</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;韩顺平(?:教育|老师|同学)&quot;;</span></span><br><span class="line">        <span class="comment">//找到 韩顺平 这个关键字,但是要求只是查找韩顺平教育和 韩顺平老师 中包含有的韩顺平</span></span><br><span class="line">        <span class="comment">//下面也是非捕获分组，不能使用 matcher.group(1)</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;韩顺平(?=教育|老师)&quot;;</span></span><br><span class="line">        <span class="comment">//找到 韩顺平 这个关键字,但是要求只是查找 不是 (韩顺平教育 和 韩顺平老师) 中包含有的韩顺平</span></span><br><span class="line">        <span class="comment">//下面也是非捕获分组，不能使用 matcher.group(1)</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;韩顺平(?!教育|老师)&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201836039.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201837409.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201837719.png" alt=""></p><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201914233.png" alt=""></p><h2 id="Pattern类"><a href="#Pattern类" class="headerlink" title="Pattern类"></a>Pattern类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示 matches 方法，用于整体匹配, 在验证输入的字符串是否满足条件使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello abc hello, world&quot;</span>;</span><br><span class="line"><span class="comment">//String regStr = &quot;hello&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;hello.*&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">matches</span> <span class="operator">=</span> Pattern.matches(regStr, content);</span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配= &quot;</span> + matches);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Matcher类"><a href="#Matcher类" class="headerlink" title="Matcher类"></a>Matcher类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatcherMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello edu jack hspedutom hello smith hello hspedu hspedu&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">            System.out.println(matcher.start());</span><br><span class="line">            System.out.println(matcher.end());</span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + content.substring(matcher.start(), matcher.end()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//整体匹配方法，常用于，去校验某个字符串是否满足某个规则</span></span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配=&quot;</span> + matcher.matches());</span><br><span class="line">        <span class="comment">//完成如果 content 有 hspedu 替换成 Java学习</span></span><br><span class="line">        regStr = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line">        pattern = Pattern.compile(regStr);</span><br><span class="line">        matcher = pattern.matcher(content);</span><br><span class="line">        <span class="comment">//注意：返回的字符串才是替换后的字符串 原来的 content 不变化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newContent</span> <span class="operator">=</span> matcher.replaceAll(<span class="string">&quot;Java学习&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;newContent=&quot;</span> + newContent);</span><br><span class="line">        System.out.println(<span class="string">&quot;content=&quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分组、捕获、反向引用"><a href="#分组、捕获、反向引用" class="headerlink" title="分组、捕获、反向引用"></a>分组、捕获、反向引用</h1><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208201928470.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content= <span class="string">&quot;12321-333999111&quot;</span>;</span><br><span class="line">        String regStr= <span class="string">&quot;\\d&#123;5&#125;-(\\d)\\1&#123;2&#125;(\\d)\\2&#123;2&#125;(\\d)\\3&#123;2&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;我....我要....学学学学....编程 java!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;\\.&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        content = matcher.replaceAll(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        regStr =&quot;(.)\\1+&quot;;</span></span><br><span class="line"><span class="comment">//        pattern = Pattern.compile(regStr);</span></span><br><span class="line"><span class="comment">//        matcher = pattern.matcher(content);</span></span><br><span class="line"><span class="comment">//        //使用 反向引用$1 来转换匹配到的内容</span></span><br><span class="line"><span class="comment">//        content = matcher.replaceAll(&quot;$1&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(content);</span></span><br><span class="line"></span><br><span class="line">        content = Pattern.compile(<span class="string">&quot;(.)\\1+&quot;</span>).matcher(content).replaceAll(<span class="string">&quot;$1&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-类中使用正则表达式"><a href="#String-类中使用正则表达式" class="headerlink" title="String 类中使用正则表达式"></a>String 类中使用正则表达式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringReg</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;2000 年 5 月，JDK1.3、JDK1.4 和 J2SE1.3 相继发布，几周后其&quot;</span> +</span><br><span class="line">                <span class="string">&quot;获得了 Apple 公司 Mac OS X 的工业标准的支持。2001 年 9 月 24 日，J2EE1.3 发&quot;</span> +</span><br><span class="line">                <span class="string">&quot;布。&quot;</span> +</span><br><span class="line">                <span class="string">&quot;2002 年 2 月 26 日，J2SE1.4 发布。自此 Java 的计算能力有了大幅提升&quot;</span>;</span><br><span class="line">        <span class="comment">//使用正则表达式方式，将 JDK1.3 和 JDK1.4 替换成 JDK</span></span><br><span class="line">        content = content.replaceAll(<span class="string">&quot;JDK1\\.3|JDK1\\.4&quot;</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">        <span class="comment">//要求 验证一个 手机号， 要求必须是以 138 139 开头的</span></span><br><span class="line">        content = <span class="string">&quot;13888889999&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (content.matches(<span class="string">&quot;1(38|39)\\d&#123;8&#125;&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要求按照 # 或者 - 或者 ~ 或者 数字 来分割</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        content = <span class="string">&quot;hello#abc-jack12smith~北京&quot;</span>;</span><br><span class="line">        String[] split = content.split(<span class="string">&quot;#|-|~|\\d+&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">一、校验数字的表达式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">1</span> 数字：^[<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line">        <span class="number">2</span> n位的数字：^\d&#123;n&#125;$</span><br><span class="line">        <span class="number">3</span> 至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line">        <span class="number">4</span> m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">        <span class="number">5</span> 零和非零开头的数字：^(<span class="number">0</span>|[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)$</span><br><span class="line">        <span class="number">6</span> 非零开头的最多带两位小数的数字：^([<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">7</span> 带<span class="number">1</span>-<span class="number">2</span>位小数的正数或负数：^(\-)?\d+(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">8</span> 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line">        <span class="number">9</span> 有两位小数的正实数：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">10</span> 有<span class="number">1</span>~<span class="number">3</span>位小数的正实数：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)?$</span><br><span class="line">        <span class="number">11</span> 非零的正整数：^[<span class="number">1</span>-<span class="number">9</span>]\d*$ 或 ^([<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$ 或 ^\+?[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line">        <span class="number">12</span> 非零的负整数：^\-[<span class="number">1</span>-<span class="number">9</span>][]<span class="number">0</span>-<span class="number">9</span><span class="string">&quot;*$ 或 ^-[1-9]\d*$</span></span><br><span class="line"><span class="string">        13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span></span><br><span class="line"><span class="string">        14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span></span><br><span class="line"><span class="string">        15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span></span><br><span class="line"><span class="string">        16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span></span><br><span class="line"><span class="string">        17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span></span><br><span class="line"><span class="string">        18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span></span><br><span class="line"><span class="string">        19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        二、校验字符的表达式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1 汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</span></span><br><span class="line"><span class="string">        2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</span></span><br><span class="line"><span class="string">        3 长度为3-20的所有字符：^.&#123;3,20&#125;$</span></span><br><span class="line"><span class="string">        4 由26个英文字母组成的字符串：^[A-Za-z]+$</span></span><br><span class="line"><span class="string">        5 由26个大写英文字母组成的字符串：^[A-Z]+$</span></span><br><span class="line"><span class="string">        6 由26个小写英文字母组成的字符串：^[a-z]+$</span></span><br><span class="line"><span class="string">        7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span></span><br><span class="line"><span class="string">        8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$</span></span><br><span class="line"><span class="string">        9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span></span><br><span class="line"><span class="string">        10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</span></span><br><span class="line"><span class="string">        11 可以输入含有^%&amp;&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;,;=?$\x22]+</span></span><br><span class="line"><span class="string">        12 禁止输入含有~的字符：[^~\x22]+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        三、特殊需求表达式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span></span><br><span class="line"><span class="string">        2 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span></span><br><span class="line"><span class="string">        3 InternetURL：[a-zA-z]+://[^\s]* 或 ^https://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span></span><br><span class="line"><span class="string">        4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span></span><br><span class="line"><span class="string">        5 电话号码(&quot;</span>XXX-XXXXXXX<span class="string">&quot;、&quot;</span>XXXX-XXXXXXXX<span class="string">&quot;、&quot;</span>XXX-XXXXXXX<span class="string">&quot;、&quot;</span>XXX-XXXXXXXX<span class="string">&quot;、&quot;</span>XXXXXXX<span class="string">&quot;和&quot;</span>XXXXXXXX)：^(\(\d&#123;<span class="number">3</span>,<span class="number">4</span>&#125;-)|\d&#123;<span class="number">3.4</span>&#125;-)?\d&#123;<span class="number">7</span>,<span class="number">8</span>&#125;$ </span><br><span class="line">        <span class="number">6</span> 国内电话号码(<span class="number">0511</span>-<span class="number">4405222</span>、<span class="number">021</span>-<span class="number">87888822</span>)：\d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">8</span>&#125;|\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">7</span>&#125;</span><br><span class="line">        <span class="number">7</span> 身份证号：</span><br><span class="line">        <span class="number">15</span>或<span class="number">18</span>位身份证：^\d&#123;<span class="number">15</span>&#125;|\d&#123;<span class="number">18</span>&#125;$</span><br><span class="line">        <span class="number">15</span>位身份证：^[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">7</span>&#125;((<span class="number">0</span>\d)|(<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>]))(([<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>]\d)|<span class="number">3</span>[<span class="number">0</span>-<span class="number">1</span>])\d&#123;<span class="number">3</span>&#125;$</span><br><span class="line">        <span class="number">18</span>位身份证：^[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">5</span>&#125;[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">3</span>&#125;((<span class="number">0</span>\d)|(<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>]))(([<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>]\d)|<span class="number">3</span>[<span class="number">0</span>-<span class="number">1</span>])\d&#123;<span class="number">4</span>&#125;$</span><br><span class="line">        <span class="number">8</span> 短身份证号码(数字、字母x结尾)：^([<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">7</span>,<span class="number">18</span>&#125;(x|X)?$ 或 ^\d&#123;<span class="number">8</span>,<span class="number">18</span>&#125;|[<span class="number">0</span>-9x]&#123;<span class="number">8</span>,<span class="number">18</span>&#125;|[<span class="number">0</span>-9X]&#123;<span class="number">8</span>,<span class="number">18</span>&#125;?$</span><br><span class="line">        <span class="number">9</span> 帐号是否合法(字母开头，允许<span class="number">5</span>-<span class="number">16</span>字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;<span class="number">4</span>,<span class="number">15</span>&#125;$</span><br><span class="line">        <span class="number">10</span> 密码(以字母开头，长度在<span class="number">6</span>~<span class="number">18</span>之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;<span class="number">5</span>,<span class="number">17</span>&#125;$</span><br><span class="line">        <span class="number">11</span> 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class="number">8</span>-<span class="number">10</span>之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class="number">8</span>,<span class="number">10</span>&#125;$</span><br><span class="line">        <span class="number">12</span> 日期格式：^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">        <span class="number">13</span> 一年的<span class="number">12</span>个月(<span class="number">01</span>～09和<span class="number">1</span>～<span class="number">12</span>)：^(<span class="number">0</span>?[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])$</span><br><span class="line">        <span class="number">14</span> 一个月的<span class="number">31</span>天(<span class="number">01</span>～09和<span class="number">1</span>～<span class="number">31</span>)：^((<span class="number">0</span>?[<span class="number">1</span>-<span class="number">9</span>])|((<span class="number">1</span>|<span class="number">2</span>)[<span class="number">0</span>-<span class="number">9</span>])|<span class="number">30</span>|<span class="number">31</span>)$</span><br><span class="line">        <span class="number">15</span> 钱的输入格式：</span><br><span class="line">        <span class="number">16</span> <span class="number">1.</span>有四种钱的表示形式我们可以接受:<span class="string">&quot;10000.00&quot;</span> 和 <span class="string">&quot;10,000.00&quot;</span>, 和没有 <span class="string">&quot;分&quot;</span> 的 <span class="string">&quot;10000&quot;</span> 和 <span class="string">&quot;10,000&quot;</span>：^[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line">        <span class="number">17</span> <span class="number">2.</span>这表示任意一个不以<span class="number">0</span>开头的数字,但是,这也意味着一个字符<span class="string">&quot;0&quot;</span>不通过,所以我们采用下面的形式：^(<span class="number">0</span>|[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)$</span><br><span class="line">        <span class="number">18</span> <span class="number">3.</span>一个<span class="number">0</span>或者一个不以<span class="number">0</span>开头的数字.我们还可以允许开头有一个负号：^(<span class="number">0</span>|-?[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)$</span><br><span class="line">        <span class="number">19</span> <span class="number">4.</span>这表示一个<span class="number">0</span>或者一个可能为负的开头不为<span class="number">0</span>的数字.让用户以<span class="number">0</span>开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]+)?$</span><br><span class="line">        <span class="number">20</span> <span class="number">5.</span>必须说明的是,小数点后面至少应该有<span class="number">1</span>位数,所以<span class="string">&quot;10.&quot;</span>是不通过的,但是 <span class="string">&quot;10&quot;</span> 和 <span class="string">&quot;10.2&quot;</span> 是通过的：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">21</span> <span class="number">6.</span>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">22</span> <span class="number">7.</span>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(,[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">3</span>&#125;)*(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">23</span> <span class="number">8.1</span>到<span class="number">3</span>个数字,后面跟着任意个 逗号+<span class="number">3</span>个数字,逗号成为可选,而不是必须：^([<span class="number">0</span>-<span class="number">9</span>]+|[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(,[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">3</span>&#125;)*)(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line">        <span class="number">24</span> 备注：这就是最终结果了,别忘了<span class="string">&quot;+&quot;</span>可以用<span class="string">&quot;*&quot;</span>替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span><br><span class="line">        <span class="number">25</span> xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-<span class="number">9</span>]+\\.[x|X][m|M][l|L]$</span><br><span class="line">        <span class="number">26</span> 中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">        <span class="number">27</span> 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计<span class="number">2</span>，ASCII字符计<span class="number">1</span>))</span><br><span class="line">        <span class="number">28</span> 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">        <span class="number">29</span> HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line">        <span class="number">30</span> 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">        <span class="number">31</span> 腾讯QQ号：[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">4</span>,&#125; (腾讯QQ号从<span class="number">10000</span>开始)</span><br><span class="line">        <span class="number">32</span> 中国邮政编码：[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">5</span>&#125;(?!\d) (中国邮政编码为<span class="number">6</span>位数字)</span><br><span class="line">        <span class="number">33</span> IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/post/MySQL/"/>
      <url>/post/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p><strong>SQL语句分类</strong></p><p>DDL:数据定义语句[create表，库…]</p><p>DML:数据操作语句[增加insert,修改update，删除 delete]</p><p>DQL:数据查询语句[select ]</p><p>DCL:数据控制语句[管理数据库:比如用户权限grant revoke ]</p><h2 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a><strong>数据库基本操作</strong></h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208031548136.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208031650195.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208031701557.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208031734240.png" alt=""></p><h2 id="常用数据类型（列类型）"><a href="#常用数据类型（列类型）" class="headerlink" title="常用数据类型（列类型）"></a>常用数据类型（列类型）</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208031744446.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208032131524.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208051932191.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">`id` <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">`sex` <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">`birthday` <span class="type">DATE</span>,</span><br><span class="line">`entry_date` DATETIME,</span><br><span class="line">`job` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">`Salary` <span class="keyword">DOUBLE</span>,</span><br><span class="line">`resume` TEXT)<span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin ENGINE INNODB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span>(<span class="number">100</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;2000-12-11&#x27;</span>,<span class="string">&#x27;2022-08-03 22:01:20&#x27;</span>,<span class="string">&#x27;Java开发&#x27;</span>,<span class="string">&#x27;20000&#x27;</span>,<span class="string">&#x27;法外狂徒&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> </span><br><span class="line">`image` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> AFTER resume;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp MODIFY  </span><br><span class="line">`job` <span class="type">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> emp </span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> `sex`;</span><br><span class="line"></span><br><span class="line">RENAME <span class="keyword">table</span> emp <span class="keyword">TO</span> employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee CHANGE `name` `user_name` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> employee;</span><br></pre></td></tr></table></figure><h2 id="数据库CRUD语句"><a href="#数据库CRUD语句" class="headerlink" title="数据库CRUD语句"></a>数据库CRUD语句</h2><ol><li><p>Insert语句(添加数据)</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208051958270.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#说明 <span class="keyword">insert</span> 语句的细节</span><br><span class="line"><span class="comment">-- 1.插入的数据应与字段的数据类型相同。</span></span><br><span class="line"><span class="comment">-- 比如 把 &#x27;abc&#x27; 添加到 int 类型会错误</span></span><br><span class="line"><span class="comment">-- 2. 数据的长度应在列的规定范围内，例如：不能将一个长度为 80 的字符串加入到长度为 40 的列中。</span></span><br><span class="line"><span class="comment">-- 3. 在 values 中列出的数据位置必须与被加入的列的排列位置相对应。</span></span><br><span class="line"><span class="comment">-- 4. 字符和日期型数据应包含在单引号中。</span></span><br><span class="line"><span class="comment">-- 5. 列可以插入空值[前提是该字段允许为空]，insert into table value(null)</span></span><br><span class="line"><span class="comment">-- 6. insert into tab_name (列名..) values (),(),() 形式添加多条记录</span></span><br><span class="line"><span class="comment">-- 7. 如果是给表中的所有字段添加数据，可以不写前面的字段名称</span></span><br><span class="line"><span class="comment">-- 8. 默认值的使用，当不给某个字段值时，如果有默认值就会添加默认值，否则报错</span></span><br><span class="line"><span class="comment">-- 如果某个列 没有指定 not null ,那么当添加数据时，没有给定值，则会默认给 null </span></span><br><span class="line"><span class="comment">-- 如果我们希望指定某个列的默认值，可以在创建表时指定</span></span><br></pre></td></tr></table></figure></li><li><p>Update语句(更新数据)</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208051958354.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> salary <span class="operator">=</span><span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> salary <span class="operator">=</span><span class="number">30000</span> <span class="keyword">WHERE</span> user_name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> salary <span class="operator">=</span>salary<span class="operator">+</span><span class="number">10000</span> <span class="keyword">WHERE</span> user_name<span class="operator">=</span><span class="string">&#x27;王五&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.UPDATE语法可以用新值更新原有表行中的各列。</span></span><br><span class="line"><span class="comment">-- 2.SET子句指示要修改哪些列和要给予哪些值。</span></span><br><span class="line"><span class="comment">-- 3. WHERE学句指定应更新哪些行。如没有WHERE子句，则更新所有的行(记录)，一定小心。</span></span><br><span class="line"><span class="comment">-- 4.如果需要修改多个字段，可以通过set字段1=值1,字段2=值2....</span></span><br></pre></td></tr></table></figure></li><li><p>Delete语句(删除数据)</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052013134.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> user_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.如果不使用where子句，将删除表中所有数据。</span></span><br><span class="line"><span class="comment">-- 2. Delete语句不能删除某一列的值(可使用update设为null 或者&quot;&quot;)</span></span><br><span class="line"><span class="comment">-- 3.使用delete语句仅删除记录,不删除表本身。如要删除表，使用drop table语句。drop table 表名;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li>Select语句(查找数据)</li></ol><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052018639.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052019919.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">NAME <span class="type">VARCHAR</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">chinese <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">english <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">math <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span> </span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">1</span>, <span class="string">&#x27;刘备&#x27;</span>, <span class="number">89</span>, <span class="number">78</span>, <span class="number">90</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">2</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="number">67</span>, <span class="number">98</span>, <span class="number">56</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">3</span>, <span class="string">&#x27;宋江&#x27;</span>, <span class="number">87</span>, <span class="number">78</span>, <span class="number">77</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">4</span>, <span class="string">&#x27;关羽&#x27;</span>, <span class="number">88</span>, <span class="number">98</span>, <span class="number">90</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">5</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">67</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">6</span>, <span class="string">&#x27;欧阳锋&#x27;</span>, <span class="number">55</span>, <span class="number">85</span>, <span class="number">45</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student ( id, NAME, chinese, english, math )<span class="keyword">VALUES</span>( <span class="number">7</span>, <span class="string">&#x27;黄蓉&#x27;</span>, <span class="number">75</span>, <span class="number">65</span>, <span class="number">30</span> );</span><br><span class="line"><span class="comment">-- 1.查询表中所有学生的信息。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 2.查询表中所有学生的姓名和对应的英语成绩。</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,english <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 3.过滤表中重复数据distinct .</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> english <span class="keyword">from</span> student;</span><br><span class="line"><span class="comment">-- 4.要查询的记录，每个字段都相同，才会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `name` ,english <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><h3 id="使用表达式对查询的列进行运算"><a href="#使用表达式对查询的列进行运算" class="headerlink" title="使用表达式对查询的列进行运算"></a><strong>使用表达式对查询的列进行运算</strong><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052031553.png" alt=""></h3><h3 id="在-select-语句中可使用-as-语句"><a href="#在-select-语句中可使用-as-语句" class="headerlink" title="在 select 语句中可使用 as 语句"></a><strong>在 select 语句中可使用 as 语句</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052032883.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计每个学生的总分</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` ,(chinese<span class="operator">+</span>english<span class="operator">+</span>math) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 在所有学生总分上加10分</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` ,(chinese<span class="operator">+</span>english<span class="operator">+</span>math<span class="operator">+</span><span class="number">10</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 使用别名表示学生分数</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` ,(chinese<span class="operator">+</span>english<span class="operator">+</span>math<span class="operator">+</span><span class="number">10</span>) <span class="keyword">AS</span> total_score <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><h3 id="在where子句中经常使用的运算符"><a href="#在where子句中经常使用的运算符" class="headerlink" title="在where子句中经常使用的运算符"></a><strong>在where子句中经常使用的运算符</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052036369.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>查询姓名为赵云的学生成绩</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;赵云&#x27;</span> ;</span><br><span class="line"><span class="number">2.</span>查询英语成绩大于<span class="number">90</span>分的同学</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"><span class="number">3.</span>查询总分大于<span class="number">200</span>分的所有同学</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> (chinese<span class="operator">+</span>english<span class="operator">+</span>math) <span class="operator">&gt;</span><span class="number">200</span>;</span><br><span class="line"><span class="number">4.</span>查询math大于<span class="number">60</span>并且(<span class="keyword">and</span>) id大于<span class="number">4</span>的学生成绩</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">&gt;</span> <span class="number">60</span> <span class="keyword">AND</span> id <span class="operator">&gt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="number">5.</span>查询英语成绩大于语文成绩的同学</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="operator">&gt;</span> chinese;</span><br><span class="line"><span class="number">6.</span>查询总分大于<span class="number">200</span>分并且数学成绩大于语文成绩,的姓刘的学生.</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> (chinese<span class="operator">+</span>english<span class="operator">+</span>math) <span class="operator">&gt;</span><span class="number">200</span> <span class="keyword">AND</span> math <span class="operator">&gt;</span> chinese <span class="keyword">AND</span> `name`<span class="keyword">LIKE</span><span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"><span class="number">7.</span>查询英语分数在<span class="number">80</span> <span class="operator">-</span> <span class="number">90</span>之间的同学。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">90</span>;</span><br><span class="line"><span class="number">8.</span>查询数学分数为<span class="number">89</span>,<span class="number">90</span>,<span class="number">91</span>的同学。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="keyword">IN</span>(<span class="number">89</span>,<span class="number">90</span>,<span class="number">91</span>);</span><br><span class="line"><span class="number">9.</span>查询数学比语文少<span class="number">30</span>分的同学。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math<span class="operator">+</span><span class="number">30</span> <span class="operator">&lt;=</span> chinese ;</span><br></pre></td></tr></table></figure><h3 id="使用order-by-子句排序查询结果"><a href="#使用order-by-子句排序查询结果" class="headerlink" title="使用order by 子句排序查询结果"></a><strong>使用order by 子句排序查询结果</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052056369.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按数学成绩升序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> math;</span><br><span class="line"><span class="comment">-- 按总分降序</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,(chinese<span class="operator">+</span>english<span class="operator">+</span>math)<span class="keyword">AS</span> total_score <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> total_score <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 对姓刘的学生成绩[总分]排序输出(升序) where + order by</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, (chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="keyword">AS</span> total_score <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> total_score;</span><br></pre></td></tr></table></figure><h3 id="合计-统计函数"><a href="#合计-统计函数" class="headerlink" title="合计/统计函数"></a><strong>合计/统计函数</strong></h3><p>1.count</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052103331.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计一个班级共有多少学生?</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 统计数学成绩大于80的学生有多少个？</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">&gt;</span> <span class="number">80</span>;</span><br><span class="line"><span class="comment">-- 统计总分大于250的人数有多少？</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> (math<span class="operator">+</span>english<span class="operator">+</span>chinese) <span class="operator">&gt;</span> <span class="number">250</span>;</span><br><span class="line"><span class="comment">-- count(*)和count(列)的区别</span></span><br><span class="line"><span class="comment">-- 解释 :count(*) 返回满足条件的记录的行数</span></span><br><span class="line"><span class="comment">-- count(列): 统计满足条件的某列有多少个，但是会排除 为 null 的情况</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t15 (</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t15 <span class="keyword">VALUES</span>(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t15 <span class="keyword">VALUES</span>(<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t15 <span class="keyword">VALUES</span>(<span class="string">&#x27;mary&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t15 <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t15;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> t15; <span class="comment">-- 4</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`name`) <span class="keyword">FROM</span> t15;<span class="comment">-- 3</span></span><br></pre></td></tr></table></figure><p>2.sum</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052111942.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计一个班级数学总成绩？</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(math) <span class="keyword">FROM</span> student; </span><br><span class="line"><span class="comment">-- 统计一个班级语文、英语、数学各科的总成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(math) <span class="keyword">AS</span> math_total_score,<span class="built_in">SUM</span>(english),<span class="built_in">SUM</span>(chinese) <span class="keyword">FROM</span> student; </span><br><span class="line"><span class="comment">-- 统计一个班级语文、英语、数学的成绩总和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(math <span class="operator">+</span> english <span class="operator">+</span> chinese) <span class="keyword">FROM</span> student; </span><br><span class="line"><span class="comment">-- 统计一个班级语文成绩平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(chinese)<span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- sum 仅对数值起作用</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(`name`) <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>3.avg</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052115350.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求一个班级数学平均分？</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(math) <span class="keyword">FROM</span> student; <span class="comment">-- 求一个班级总分平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(math <span class="operator">+</span> english <span class="operator">+</span> chinese）<span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>4.mxa/min</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052116864.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求班级最高分和最低分（数值范围在统计中特别有用）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(math <span class="operator">+</span> english <span class="operator">+</span> chinese), <span class="built_in">MIN</span>(math <span class="operator">+</span> english <span class="operator">+</span> chinese)<span class="keyword">FROM</span> student; </span><br><span class="line"><span class="comment">-- 求出班级数学最高分和最低分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(math) <span class="keyword">AS</span> math_high_socre, <span class="built_in">MIN</span>(math) <span class="keyword">AS</span> math_low_socre <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>5.使用 group by 子句对列进行分组</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052118209.png" alt=""></p><p>6.使用 having 子句对分组后的结果进行过滤</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208052119160.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如何显示每个部门的平均工资和最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),<span class="built_in">MAX</span>(sal),deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"><span class="comment">-- 显示每个部门的每种岗位的平均工资和最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),<span class="built_in">MIN</span>(sal),deptno,job <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno,job;</span><br><span class="line"><span class="comment">-- 显示平均工资低于 2000 的部门号和它的平均工资 // 别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal)<span class="keyword">AS</span> avg_sal,deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> avg_sal <span class="operator">&lt;</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a><strong>字符串相关函数</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208072108112.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CHARSET(str) 返回字串字符集</span></span><br><span class="line"><span class="keyword">SELECT</span> CHARSET(ename) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- CONCAT (string2 [,... ]) 连接字串, 将多个列拼接成一列</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(ename, <span class="string">&#x27; 工作是 &#x27;</span>, job) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSTR (string ,substring ) 返回 substring 在 string 中出现的位置,没有返回 0</span></span><br><span class="line"><span class="comment">-- dual 亚元表, 系统表 可以作为测试表使用</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;hanshunping&#x27;</span>, <span class="string">&#x27;ping&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- UCASE (string2 ) 转换成大写</span></span><br><span class="line"><span class="keyword">SELECT</span> UCASE(ename) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- LCASE (string2 ) 转换成小写</span></span><br><span class="line"><span class="keyword">SELECT</span> LCASE(ename) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT (string2 ,length )从 string2 中的左边起取 length 个字符</span></span><br><span class="line"><span class="comment">-- RIGHT (string2 ,length ) 从 string2 中的右边起取 length 个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(ename, <span class="number">2</span>) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- LENGTH (string )string 长度[按照字节]</span></span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(ename) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- REPLACE (str ,search_str ,replace_str )</span></span><br><span class="line"><span class="comment">-- 在 str 中用 replace_str 替换 search_str</span></span><br><span class="line"><span class="comment">-- 如果是 manager 就替换成 经理</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, REPLACE(job,<span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;经理&#x27;</span>) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- STRCMP (string1 ,string2 ) 逐字符比较两字串大小</span></span><br><span class="line"><span class="keyword">SELECT</span> STRCMP(<span class="string">&#x27;hsp&#x27;</span>, <span class="string">&#x27;hsp&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- SUBSTRING (str , position [,length ])</span></span><br><span class="line"><span class="comment">-- 从 str 的 position 开始【从 1 开始计算】,取 length 个字符</span></span><br><span class="line"><span class="comment">-- 从 ename 列的第一个位置开始取出 2 个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(ename, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- LTRIM (string2 ) RTRIM (string2 ) TRIM(string)</span></span><br><span class="line"><span class="comment">-- 去除前端空格或后端空格</span></span><br><span class="line"><span class="keyword">SELECT</span> LTRIM(<span class="string">&#x27; 学习学习&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> RTRIM(<span class="string">&#x27;学习学习 &#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27; 学习学习 &#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 练习: 以首字母小写的方式显示所有员工 emp 表的姓名</span></span><br><span class="line"><span class="comment">-- 思路先取出 ename 的第一个字符，转成小写的</span></span><br><span class="line"><span class="comment">-- 把他和后面的字符串进行拼接输出即可</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(LCASE(<span class="built_in">SUBSTRING</span>(ename,<span class="number">1</span>,<span class="number">1</span>)),<span class="built_in">SUBSTRING</span>(ename,<span class="number">2</span>))<span class="keyword">AS</span> new_name <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(LCASE(<span class="keyword">LEFT</span>(ename,<span class="number">1</span>)), <span class="built_in">SUBSTRING</span>(ename,<span class="number">2</span>)) <span class="keyword">AS</span> new_name <span class="keyword">FROM</span> emp</span><br></pre></td></tr></table></figure><h3 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a><strong>数学相关函数</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208072125228.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示数学相关函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ABS(num) 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-10</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- BIN (decimal_number )十进制转二进制</span></span><br><span class="line"><span class="keyword">SELECT</span> BIN(<span class="number">10</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- CEILING (number2 ) 向上取整, 得到比 num2 大的最小整数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">-1.1</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- CONV(number2,from_base,to_base) 进制转换</span></span><br><span class="line"><span class="comment">-- 下面的含义是 8 是十进制的 8, 转成 2 进制输出</span></span><br><span class="line"><span class="keyword">SELECT</span> CONV(<span class="number">8</span>, <span class="number">10</span>, <span class="number">2</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"><span class="comment">-- 下面的含义是 16 是 16 进制的 16, 转成 10 进制输出</span></span><br><span class="line"><span class="keyword">SELECT</span> CONV(<span class="number">16</span>, <span class="number">16</span>, <span class="number">10</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- FLOOR (number2 ) 向下取整,得到比 num2 小的最大整数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">-1.1</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- FORMAT (number,decimal_places ) 保留小数位数(四舍五入)</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="number">78.125458</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- HEX (DecimalNumber ) 转十六进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEAST (number , number2 [,..]) 求最小值</span></span><br><span class="line"><span class="keyword">SELECT</span> LEAST(<span class="number">0</span>,<span class="number">1</span>, <span class="number">-10</span>, <span class="number">4</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- MOD (numerator ,denominator ) 求余</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">10</span>, <span class="number">3</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- RAND([seed]) RAND([seed]) 返回随机数 其范围为 0 ≤ v ≤ 1.0</span></span><br><span class="line"><span class="comment">-- 1. 如果使用 rand() 每次返回不同的随机数 ，在 0 ≤ v ≤ 1.0</span></span><br><span class="line"><span class="comment">-- 2. 如果使用 rand(seed) 返回随机数, 范围 0 ≤ v ≤ 1.0, 如果 seed 不变，</span></span><br><span class="line"><span class="comment">-- 该随机数也不变了</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND() <span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><h3 id="时间日期相关函数"><a href="#时间日期相关函数" class="headerlink" title="时间日期相关函数"></a><strong>时间日期相关函数</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208072132800.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 日期时间相关函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- CURRENT_DATE ( ) 当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>() <span class="keyword">FROM</span> DUAL; </span><br><span class="line"><span class="comment">-- CURRENT_TIME ( )当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>() <span class="keyword">FROM</span> DUAL; </span><br><span class="line"><span class="comment">-- CURRENT_TIMESTAMP ( ) 当前时间戳</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>() <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建测试表 信息表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mes(</span><br><span class="line">id <span class="type">INT</span> ,</span><br><span class="line">content <span class="type">VARCHAR</span>(<span class="number">30</span>), </span><br><span class="line">send_time DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mes <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;北京新闻&#x27;</span>, <span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mes <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;上海新闻&#x27;</span>, NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mes <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">&#x27;广州新闻&#x27;</span>, NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mes;</span><br><span class="line"><span class="keyword">SELECT</span> NOW() <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 上应用实例</span></span><br><span class="line"><span class="comment">-- 显示所有新闻信息，发布日期只显示 日期，不用显示时间. </span></span><br><span class="line"><span class="keyword">SELECT</span> id, content, <span class="type">DATE</span>(send_time)<span class="keyword">FROM</span> mes; </span><br><span class="line"><span class="comment">-- 请查询在 10 分钟内发布的新闻, 思路一定要梳理一下. </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mes <span class="keyword">WHERE</span> DATE_ADD(send_time, <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>) <span class="operator">&gt;=</span> NOW();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mes <span class="keyword">WHERE</span> send_time <span class="operator">&gt;=</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 请在 mysql 的 sql 语句中求出 2011-11-11 和 1990-1-1 相差多少天</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="string">&#x27;2011-11-11&#x27;</span>, <span class="string">&#x27;1990-01-01&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 请用 mysql 的 sql 语句求出你活了多少天? 1986-11-11 出生</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(NOW(), <span class="string">&#x27;1986-11-11&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果你能活 80 岁，求出你还能活多少天.1986-11-11 出生</span></span><br><span class="line"><span class="comment">-- 先求出活 80 岁 时, 是什么日期 X</span></span><br><span class="line"><span class="comment">-- 然后在使用 datediff(x, now()); 1986-11-11-&gt;datetime</span></span><br><span class="line"><span class="comment">-- INTERVAL 80 YEAR ： YEAR 可以是 年月日，时分秒</span></span><br><span class="line"><span class="comment">-- &#x27;1986-11-11&#x27; 可以 date,datetime timestamp</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(DATE_ADD(<span class="string">&#x27;1986-11-11&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">80</span> <span class="keyword">YEAR</span>), NOW())<span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TIMEDIFF(<span class="string">&#x27;10:11:11&#x27;</span>, <span class="string">&#x27;06:10:10&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"><span class="comment">-- YEAR|Month|DAY| DATE (datetime )</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW()) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW()) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW()) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="string">&#x27;2013-11-10&#x27;</span>) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- unix_timestamp() : 返回的是 1970-1-1 到现在的秒数</span></span><br><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP() <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- FROM_UNIXTIME() : 可以把一个 unix_timestamp 秒数[时间戳]，转成指定格式的日期</span></span><br><span class="line"><span class="comment">-- %Y-%m-%d 格式是规定好的，表示年月日</span></span><br><span class="line"><span class="comment">-- 意义：在开发中，可以存放一个整数，然后表示时间，通过 FROM_UNIXTIME 转换</span></span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="number">1618483484</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="number">1618483100</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="加密和系统函数"><a href="#加密和系统函数" class="headerlink" title="加密和系统函数"></a><strong>加密和系统函数</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208072148044.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示加密函数和系统函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- USER() 查询用户</span></span><br><span class="line"><span class="comment">-- 可以查看登录到 mysql 的有哪些用户，以及登录的 IP</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>() <span class="keyword">FROM</span> DUAL; <span class="comment">-- 用户@IP 地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- DATABASE()查询当前使用数据库名称</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE(); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- MD5(str) 为字符串算出一个 MD5 32 的字符串，常用(用户密码)加密</span></span><br><span class="line"><span class="comment">-- root 密码是 hsp -&gt; 加密 md5 -&gt; 在数据库中存放的是加密后的密码</span></span><br><span class="line"><span class="keyword">SELECT</span> MD5(<span class="string">&#x27;fzy&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(MD5(<span class="string">&#x27;fzy&#x27;</span>)) <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示用户表，存放密码时，是 md5</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hsp_user</span><br><span class="line">(id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, pwd <span class="type">CHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_user <span class="keyword">VALUES</span>(<span class="number">100</span>, <span class="string">&#x27;韩顺平&#x27;</span>, MD5(<span class="string">&#x27;hsp&#x27;</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> hsp_user; </span><br><span class="line"><span class="comment">-- SQL 注入问题</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> hsp_user <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;韩顺平&#x27;</span> <span class="keyword">AND</span> pwd <span class="operator">=</span> MD5(<span class="string">&#x27;hsp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- PASSWORD(str) -- 加密函数, MySQL 数据库的用户密码就是 PASSWORD 函数加密</span></span><br><span class="line"><span class="keyword">SELECT</span> PASSWORD(<span class="string">&#x27;hsp&#x27;</span>) <span class="keyword">FROM</span> DUAL; <span class="comment">-- 数据库的 *81220D972A52D4C51BB1C37518A2613706220DAC</span></span><br><span class="line"><span class="comment">-- select * from mysql.user \G 从原文密码 str 计算并返回密码字符串</span></span><br><span class="line"><span class="comment">-- 通常用于对 mysql 数据库的用户密码加密</span></span><br><span class="line"><span class="comment">-- mysql.user 表示 数据库.表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a><strong>流程控制函数</strong></h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208072159288.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 演示流程控制语句</span><br><span class="line"># IF(expr1,expr2,expr3) 如果 expr1 为 <span class="literal">True</span> ,则返回 expr2 否则返回 expr3</span><br><span class="line"><span class="keyword">SELECT</span> IF(<span class="literal">TRUE</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"># IFNULL(expr1,expr2) 如果 expr1 不为空 <span class="keyword">NULL</span>,则返回 expr1,否则返回 expr2</span><br><span class="line"><span class="keyword">SELECT</span> IFNULL( <span class="keyword">NULL</span>, <span class="string">&#x27;韩顺平教育&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"># <span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> expr1 <span class="keyword">THEN</span> expr2 <span class="keyword">WHEN</span> expr3 <span class="keyword">THEN</span> expr4 <span class="keyword">ELSE</span> expr5 <span class="keyword">END</span>; [类似多重分支.]</span><br><span class="line"># 如果 expr1 为 <span class="literal">TRUE</span>,则返回 expr2,如果 expr2 为 t, 返回 expr4, 否则返回 expr5</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="literal">TRUE</span> <span class="keyword">THEN</span> <span class="string">&#x27;jack&#x27;</span> <span class="comment">-- jack</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="literal">FALSE</span> <span class="keyword">THEN</span> <span class="string">&#x27;tom&#x27;</span> </span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;mary&#x27;</span> <span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询 emp 表, 如果 comm 是 null , 则显示 0.0</span></span><br><span class="line"><span class="comment">-- 判断是否为 null 要使用 is null, 判断不为空 使用 is not</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, IF(comm <span class="keyword">IS</span> <span class="keyword">NULL</span> , <span class="number">0.0</span>, comm)<span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> ename, IFNULL(comm, <span class="number">0.0</span>)<span class="keyword">FROM</span> emp; </span><br><span class="line"><span class="comment">-- 2. 如果 emp 表的 job 是 CLERK 则显示 职员， 如果是 MANAGER 则显示经理</span></span><br><span class="line"><span class="comment">-- 如果是 SALESMAN 则显示 销售人员，其它正常显示</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, (<span class="keyword">SELECT</span> <span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;职员&#x27;</span> <span class="keyword">WHEN</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;经理&#x27;</span> <span class="keyword">WHEN</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;销售人员&#x27;</span> <span class="keyword">ELSE</span> job <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">&#x27;job&#x27;</span> <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><h3 id="增强"><a href="#增强" class="headerlink" title="增强"></a><strong>增强</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询加强</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ■ 使用 where 子句</span></span><br><span class="line"><span class="comment">-- ?如何查找 1992.1.1 后入职的员工</span></span><br><span class="line"><span class="comment">-- 在 mysql 中,日期类型可以直接比较, 需要注意格式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> hiredate <span class="operator">&gt;</span> <span class="string">&#x27;1992-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ■ 如何使用 like 操作符(模糊)</span></span><br><span class="line"><span class="comment">-- %: 表示 0 到多个任意字符 _: 表示单个任意字符</span></span><br><span class="line"><span class="comment">-- ?如何显示首字符为 S 的员工姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- ?如何显示第三个字符为大写 O 的所有员工的姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;__O%&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ■ 如何显示没有上级的雇员的情况</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> mgr <span class="keyword">IS</span> <span class="keyword">NULL</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- ■ 查询表结构</span></span><br><span class="line"><span class="keyword">DESC</span> emp</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 order by 子句</span></span><br><span class="line"><span class="comment">-- ?如何按照工资的从低到高的顺序[升序]，显示雇员的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal;</span><br><span class="line"><span class="comment">-- ?按照部门号升序而雇员的工资降序排列 , 显示雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno <span class="keyword">ASC</span> , sal <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a><strong>分页查询</strong></h3><p>基本语法:select … limit start, rows</p><p>表示从start+1行开始取,取出rows行, start 从0开始计算</p><h3 id="分组函数和分组子句-group-by"><a href="#分组函数和分组子句-group-by" class="headerlink" title="分组函数和分组子句 group by"></a><strong>分组函数和分组子句 group by</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- (1) 显示每种岗位的雇员总数、平均工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">AVG</span>(sal), job <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2) 显示雇员总数，以及获得补助的雇员数。</span></span><br><span class="line"><span class="comment">-- 思路: 获得补助的雇员数 就是 comm 列为非 null, 就是 count(列)，如果该列的值为 null, 是</span></span><br><span class="line"><span class="comment">-- 不会统计 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">COUNT</span>(comm) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 扩展要求：统计没有获得补助的雇员数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">COUNT</span>(IF(comm <span class="keyword">IS</span> <span class="keyword">NULL</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">-</span> <span class="built_in">COUNT</span>(comm) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3) 显示管理者的总人数。小技巧:尝试写-&gt;修改-&gt;尝试[正确的]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> mgr) <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4) 显示雇员工资的最大差额。</span></span><br><span class="line"><span class="comment">-- 思路： max(sal) - min(sal)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="operator">-</span> <span class="built_in">MIN</span>(sal) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><h3 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a><strong>顺序</strong></h3><p>如果select语句同时包含有group by ,having ,limit，order by</p><p>那么他们的顺序是group by , having , orderby,limit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 请统计各个部门的平均工资，并且是大于1000的,并且按照平均工资从高到低排序，取出前两行记录.</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="built_in">AVG</span>(sal)<span class="keyword">as</span> avg_sal <span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno  </span><br><span class="line"><span class="keyword">HAVING</span> avg_sal <span class="operator">&gt;</span><span class="number">1000</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>  avg_sal <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多表查询</span></span><br><span class="line"><span class="comment">-- ?显示雇员名,雇员工资及所在部门的名字 【笛卡尔集】</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 雇员名,雇员工资 来自 emp 表</span></span><br><span class="line"><span class="comment">2. 部门的名字 来自 dept 表</span></span><br><span class="line"><span class="comment">3. 需求对 emp 和 dept 查询 ename,sal,dname,deptno</span></span><br><span class="line"><span class="comment">4. 当我们需要指定显示某个表的列是，需要 表.列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname,emp.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp, dept</span><br><span class="line"><span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salgrade; </span><br><span class="line"><span class="comment">-- 小技巧：多表查询的条件不能少于 表的个数-1, 否则会出现笛卡尔集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ?如何显示部门号为 10 的部门名、员工名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname,emp.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp, dept</span><br><span class="line"><span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno <span class="keyword">AND</span> emp.deptno <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ?显示各个员工的姓名，工资，及其工资的级别</span></span><br><span class="line"><span class="comment">-- 思路 姓名，工资 来自 emp 13</span></span><br><span class="line"><span class="comment">-- 工资级别 salgrade 5</span></span><br><span class="line"><span class="comment">-- 写 sql , 先写一个简单，然后加入过滤条件... </span></span><br><span class="line"><span class="keyword">select</span> ename, sal, grade</span><br><span class="line"><span class="keyword">from</span> emp , salgrade</span><br><span class="line"><span class="keyword">where</span> sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.deptno<span class="operator">=</span>dept.deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> emp.deptno <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>自连接是指在同一张表的连接查询[将同一张表看做两张表]。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多表查询的 自连接</span></span><br><span class="line"><span class="comment">-- 思考题: 显示公司员工名字和他的上级的名字</span></span><br><span class="line"><span class="comment">-- 分析： 员工名字 在 emp, 上级的名字的名字 emp</span></span><br><span class="line"><span class="comment">-- 员工和上级是通过 emp 表的 mgr 列关联</span></span><br><span class="line"><span class="comment">-- 小结：</span></span><br><span class="line"><span class="comment">-- 自连接的特点 1. 把同一张表当做两张表使用</span></span><br><span class="line"><span class="comment">-- 2. 需要给表取别名 表名 表别名</span></span><br><span class="line"><span class="comment">-- 3. 列名不明确，可以指定列的别名 列名 as 列的别名</span></span><br><span class="line"><span class="keyword">SELECT</span> worker.ename <span class="keyword">AS</span> <span class="string">&#x27;职员名&#x27;</span> , boss.ename <span class="keyword">AS</span> <span class="string">&#x27;上级名&#x27;</span> <span class="keyword">FROM</span> emp worker, emp boss</span><br><span class="line"><span class="keyword">WHERE</span> worker.mgr <span class="operator">=</span> boss.empno;</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询是指嵌入在其它 sql 语句中的 select 语句,也叫嵌套查询</p><p>单行子查询是指只返回一行数据的子查询语句</p><p>多行子查询指返回多行数据的子查询 使用关键字 in</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 子查询的演示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何显示与 SMITH 同一部门的所有员工?</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 先查询到 SMITH 的部门号得到</span></span><br><span class="line"><span class="comment">2. 把上面的 select 语句当做一个子查询来使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多行子查询</span></span><br><span class="line"><span class="comment">-- 如何查询和部门 10 的工作相同的雇员的</span></span><br><span class="line"><span class="comment">-- 名字、岗位、工资、部门号, 但是不含 10 号部门自己的雇员.</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,job,sal,deptno </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> job <span class="keyword">IN</span> ( </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job</span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">) <span class="keyword">AND</span> deptno <span class="operator">!=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>在多行子查询中使用 all ，any操作符</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示工资比部门 30 的所有员工的工资高的员工的姓名、工资和部门号</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="keyword">ALL</span>(</span><br><span class="line"><span class="keyword">SELECT</span> sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal)</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何显示工资比部门 30 的其中一个员工的工资高的员工的姓名、工资和部门号</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="keyword">any</span>(</span><br><span class="line"><span class="keyword">SELECT</span> sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(sal)</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="当临时表使用"><a href="#当临时表使用" class="headerlink" title="当临时表使用"></a>当临时表使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 ecshop 中各个类别中，价格最高的商品</span></span><br><span class="line"><span class="comment">-- 查询 商品表</span></span><br><span class="line"><span class="comment">-- 先得到 各个类别中，价格最高的商品 max + group by cat_id, 当做临时表</span></span><br><span class="line"><span class="comment">-- 把子查询当做一张临时表可以解决很多很多复杂的查询</span></span><br><span class="line"><span class="keyword">select</span> goods_id, ecs_goods.cat_id, goods_name, shop_price</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">SELECT</span> cat_id , <span class="built_in">MAX</span>(shop_price) <span class="keyword">as</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> ecs_goods</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cat_id</span><br><span class="line">) temp , ecs_goods</span><br><span class="line"><span class="keyword">where</span> temp.cat_id <span class="operator">=</span> ecs_goods.cat_id</span><br><span class="line"><span class="keyword">and</span> temp.max_price <span class="operator">=</span> ecs_goods.shop_price;</span><br></pre></td></tr></table></figure><h3 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多列子查询</span></span><br><span class="line"><span class="comment">-- 请思考如何查询与 allen 的部门和岗位完全相同的所有雇员(并且不含 allen 本人)</span></span><br><span class="line"><span class="comment">-- (字段 1， 字段 2 ...) = (select 字段 1，字段 2）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> (deptno , job ) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> deptno ,job </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;ALLEN&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> ename <span class="operator">&lt;&gt;</span> <span class="string">&#x27;ALLEN&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> (math,english,chinese)<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> math,english,chinese </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;宋江&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="表复制"><a href="#表复制" class="headerlink" title="表复制"></a>表复制</h2><h3 id="自我复制数据-蠕虫复制"><a href="#自我复制数据-蠕虫复制" class="headerlink" title="自我复制数据(蠕虫复制)"></a>自我复制数据(蠕虫复制)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_tab01</span><br><span class="line">( id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>), sal <span class="keyword">DOUBLE</span>, job <span class="type">VARCHAR</span>(<span class="number">32</span>), deptno <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">DESC</span> my_tab01;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_tab01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示如何自我复制</span></span><br><span class="line"><span class="comment">-- 1. 先把 emp 表的记录复制到 my_tab01</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab01</span><br><span class="line">(id, `name`, sal, job,deptno)</span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, sal, job, deptno </span><br><span class="line"><span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 自我复制</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab01 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_tab01;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> my_tab01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何删除掉一张表重复记录</span></span><br><span class="line"><span class="comment">-- 1. 先创建一张表 my_tab02, </span></span><br><span class="line"><span class="comment">-- 2. 让 my_tab02 有重复的记录</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_tab02 <span class="keyword">LIKE</span> emp; </span><br><span class="line"><span class="comment">-- 这个语句 把 emp 表的结构(列)，复制到 my_tab02</span></span><br><span class="line"><span class="keyword">DESC</span> my_tab02;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab02 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_tab02; </span><br><span class="line"><span class="comment">-- 3. 考虑去重 my_tab02 的记录</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路</span></span><br><span class="line"><span class="comment">(1) 先创建一张临时表 my_tmp , 该表的结构和 my_tab02 一样</span></span><br><span class="line"><span class="comment">(2) 把 my_tmp 的记录 通过 distinct 关键字 处理后 把记录复制到 my_tmp</span></span><br><span class="line"><span class="comment">(3) 清除掉 my_tab02 记录</span></span><br><span class="line"><span class="comment">(4) 把 my_tmp 表的记录复制到 my_tab02</span></span><br><span class="line"><span class="comment">(5) drop 掉 临时表 my_tmp</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="comment">-- (1) 先创建一张临时表 my_tmp , 该表的结构和 my_tab02 一样</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> my_tmp <span class="keyword">like</span> my_tab02;</span><br><span class="line"><span class="comment">-- (2) 把 my_tmp 的记录 通过 distinct 关键字 处理后 把记录复制到 my_tmp</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_tmp <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="operator">*</span> <span class="keyword">from</span> my_tab02;</span><br><span class="line"><span class="comment">-- (3) 清除掉 my_tab02 记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> my_tab02; </span><br><span class="line"><span class="comment">-- (4) 把 my_tmp 表的记录复制到 my_tab02</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_tab02 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> my_tmp; </span><br><span class="line"><span class="comment">-- (5) drop 掉 临时表 my_tmp</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> my_tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> my_tab02;</span><br></pre></td></tr></table></figure><h2 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 合并查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2500</span>; <span class="comment">-- 5</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span>; <span class="comment">-- 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- union all 就是将两个查询结果合并，不会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2500</span> <span class="comment">-- 5</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span>; <span class="comment">-- 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- union 就是将两个查询结果合并，会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2500</span> <span class="comment">-- 5</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>1.左外连接(如果左侧的表完全显示我们就说是左外连接)</p><p>2.右外连接(如果右侧的表完全显示我们就说是右外连接)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu (</span><br><span class="line">id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;tom&#x27;</span>),(<span class="number">3</span>, <span class="string">&#x27;kity&#x27;</span>),(<span class="number">4</span>, <span class="string">&#x27;nono&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> stu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> exam(</span><br><span class="line">id <span class="type">INT</span>, grade <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> exam <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="number">56</span>),(<span class="number">2</span>,<span class="number">76</span>),(<span class="number">11</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> exam;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用左连接</span></span><br><span class="line"><span class="comment">-- （显示所有人的成绩，如果没有成绩，也要显示该人的姓名和 id 号,成绩显示为空）</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, stu.id, grade</span><br><span class="line"><span class="keyword">FROM</span> stu, exam</span><br><span class="line"><span class="keyword">WHERE</span> stu.id <span class="operator">=</span> exam.id; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改成左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, stu.id, grade</span><br><span class="line"><span class="keyword">FROM</span> stu </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> exam</span><br><span class="line"><span class="keyword">ON</span> stu.id <span class="operator">=</span> exam.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用右外连接（显示所有成绩，如果没有名字匹配，显示空)</span></span><br><span class="line"><span class="comment">-- 即：右边的表(exam) 和左表没有匹配的记录，也会把右表的记录显示出来</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, stu.id, grade</span><br><span class="line"><span class="keyword">FROM</span> stu </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> exam</span><br><span class="line"><span class="keyword">ON</span> stu.id <span class="operator">=</span> exam.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 列出部门名称和这些部门的员工信息(名字和工作)，</span></span><br><span class="line"><span class="comment">-- 同时列出那些没有员工的部门名。</span></span><br><span class="line"><span class="comment">-- 使用左外连接实现</span></span><br><span class="line"><span class="keyword">SELECT</span> dname,ename,job</span><br><span class="line"><span class="keyword">FROM</span> dept </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp</span><br><span class="line"><span class="keyword">ON</span> dept.deptno<span class="operator">=</span>emp.deptno; </span><br><span class="line"><span class="comment">-- 使用右外连接实现</span></span><br><span class="line"><span class="keyword">SELECT</span> dname,ename,job</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> dept</span><br><span class="line"><span class="keyword">ON</span> dept.deptno<span class="operator">=</span>emp.deptno; </span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>约束用于确保数据库的数据满足特定的商业规则。在mysql中，约束包括: not null，unique,primary key,foreign key,和check五种.</p><h3 id="primary-key（主键）"><a href="#primary-key（主键）" class="headerlink" title="primary key（主键）"></a>primary key（主键）</h3><p><strong>字段名 字段类型 primary key</strong></p><p>用于唯一的标示表行的数据,当定义主键约束后，该列不能重复。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208082204642.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 主键使用</span></span><br><span class="line"><span class="comment">-- id name email</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t17</span><br><span class="line">(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 表示 id 列是主键</span></span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>),email <span class="type">VARCHAR</span>(<span class="number">32</span>)); </span><br><span class="line"><span class="comment">-- 主键列的值是不可以重复</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t17</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;jack@sohu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t17</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;tom@sohu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t17</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;hsp&#x27;</span>, <span class="string">&#x27;hsp@sohu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t17; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键使用的细节讨论</span></span><br><span class="line"><span class="comment">-- primary key 不能重复而且不能为 null。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t17</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;hsp&#x27;</span>, <span class="string">&#x27;hsp@sohu.com&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一张表最多只能有一个主键, 但可以是复合主键(比如 id+name)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t18</span><br><span class="line">(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 表示 id 列是主键</span></span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>), <span class="keyword">PRIMARY</span> KEY <span class="comment">-- 错误的</span></span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">32</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示复合主键 (id 和 name 做成复合主键)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t18</span><br><span class="line">(id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">32</span>), <span class="keyword">PRIMARY</span> KEY (id, `name`) <span class="comment">-- 这里就是复合主键</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t18</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;tom@sohu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t18</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;jack@sohu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t18</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;xx@sohu.com&#x27;</span>); <span class="comment">-- 这里就违反了复合主键</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t18; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键的指定方式 有两种</span></span><br><span class="line"><span class="comment">-- 1. 直接在字段名后指定：字段名 primakry key</span></span><br><span class="line"><span class="comment">-- 2. 在表定义最后写 primary key(列名);</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t19</span><br><span class="line">(id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">PRIMARY</span> KEY, email <span class="type">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t20</span><br><span class="line">(id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>) , email <span class="type">VARCHAR</span>(<span class="number">32</span>), <span class="keyword">PRIMARY</span> KEY(`name`) <span class="comment">-- 在表定义最后写 primary key(列名)</span></span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 desc 表名，可以看到 primary key 的情况</span></span><br><span class="line"><span class="keyword">DESC</span> t20 <span class="comment">-- 查看 t20 表的结果，显示约束的情况</span></span><br><span class="line"><span class="keyword">DESC</span> t18</span><br></pre></td></tr></table></figure><h3 id="not-null-非空"><a href="#not-null-非空" class="headerlink" title="not null(非空)"></a>not null(非空)</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208082211314.png" alt=""></p><h3 id="unique-唯一）"><a href="#unique-唯一）" class="headerlink" title="unique(唯一）"></a>unique(唯一）</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208082211995.png" alt=""></p><h3 id="foreign-key-外键"><a href="#foreign-key-外键" class="headerlink" title="foreign key(外键)"></a>foreign key(外键)</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208082213171.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208082213801.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 外键演示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 主表 my_class</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_class (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY , <span class="comment">-- 班级编号</span></span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 从表 my_stu</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_stu (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY , <span class="comment">-- 学生编号</span></span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, class_id <span class="type">INT</span> , <span class="comment">-- 学生所在班级的编号</span></span><br><span class="line"><span class="comment">-- 下面指定外键关系</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (class_id) <span class="keyword">REFERENCES</span> my_class(id));</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> my_stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_class</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">100</span>, <span class="string">&#x27;java&#x27;</span>), (<span class="number">200</span>, <span class="string">&#x27;web&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_class</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">300</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_class;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_stu</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_stu</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_stu</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">&#x27;hsp&#x27;</span>, <span class="number">300</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_stu</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">4</span>, <span class="string">&#x27;mary&#x27;</span>, <span class="number">400</span>); <span class="comment">-- 这里会失败...因为 400 班级不存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_stu</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">5</span>, <span class="string">&#x27;king&#x27;</span>, <span class="keyword">NULL</span>); <span class="comment">-- 可以, 外键 没有写 not null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_class; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_stu; </span><br><span class="line"><span class="comment">-- 一旦建立主外键的关系，数据不能随意删除了</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> my_class</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><p>用于强制行数据必须满足的条件，假定在sal列上定义了check约束，并要求sal列值在1000-2000之间如果不再1000-2000之间就会提示出错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t23 (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">32</span>) , </span><br><span class="line">    sex <span class="type">VARCHAR</span>(<span class="number">6</span>) <span class="keyword">CHECK</span> (sex <span class="keyword">IN</span>(<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;woman&#x27;</span>)), </span><br><span class="line">    sal <span class="keyword">DOUBLE</span> <span class="keyword">CHECK</span> ( sal <span class="operator">&gt;</span> <span class="number">1000</span> <span class="keyword">AND</span> sal <span class="operator">&lt;</span> <span class="number">2000</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods(</span><br><span class="line">goods_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">goods_name <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">unitprice <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">CHECK</span> (unitprice <span class="keyword">BETWEEN</span> <span class="number">1.0</span> <span class="keyword">AND</span> <span class="number">9999.99</span>), </span><br><span class="line">provider <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer(</span><br><span class="line">customer_id  <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">64</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`sex` ENUM(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">card_Id <span class="type">VARCHAR</span>(<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> purchase(</span><br><span class="line">order_id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">customer_id <span class="type">VARCHAR</span>(<span class="number">16</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">goods_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">nums <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>, </span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (customer_id) <span class="keyword">REFERENCES</span> customer(customer_id), </span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (goods_id) <span class="keyword">REFERENCES</span> goods(goods_id));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> goods;</span><br><span class="line"><span class="keyword">DESC</span> customer;</span><br><span class="line"><span class="keyword">DESC</span> purchase;</span><br></pre></td></tr></table></figure><h2 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h2><p>1.一般来说自增长是和primary key配合使用的</p><p>2自增长也可以单独使用[但是需要配合一个unique]</p><p>3.自增长修饰的字段为整数型的(虽然小数也可以但是非常非常少这样使用)</p><p>4.自增长默认从1开始,你也可以通过如下命令修改alter table表名auto_increment=新的开始值;</p><p>5.如果你添加数据时，给自增长字段(列)指定的有值，则以指定的值为准,如果指定了自增长，一般来说，就按照自增长的规则来添加数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示自增长的使用</span></span><br><span class="line"><span class="operator">-</span></span><br><span class="line"><span class="operator">-</span> 创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t24</span><br><span class="line">(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, email <span class="type">VARCHAR</span>(<span class="number">32</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">DESC</span> t24;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试自增长的使用</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t24</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;tom@qq.com&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t24</span><br><span class="line">(email, `name`) <span class="keyword">VALUES</span>(<span class="string">&#x27;hsp@sohu.com&#x27;</span>, <span class="string">&#x27;hsp&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t24; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改默认的自增长开始值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t25</span><br><span class="line">(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, email <span class="type">VARCHAR</span>(<span class="number">32</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t25 AUTO_INCREMENT <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t25</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;mary@qq.com&#x27;</span>, <span class="string">&#x27;mary&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t25</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">666</span>, <span class="string">&#x27;hsp@qq.com&#x27;</span>, <span class="string">&#x27;hsp&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t25</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;fzy@qq.com&#x27;</span>, <span class="string">&#x27;fzy&#x27;</span>); <span class="comment">--667</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t25;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>类型</strong></p><p>1主键索引,主键自动的为主索引(类型Primary key)</p><p>2.唯一索引(UNIQUE)</p><p>3.普通索引(INDEX)</p><p>4.全文索引 (FULLTEXT)[适用于MylSAM]一般开发,不使用mysql自带的全文索引,而是使用:全文搜索Solr和 ElasticSearch (ES)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示 mysql 的索引的使用</span></span><br><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t25 (</span><br><span class="line">id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)); </span><br><span class="line"><span class="comment">-- 查询表是否有索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEXES <span class="keyword">FROM</span> t25;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加索引</span></span><br><span class="line"><span class="comment">-- 添加唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX id_index <span class="keyword">ON</span> t25 (id); </span><br><span class="line"><span class="comment">-- 添加普通索引方式 1</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX id_index <span class="keyword">ON</span> t25 (id); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何选择</span></span><br><span class="line"><span class="comment">-- 1. 如果某列的值，是不会重复的，则优先考虑使用 unique 索引, 否则使用普通索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加普通索引方式 2</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t25 <span class="keyword">ADD</span> INDEX id_index (id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加主键索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t26 (</span><br><span class="line">id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t26 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (id);</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> t26;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX id_index <span class="keyword">ON</span> t25;</span><br><span class="line"><span class="comment">-- 删除主键索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t26 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改索引 ， 先删除，在添加新的索引</span></span><br><span class="line"><span class="comment">-- 查询索引</span></span><br><span class="line"><span class="comment">-- 1. 方式</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> t25;</span><br><span class="line"><span class="comment">-- 2. 方式</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEXES <span class="keyword">FROM</span> t25;</span><br><span class="line"><span class="comment">-- 3. 方式</span></span><br><span class="line"><span class="keyword">SHOW</span> KEYS <span class="keyword">FROM</span> t25;</span><br><span class="line"><span class="comment">-- 4 方式</span></span><br><span class="line"><span class="keyword">DESC</span> t25;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208091340169.png" alt=""></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务用于保证数据的一致性,它由一组相关的dml语句组成，该组的dml语句要么全部成功，要么全部失败。如：转账就要用事务来处理，用以保证数据的一致性。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092127741.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务的一个重要的概念和具体操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 创建一张测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t27</span><br><span class="line">( id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)); </span><br><span class="line"><span class="comment">-- 2. 开始事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION</span><br><span class="line"><span class="comment">-- 3. 设置保存点</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> a</span><br><span class="line"><span class="comment">-- 执行 dml 操作</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t27 <span class="keyword">VALUES</span>(<span class="number">100</span>, <span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t27;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> b</span><br><span class="line"><span class="comment">-- 执行 dml 操作</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t27 <span class="keyword">VALUES</span>(<span class="number">200</span>, <span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="comment">-- 回退到 b</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> b</span><br><span class="line"><span class="comment">-- 继续回退 a</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a</span><br><span class="line"><span class="comment">-- 如果这样, 表示直接回退到事务开始的状态. ROLLBACK</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>1.多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性。</p><p>2.如果不考虑隔离性，可能会引发如下问题:脏读、不可重复读、幻读。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092139464.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092142382.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092156869.png" alt=""></p><h2 id="事务-ACID"><a href="#事务-ACID" class="headerlink" title="事务 ACID"></a>事务 ACID</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092207552.png" alt=""></p><h2 id="表类型和存储引擎"><a href="#表类型和存储引擎" class="headerlink" title="表类型和存储引擎"></a>表类型和存储引擎</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092212458.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208092213888.png" alt=""></p><ol><li>MylSAM不支持事务、也不支持外键，但其访问速度快，对事务完整性没有要求</li><li>InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是比起MyISAM存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</li><li>MEMORY存储引擎使用存在内存中的内容来创建表。每个MEMORY表只实际对应上个磁盘文件。MEMORY类型的表访问非常得快，因为它的数据是放在内存中的,并且默认使用HASH索引。但是一旦MySQL服务关闭，表中的数据就会丢失掉,表的结构还在。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表类型和存储引擎</span></span><br><span class="line"><span class="comment">-- 查看所有的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br><span class="line"><span class="comment">-- innodb 存储引擎，</span></span><br><span class="line"><span class="comment">-- 1. 支持事务 2. 支持外键 3. 支持行级锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- myisam 存储引擎</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t28 (</span><br><span class="line">id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)) ENGINE MYISAM</span><br><span class="line"><span class="comment">-- 1. 添加速度快 2. 不支持外键和事务 3. 支持表级锁</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> t1</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t28 <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t28 <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;bob&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t28;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- memory 存储引擎</span></span><br><span class="line"><span class="comment">-- 1. 数据存储在内存中[关闭了 Mysql 服务，数据丢失, 但是表结构还在]</span></span><br><span class="line"><span class="comment">-- 2. 执行速度很快(没有 IO 读写) 3. 默认支持索引(hash 表)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t29 (</span><br><span class="line">id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)) ENGINE MEMORY;</span><br><span class="line"><span class="keyword">DESC</span> t29;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t29</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>), (<span class="number">2</span>,<span class="string">&#x27;jack&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;hsp&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t29;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指令修改存储引擎</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `t29` ENGINE <span class="operator">=</span> INNODB;</span><br></pre></td></tr></table></figure><p><strong>如何选择表的存储引擎</strong></p><p>1.如果你的应用不需要事务，处理的只是基本的CRUD操作，那么MylSAM是不二选择,速度快</p><p>2.如果需要支持事务,选择lnnoDB。</p><p>3.Memory存储引擎就是将数据存储在内存中，由于没有磁盘I./O的等待，速度极快。但由于是内存存储引擎，所做的任何修改在服务器重启后都将消失。(经典用法用户的在线状态().)</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>1.视图是根据基表(可以是多个基表)来创建的视图是虚拟的表</p><p>2.视图也有列，数据来自基表</p><p>3.通过视图可以修改基表的数据</p><p>4.基表的改变，也会影响到视图的数据</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208111918791.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 视图的使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个视图 emp_view01，只能查询 emp 表的(empno、ename, job 和 deptno ) 信息</span></span><br><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view01</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, job, deptno <span class="keyword">FROM</span> emp; </span><br><span class="line"><span class="comment">-- 查看视图</span></span><br><span class="line"><span class="keyword">DESC</span> emp_view01;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_view01;</span><br><span class="line"><span class="keyword">SELECT</span> empno, job <span class="keyword">FROM</span> emp_view01; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看创建视图的指令</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view01;</span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> emp_view01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 视图的细节</span></span><br><span class="line"><span class="comment">-- 1. 创建视图后，到数据库去看，对应视图只有一个视图结构文件(形式: 视图名.frm)</span></span><br><span class="line"><span class="comment">-- 2. 视图的数据变化会影响到基表，基表的数据变化也会影响到视图[insert update delete ]</span></span><br><span class="line"><span class="comment">-- 修改视图 会影响到基表</span></span><br><span class="line"><span class="keyword">UPDATE</span> emp_view01</span><br><span class="line"><span class="keyword">SET</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">WHERE</span> empno <span class="operator">=</span> <span class="number">7369</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp; <span class="comment">-- 查询基表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_view01;</span><br><span class="line"><span class="comment">-- 修改基本表， 会影响到视图</span></span><br><span class="line"><span class="keyword">UPDATE</span> emp</span><br><span class="line"><span class="keyword">SET</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">WHERE</span> empno <span class="operator">=</span> <span class="number">7369</span>;</span><br><span class="line"><span class="comment">-- 3. 视图中可以再使用视图 , 比如从 emp_view01 视图中，选出 empno,和 ename 做出新视图</span></span><br><span class="line"><span class="keyword">DESC</span> emp_view01;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view02</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename <span class="keyword">FROM</span> emp_view01;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_view02;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208111926381.png" alt=""></p><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><p><strong>创建用户</strong></p><p>create user ‘用户名’@’允许登录位置’ identified by ‘密码’</p><p>说明:创建用户，同时指定密码</p><p><strong>删除用户</strong></p><p>drop user ‘用户名’ @ ’允许登录位置’ ;</p><p><strong>用户修改密码</strong></p><p>修改自己的密码：</p><p>set password = password(密码’);</p><p>修改他人的密码(需要有修改用户密码权限):</p><p>set password for ‘用户名’@’登录位置= password(‘密码’);</p><p>SET PASSWORD FOR root@localhost = ‘123456’;</p><p><strong>权限</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208111939454.png" alt=""></p><p><strong>给用户授权</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208111949344.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208111952117.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示 用户权限的管理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户 fzy 密码 123 , 从本地登录</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;fzy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span> <span class="comment">-- 使用 root 用户创建 testdb ,表 news</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE testdb</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> news (</span><br><span class="line">id <span class="type">INT</span> , content <span class="type">VARCHAR</span>(<span class="number">32</span>)); </span><br><span class="line"><span class="comment">-- 添加一条测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> news <span class="keyword">VALUES</span>(<span class="number">100</span>, <span class="string">&#x27;北京新闻&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> news; </span><br><span class="line"><span class="comment">-- 给 shunping 分配查看 news 表和 添加 news 的权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> , <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> testdb.news</span><br><span class="line"><span class="keyword">TO</span> <span class="string">&#x27;shunping&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> </span><br><span class="line"><span class="comment">-- 可以增加 update 权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> testdb.news</span><br><span class="line"><span class="keyword">TO</span> <span class="string">&#x27;fzy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改 fzy 的密码为 abc</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> fzy<span class="variable">@localhost</span> <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="comment">-- 回收 fzy 用户在 testdb.news 表的所有权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> , <span class="keyword">UPDATE</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> testdb.news <span class="keyword">FROM</span> <span class="string">&#x27;fzy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> ;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> testdb.news <span class="keyword">FROM</span> <span class="string">&#x27;fzy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> ;</span><br><span class="line"><span class="comment">-- 删除 shunping</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;fzy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208112020822.png" alt=""></p><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>1.注册驱动–加载Driver类</p><p>2.获取连接–得到Connection</p><p>3.执行增删改查-发送SQL给mysql执行</p><p>4.释放资源–关闭相关连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbc01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//前置工作： 在项目下创建一个文件夹比如 libs</span></span><br><span class="line">        <span class="comment">// 将 mysql.jar 拷贝到该目录下，点击 add to project ..加入到项目</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.得到连接</span></span><br><span class="line">        <span class="comment">//(1) jdbc:mysql:// 规定好表示协议，通过 jdbc 的方式连接 mysql</span></span><br><span class="line">        <span class="comment">//(2) localhost 主机，可以是 ip 地址</span></span><br><span class="line">        <span class="comment">//(3) 3306 表示 mysql 监听的端口</span></span><br><span class="line">        <span class="comment">//(4) hsp_db02 连接到 mysql dbms 的哪个数据库</span></span><br><span class="line">        <span class="comment">//(5) mysql 的连接本质就是 socket 连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/fzy_db02&quot;</span>;</span><br><span class="line">        <span class="comment">//将 用户名和密码放入到 Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;mysql@lmh&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行sql</span></span><br><span class="line">        <span class="comment">//String sql =&quot;insert into actor values (null,&#x27;刘德华&#x27;,&#x27;男&#x27;,&#x27;1970-11-11&#x27;,&#x27;110&#x27;)&quot;;</span></span><br><span class="line">        <span class="comment">//String sql = &quot;update actor set name=&#x27;周星驰&#x27; where id = 1&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from actor where id = 1&quot;</span>;</span><br><span class="line">        <span class="comment">//statement 用于执行静态 SQL 语句并返回其生成的结果的对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connect.createStatement();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> statement.executeUpdate(sql); <span class="comment">// 如果是 dml 语句，返回的就是影响行数</span></span><br><span class="line">        System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span> : <span class="string">&quot;失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.关闭连接</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connect.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h2><p><strong>方式1</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141640386.png" alt=""></p><p><strong>方式2</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141640713.png" alt=""></p><p><strong>方式3</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141642801.png" alt=""></p><p><strong>方式4</strong>（推荐使用）</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141644806.png" alt=""></p><p><strong>方式5</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141648260.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConn</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 1</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>(); <span class="comment">//创建 driver 对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="comment">//将 用户名和密码放入到 Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//说明 user 和 password 是规定好，后面的值根据实际情况写</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">// 用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;hsp&quot;</span>); <span class="comment">//密码</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        System.out.println(connect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 2</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException &#123;</span><br><span class="line">        <span class="comment">//使用反射加载 Driver 类 , 动态加载，更加的灵活，减少依赖性</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="comment">//将 用户名和密码放入到 Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//说明 user 和 password 是规定好，后面的值根据实际情况写</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">// 用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;hsp&quot;</span>); <span class="comment">//密码</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式 2=&quot;</span> + connect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 3 使用 DriverManager 替代 driver 进行统一管理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//使用反射加载 Driver</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line">        <span class="comment">//创建 url 和 user 和 password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>;</span><br><span class="line">        DriverManager.registerDriver(driver);<span class="comment">//注册 Driver 驱动</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三种方式=&quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 4: 使用 Class.forName 自动完成注册驱动，简化代码</span></span><br><span class="line">    <span class="comment">//这种方式获取连接是使用的最多，推荐使用</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect04</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//使用反射加载了 Driver 类</span></span><br><span class="line">        <span class="comment">//在加载 Driver 类时，完成注册</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        源码: 1. 静态代码块，在类加载时，会执行一次. 2. DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">        3. 因此注册 driver 的工作已经完成</span></span><br><span class="line"><span class="comment">        static &#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">                throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//创建 url 和 user 和 password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;第 4 种方式~ &quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 5 , 在方式 4 的基础上改进，增加配置文件，让连接 mysql 更加灵活</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect05</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//通过 Properties 对象获取配置文件的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式 5 &quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141720915.png" alt=""></p><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141731535.png" alt=""></p><p><strong>好处</strong></p><p>1.不再使用+拼接sql语句，减少语法错误</p><p>2.有效的解决了sql注入问题!</p><p>3.大大减少了编译次数,效率较高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatement_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>); <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 老师说明，如果希望看到 SQL 注入，这里需要用 nextLine</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="comment">//通过 Properties 对象获取配置文件的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到 PreparedStatement</span></span><br><span class="line">        <span class="comment">//3.1 组织 SqL , Sql 语句的 ? 就相当于占位符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name , pwd from admin where name =? and pwd = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//3.2 preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//3.3 给 ? 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, admin_pwd);</span><br><span class="line">        <span class="comment">//4. 执行 select 语句使用 executeQuery</span></span><br><span class="line">        <span class="comment">// 如果执行的是 dml(update, insert ,delete) executeUpdate()</span></span><br><span class="line">        <span class="comment">// 这里执行 executeQuery ,不要在写 sql</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">//如果查询到一条记录，则说明该管理存在</span></span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜， 登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatement_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过 Properties 对象获取配置文件的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //3. 得到 PreparedStatement</span></span><br><span class="line"><span class="comment">//        //3.1 组织 SqL , Sql 语句的 ? 就相当于占位符</span></span><br><span class="line"><span class="comment">//        String sql = &quot;insert into admin values(?,?)&quot;;</span></span><br><span class="line"><span class="comment">//        //3.2 preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line"><span class="comment">//        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">//        //3.3 给 ? 赋值</span></span><br><span class="line"><span class="comment">//        Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        String admin_name=&quot;&quot;;</span></span><br><span class="line"><span class="comment">//        String admin_pwd=&quot;&quot;;</span></span><br><span class="line"><span class="comment">//        for(int i = 0; i &lt;5;i++)&#123;</span></span><br><span class="line"><span class="comment">//            //让用户输入管理员名和密码</span></span><br><span class="line"><span class="comment">//            System.out.print(&quot;请输入管理员的名字: &quot;);</span></span><br><span class="line"><span class="comment">//            admin_name = scanner.nextLine();</span></span><br><span class="line"><span class="comment">//            System.out.print(&quot;请输入管理员的密码: &quot;);</span></span><br><span class="line"><span class="comment">//            admin_pwd = scanner.nextLine();</span></span><br><span class="line"><span class="comment">//            preparedStatement.setString(1, admin_name);</span></span><br><span class="line"><span class="comment">//            preparedStatement.setString(2, admin_pwd);</span></span><br><span class="line"><span class="comment">//            preparedStatement.executeUpdate();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String sql = &quot;update admin set name=&#x27;king&#x27; where name=&#x27;abc&#x27;&quot;;</span></span><br><span class="line"><span class="comment">//        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">//        preparedStatement.executeUpdate();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String sql = &quot;delete from admin where name=&#x27;def&#x27;&quot;;</span></span><br><span class="line"><span class="comment">//        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">//        preparedStatement.executeUpdate();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from admin&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(resultSet.getString(<span class="number">1</span>) + <span class="string">&quot;  &quot;</span> + resultSet.getString(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API小结"><a href="#API小结" class="headerlink" title="API小结"></a>API小结</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141815529.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208141815099.png" alt=""></p><h2 id="封装-JDBCUtils"><a href="#封装-JDBCUtils" class="headerlink" title="封装 JDBCUtils"></a>封装 JDBCUtils</h2><p>在jdbc操作中，获取连接和释放资源是经常使用到，可以将其封装JDBC连接的工具类JDBCUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc\\mysql.properties&quot;</span>));</span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭相关资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet set, Statement statement, Connection connection)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="literal">null</span>) &#123;</span><br><span class="line">                set.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils_Use</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//2.组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id = ? &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3.创建PreparedStatement  对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                System.out.println(resultSet.getString(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(resultSet, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> &#123;<span class="comment">//insert , update , delete</span></span><br><span class="line">        <span class="comment">//1.得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2.组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update actor set name = ? where id = ? &quot;</span>;</span><br><span class="line">        <span class="comment">//3.创建PreparedStatement  对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;王菲&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208162001330.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdbc.utils.JDBCUtills;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//在默认情况下，connection 是默认自动提交</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2.组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance -100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance -100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="comment">//3.创建PreparedStatement  对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtills.getConnection();</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtills.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useTransaction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1.得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2.组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance -100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance +100 where id = 2&quot;</span>;</span><br><span class="line">        <span class="comment">//3.创建PreparedStatement  对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtills.getConnection();</span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);<span class="comment">//将 connection 设置为不自动提交</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            connection.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生错误，回滚&quot;</span>);</span><br><span class="line">            connection.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtills.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208162020850.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdbc.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Batch_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用批量方式添加数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into admin2 values(null, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();<span class="comment">//开始时间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;<span class="comment">//5000 执行</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span> + i);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">            <span class="comment">//将 sql 语句加入到批处理包中 -&gt; 看源码</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            //1. //第一就创建 ArrayList - elementData =&gt; Object[]</span></span><br><span class="line"><span class="comment">            //2. elementData =&gt; Object[] 就会存放我们预处理的 sql 语句</span></span><br><span class="line"><span class="comment">            //3. 当 elementData 满后,就按照 1.5 扩容</span></span><br><span class="line"><span class="comment">            //4. 当添加到指定的值后，就 executeBatch</span></span><br><span class="line"><span class="comment">            //5. 批量处理会减少我们发送 sql 语句的网络开销，而且减少编译次数，因此效率提高</span></span><br><span class="line"><span class="comment">            public void addBatch() throws SQLException &#123;</span></span><br><span class="line"><span class="comment">                synchronized(this.checkClosed().getConnectionMutex()) &#123;</span></span><br><span class="line"><span class="comment">                    if (this.batchedArgs == null) &#123;</span></span><br><span class="line"><span class="comment">                    this.batchedArgs = new ArrayList();</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    for(int i = 0; i &lt; this.parameterValues.length; ++i) &#123;</span></span><br><span class="line"><span class="comment">                        this.checkAllParametersSet(this.parameterValues[i], this.parameterStreams[i], i);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    this.batchedArgs.add(new PreparedStatement.BatchParams(this.parameterValues, this.parameterStreams, this.isStream, this.streamLengths, this.isNull));</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            preparedStatement.addBatch();</span><br><span class="line">            <span class="comment">//当有 1000 条记录时，在批量执行</span></span><br><span class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span>) &#123;<span class="comment">//满 1000 条 sql</span></span><br><span class="line">                preparedStatement.executeBatch();</span><br><span class="line">                <span class="comment">//清空一把</span></span><br><span class="line">                preparedStatement.clearBatch();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;批量方式 耗时=&quot;</span> + (end - start));<span class="comment">//批量方式 耗时=843</span></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208162045574.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208162051368.png" alt=""></p><p><strong>数据库连接池种类</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208162046801.png" alt=""></p><h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式 1： 相关参数，在程序中指定 user, url , password 等</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//1. 创建一个数据源对象</span></span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">    <span class="comment">//2. 通过配置文件 mysql.properties 获取相关连接的信息</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc\\mysql.properties&quot;</span>));</span><br><span class="line">    <span class="comment">//读取相关的属性值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    <span class="comment">//给数据源 comboPooledDataSource 设置相关的参数</span></span><br><span class="line">    <span class="comment">//注意：连接管理是由 comboPooledDataSource 来管理</span></span><br><span class="line">    comboPooledDataSource.setDriverClass(driver);</span><br><span class="line">    comboPooledDataSource.setJdbcUrl(url);</span><br><span class="line">    comboPooledDataSource.setUser(user);</span><br><span class="line">    comboPooledDataSource.setPassword(password);</span><br><span class="line">    <span class="comment">//设置初始化连接数</span></span><br><span class="line">    comboPooledDataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//最大连接数</span></span><br><span class="line">    comboPooledDataSource.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//测试连接池的效率, 测试对 mysql 5000 次操作</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection(); <span class="comment">//这个方法就是从 DataSource 接口实现的</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;连接 OK&quot;);</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//c3p0 5000 连接 mysql 耗时=673</span></span><br><span class="line">    System.out.println(<span class="string">&quot;c3p0 5000 连接 mysql 耗时=&quot;</span> + (end - start));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式 使用配置文件模板来完成</span></span><br><span class="line"><span class="comment">//1. 将 c3p0 提供的 c3p0.config.xml 拷贝到 src 目录下</span></span><br><span class="line"><span class="comment">//2. 该文件指定了连接数据库和连接池的相关参数</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_02</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;my-config&quot;</span>);</span><br><span class="line">    <span class="comment">//测试 5000 次连接 mysql</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;开始执行....&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection();</span><br><span class="line">        System.out.println(<span class="string">&quot;连接 OK~&quot;</span>);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//c3p0 的第二种方式 耗时=413</span></span><br><span class="line">    System.out.println(<span class="string">&quot;c3p0 的第二种方式(500000) 耗时=&quot;</span> + (end - start));<span class="comment">//1917</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//1. 加入 Druid jar 包</span></span><br><span class="line">    <span class="comment">//2. 加入 配置文件 druid.properties , 将该文件拷贝项目的 src 目录</span></span><br><span class="line">    <span class="comment">//3. 创建 Properties 对象, 读取配置文件</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line">    <span class="comment">//4. 创建一个指定参数的数据库连接池, Druid 连接池</span></span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        <span class="comment">//System.out.println(connection.getClass());</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;连接成功!&quot;);</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;druid 连接池 操作 500000 耗时=&quot;</span> + (end - start));<span class="comment">//611</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtilsByDruid</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement st, Connection c)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (st != <span class="literal">null</span>) &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="literal">null</span>) &#123;</span><br><span class="line">                c.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Apache—DBUtils"><a href="#Apache—DBUtils" class="headerlink" title="Apache—DBUtils"></a>Apache—DBUtils</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208171031075.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtils_USE</span> &#123;</span><br><span class="line">    <span class="comment">//使用 apache-DBUtils 工具类 + druid 完成对表的 crud 操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryMany</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123; <span class="comment">//返回结果是多行的情况</span></span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入 DBUtils 相关的 jar , 加入到本 Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回 ArrayList 结果集</span></span><br><span class="line">        <span class="comment">//String sql = &quot;select * from actor where id &gt;= ?&quot;;</span></span><br><span class="line">        <span class="comment">// 注意: sql 语句也可以查询部分列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, name from actor where id &gt;= ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1) query 方法就是执行 sql 语句，得到 resultset ---封装到 --&gt; ArrayList 集合中</span></span><br><span class="line">        <span class="comment">//(2) 返回集合</span></span><br><span class="line">        <span class="comment">//(3) connection: 连接</span></span><br><span class="line">        <span class="comment">//(4) sql : 执行的 sql 语句</span></span><br><span class="line">        <span class="comment">//(5) new BeanListHandler&lt;&gt;(Actor.class): 在将 resultset -&gt; Actor 对象 -&gt; 封装到 ArrayList</span></span><br><span class="line">        <span class="comment">// 底层使用反射机制 去获取 Actor 类的属性，然后进行封装</span></span><br><span class="line">        <span class="comment">//(6) 1 就是给 sql 语句中的? 赋值，可以有多个值，因为是可变参数 Object... params</span></span><br><span class="line">        <span class="comment">//(7) 底层得到的 resultset ,会在 query 关闭, 关闭 PreparedStatment</span></span><br><span class="line"></span><br><span class="line">        List&lt;Actor&gt; list =</span><br><span class="line">                queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(Actor.class), <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;输出集合的信息&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Actor actor : list) &#123;</span><br><span class="line">            System.out.println(actor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示 apache-dbutils + druid 完成 返回的结果是单行记录(单个对象)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuerySingle</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入 DBUtils 相关的 jar , 加入到本 Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回单个对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 因为我们返回的单行记录&lt;---&gt;单个对象 , 使用的 Hander 是 BeanHandler</span></span><br><span class="line">        <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;&gt;(Actor.class), <span class="number">2</span>);</span><br><span class="line">        System.out.println(actor);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示 apache-dbutils + druid 完成查询结果是单行单列-返回的就是 object</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScalar</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入 DBUtils 相关的 jar , 加入到本 Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回单行单列 , 返回的就是 Object</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//因为返回的是一个对象, 使用的 handler 就是 ScalarHandler</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>(), <span class="number">1</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示 apache-dbutils + druid 完成 dml (update, insert ,delete)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入 DBUtils 相关的 jar , 加入到本 Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 这里组织 sql 完成 update, insert delete</span></span><br><span class="line">        <span class="comment">//String sql = &quot;update actor set name = ? where id = ?&quot;;</span></span><br><span class="line">        <span class="comment">//String sql = &quot;insert into actor values(null, ?, ?, ?, ?)&quot;`</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from actor where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1) 执行 dml 操作是 queryRunner.update()</span></span><br><span class="line">        <span class="comment">//(2) 返回的值是受影响的行数 (affected: 受影响)</span></span><br><span class="line">        <span class="comment">//int affectedRow = queryRunner.update(connection, sql, &quot;林青霞&quot;, &quot;女&quot;, &quot;1966-10-10&quot;, &quot;116&quot;);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectedRow</span> <span class="operator">=</span> queryRunner.update(connection, sql, <span class="number">1000</span>);</span><br><span class="line">        System.out.println(affectedRow &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行没有影响到表&quot;</span>);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BasicDao"><a href="#BasicDao" class="headerlink" title="BasicDao"></a>BasicDao</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208171122929.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208171131621.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记03</title>
      <link href="/post/JAVA03/"/>
      <url>/post/JAVA03/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><ol><li>概念:用于唯一标识网络中的每台计算机/主机</li><li>查看ip地址: ipconfig</li><li>ip地址的表示形式:点分十进制XX.XX.XX.XX</li><li>每一个十进制数的范围:0~255</li><li>ip地址的组成=网络地址+主机地址，比如:192.168.16.69</li><li>IPv6是互联网工程任务组设计的用于替代IPv4的下一代IP协议，其地址数量号称可以为全世界的每一粒沙子编上一个地址。</li><li>由于IPv4最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展。IPv6的使用，不仅能解决网络地址资源数量的问题，而且也解决了多种接入设备连入互联网的障碍</li></ol><p><strong>ipv4地址分类</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207261934445.png" alt=""></p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>将ip地址映射成域名（HTTP协议）</p><p><strong>端口号</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207261938575.png" alt=""></p><h2 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h2><p>TCP/IP(Transmission Control Protocol/Internet Protocol)的简写，中文译名为传输控制协议/因特网互联协议,又叫网络通讯协议，这个协议是lnternet最基本的协议、Internet国际互联网络的基础，简单地说，就是由网络层的IP协议和传输层的TCP协议组成的。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207261948692.png" alt=""></p><h2 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207261954413.png" alt=""></p><h2 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h2><p>1.获取本机InetAddress对象getLocalHost</p><p>2.根据指定主机名/域名获取ip地址对象getByName</p><p>3.获取InetAddress对象的主机名getHostName</p><p>4.获取InetAddress对象的地址getHostAddress</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">API_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="comment">//1. 获取本机的InetAddress 对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(localHost);</span><br><span class="line">        <span class="comment">//2. 根据指定主机名 获取 InetAddress对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">host1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;DESKTOP-L57VJE8&quot;</span>);</span><br><span class="line">        System.out.println(host1);</span><br><span class="line">        <span class="comment">//3. 根据域名返回 InetAddress对象, 比如 www.baidu.com 对应</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">host2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;host2=&quot;</span> + host2);</span><br><span class="line">        <span class="comment">//4. 通过 InetAddress 对象，获取对应的地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostAddress</span> <span class="operator">=</span> host2.getHostAddress();</span><br><span class="line">        System.out.println(<span class="string">&quot;host2 对应的ip = &quot;</span> + hostAddress);</span><br><span class="line">        <span class="comment">//5. 通过 InetAddress 对象，获取对应的主机名/或者的域名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostName</span> <span class="operator">=</span> host2.getHostName();</span><br><span class="line">        System.out.println(<span class="string">&quot;host2对应的主机名/域名=&quot;</span> + hostName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>1.套接字(Socket)开发网络应用程序被广泛采用，以至于成为事实上的标准。</p><p>2.通信的两端都要有Socket，是两台机器间通信的端点</p><p>3.网络通信其实就是Socket间的通信。</p><p>4.Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</p><p>5.一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</p><h2 id="TCP-网络通信编程"><a href="#TCP-网络通信编程" class="headerlink" title="TCP 网络通信编程"></a>TCP 网络通信编程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP02Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bw.write(<span class="string">&quot;hello,server&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">        bw.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP02Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端，在9999端口监听，等待连接..&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bw.write(<span class="string">&quot;hello,client&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();<span class="comment">//注意需要手动的flush</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPFileUploadServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 服务端在本机监听8888端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端在8888端口监听....&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 等待连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 读取客户端发送的数据</span></span><br><span class="line">        <span class="comment">//   通过Socket得到输入流</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line">        <span class="comment">//4. 将得到 bytes 数组，写入到指定的路径，就得到一个文件了</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;src\\mg2.png&quot;</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line">        bos.write(bytes);</span><br><span class="line">        bos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向客户端回复 &quot;收到图片&quot;</span></span><br><span class="line">        <span class="comment">// 通过socket 获取到输出流(字符)</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        writer.write(<span class="string">&quot;收到图片&quot;</span>);</span><br><span class="line">        writer.flush();<span class="comment">//把内容刷新到数据通道</span></span><br><span class="line">        socket.shutdownOutput();<span class="comment">//设置写入结束标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭其他资源</span></span><br><span class="line">        writer.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPFileUploadClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//客户端连接服务端 8888，得到Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//创建读取磁盘文件的输入流</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\winsock_\\upload_\\mg.png&quot;</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//bytes 就是filePath对应的字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过socket获取到输出流, 将bytes数据发送给服务端</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        bos.write(bytes);<span class="comment">//将文件对应的字节数组的内容，写入到数据通道</span></span><br><span class="line">        bis.close();</span><br><span class="line">        socket.shutdownOutput();<span class="comment">//设置写入数据的结束标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//=====接收从服务端回复的消息=====</span></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//使用StreamUtils 的方法，直接将 inputStream 读取到的内容 转成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> StreamUtils.streamToString(inputStream);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭相关的流</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="netstat指令"><a href="#netstat指令" class="headerlink" title="netstat指令"></a>netstat指令</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207262217667.png" alt=""></p><h2 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h2><p>1.类 DatagramSocket和 DatagramPacket[数据包/数据报]实现了基于UDP协议网络程序。</p><p>2.UDP数据报通过数据报套接字DatagramSocket发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</p><p>3.DatagramPacket对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</p><p>4.UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPReceiverA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建一个 DatagramSocket 对象，准备在9999接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2. 构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="comment">//   UDP 协议一个数据包最大 64k</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br><span class="line">        <span class="comment">//3. 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        <span class="comment">//   当有数据包发送到 本机的9999端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//   如果没有数据包发送到 本机的9999端口, 就会阻塞等待.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收端A 等待接收数据..&quot;</span>);</span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="type">byte</span>[] data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//===回复信息给B端</span></span><br><span class="line">        <span class="comment">//将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        data = <span class="string">&quot;好的, 明天见&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        packet =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);<span class="comment">//发送</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;A端退出...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPSenderB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建 DatagramSocket 对象，准备在9998端口 接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="string">&quot;hello 明天吃火锅~&quot;</span>.getBytes(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.=== 接收从A端回复的信息</span></span><br><span class="line">        <span class="comment">//(1)   构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="comment">//   UDP 协议一个数据包最大 64k</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        packet = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br><span class="line">        <span class="comment">//(2)    调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        <span class="comment">//   当有数据包发送到 本机的9998端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//   如果没有数据包发送到 本机的9998端口, 就会阻塞等待.</span></span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3)  可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;B端退出&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021612799.png" alt=""></p><p><strong>Java 反射机制可以完成</strong></p><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时得到任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ol><p><strong>反射相关的主要类</strong></p><ol><li>java.lang.Class:代表一个类，Class对象表示某个类加载后在堆中的对象</li><li>java.lang.reflect.Method:代表类的方法,Method对象表示某个类的方法</li><li>java.lang.reflect.Field:代表类的成员变量, Field对象表示某个类的成员变量</li><li>java.lang.reflect.Constructor:代表类的构造方法,Constructor对象表示构造器</li><li>这些类在java.lang.reflection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 使用Properties 类, 可以读写配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\Java_Project\\basicOfJava\\reflection_\re.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">classfullpath</span> <span class="operator">=</span> properties.get(<span class="string">&quot;classfullpath&quot;</span>).toString();<span class="comment">//&quot;com.hspedu.Cat&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> properties.get(<span class="string">&quot;method&quot;</span>).toString();<span class="comment">//&quot;hi&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 使用反射机制解决</span></span><br><span class="line">        <span class="comment">//(1) 加载类, 返回Class类型的对象cls</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classfullpath);</span><br><span class="line">        <span class="comment">//(2) 通过 cls 得到你加载的类 .Cat 的对象实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;o的运行类型=&quot;</span> + o.getClass()); <span class="comment">//运行类型</span></span><br><span class="line">        <span class="comment">//(3) 通过 cls 得到你加载的类 .Cat 的 methodName&quot;hi&quot;  的方法对象</span></span><br><span class="line">        <span class="comment">//    即：在反射中，可以把方法视为对象（万物皆对象）</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//(4) 通过method1 调用方法: 即通过方法对象来实现调用方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line">        method1.invoke(o); <span class="comment">//传统方法 对象.方法() , 反射机制 方法.invoke(对象)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//java.lang.reflect.Field: 代表类的成员变量, Field对象表示某个类的成员变量</span></span><br><span class="line">        <span class="comment">//得到name字段</span></span><br><span class="line">        <span class="comment">//getField不能得到私有的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;age&quot;</span>); <span class="comment">//</span></span><br><span class="line">        System.out.println(nameField.get(o)); <span class="comment">// 传统写法 对象.成员变量 , 反射 :  成员变量对象.get(对象)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//java.lang.reflect.Constructor: 代表类的构造方法, Constructor对象表示构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getConstructor(); <span class="comment">//()中可以指定构造器参数类型, 返回无参构造器</span></span><br><span class="line">        System.out.println(constructor);<span class="comment">//Cat()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> cls.getConstructor(String.class); <span class="comment">//这里传入的 String.class 就是String类的Class对象</span></span><br><span class="line">        System.out.println(constructor2);<span class="comment">//Cat(String name)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;招财猫&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//public的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;&#125; <span class="comment">//无参构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123; <span class="comment">//常用方法</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;hi &quot; + name);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123; <span class="comment">//常用方法</span></span><br><span class="line">        System.out.println(name + <span class="string">&quot; 喵喵叫..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反射优点和缺点</strong></p><p>1.优点:可以动态的创建和使用对象(也是框架底层核心)，使用灵活,没有反射机制,框架技术就失去底层支撑。</p><p>2.缺点:使用反射基本是解释执行，对执行速度有影响.</p><p> <strong>反射调用优化-关闭访问检查</strong></p><ul><li>Method和Field、Constructor对象都有setAccessible(方法)</li><li>setAccessible作用是启动和禁用访问安全检查的开关</li><li>参数值为true表示反射的对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查</li></ul><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><ol><li>Class也是类,因此也继承Object类</li><li>Class类对象不是new出来的，而是系统创建的</li><li>对于某个类的Class类对象，在内存中只有一份，因为类只加载一次</li><li>每个类的实例都会记得自己是由哪个Class 实例所生成</li><li>通过Class对象可以完整地得到一个类的完整结构,通过一系列API</li><li>Class对象是存放在堆的</li><li>类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据(包括方法代码,变量名，方法名，访问权限等等）</li></ol><p><strong>Class 类的常用方法</strong></p><p><img src="D:\typora图片\image-20220802164207790.png" alt="image-20220802164207790"></p><p><strong>获取 Class 类对象</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021702127.png" alt=""></p><p><strong>如下类型有 Class 对象</strong></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021712921.png" alt=""></p><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>反射机制是java实现动态语言的关键，也就是通过反射实现类动态加载。</p><p>1.静态加载:编译时加载相关的类，如果没有则报错,依赖性太强</p><p>2.动态加载:运行时加载需要的类，如果运行时不用该类，即使不存在该类，则不报错，降低了依赖性</p><p>1.当创建对象时(new)//静态加载</p><p>2.当子类被加载时，父类也加载//静态加载</p><p>3.调用类中的静态成员时//静态加载</p><p>4.通过反射//动态加载</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021729384.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021730799.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021731147.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021732249.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021732281.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021737281.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021738701.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection_.class_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoad03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 加载 B 类，并生成 B 的 class 对象</span></span><br><span class="line">        <span class="comment">//2. 链接 num = 0</span></span><br><span class="line">        <span class="comment">//3. 初始化阶段</span></span><br><span class="line">        <span class="comment">// 依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句,并合并</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        clinit() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;B 静态代码块被执行&quot;);</span></span><br><span class="line"><span class="comment">        //num = 300;</span></span><br><span class="line"><span class="comment">        num = 100;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        合并: num = 100</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//new B();//类加载</span></span><br><span class="line">        <span class="comment">//System.out.println(B.num);//100, 如果直接使用类的静态属性，也会导致类的加载</span></span><br><span class="line">        <span class="comment">//看看加载类的时候，是有同步机制控制</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span></span><br><span class="line"><span class="comment">        throws ClassNotFoundException</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            //正因为有这个机制，才能保证某个类在内存中, 只有一份 Class 对象</span></span><br><span class="line"><span class="comment">            synchronized (getClassLoadingLock(name)) &#123;</span></span><br><span class="line"><span class="comment">            //.... &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 静态代码块被执行&quot;</span>);</span><br><span class="line">        num = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;B() 构造器被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过反射获取类的结构信息"><a href="#通过反射获取类的结构信息" class="headerlink" title="通过反射获取类的结构信息"></a><strong>通过反射获取类的结构信息</strong></h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021749014.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021749961.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021750461.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021750413.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示如何通过反射获取类的结构信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">api_02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//得到Class对象</span></span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;reflection_.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line">        <span class="comment">//规定 说明: 默认修饰符 是0 ， public  是1 ，private 是 2 ，protected 是 4 , static 是 8 ，final 是 16</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName()</span><br><span class="line">                    + <span class="string">&quot; 该属性的修饰符值=&quot;</span> + declaredField.getModifiers()</span><br><span class="line">                    + <span class="string">&quot; 该属性的类型=&quot;</span> + declaredField.getType());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName()</span><br><span class="line">                    + <span class="string">&quot; 该方法的访问修饰符值=&quot;</span> + declaredMethod.getModifiers()</span><br><span class="line">                    + <span class="string">&quot; 该方法返回类型&quot;</span> + declaredMethod.getReturnType());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出当前这个方法的形参数组情况</span></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredMethod.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该方法的形参类型=&quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());<span class="comment">//这里只是输出名</span></span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredConstructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该构造器的形参类型=&quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一组方法API</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">api_01</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Class对象</span></span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;reflection_.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//getName:获取全类名</span></span><br><span class="line">        System.out.println(personCls.getName());<span class="comment">//reflection_.Person</span></span><br><span class="line">        <span class="comment">//getSimpleName:获取简单类名</span></span><br><span class="line">        System.out.println(personCls.getSimpleName());<span class="comment">//Person</span></span><br><span class="line">        <span class="comment">//getFields:获取所有public修饰的属性，包含本类以及父类的</span></span><br><span class="line">        Field[] fields = personCls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;<span class="comment">//增强for</span></span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的属性=&quot;</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getMethods:获取所有public修饰的方法，包含本类以及父类的</span></span><br><span class="line">        Method[] methods = personCls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的方法=&quot;</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getConstructors: 获取所有public修饰的构造器，包含本类</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personCls.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类的构造器=&quot;</span> + constructor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());<span class="comment">//这里只是输出名</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getPackage:以Package形式返回 包信息</span></span><br><span class="line">        System.out.println(personCls.getPackage());<span class="comment">//reflection_</span></span><br><span class="line">        <span class="comment">//getSuperClass:以Class形式返回父类信息</span></span><br><span class="line">        Class&lt;?&gt; superclass = personCls.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的class对象=&quot;</span> + superclass);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//getInterfaces:以Class[]形式返回接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = personCls.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接口信息=&quot;</span> + anInterface);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getAnnotations:以Annotation[] 形式返回注解信息</span></span><br><span class="line">        Annotation[] annotations = personCls.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注解信息=&quot;</span> + annotation);<span class="comment">//注解</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IB</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">IA</span>, IB &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">int</span> age; <span class="comment">// 4 + 8 = 12</span></span><br><span class="line">    String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021832476.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecCreateInstance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 先获取到 User 类的 Class 对象</span></span><br><span class="line">        Class&lt;?&gt; userClass = Class.forName(<span class="string">&quot;reflection_.User&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 通过 public 的无参构造器创建实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> userClass.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        <span class="comment">//3. 通过 public 的有参构造器创建实例</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        constructor 对象就是</span></span><br><span class="line"><span class="comment">        public User(String name) &#123;//public 的有参构造器</span></span><br><span class="line"><span class="comment">            this.name = name;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//3.1 先得到对应构造器</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = userClass.getConstructor(String.class);</span><br><span class="line">        <span class="comment">//3.2 创建实例，并传入实参</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">fzy</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;fzy&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;fzy=&quot;</span> + fzy);</span><br><span class="line">        <span class="comment">//4. 通过非 public 的有参构造器创建实例</span></span><br><span class="line">        <span class="comment">//4.1 得到 private 的构造器对象</span></span><br><span class="line">        Constructor&lt;?&gt; constructor1 = userClass.getDeclaredConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">        <span class="comment">//4.2 创建实例</span></span><br><span class="line">        <span class="comment">//暴破【暴力破解】 , 使用反射可以访问 private 构造器/方法/属性, 反射面前，都是纸老虎</span></span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user2</span> <span class="operator">=</span> constructor1.newInstance(<span class="number">100</span>, <span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user2=&quot;</span> + user2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123; <span class="comment">//User 类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Java学习&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;<span class="comment">//无参 public</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;<span class="comment">//public 的有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;<span class="comment">//private 有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过反射访问类中的成员"><a href="#通过反射访问类中的成员" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h2><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021859707.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示反射操作属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecAccessProperty</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到Student类对应的 Class对象</span></span><br><span class="line">        Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;reflection_.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stuClass.newInstance();<span class="comment">//o 的运行类型就是Student</span></span><br><span class="line">        System.out.println(o.getClass());<span class="comment">//Student</span></span><br><span class="line">        <span class="comment">//3. 使用反射得到age 属性对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> stuClass.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.set(o, <span class="number">88</span>);<span class="comment">//通过反射来操作属性</span></span><br><span class="line">        System.out.println(o);<span class="comment">//</span></span><br><span class="line">        System.out.println(age.get(o));<span class="comment">//返回age属性的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 使用反射操作name 属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//对name 进行暴破, 可以操作private 属性</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//name.set(o, &quot;老韩&quot;);</span></span><br><span class="line">        name.set(<span class="literal">null</span>, <span class="string">&quot;老韩~&quot;</span>);<span class="comment">//因为name是static属性，因此 o 也可以写出null</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">        System.out.println(name.get(o)); <span class="comment">//获取属性值</span></span><br><span class="line">        System.out.println(name.get(<span class="literal">null</span>));<span class="comment">//获取属性值, 要求name是static</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202208021904233.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示通过反射调用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecAccessMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到Boss类对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; bossCls = Class.forName(<span class="string">&quot;reflection_.Boss&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> bossCls.newInstance();</span><br><span class="line">        <span class="comment">//3. 调用public的hi方法</span></span><br><span class="line">        <span class="comment">//Method hi = bossCls.getMethod(&quot;hi&quot;, String.class);//OK</span></span><br><span class="line">        <span class="comment">//3.1 得到hi方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">hi</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;hi&quot;</span>, String.class);<span class="comment">//OK</span></span><br><span class="line">        <span class="comment">//3.2 调用</span></span><br><span class="line">        hi.invoke(o, <span class="string">&quot;Java学习~&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 调用private static 方法</span></span><br><span class="line">        <span class="comment">//4.1 得到 say 方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">say</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;say&quot;</span>, <span class="type">int</span>.class, String.class, <span class="type">char</span>.class);</span><br><span class="line">        <span class="comment">//4.2 因为say方法是private, 所以需要暴破，原理和前面讲的构造器和属性一样</span></span><br><span class="line">        say.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(say.invoke(o, <span class="number">100</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;男&#x27;</span>));</span><br><span class="line">        <span class="comment">//4.3 因为say方法是static的，还可以这样调用 ，可以传入null</span></span><br><span class="line">        System.out.println(say.invoke(<span class="literal">null</span>, <span class="number">200</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&#x27;女&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 在反射中，如果方法有返回值，统一返回Object , 但是他运行类型和方法定义的返回类型一致</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">reVal</span> <span class="operator">=</span> say.invoke(<span class="literal">null</span>, <span class="number">300</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;reVal 的运行类型=&quot;</span> + reVal.getClass());<span class="comment">//String</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在演示一个返回的案例</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">reVal2</span> <span class="operator">=</span> m1.invoke(o);</span><br><span class="line">        System.out.println(<span class="string">&quot;reVal2的运行类型=&quot;</span> + reVal2.getClass());<span class="comment">//Monster</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boss</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monster</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">say</span><span class="params">(<span class="type">int</span> n, String s, <span class="type">char</span> c)</span> &#123;<span class="comment">//静态方法</span></span><br><span class="line">        <span class="keyword">return</span> n + <span class="string">&quot; &quot;</span> + s + <span class="string">&quot; &quot;</span> + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(String s)</span> &#123;<span class="comment">//普通public方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hi &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记02</title>
      <link href="/post/JAVA02/"/>
      <url>/post/JAVA02/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程（高级部分）"><a href="#面向对象编程（高级部分）" class="headerlink" title="面向对象编程（高级部分）"></a>面向对象编程（高级部分）</h1><h2 id="类变量和类方法"><a href="#类变量和类方法" class="headerlink" title="类变量和类方法"></a>类变量和类方法</h2><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>类变量也叫静态变量／静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量。</p><p><strong>类变量定义语法：</strong></p><p>访问修饰符 static 数据类型 变量名； <em>［推荐］</em></p><p>static 访问修饰符 数据类型 变量名：</p><p><strong>访问类变量</strong></p><p>类名.类变量名   <em>［推荐］</em></p><p>对象名.类变量名</p><p>【静态变量的访问修饰符的访问权限和范围和普通属性是一样的】</p><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>类方法也叫静态方法。</p><p><strong>类方法定义语法：</strong></p><p>访问修饰符 static 数据返回类型 方法名（）｛ ｝<em>【推荐】</em>static 访问修饰符 数据返回类型 方法名（）｛ ｝</p><p><strong>类方法的调用</strong></p><p>使用方式：类名.类方法名 或者 对象名.类方法名</p><p>【满足访问修饰符的访问权限和】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建2个学生对象，叫学费</span></span><br><span class="line">        <span class="type">Stu</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        <span class="comment">//tom.payFee(100);</span></span><br><span class="line">        Stu.payFee(<span class="number">100</span>);<span class="comment">//对不对?对</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Stu</span> <span class="variable">mary</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">        <span class="comment">//mary.payFee(200);</span></span><br><span class="line">        Stu.payFee(<span class="number">200</span>);<span class="comment">//对</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出当前收到的总学费</span></span><br><span class="line">        Stu.showFee();<span class="comment">//300</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果我们希望不创建实例，也可以调用某个方法(即当做工具来使用)</span></span><br><span class="line">        <span class="comment">//这时，把方法做成静态方法时非常合适</span></span><br><span class="line">        System.out.println(<span class="string">&quot;9开平方的结果是=&quot;</span> + Math.sqrt(<span class="number">9</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(MyTools.calSum(<span class="number">10</span>, <span class="number">30</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开发自己的工具类时，可以将方法做成静态的，方便调用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTools</span>  &#123;</span><br><span class="line">    <span class="comment">//求出两个数的和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">calSum</span><span class="params">(<span class="type">double</span> n1, <span class="type">double</span> n2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  n1 + n2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以写出很多这样的工具方法...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//普通成员</span></span><br><span class="line">    <span class="comment">//定义一个静态变量，来累积学生的学费</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">fee</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stu</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="comment">//1. 当方法使用了static修饰后，该方法就是静态方法</span></span><br><span class="line">    <span class="comment">//2. 静态方法就可以访问静态属性/变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">payFee</span><span class="params">(<span class="type">double</span> fee)</span> &#123;</span><br><span class="line">        Stu.fee += fee;<span class="comment">//累积到</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showFee</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;总学费有:&quot;</span> + Stu.fee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><p>1）类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区：类方法中无this的参数，普通方法中隐含着this的参数。</p><p>2）类方法可以通过类名调用，也可以通过对象名调用。［举例］</p><p>3）普通方法和对象有关，需要通过对象名调用，比如对象名．方法名（参数），不能通过类名调用。</p><p>4）类方法中不允许使用和对象有关的关键字，比如this和super。普通方法（成员方法）可以。</p><p>5）类方法（静态方法）中只能访问静态变量或静态方法 。</p><p>6）普通成员方法，既可以访问非静态成员，也可以访问静态成员。</p><h2 id="理解main方法"><a href="#理解main方法" class="headerlink" title="理解main方法"></a>理解main方法</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207121128569.png" alt=""></p><p>1) 在 main()方法中，我们可以直接调用 main 方法所在类的静态方法或静态属性。<br>2) 但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main01</span> &#123;</span><br><span class="line">    <span class="comment">//静态的变量/属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;JAVA学习&quot;</span>;</span><br><span class="line">    <span class="comment">//非静态的变量/属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main01的 hi方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main01的 cry方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以直接使用 name</span></span><br><span class="line">        <span class="comment">//1. 静态方法main 可以访问本类的静态成员</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">        hi();</span><br><span class="line">        <span class="comment">//2. 静态方法main 不可以访问本类的非静态成员</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;n1=&quot; + n1);//错误</span></span><br><span class="line">        <span class="comment">//cry();</span></span><br><span class="line">        <span class="comment">//3. 静态方法main 要访问本类的非静态成员，需要先创建对象 , 再调用即可</span></span><br><span class="line">        <span class="type">Main01</span> <span class="variable">main01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main01</span>();</span><br><span class="line">        System.out.println(main01.n1);<span class="comment">//ok</span></span><br><span class="line">        main01.cry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207121143429.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++ ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;] = &quot;</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//run</span></span><br><span class="line">args[<span class="number">0</span>] = 北京</span><br><span class="line">args[<span class="number">1</span>] = 天津</span><br><span class="line">args[<span class="number">2</span>] = 上海</span><br><span class="line">args[<span class="number">3</span>] = Jack</span><br><span class="line">args[<span class="number">4</span>] = Tom</span><br></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码化块又称为初始化块,属于类中的成员[即是类的一部分]，类似于方法，将逻辑语句封装在方法体中，通过{}包围起来。<br>但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用,而是加载类时,或创建对象时隐式调用。</p><p>[修饰符]{</p><p>};</p><p><em>说明注意</em></p><p>1) 修饰符 可选，要写的话，也只能写static</p><p>2) 代码块分为两类，使用static修饰的叫静态代码块，没有static修饰的，叫普通代码块/非静态代码块</p><p>3) 逻辑语句可以为任何逻辑语句(输入、输出、方法调用、循环、判断等)</p><p>4) ;号可以写上，也可以省略</p><p><em>好处</em></p><p>1)相当于另外一种形式的构造器(对构造器的补充机制)，可以做初始化的操作</p><p>2)场景:如果多个构造器中都有重复的语句，可以抽取到初始化块中,提高代码的重用性</p><p><em>细节</em></p><ol><li>static代码块也叫静态代码块，作用就是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次。如果是普通代码块，每创建一个对象,就执行。</li></ol><p>1) 类什么时候被加载<br>①创建对象实例时(new)<br>②创建子类对象实例，父类也会被加载<br>③使用类的静态成员时(静态属性,静态方法)</p><ol><li><p>普通的代码块,在创建对象实例时,会被隐式的调用。<br> 被创建一次，就会调用一次。<br> 如果只是使用类的静态成员时，普通代码块并不会执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeBlock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//①创建对象实例时(new)</span></span><br><span class="line">        <span class="comment">//②创建子类对象实例，父类也会被加载</span></span><br><span class="line">        <span class="type">AA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">        <span class="comment">//③使用类的静态成员时(静态属性,静态方法)</span></span><br><span class="line">        System.out.println(CC.n1);</span><br><span class="line">        <span class="comment">//static代码块随着类的加载而执行，并且只会执行一次</span></span><br><span class="line">        <span class="type">DD</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DD</span>();</span><br><span class="line">        <span class="type">DD</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DD</span>();</span><br><span class="line">        <span class="comment">//如果只是使用类的静态成员时，普通代码块并不会执行。</span></span><br><span class="line">        System.out.println(DD.n2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DD</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">888</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DD的静态代码块...&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DD的普通代码块...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CC的静态代码块...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BB的静态代码块...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">extends</span> <span class="title class_">BB</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AA的静态代码块...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>创建一个对象时，在一个类调用顺序是:</p><p> ①调用静态代码块和静态属性初始化(注意:静态代码块和静态属性初始化调用的优先级一样,如果有多个静态代码块和多个静态变量初始化,则按他们定义的顺序调用）</p><p> ②调用普通代码块和普通属性的初始化(注意:普通代码块和普通属性初始化调用的优先级一样,如果有多个普通代码块和多个普通属性初始化,则按定义顺序调用)</p><p> ③调用构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeBlock02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    &#123; <span class="comment">//普通代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;A 普通代码块01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通属性的初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> getN2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123; <span class="comment">//静态代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;A 静态代码块01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态属性的初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> getN1();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getN1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getN1被调用...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getN2</span><span class="params">()</span> &#123; <span class="comment">//普通方法/非静态方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getN2被调用...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A() 构造器被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//run</span></span><br><span class="line">A 静态代码块<span class="number">01</span></span><br><span class="line">getN1被调用...</span><br><span class="line">A 普通代码块<span class="number">01</span></span><br><span class="line">getN2被调用...</span><br><span class="line">A() 构造器被调用</span><br></pre></td></tr></table></figure></li><li><p>构造器的最前面其实隐含了super()和调用普通代码块，静态相关的代码块，属性初始化，在类加载时，就执行完毕，因此是优先于构造器和普通代码块执行的。</p></li><li><p>创建一个子类对象时(继承关系)，他们的静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法的调用顺序如下:</p><p>①父类的静态代码块和静态属性(优先级一样,按定义顺序执行)</p><p>②子类的静态代码块和静态属性(优先级一样,按定义顺序执行)<br>③父类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</p><p>④父类的构造方法<br>⑤子类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</p><p>⑥子类的构造方法</p></li><li><p>静态代码块只能直接调用静态成员(静态属性和静态方法)，普通代码块可以调用任意成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeBlock03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1) 进行类的加载</span></span><br><span class="line">        <span class="comment">//1.1 先加载 父类 A02 1.2 再加载 B02</span></span><br><span class="line">        <span class="comment">//(2) 创建对象</span></span><br><span class="line">        <span class="comment">//2.1 从子类的构造器开始</span></span><br><span class="line">        <span class="comment">//new B02();//对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">C02</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A02</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> getVal01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A02的一个静态代码块..&quot;</span>);<span class="comment">//(2)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A02的第一个普通代码块..&quot;</span>);<span class="comment">//(5)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> getVal02();<span class="comment">//普通属性的初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getVal01</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getVal01&quot;</span>);<span class="comment">//(1)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVal02</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getVal02&quot;</span>);<span class="comment">//(6)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A02</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="comment">//隐藏</span></span><br><span class="line">        <span class="comment">//super()</span></span><br><span class="line">        <span class="comment">//普通代码和普通属性的初始化......</span></span><br><span class="line">        System.out.println(<span class="string">&quot;A02的构造器&quot;</span>);<span class="comment">//(7)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C02</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//静态代码块，只能调用静态成员</span></span><br><span class="line">        <span class="comment">//System.out.println(n1);错误</span></span><br><span class="line">        System.out.println(n2);<span class="comment">//ok</span></span><br><span class="line">        <span class="comment">//m1();//错误</span></span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//普通代码块，可以使用任意成员</span></span><br><span class="line">        System.out.println(n1);</span><br><span class="line">        System.out.println(n2);<span class="comment">//ok</span></span><br><span class="line">        m1();</span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B02</span> <span class="keyword">extends</span> <span class="title class_">A02</span> &#123; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> getVal03();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B02的一个静态代码块..&quot;</span>);<span class="comment">//(4)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n5</span> <span class="operator">=</span> getVal04();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B02的第一个普通代码块..&quot;</span>);<span class="comment">//(9)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getVal03</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getVal03&quot;</span>);<span class="comment">//(3)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVal04</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getVal04&quot;</span>);<span class="comment">//(8)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一定要慢慢的去品..</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B02</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="comment">//隐藏了</span></span><br><span class="line">        <span class="comment">//super()</span></span><br><span class="line">        <span class="comment">//普通代码块和普通属性的初始化...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;B02的构造器&quot;</span>);<span class="comment">//(10)</span></span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><p>单例(单个的实例)</p><ol><li>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</li><li>单例模式有两种方式:1)饿汉式2)懒汉式</li></ol><p>饿汉式和懒汉式单例模式的实现。步骤如下:<br>1)构造器私有化=》防止直接new</p><p>2)类的内部创建对象</p><p>3)向外暴露一个静态的公共方法。getInstance</p><p>4)代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleTon01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GirlFridend</span> <span class="variable">instance</span> <span class="operator">=</span> GirlFridend.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line"></span><br><span class="line">        <span class="type">GirlFridend</span> <span class="variable">instance2</span> <span class="operator">=</span> GirlFridend.getInstance();</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line"></span><br><span class="line">        System.out.println(instance == instance2);<span class="comment">//T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFridend</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFridend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFridend</span>(<span class="string">&quot;小红红&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFridend</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFridend <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GirlFridend&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleTon02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//不会调用构造器</span></span><br><span class="line">        <span class="comment">//System.out.println(Cat.n1);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> Cat.getInstance();</span><br><span class="line">        System.out.println(cat);</span><br><span class="line"></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> Cat.getInstance();</span><br><span class="line">        System.out.println(cat2);</span><br><span class="line"></span><br><span class="line">        System.out.println(cat2 == cat);<span class="comment">//T</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">777</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器被调用...&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cat == <span class="literal">null</span>) &#123;</span><br><span class="line">            cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;阿白&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉式和懒汉式的区别</p><ol><li><p>二者最主要的区别在于创建对象的时机不同:饿汉式是在类加载就创建了对象实例,而懒汉式是在使用时才创建。</p></li><li><p>饿汉式不存在线程安全问题，懒汉式存在线程安全问题。</p></li><li><p>饿汉式存在浪费资源的可能。因为如果程序员一个对象实例都没有使用，那么饿汉式创建的对象就浪费了，懒汉式是使用时才创建，就不存在这个问题。</p></li></ol><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>final可以修饰类、属性、方法和局部变量。<br>在某些情况下，可能有以下<em>需求</em>，就会使用到final:</p><p>1)当不希望类被继承时,可以用final修饰。</p><p>2)当不希望父类的某个方法被子类覆盖/重写(override)时，可以用final关键字修饰。【访问修饰符 final 返回类型 方法名】</p><p>3)当不希望类的的某个属性的值被修改,可以用final修饰。</p><p>4)当不希望某个局部变量被修改，可以使用final修饰</p><p><em>注意</em></p><ol><li><p>final修饰的属性又叫常量，一般用XX_XX_X来命名</p></li><li><p>final修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如下位置之一：<br>①定义时：如public final double TAX_RATE=0.08;</p><p>②在构造器中。</p><p>③在代码块中。</p></li><li><p>如果final修饰的属性是静态的，则初始化的位置只能是①定义时②在静态代码块不能在构造器中赋值。</p></li><li><p>final类不能继承,但是可以实例化对象。</p></li><li>如果类不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Final01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CC</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CC</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">EE</span>().cal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 定义时：如 public final double TAX_RATE=0.08;</span></span><br><span class="line"><span class="comment">    2. 在构造器中</span></span><br><span class="line"><span class="comment">    3. 在代码块中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">TAX_RATE</span> <span class="operator">=</span> <span class="number">0.08</span>;<span class="comment">//1.定义时赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> TAX_RATE2 ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> TAX_RATE3 ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AA</span><span class="params">()</span> &#123;<span class="comment">//构造器中赋值</span></span><br><span class="line">        TAX_RATE2 = <span class="number">1.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;<span class="comment">//在代码块赋值</span></span><br><span class="line">        TAX_RATE3 = <span class="number">8.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果final修饰的属性是静态的，则初始化的位置只能是</span></span><br><span class="line"><span class="comment">    1 定义时  2 在静态代码块 不能在构造器中赋值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">TAX_RATE</span> <span class="operator">=</span> <span class="number">99.9</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> TAX_RATE2 ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        TAX_RATE2 = <span class="number">3.3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//final类不能继承，但是可以实例化对象</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CC</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果类不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承</span></span><br><span class="line"><span class="comment">//即，仍然遵守继承的机制.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DD</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cal()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EE</span> <span class="keyword">extends</span> <span class="title class_">DD</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>6) final不能修饰构造方法(即构造器)<br>6) 一般来说，如果一个类已经是final类了，就没有必要再将方法修饰成final方法。<br>6) final和static往往搭配使用，效率更高，不会导致类加载.底层编译器做了优化处理。<br>6) 包装类(Integer,Double,Float，Boolean等都是final),String也是final类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Final02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(BBB.num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包装类,String 是final类，不能被继承</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//final 和 static 往往搭配使用，效率更高，不会导致类加载.底层编译器做了优化处理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BBB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span>  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BBB 静态代码块被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AAA</span>&#123;</span><br><span class="line">    <span class="comment">//一般来说，如果一个类已经是final类了，就没有必要再将方法修饰成final方法</span></span><br><span class="line">    <span class="comment">//public final void cry() &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>1)用abstract关键字来修饰一个类时，这个类就叫抽象类访问。【修饰符 abstract 类名{}】<br>2)用abstract关键字来修饰一个方法时，这个方法就是抽象方法。【访问修饰符 abstract 返回类型 方法名(参数列表); //没有方法体】<br>3)抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类（）<br>4)抽象类，在框架和设计模式使用较多。</p><p><em>细节</em></p><ol><li>抽象类不能被实例化</li><li>抽象类不一定要包含abstract方法。也就是说,抽象类可以没有abstract方法</li><li>一旦类包含了abstract方法,则这个类必须声明为abstract</li><li>abstract只能修饰类和方法，不能修饰属性和其它的</li><li>抽象类可以有任意成员【抽象类本质还是类】，比如:非抽象方法,构造器、静态属性等等</li><li>抽象方法不能有主体，即不能实现</li><li>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为abstract类</li><li>抽象方法不能使用private、final和static来修饰，因为这些关键字都是和重写相违背的</li></ol><h3 id="模板设计模式"><a href="#模板设计模式" class="headerlink" title="模板设计模式"></a>模板设计模式</h3><p><em>基本介绍</em><br>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。<br><em>模板设计模式能解决的问题</em><br>1)当功能内部一部分实现是确定，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。<br>2)编写一个抽象父类，父类提供了多个子类的通用方法，并把一个或多个方法留给其子类实现，就是一种模板模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Sub</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        sub.calculateTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Template</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        job(); <span class="comment">//动态绑定</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;runtimes: &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Template</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            num += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,在根据具体情况把这些方法写出来。</p><p><em>语法:</em><br>interface 接口名{</p><p>​    //属性</p><p>​    //抽象方法</p><p>}<br>class 类名 implements 接口{<br>        自己属性;<br>        自己方法;<br>        必须实现的接口的抽象方法</p><p>}</p><p><em>注意</em></p><p>1)接口不能被实例化</p><p>2)接口中所有的方法是public方法，接口中抽象方法，可以不用abstract修饰</p><p>3)一个普通类实现接口,就必须将该接口的所有方法都实现</p><p>4)抽象类实现接口,可以不用实现接口的方法</p><p>5)一个类同时可以实现多个接口</p><p>6)接口中的属性,只能是final的，而且是 public static final修饰符。比如int a=1;实际上是 public static final int a=1; (必须初始化)</p><p>7)接口中属性的访问形式:接口名.属性名</p><p>8)接口不能继承其它的类,但是可以继承多个别的接口</p><p>9)接口的修饰符只能是 public和默认，这点和类的修饰符是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsVsInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LittleMonkey</span> <span class="variable">wuKong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LittleMonkey</span>(<span class="string">&quot;悟空&quot;</span>);</span><br><span class="line">        wuKong.climbing();</span><br><span class="line">        wuKong.swimming();</span><br><span class="line">        wuKong.flying();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猴子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monkey</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">climbing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 会爬树...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fishable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Birdable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">flying</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="comment">//小结:  当子类继承了父类，就自动的拥有父类的功能</span></span><br><span class="line"><span class="comment">//      如果子类需要扩展功能，可以通过实现接口的方式扩展.</span></span><br><span class="line"><span class="comment">//      可以理解 实现接口 是 对java 单继承机制的一种补充.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LittleMonkey</span> <span class="keyword">extends</span> <span class="title class_">Monkey</span> <span class="keyword">implements</span> <span class="title class_">Fishable</span>, Birdable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LittleMonkey</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; 通过学习，可以像鱼儿一样游泳...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flying</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; 通过学习，可以像鸟儿一样飞翔...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口多态"><a href="#接口多态" class="headerlink" title="接口多态"></a>接口多态</h3><p>多态参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyParameter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接口的多态体现</span></span><br><span class="line">        <span class="comment">//接口类型的变量 if01 可以指向 实现了IF接口类的对象实例</span></span><br><span class="line">        <span class="type">IF</span> <span class="variable">if01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>();</span><br><span class="line">        if01 = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//继承体现的多态</span></span><br><span class="line">        <span class="comment">//父类类型的变量 a 可以指向 继承AAA的子类的对象实例</span></span><br><span class="line">        <span class="type">AAA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BBB</span>();</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">CCC</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IF</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> <span class="keyword">implements</span> <span class="title class_">IF</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span>  <span class="title class_">IF</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AAA</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BBB</span> <span class="keyword">extends</span> <span class="title class_">AAA</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCC</span> <span class="keyword">extends</span> <span class="title class_">AAA</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>多态数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> senior.interface_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyArr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多态数组 -&gt; 接口类型数组</span></span><br><span class="line">        Usb[] usbs = <span class="keyword">new</span> <span class="title class_">Usb</span>[<span class="number">2</span>];</span><br><span class="line">        usbs[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Phone_</span>();</span><br><span class="line">        usbs[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Camera_</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        给Usb数组中，存放 Phone  和  相机对象，Phone类还有一个特有的方法call（），</span></span><br><span class="line"><span class="comment">        请遍历Usb数组，如果是Phone对象，除了调用Usb 接口定义的方法外，</span></span><br><span class="line"><span class="comment">        还需要调用Phone 特有方法 call</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; usbs.length; i++) &#123;</span><br><span class="line">            usbs[i].work();<span class="comment">//动态绑定..</span></span><br><span class="line">            <span class="comment">//和前面一样，我们仍然需要进行类型的向下转型</span></span><br><span class="line">            <span class="keyword">if</span> (usbs[i] <span class="keyword">instanceof</span> Phone_) &#123;<span class="comment">//判断他的运行类型是 Phone_</span></span><br><span class="line">                ((Phone_) usbs[i]).call();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone_</span> <span class="keyword">implements</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机可以打电话...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机工作中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera_</span> <span class="keyword">implements</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;相机工作中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyPass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//接口类型的变量可以指向，实现了该接口的类的对象实例</span></span><br><span class="line">        <span class="type">IG</span> <span class="variable">ig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        <span class="comment">//如果IG 继承了 IH 接口，而Teacher 类实现了 IG接口</span></span><br><span class="line">        <span class="comment">//那么，实际上就相当于 Teacher 类也实现了 IH接口.</span></span><br><span class="line">        <span class="comment">//这就是所谓的 接口多态传递现象.</span></span><br><span class="line">        <span class="type">IH</span> <span class="variable">ih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IH</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IG</span> <span class="keyword">extends</span> <span class="title class_">IH</span>&#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">IG</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123; </span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;  <span class="comment">//想到 等价 public static final int x = 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="comment">//普通属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(x); //错误，原因不明确x</span></span><br><span class="line">        <span class="comment">//可以明确的指定x</span></span><br><span class="line">        <span class="comment">//访问接口的 x 就使用 A.x</span></span><br><span class="line">        <span class="comment">//访问父类的 x 就使用 super.x</span></span><br><span class="line">        System.out.println(A.x + <span class="string">&quot; &quot;</span> + <span class="built_in">super</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">C</span>().pX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类(inner class)，嵌套其他类的类称为外部类(outer class)。是我们类的第五大成员【类的五大成员是哪些?[属性、方法、构造器、代码块、内部类]】，内部类最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Outer</span><span class="params">(<span class="type">int</span> n1)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">this</span>.n1 = n1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;<span class="comment">//代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;代码块...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123; <span class="comment">//内部类, 在 Outer 类的内部</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>分类</em></p><ul><li>如果定义类在局部位置(方法中/代码块)：(1) 局部内部类 (2) 匿名内部类 </li><li>定义在成员位置 ：(1) 成员内部类 (2)静态内部类</li></ul><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>说明:局部内部类是定义在外部类的局部位置，比如方法中，并且有类名</p><p>1.可以直接访问外部类的所有成员,包含私有的</p><p>2.不能添加访问修饰符,因为它的地位就是一个局部变量。局部变量是不能使用修饰符的。但是可以使用final修饰，因为局部变量也可以使用final</p><p>3.作用域:仅仅在定义它的方法或代码块中。</p><p>4.局部内部类—-访问——&gt;外部类的成员[访问方式:直接访间]</p><p>5.外部类—-访问——&gt;局部内部类的成员访问方式:创建对象，再访问(注意：必须在作用域内)记住：(1)局部内部类定义在方法中/代码块(2)作用域在方法体或者代码块中(3)本质仍然是一个类</p><p>6.外部其他类—-不能访问——-&gt;局部内部类（因为局部内部类地位是一个局部变量)</p><p>7.如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用(外部类名.this.成员)去访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer02</span> <span class="variable">outer02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer02</span>();</span><br><span class="line">        outer02.m1();</span><br><span class="line">        System.out.println(<span class="string">&quot;outer02的hashcode=&quot;</span> + outer02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer02</span> &#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer02 m2()&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//私有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//1.局部内部类是定义在外部类的局部位置,通常在方法</span></span><br><span class="line">        <span class="comment">//3.不能添加访问修饰符,但是可以使用final 修饰</span></span><br><span class="line">        <span class="comment">//4.作用域 : 仅仅在定义它的方法或代码块中</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Inner02</span> &#123;<span class="comment">//局部内部类(本质仍然是一个类)</span></span><br><span class="line">            <span class="comment">//2.可以直接访问外部类的所有成员，包含私有的</span></span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//5. 局部内部类可以直接访问外部类的成员，比如下面 外部类n1 和 m2()</span></span><br><span class="line">                <span class="comment">//7. 如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，</span></span><br><span class="line">                <span class="comment">//   使用 外部类名.this.成员）去访问</span></span><br><span class="line">                <span class="comment">//    .this 本质就是外部类的对象, 即哪个对象调用了m1, Outer02.this就是哪个对象</span></span><br><span class="line">                System.out.println(<span class="string">&quot;n1=&quot;</span> + n1 + <span class="string">&quot; 外部类的n1=&quot;</span> + Outer02.<span class="built_in">this</span>.n1);</span><br><span class="line">                System.out.println(<span class="string">&quot;Outer02.this hashcode=&quot;</span> + Outer02.<span class="built_in">this</span>);</span><br><span class="line">                m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 外部类在方法中，可以创建Inner02对象，然后调用方法即可</span></span><br><span class="line">        <span class="type">Inner02</span> <span class="variable">inner02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner02</span>();</span><br><span class="line">        inner02.f1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer04</span> <span class="variable">outer04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer04</span>();</span><br><span class="line">        outer04.method();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer04</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//基于接口的匿名内部类</span></span><br><span class="line">        <span class="comment">//1. 需求：想使用IA接口,并创建对象</span></span><br><span class="line">        <span class="comment">//2. 传统方式，是写一个类，实现该接口，并创建对象</span></span><br><span class="line">        <span class="comment">//3. 需求是 Tiger/Dog 类只是使用一次，后面再不使用</span></span><br><span class="line">        <span class="comment">//4. 可以使用匿名内部类来简化开发</span></span><br><span class="line">        <span class="comment">//5. tiger的编译类型 ? IA</span></span><br><span class="line">        <span class="comment">//6. tiger的运行类型 ? 就是匿名内部类  Outer04$1</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            我们看底层 会分配 类名 Outer04$1</span></span><br><span class="line"><span class="comment">            class Outer04$1 implements IA &#123;</span></span><br><span class="line"><span class="comment">                @Override</span></span><br><span class="line"><span class="comment">                public void cry() &#123;</span></span><br><span class="line"><span class="comment">                    System.out .println(&quot;老虎叫唤...&quot;);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//7. jdk底层在创建匿名内部类 Outer04$1,立即马上就创建了 Outer04$1实例，并且把地址</span></span><br><span class="line">        <span class="comment">//   返回给 tiger</span></span><br><span class="line">        <span class="comment">//8. 匿名内部类使用一次，就不能再使用</span></span><br><span class="line">        <span class="type">IA</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IA</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;老虎叫唤...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;tiger的运行类型=&quot;</span> + tiger.getClass());</span><br><span class="line">        tiger.cry();</span><br><span class="line">        tiger.cry();</span><br><span class="line">        tiger.cry();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        IA tiger = new Tiger();</span></span><br><span class="line"><span class="comment">//        tiger.cry();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示基于类的匿名内部类</span></span><br><span class="line">        <span class="comment">//分析</span></span><br><span class="line">        <span class="comment">//1. father编译类型 Father</span></span><br><span class="line">        <span class="comment">//2. father运行类型 Outer04$2</span></span><br><span class="line">        <span class="comment">//3. 底层会创建匿名内部类</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            class Outer04$2 extends Father&#123;</span></span><br><span class="line"><span class="comment">                @Override</span></span><br><span class="line"><span class="comment">                public void test() &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println(&quot;匿名内部类重写了test方法&quot;);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//4. 同时也直接返回了 匿名内部类 Outer04$2的对象</span></span><br><span class="line">        <span class="comment">//5. 注意(&quot;jack&quot;) 参数列表会传递给 构造器</span></span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;jack&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写了test方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;father对象的运行类型=&quot;</span> + father.getClass());<span class="comment">//Outer04$2</span></span><br><span class="line">        father.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基于抽象类的匿名内部类</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小狗吃骨头...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> &#123;<span class="comment">//接口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class Tiger implements IA &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void cry() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;老虎叫唤...&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//class Dog implements  IA&#123;</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void cry() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;小狗汪汪...&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;<span class="comment">//类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123; <span class="comment">//抽象类</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClassDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Outer05</span> <span class="variable">outer05</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer05</span>();</span><br><span class="line">        outer05.f1();</span><br><span class="line">        <span class="comment">//外部其他类---不能访问-----&gt;匿名内部类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main outer05 hashcode=&quot;</span> + outer05);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer05</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个基于类的匿名内部类</span></span><br><span class="line">        <span class="comment">//不能添加访问修饰符,因为它的地位就是一个局部变量</span></span><br><span class="line">        <span class="comment">//作用域 : 仅仅在定义它的方法或代码块中</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//可以直接访问外部类的所有成员，包含私有的</span></span><br><span class="line">                <span class="comment">//如果外部类和匿名内部类的成员重名时，匿名内部类访问的话，</span></span><br><span class="line">                <span class="comment">//默认遵循就近原则，如果想访问外部类的成员，则可以使用 （外部类名.this.成员）去访问</span></span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写了 hi方法 n1=&quot;</span> + n1 +</span><br><span class="line">                        <span class="string">&quot; 外部内的n1=&quot;</span> + Outer05.<span class="built_in">this</span>.n1 );</span><br><span class="line">                <span class="comment">//Outer05.this 就是调用 f1的 对象</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Outer05.this hashcode=&quot;</span> + Outer05.<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p.hi();<span class="comment">//动态绑定, 运行类型是 Outer05$1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//也可以直接调用, 匿名内部类本身也是返回对象</span></span><br><span class="line">        <span class="comment">// class 匿名内部类 extends Person &#123;&#125;</span></span><br><span class="line"><span class="comment">//        new Person()&#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void hi() &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;匿名内部类重写了 hi方法,哈哈...&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void ok(String str) &#123;</span></span><br><span class="line"><span class="comment">//                super.ok(str);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;.ok(&quot;jack&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person hi()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person ok() &quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象类/接口...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>成员内部类是定义在外部类的成员位置，并且没有static修饰。</p><p>1.可以直接访问外部类的所有成员，包含私有的</p><p>2.可以添加任意访问修饰符(public、protected、默认、private)，因为它的地位就是一个成员。</p><p>3.作用域和外部类的其他成员一样，为整个类体。在外部类的成员方法中创建成员内部类对象，再调用方法。</p><p>4.成员内部类—-访问——&gt;外部类成员(比如：属性) [访问方式：直接访问]</p><p>5.外部类—-访问———&gt;成员内部类(说明)访问方式：创建对象，再访问</p><p>6.外部其他类—-访问——&gt;成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberInnerClass01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer08</span> <span class="variable">outer08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer08</span>();</span><br><span class="line">        outer08.t1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外部其他类，使用成员内部类的2种方式</span></span><br><span class="line">        <span class="comment">// 第一种方式</span></span><br><span class="line">        <span class="comment">// outer08.new Inner08(); 相当于把 new Inner08()当做是outer08成员</span></span><br><span class="line">        <span class="comment">// 这就是一个语法，不要特别的纠结.</span></span><br><span class="line">        Outer08.<span class="type">Inner08</span> <span class="variable">inner08</span> <span class="operator">=</span> outer08.<span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">        inner08.say();</span><br><span class="line">        <span class="comment">// 第二方式 在外部类中，编写一个方法，可以返回 Inner08对象</span></span><br><span class="line">        Outer08.<span class="type">Inner08</span> <span class="variable">inner08Instance</span> <span class="operator">=</span> outer08.getInner08Instance();</span><br><span class="line">        inner08Instance.say();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer08</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi()方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.注意: 成员内部类，是定义在外部内的成员位置上</span></span><br><span class="line">    <span class="comment">//2.可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner08</span> &#123;<span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> <span class="number">99.8</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">66</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//可以直接访问外部类的所有成员，包含私有的</span></span><br><span class="line">            <span class="comment">//如果成员内部类的成员和外部类的成员重名，会遵守就近原则.</span></span><br><span class="line">            <span class="comment">//，可以通过  外部类名.this.属性 来访问外部类的成员</span></span><br><span class="line">            System.out.println(<span class="string">&quot;n1 = &quot;</span> + n1 + <span class="string">&quot; name = &quot;</span> + name + <span class="string">&quot; 外部类的n1=&quot;</span> + Outer08.<span class="built_in">this</span>.n1);</span><br><span class="line">            hi();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法，返回一个Inner08实例</span></span><br><span class="line">    <span class="keyword">public</span> Inner08 <span class="title function_">getInner08Instance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用成员内部类</span></span><br><span class="line">        <span class="comment">//创建成员内部类的对象，然后使用相关的方法</span></span><br><span class="line">        <span class="type">Inner08</span> <span class="variable">inner08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">        inner08.say();</span><br><span class="line">        System.out.println(inner08.sal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>说明:静态内部类是定义在外部类的成员位置，并且有static修饰<br>1.可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</p><p>2.可以添加任意访问修饰符(public.protected、默认、private),因为它的地位就是一个成员。</p><p>3.作用域:同其他的成员，为整个类体</p><p>4.静态内部类—-访问——&gt;外部类(比如:静态属性)[访问方式:直接访问所有静<br>态成员]</p><p>5.外部类—-访问———&gt;静态内部类访问方式:创建对象，再访问</p><p>6.外部其他类—-访问——-&gt;静态内部类</p><p>7.如果外部类和静态内部类的成员重名时，静态内部类访问的时，默认遵循就近原则，如果想访问外部类的成员，则可以使用(外部类名.成员)去访向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer10</span> <span class="variable">outer10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer10</span>();</span><br><span class="line">        outer10.m1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外部其他类 使用静态内部类</span></span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        <span class="comment">//因为静态内部类，是可以通过类名直接访问(前提是满足访问权限)</span></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer10</span>.Inner10();</span><br><span class="line">        inner10.say();</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//编写一个方法，可以返回静态内部类的对象实例.</span></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner101</span> <span class="operator">=</span> outer10.getInner10();</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        inner101.say();</span><br><span class="line"></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner10_</span> <span class="operator">=</span> Outer10.getInner10_();</span><br><span class="line">        System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line">        inner10_.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer10</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">//Inner10就是静态内部类</span></span><br><span class="line">    <span class="comment">//1. 放在外部类的成员位置</span></span><br><span class="line">    <span class="comment">//2. 使用static 修饰</span></span><br><span class="line">    <span class="comment">//3. 可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</span></span><br><span class="line">    <span class="comment">//4. 可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员</span></span><br><span class="line">    <span class="comment">//5. 作用域 ：同其他的成员，为整个类体</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner10</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;JAVA 学习&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//如果外部类和静态内部类的成员重名时，静态内部类访问的时，</span></span><br><span class="line">            <span class="comment">//默认遵循就近原则，如果想访问外部类的成员，则可以使用 （外部类名.成员）</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot; 外部类name= &quot;</span> + Outer10.name);</span><br><span class="line">            cry();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123; <span class="comment">//外部类---访问------&gt;静态内部类 访问方式：创建对象，再访问</span></span><br><span class="line">        <span class="type">Inner10</span> <span class="variable">inner10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner10</span>();</span><br><span class="line">        inner10.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Inner10 <span class="title function_">getInner10</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner10</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Inner10 <span class="title function_">getInner10_</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner10</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="枚举和注解"><a href="#枚举和注解" class="headerlink" title="枚举和注解"></a>枚举和注解</h1><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举属于一种特殊的类，里面只包含一组有限的特定的对象。</p><h3 id="自定义实现枚举"><a href="#自定义实现枚举" class="headerlink" title="自定义实现枚举"></a>自定义实现枚举</h3><p>进行自定义类实现枚举，有如下特点： </p><p>1) 构造器私有化<br>2)  本类内部创建一组对象[四个 春夏秋冬]<br>3) 对外暴露对象（通过为对象添加 public final static 修饰符）<br>4) 可以提供 get 方法，但是不要提供 set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enumeration02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season.AUTUMN);</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//演示字定义枚举实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;<span class="comment">//描述</span></span><br><span class="line">    <span class="comment">//定义了四个对象, 固定.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>);</span><br><span class="line">    <span class="comment">//1. 将构造器私有化,目的防止 直接 new</span></span><br><span class="line">    <span class="comment">//2. 去掉 setXxx 方法, 防止属性被修改</span></span><br><span class="line">    <span class="comment">//3. 在 Season 内部，直接创建固定的对象</span></span><br><span class="line">    <span class="comment">//4. 优化，可以加入 final 修饰符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="enum关键字实现枚举"><a href="#enum关键字实现枚举" class="headerlink" title="enum关键字实现枚举"></a>enum关键字实现枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enumeration03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season03.AUTUMN);</span><br><span class="line">        System.out.println(Season03.SUMMER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season03</span> &#123;</span><br><span class="line">    <span class="comment">//如果使用了enum 来实现枚举类</span></span><br><span class="line">    <span class="comment">//1. 使用关键字 enum 替代 class</span></span><br><span class="line">    <span class="comment">//2. public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;) 直接使用</span></span><br><span class="line">    <span class="comment">//   SPRING(&quot;春天&quot;, &quot;温暖&quot;) 解读 常量名(实参列表)</span></span><br><span class="line">    <span class="comment">//3. 如果有多个常量(对象)， 使用 ,号间隔即可</span></span><br><span class="line">    <span class="comment">//4. 如果使用enum 来实现枚举，要求将定义常量对象，写在前面</span></span><br><span class="line">    <span class="comment">//5. 如果我们使用的是无参构造器，创建常量对象，则可以省略 ()</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>), WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>), AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>)<span class="comment">/*, What()*/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;<span class="comment">//描述</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season03</span><span class="params">()</span> &#123;<span class="comment">//无参构造器</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season03</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumExercise01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Gender2</span> <span class="variable">boy</span> <span class="operator">=</span> Gender2.BOY;<span class="comment">//OK</span></span><br><span class="line">        <span class="type">Gender2</span> <span class="variable">boy2</span> <span class="operator">=</span> Gender2.BOY;<span class="comment">//OK</span></span><br><span class="line">        System.out.println(boy);<span class="comment">//输出BOY //本质就是调用 Gender2 的父类Enum的 toString()</span></span><br><span class="line"><span class="comment">//        public String toString() &#123;</span></span><br><span class="line"><span class="comment">//            return name;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        System.out.println(boy2 == boy);  <span class="comment">//True</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender2</span>&#123; <span class="comment">//父类 Enum 的toString</span></span><br><span class="line">    BOY , GIRL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="enum常用方法"><a href="#enum常用方法" class="headerlink" title="enum常用方法"></a>enum常用方法</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207131000867.png" alt=""></p><p>1) toString:Enum 类已经重写过了，返回的是当前对象 名,子类可以重写该方法，用于返回对象的属性信息<br>2) name：返回当前对象名（常量名），子类中不能重写<br>3) ordinal：返回当前对象的位置号，默认从 0 开始<br>4) values：返回当前枚举类中所有的常量<br>5)  valueOf：将字符串转换成枚举对象，要求字符串必须 为已有的常量名，否则报异常！<br>6)  compareTo：比较两个枚举常量，比较的就是编号！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用Season03 枚举类，来演示各种方法</span></span><br><span class="line">        <span class="type">Season03</span> <span class="variable">autumn</span> <span class="operator">=</span> Season03.AUTUMN;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出枚举对象的名字</span></span><br><span class="line">        System.out.println(autumn.name());</span><br><span class="line">        <span class="comment">//ordinal() 输出的是该枚举对象的次序/编号，从0开始编号</span></span><br><span class="line">        <span class="comment">//AUTUMN 枚举对象是第三个，因此输出 2</span></span><br><span class="line">        System.out.println(autumn.ordinal());</span><br><span class="line">        <span class="comment">//从反编译可以看出 values方法，返回 Season2[]</span></span><br><span class="line">        <span class="comment">//含有定义的所有枚举对象</span></span><br><span class="line">        Season03[] values = Season03.values();</span><br><span class="line">        System.out.println(<span class="string">&quot;===遍历取出枚举对象(增强for)====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Season03 season: values) &#123;<span class="comment">//增强for循环</span></span><br><span class="line">            System.out.println(season);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueOf：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常</span></span><br><span class="line">        <span class="comment">//执行流程</span></span><br><span class="line">        <span class="comment">//1. 根据你输入的 &quot;AUTUMN&quot; 到 Season2的枚举对象去查找</span></span><br><span class="line">        <span class="comment">//2. 如果找到了，就返回，如果没有找到，就报错</span></span><br><span class="line">        <span class="type">Season03</span> <span class="variable">autumn1</span> <span class="operator">=</span> Season03.valueOf(<span class="string">&quot;AUTUMN&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;autumn1=&quot;</span> + autumn1);</span><br><span class="line">        System.out.println(autumn == autumn1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//compareTo：比较两个枚举常量，比较的就是编号</span></span><br><span class="line">        <span class="comment">//1. 就是把 Season2.AUTUMN 枚举对象的编号 和 Season2.SUMMER枚举对象的编号比较</span></span><br><span class="line">        <span class="comment">//2. 看看结果</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public final int compareTo(E o) &#123;</span></span><br><span class="line"><span class="comment">            //...</span></span><br><span class="line"><span class="comment">            return self.ordinal - other.ordinal;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        Season2.AUTUMN的编号[2] - Season2.SUMMER的编号[3]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Season03.AUTUMN.compareTo(Season03.SUMMER));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="enum-实现接口"><a href="#enum-实现接口" class="headerlink" title="enum 实现接口"></a>enum 实现接口</h3><p>1) 使用 enum 关键字后，就不能再继承其它类了，因为 enum 会隐式继承 Enum，而 Java 是单继承机制。<br>2) 枚举类和普通类一样，可以实现接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Music.CLASSICMUSIC.playing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.使用enum关键字后，就不能再继承其它类了，因为enum会隐式继承Enum，而Java是单继承机制</span></span><br><span class="line"><span class="comment">//enum Season3 extends A &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//2.enum实现的枚举类，仍然是一个类，所以还是可以实现接口的.</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPlaying</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playing</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Music</span> <span class="keyword">implements</span> <span class="title class_">IPlaying</span> &#123;</span><br><span class="line">    CLASSICMUSIC;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;播放好听的音乐...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>1) 注解(Annotation)也被称为元数据(Metadata)，用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息。<br>2) 和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息。<br>3)  在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE 中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替 java EE 旧版中所遗留的繁冗代码和 XML 配置等。</p><h3 id="基本的-Annotation-介绍"><a href="#基本的-Annotation-介绍" class="headerlink" title="基本的 Annotation 介绍"></a>基本的 Annotation 介绍</h3><p>使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素 三个基本的 Annotation: </p><p>1) @Override: 限定某个方法，是重写父类方法, 该注解只能用于方法<br>2) @Deprecated: 用于表示某个程序元素(类, 方法等)已过时<br>3) @SuppressWarnings: 抑制编译器警告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Override_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;<span class="comment">//父类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father fly...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="comment">//1. @Override 注解放在fly方法上，表示子类的fly方法时重写了父类的fly</span></span><br><span class="line">    <span class="comment">//2. 这里如果没有写 @Override 还是重写了父类fly</span></span><br><span class="line">    <span class="comment">//3. 如果你写了@Override注解，编译器就会去检查该方法是否真的重写了父类的</span></span><br><span class="line">    <span class="comment">//   方法，如果的确重写了，则编译通过，如果没有构成重写，则编译错误</span></span><br><span class="line">    <span class="comment">//4. 看看 @Override的定义</span></span><br><span class="line">    <span class="comment">//   解读： 如果发现 @interface 表示一个 注解类</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        @Target(ElementType.METHOD)</span></span><br><span class="line"><span class="comment">        @Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="comment">        public @interface Override &#123;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">//说明</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son fly....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Deprecated_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. @Deprecated 修饰某个元素，表示该元素已经过时</span></span><br><span class="line"><span class="comment">//2. 即不推荐使用，但是还可以使用。</span></span><br><span class="line"><span class="comment">//3. 可以修饰方法，类，字段, 包, 参数 等</span></span><br><span class="line"><span class="comment">//4. @Deprecated 可以做版本升级过渡使用</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> @Documented</span></span><br><span class="line"><span class="comment"> @Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment"> @Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE&#125;)</span></span><br><span class="line"><span class="comment"> public @interface Deprecated &#123;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">ArrayList</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">List</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">SuppressWarnings</span>(&#123;<span class="string">&quot;rawtypes&quot;</span>, <span class="string">&quot;unchecked&quot;</span>, <span class="string">&quot;unused&quot;</span>&#125;)</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">SuppressWarnings_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 当我们不希望看到这些警告的时候，可以使用 SuppressWarnings注解来抑制警告信息</span></span><br><span class="line">    <span class="comment">//2. 在&#123;&quot;&quot;&#125; 中，可以写入你希望抑制(不显示)警告信息</span></span><br><span class="line">    <span class="comment">//3. 可以指定的警告类型有</span></span><br><span class="line">    <span class="comment">//          all，抑制所有警告</span></span><br><span class="line">    <span class="comment">//          boxing，抑制与封装/拆装作业相关的警告</span></span><br><span class="line">    <span class="comment">//        //cast，抑制与强制转型作业相关的警告</span></span><br><span class="line">    <span class="comment">//        //dep-ann，抑制与淘汰注释相关的警告</span></span><br><span class="line">    <span class="comment">//        //deprecation，抑制与淘汰的相关警告</span></span><br><span class="line">    <span class="comment">//        //fallthrough，抑制与switch陈述式中遗漏break相关的警告</span></span><br><span class="line">    <span class="comment">//        //finally，抑制与未传回finally区块相关的警告</span></span><br><span class="line">    <span class="comment">//        //hiding，抑制与隐藏变数的区域变数相关的警告</span></span><br><span class="line">    <span class="comment">//        //incomplete-switch，抑制与switch陈述式(enum case)中遗漏项目相关的警告</span></span><br><span class="line">    <span class="comment">//        //javadoc，抑制与javadoc相关的警告</span></span><br><span class="line">    <span class="comment">//        //nls，抑制与非nls字串文字相关的警告</span></span><br><span class="line">    <span class="comment">//        //null，抑制与空值分析相关的警告</span></span><br><span class="line">    <span class="comment">//        //rawtypes，抑制与使用raw类型相关的警告</span></span><br><span class="line">    <span class="comment">//        //resource，抑制与使用Closeable类型的资源相关的警告</span></span><br><span class="line">    <span class="comment">//        //restriction，抑制与使用不建议或禁止参照相关的警告</span></span><br><span class="line">    <span class="comment">//        //serial，抑制与可序列化的类别遗漏serialVersionUID栏位相关的警告</span></span><br><span class="line">    <span class="comment">//        //static-access，抑制与静态存取不正确相关的警告</span></span><br><span class="line">    <span class="comment">//        //static-method，抑制与可能宣告为static的方法相关的警告</span></span><br><span class="line">    <span class="comment">//        //super，抑制与置换方法相关但不含super呼叫的警告</span></span><br><span class="line">    <span class="comment">//        //synthetic-access，抑制与内部类别的存取未最佳化相关的警告</span></span><br><span class="line">    <span class="comment">//        //sync-override，抑制因为置换同步方法而遗漏同步化的警告</span></span><br><span class="line">    <span class="comment">//        //unchecked，抑制与未检查的作业相关的警告</span></span><br><span class="line">    <span class="comment">//        //unqualified-field-access，抑制与栏位存取不合格相关的警告</span></span><br><span class="line">    <span class="comment">//        //unused，抑制与未用的程式码及停用的程式码相关的警告</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 关于SuppressWarnings 作用范围是和你放置的位置相关</span></span><br><span class="line">    <span class="comment">//   比如 @SuppressWarnings放置在 main方法，那么抑制警告的范围就是 main</span></span><br><span class="line">    <span class="comment">//   通常我们可以放置具体的语句, 方法, 类.</span></span><br><span class="line">    <span class="comment">//5.  看看 @SuppressWarnings 源码</span></span><br><span class="line">    <span class="comment">//(1) 放置的位置就是 TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE</span></span><br><span class="line">    <span class="comment">//(2) 该注解类有数组 String[] values() 设置一个数组比如 &#123;&quot;rawtypes&quot;, &quot;unchecked&quot;, &quot;unused&quot;&#125;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        @Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="comment">            @Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="comment">            public @interface SuppressWarnings &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                String[] value();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">List</span> list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.<span class="title function_">add</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list.<span class="title function_">add</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.<span class="title function_">add</span>(<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">        int i;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(list.<span class="title function_">get</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//        @SuppressWarnings(&#123;&quot;rawtypes&quot;&#125;)</span></span><br><span class="line">        <span class="title class_">List</span> list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        list.<span class="title function_">add</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list.<span class="title function_">add</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.<span class="title function_">add</span>(<span class="string">&quot;mary&quot;</span>);</span><br><span class="line"><span class="comment">//        @SuppressWarnings(&#123;&quot;unused&quot;&#125;)</span></span><br><span class="line">        int i;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(list.<span class="title function_">get</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>1) Retention //指定注解的作用范围，三种 SOURCE,CLASS,RUNTIME<br>2) Target // 指定注解可以在哪些地方使用<br>3) Documented //指定该注解是否会在 javadoc 体现<br>4)  Inherited //子类会继承父类注解</p><p>@Retention 的三种值 </p><p>1）RetentionPolicy.SOURCE: 编译器使用后，直接丢弃这种策略的注解。</p><p>2）RetentionPolicy.CLASS: 编译器将把注解记录在 class 文件中. 当运行 Java 程序时, JVM 不会保留注解。</p><p>3）RetentionPolicy.RUNTIME:编译器将把注解记录在 class 文件中. 当运行 Java 程序时, JVM 会保留注解. 程序可以通过反射获取该注解。</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p><em>基本概念</em><br>Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常</p><p>执行过程中所发生的异常事件可分为<em>两大类</em></p><p>1) Error(错误)：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError[栈溢出]和OOM(out of memory). Error是严重错误，程序会崩溃。<br>2) Exception：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如空指针访问，试图读取不存在的文件，网络连接中断等等，Exception 分为两大类：运行时异常[程序运行时，发生的异常]和编译时异常[编程时，编译器检查出的异常]。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207132125956.png" alt=""></p><h2 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h2><p>常见的运行时异常包括 </p><p>1) NullPointerException 空指针异常<br>2) ArithmeticException 数学运算异常<br>3) ArrayIndexOutOfBoundsException 数组下标越界异常<br>4) ClassCastException 类型转换异常<br>5)  NumberFormatException 数字格式不正确异常</p><h2 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h2><p>编译异常是指在编译期间，就必须处理的异常，否则代码不能通过编译。</p><p>SQLException //操作数据库时，查询表可能发生异常</p><p>IOException //操作文件时，发生的异常</p><p>FileNotFoundException //当操作一个不存在的文件时，发生异常</p><p>ClassNotFoundException //加载类，而该类不存在时，异常</p><p>EOFException//操作文件，到文件未尾，发生异常</p><p>IllegalArguementException //参数异常</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常处理就是当异常发生时，对异常处理的方式。</p><h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><p>程序员在代码中捕获发生的异常，自行处理。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207132022327.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatch01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//ctrl + atl + t</span></span><br><span class="line">        <span class="comment">//1. 如果异常发生了，则异常发生后面的代码不会执行，直接进入到 catch 块</span></span><br><span class="line">        <span class="comment">//2. 如果异常没有发生，则顺序执行 try 的代码块，不会进入到 catch</span></span><br><span class="line">        <span class="comment">//3. 如果希望不管是否发生异常，都执行某段代码(比如关闭连接，释放资源等)则使用如下代码- finally</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JAVA学习&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line">            System.out.println(<span class="string">&quot;数字：&quot;</span> + a);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;异常信息=&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally 代码块被执行...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序继续...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以有多个catch语句，捕获不同的异常(进行不同的业务处理)，要求父类异常在后，子类异常在前，比如(Exception在后，NullPointerException在前)，如果发生异常，只会匹配一个catch。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatch02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.如果try代码块有可能有多个异常</span></span><br><span class="line">        <span class="comment">//2.可以使用多个catch 分别捕获不同的异常，相应处理</span></span><br><span class="line">        <span class="comment">//3.要求子类异常写在前面，父类异常写在后面</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">            person = <span class="literal">null</span>;</span><br><span class="line">            System.out.println(person.getName());<span class="comment">//NullPointerException</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> n1 / n2;<span class="comment">//ArithmeticException</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针异常=&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;算术异常=&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchExercise03</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExceptionExe01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//i = 1</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i++;<span class="comment">// i=2</span></span><br><span class="line">            String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span> (names[<span class="number">1</span>].equals(<span class="string">&quot;tom&quot;</span>)) &#123; <span class="comment">//空指针</span></span><br><span class="line">                System.out.println(names[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                names[<span class="number">3</span>] = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ++i;  <span class="comment">// i = 3 =&gt; 保存临时变量 temp = 3;</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ++i; <span class="comment">//i = 4</span></span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i);<span class="comment">// i = 4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(method());<span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>catch可以省略，try的形式有三种：</p><p>try-catch</p><p>try-finally</p><p>try-catch-finally</p><p>但<strong>catch和finally语句不能同时省略！</strong></p></blockquote><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>将发生的异常抛出，交给调用者（方法）来处理，最顶级的处理者就是JVM。</p><p>1)如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。<br>2)在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207132024005.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Throws01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        f2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="comment">/*throws ArithmeticException*/</span> &#123;</span><br><span class="line">        <span class="comment">//1.对于编译异常，程序中必须处理，比如 try-catch 或者 throws</span></span><br><span class="line">        <span class="comment">//2.对于运行时异常，程序中如果没有处理，默认就是throws的方式处理</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> n1 / n2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">//这里大家思考问题 调用f3() 报错</span></span><br><span class="line">        <span class="comment">//1. 因为f3() 方法抛出的是一个编译异常</span></span><br><span class="line">        <span class="comment">//2. 即这时，就要f1() 必须处理这个编译异常</span></span><br><span class="line">        <span class="comment">//3. 在f1() 中，要么 try-catch-finally ,或者继续throws 这个编译异常</span></span><br><span class="line">        f3(); <span class="comment">// 抛出异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d://aa.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 在f4()中调用方法f5() 是OK</span></span><br><span class="line">        <span class="comment">//2. 原因是f5() 抛出的是运行异常</span></span><br><span class="line">        <span class="comment">//3. 而java中，并不要求程序员显示处理,因为有默认处理机制</span></span><br><span class="line">        f5();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f5</span><span class="params">()</span> <span class="keyword">throws</span> ArithmeticException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;<span class="comment">//子类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 子类重写父类的方法时，对抛出异常的规定:子类重写的方法，</span></span><br><span class="line">    <span class="comment">//   所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出的异常类型的子类型</span></span><br><span class="line">    <span class="comment">//4. 在throws 过程中，如果有方法 try-catch , 就相当于处理异常，就可以不必throws</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> ArithmeticException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="comment">/*throws AgeException*/</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">180</span>;</span><br><span class="line">        <span class="comment">//要求范围在 18 – 120 之间，否则抛出一个自定义异常</span></span><br><span class="line">        <span class="keyword">if</span>(!(age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">120</span>)) &#123;</span><br><span class="line">            <span class="comment">//这里我们可以通过构造器，设置信息</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;年龄需要在 18~120之间&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;你的年龄范围正确.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义一个异常</span></span><br><span class="line"><span class="comment">//1. 一般情况下，我们自定义异常是继承 RuntimeException</span></span><br><span class="line"><span class="comment">//2. 即把自定义异常做成 运行时异常，好处时，我们可以使用默认的处理机制</span></span><br><span class="line"><span class="comment">//3. 即比较方便</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>1) 针对八种基本数据类型相应的引用类型—包装类 </p><p>2) 有了类的特点，就可以调用类中的方法。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207141750241.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wrapper01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包装类(Integer)-&gt;String</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//自动装箱</span></span><br><span class="line">        <span class="comment">//方式 1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//方式 2</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> i.toString();</span><br><span class="line">        <span class="comment">//方式 3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line">        <span class="comment">//String -&gt; 包装类(Integer)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.parseInt(str4);<span class="comment">//使用到自动装箱</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(str4);<span class="comment">//构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ok~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Integer.MIN_VALUE); <span class="comment">//返回最小值</span></span><br><span class="line">        System.out.println(Integer.MAX_VALUE);<span class="comment">//返回最大值</span></span><br><span class="line">        System.out.println(Character.isDigit(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是数字</span></span><br><span class="line">        System.out.println(Character.isLetter(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是字母</span></span><br><span class="line">        System.out.println(Character.isUpperCase(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是大写</span></span><br><span class="line">        System.out.println(Character.isLowerCase(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是小写</span></span><br><span class="line">        System.out.println(Character.isWhitespace(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是空格</span></span><br><span class="line">        System.out.println(Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//转成大写</span></span><br><span class="line">        System.out.println(Character.toLowerCase(<span class="string">&#x27;A&#x27;</span>));<span class="comment">//转成小写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wrapper02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//false</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        System.out.println(i == j);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果i不在-128~127内，就new Integer()</span></span><br><span class="line"><span class="comment">        public static Integer valueOf(int i) &#123;</span></span><br><span class="line"><span class="comment">            if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span></span><br><span class="line"><span class="comment">                return IntegerCache.cache[i + (-IntegerCache.low)];</span></span><br><span class="line"><span class="comment">            return new Integer(i);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//true</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        System.out.println(m == n);</span><br><span class="line">        <span class="comment">//false</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        System.out.println(x == y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只要有基本数据类型，判断的是值是否相同</span></span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>两种创建 String 对象的区别</p><p>方式一:直接赋值String s = “Java”;</p><p>方式二:调用构造器String s2 = new String(“Java”);</p><p>1．方式一:先从常量池查看是否有”Java”数据空间，如果有，直接指向；如果没有则重新创建，然后指向。s最终指向的是常量池的空间地址。</p><p>2.方式二:先在堆中创建空间，里面维护了value属性，指向常量池的Java空间。如果常量池没有””Java””，重新创建，如果有，直接通过value指向。最终指向的是堆中的空间地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">String01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;study&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;study&quot;</span>);</span><br><span class="line">        System.out.println(a.equals(b));<span class="comment">//T</span></span><br><span class="line">        System.out.println(a==b);<span class="comment">//F</span></span><br><span class="line">        <span class="comment">//当调用intern方法时，如果池已经包含等于此String对象的字符串，则返回来自池的字符串。</span></span><br><span class="line">        <span class="comment">// 否则，此String对象将添加到池中，并返回对此String对象的引用。</span></span><br><span class="line">        <span class="comment">//b.intern()方法最终返回的是常量池的地址。</span></span><br><span class="line">        System.out.println(a==b.intern());<span class="comment">//T</span></span><br><span class="line">        System.out.println(b==b.intern());<span class="comment">//F</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">String01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;study&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;study&quot;</span>);</span><br><span class="line">        System.out.println(a.equals(b));<span class="comment">//T</span></span><br><span class="line">        System.out.println(a == b);<span class="comment">//F</span></span><br><span class="line">        <span class="comment">//当调用intern方法时，如果池已经包含等于此String对象的字符串，则返回来自池的字符串。</span></span><br><span class="line">        <span class="comment">// 否则，此String对象将添加到池中，并返回对此String对象的引用。</span></span><br><span class="line">        <span class="comment">//b.intern()方法最终返回的是常量池的地址。</span></span><br><span class="line">        System.out.println(a == b.intern());<span class="comment">//T</span></span><br><span class="line">        System.out.println(b == b.intern());<span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;good &quot;</span> + <span class="string">&quot;evening&quot;</span>; <span class="comment">//创建一个对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;haha&quot;</span>;</span><br><span class="line">        s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">        <span class="comment">// s3指向堆中对象(String) value[] -&gt;池中&quot;helloworld&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s1 + s2;<span class="comment">//一共有3个对象</span></span><br><span class="line">        <span class="comment">//String c1 = &quot;ab&quot;+&quot;cd&quot;;常量相加，看的是池</span></span><br><span class="line">        <span class="comment">//String c2 = a+b;变量相加，是在堆中</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Test01</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test01</span>();</span><br><span class="line">        ex.change(ex.str,ex.ch);</span><br><span class="line">        System.out.println(ex.str+<span class="string">&quot;and&quot;</span>); <span class="comment">//helloand</span></span><br><span class="line">        System.out.println(ex.ch);<span class="comment">//hava</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test01</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">char</span>[] ch = &#123;<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str,<span class="type">char</span>[] ch)</span>&#123;</span><br><span class="line">        str = <span class="string">&quot;java&quot;</span>;</span><br><span class="line">        System.out.println(str);<span class="comment">//java</span></span><br><span class="line">        ch[<span class="number">0</span>]=<span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207151030970.png" alt=""></p><h3 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207151104227.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. equals  比较内容是否相同，区分大小写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(str1.equals(str2));<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.equalsIgnoreCase 忽略大小写的判断内容是否相等</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;johN&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;john&quot;</span>.equalsIgnoreCase(username)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failure!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.length 获取字符的个数，字符串的长度</span></span><br><span class="line">        System.out.println(<span class="string">&quot;早上好&quot;</span>.length());</span><br><span class="line">        <span class="comment">// 4.indexOf 获取字符在字符串对象中第一次出现的索引，索引从0开始，如果找不到，返回-1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;wer@terwe@g&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> s1.indexOf(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">        System.out.println(index);<span class="comment">// 3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;weIndex=&quot;</span> + s1.indexOf(<span class="string">&quot;we&quot;</span>));<span class="comment">//0</span></span><br><span class="line">        <span class="comment">// 5.lastIndexOf 获取字符在字符串中最后一次出现的索引，索引从0开始，如果找不到，返回-1</span></span><br><span class="line">        s1 = <span class="string">&quot;wer@terwe@g@&quot;</span>;</span><br><span class="line">        index = s1.lastIndexOf(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">        System.out.println(index);<span class="comment">//11</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ter的位置=&quot;</span> + s1.lastIndexOf(<span class="string">&quot;ter&quot;</span>));<span class="comment">//4</span></span><br><span class="line">        <span class="comment">// 6.substring 截取指定范围的子串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hello,张三&quot;</span>;</span><br><span class="line">        <span class="comment">//下面name.substring(6) 从索引6开始截取后面所有的内容</span></span><br><span class="line">        System.out.println(name.substring(<span class="number">6</span>));<span class="comment">//截取后面的字符</span></span><br><span class="line">        <span class="comment">//name.substring(0,5)表示从索引0开始截取，截取到索引 5-1=4位置</span></span><br><span class="line">        System.out.println(name.substring(<span class="number">2</span>,<span class="number">5</span>));<span class="comment">//llo</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207151110711.png" alt=""></p><blockquote><p>由于replaceAll方法的第一个参数是一个正则表达式，而”.”在正则表达式中表示任何字符，所以会把前面字符串的所有字符都替换成”/“。如果想替换的只是”.”，要写成”\.”. </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">String03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.toUpperCase转换成大写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;heLLo&quot;</span>;</span><br><span class="line">        System.out.println(s.toUpperCase());<span class="comment">//HELLO</span></span><br><span class="line">        <span class="comment">// 2.toLowerCase</span></span><br><span class="line">        System.out.println(s.toLowerCase());<span class="comment">//hello</span></span><br><span class="line">        <span class="comment">// 3.concat拼接字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;宝玉&quot;</span>;</span><br><span class="line">        s1 = s1.concat(<span class="string">&quot;林黛玉&quot;</span>).concat(<span class="string">&quot;薛宝钗&quot;</span>).concat(<span class="string">&quot;together&quot;</span>);</span><br><span class="line">        System.out.println(s1);<span class="comment">//宝玉林黛玉薛宝钗together</span></span><br><span class="line">        <span class="comment">// 4.replace 替换字符串中的字符</span></span><br><span class="line">        s1 = <span class="string">&quot;宝玉 and 林黛玉 林黛玉 林黛玉&quot;</span>;</span><br><span class="line">        <span class="comment">//在s1中，将 所有的 林黛玉 替换成薛宝钗</span></span><br><span class="line">        <span class="comment">// s1.replace() 方法执行后，返回的结果才是替换过的.</span></span><br><span class="line">        <span class="comment">// 注意对 s1没有任何影响</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s11</span> <span class="operator">=</span> s1.replace(<span class="string">&quot;宝玉&quot;</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        System.out.println(s1);<span class="comment">//宝玉 and 林黛玉 林黛玉 林黛玉</span></span><br><span class="line">        System.out.println(s11);<span class="comment">//jack and 林黛玉 林黛玉 林黛玉</span></span><br><span class="line">        <span class="comment">// 5.split 分割字符串, 对于某些分割字符，我们需要 转义比如 | \\等</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">poem</span> <span class="operator">=</span> <span class="string">&quot;锄禾日当午,汗滴禾下土,谁知盘中餐,粒粒皆辛苦&quot;</span>;</span><br><span class="line">        <span class="comment">// 1. 以 , 为标准对 poem 进行分割 , 返回一个数组</span></span><br><span class="line">        <span class="comment">// 2. 在对字符串进行分割时，如果有特殊字符，需要加入 转义符 \</span></span><br><span class="line">        String[] split = poem.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        poem = <span class="string">&quot;E:\\aaa\\bbb&quot;</span>;</span><br><span class="line">        split = poem.split(<span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==分割后内容===&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">            System.out.println(split[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.toCharArray 转换成字符数组</span></span><br><span class="line">        s = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">            System.out.println(chs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 7.compareTo 比较两个字符串的大小，如果前者大，</span></span><br><span class="line">        <span class="comment">// 则返回正数，后者大，则返回负数，如果相等，返回0</span></span><br><span class="line">        <span class="comment">// (1) 如果长度相同，并且每个字符也相同，就返回 0</span></span><br><span class="line">        <span class="comment">// (2) 如果长度相同或者不相同，但是在进行比较时，可以区分大小</span></span><br><span class="line">        <span class="comment">//     就返回 if (c1 != c2) &#123;</span></span><br><span class="line">        <span class="comment">//                return c1 - c2;</span></span><br><span class="line">        <span class="comment">//            &#125;</span></span><br><span class="line">        <span class="comment">// (3) 如果前面的部分都相同，就返回 str1.len - str2.len</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;jcck&quot;</span>;<span class="comment">// = &quot;jac&quot;  // len =3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;<span class="comment">// len = 4</span></span><br><span class="line">        System.out.println(a.compareTo(b)); <span class="comment">// 返回值是 &#x27;c&#x27; - &#x27;a&#x27; = 2的值</span></span><br><span class="line">        <span class="comment">// 8.format 格式字符串</span></span><br><span class="line">        <span class="comment">/* 占位符有:</span></span><br><span class="line"><span class="comment">         * %s 字符串 %c 字符 %d 整型 %.2f 浮点型</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;john&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">56.857</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">        <span class="comment">//将所有的信息都拼接在一个字符串.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;我的姓名是&quot;</span> + name + <span class="string">&quot;年龄是&quot;</span> + age + <span class="string">&quot;,成绩是&quot;</span> + score + <span class="string">&quot;性别是&quot;</span> + gender + <span class="string">&quot;。希望大家喜欢我！&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(info);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. %s , %d , %.2f %c 称为占位符</span></span><br><span class="line">        <span class="comment">//2. 这些占位符由后面变量来替换</span></span><br><span class="line">        <span class="comment">//3. %s 表示后面由 字符串来替换</span></span><br><span class="line">        <span class="comment">//4. %d 是整数来替换</span></span><br><span class="line">        <span class="comment">//5. %.2f 表示使用小数来替换，替换后，只会保留小数点两位, 并且进行四舍五入的处理</span></span><br><span class="line">        <span class="comment">//6. %c 使用char 类型来替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">formatStr</span> <span class="operator">=</span> <span class="string">&quot;我的姓名是%s 年龄是%d，成绩是%.2f 性别是%c.希望大家喜欢我！&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">info2</span> <span class="operator">=</span> String.format(formatStr, name, age, score, gender);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;info2=&quot;</span> + info2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h3><p>1) String保存的是字符串常量，里面的值不能更改，每次String类的更新实际上就是更改地址，效率较低//private final char valuell;<br>2) StringBuffer保存的是字符串变量，里面的值可以更改，每次StringBuffer的更新实际上可以更新内容，不用每次更新地址，效率较高//char[] value;//这个放在堆.</p><p> StringBuffer和String的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringAndStringBuffer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//看 String——&gt;StringBuffer</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello tom&quot;</span>;</span><br><span class="line"><span class="comment">//方式 1 使用构造器</span></span><br><span class="line"><span class="comment">//注意： 返回的才是 StringBuffer 对象，对 str 本身没有影响</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str);</span><br><span class="line"><span class="comment">//方式 2 使用的是 append 方法</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        stringBuffer1 = stringBuffer1.append(str);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//看看 StringBuffer -&gt;String</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Java学习&quot;</span>);</span><br><span class="line"><span class="comment">//方式 1 使用 StringBuffer 提供的 toString 方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stringBuffer3.toString();</span><br><span class="line"><span class="comment">//方式 2: 使用构造器来搞定</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(stringBuffer3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><p>1)一个可变的字符序列。此类提供一个与StringBuffer 兼容的API，但不保证同步(StringBuilder不是线程安全)。该类被设计用作 StringBuffer的一个简易替换，用在字符串缓冲区被单个线程使用的时候。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer要快。</p><p>2)在 StringBuilder 上的主要操作是append和 insert方法，可重载这些方法，以接受任意类型的数据。</p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>1) StringBuilder和 StringBuffer非常类似，均代表可变的字符序列，而且方法也一样<br>2) String:不可变字符序列,效率低,但是复用率高。<br>3) StringBuffer:可变字符序列、效率较高(增删)、线程安全,看源码<br>3) StringBuilder:可变字符序列、效率最高、线程不安全<br>5) String使用注意说明:<br>string s=”a”;1/创建了一个字符串<br>s += “b”;//实际上原来的”a”字符串对象已经丢弃了，现在又产生了一个字符串s+”b”(也就是”ab”)。如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能=&gt;结论:如果我们对String 做大量修改,不要使用String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompareSSS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;<span class="comment">//StringBuffer 拼接 20000次</span></span><br><span class="line">            buffer.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;StringBuffer的执行时间：&quot;</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;<span class="comment">//StringBuilder 拼接 20000次</span></span><br><span class="line">            builder.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;StringBuilder的执行时间：&quot;</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;<span class="comment">//String 拼接 20000</span></span><br><span class="line">            text = text + i;</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;String的执行时间：&quot;</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的原则，结论:<br>1．如果字符串存在大量的修改操作，一般使用StringBuffer 或StringBuilder</p><p>2．如果字符串存在大量的修改操作，并在单线程的情况，使用 StringBuilder</p><p>3．如果字符串存在大量的修改操作，并在多线程的情况，使用 StringBuffer</p><p>4．如果我们字符串很少修改，被多个对象引用，使用String，比如配置信息等StringBuilder的方法使用和StringBuffer 一样，不再说.</p><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p>Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//看看 Math 常用的方法(静态方法)</span></span><br><span class="line"><span class="comment">//1.abs 绝对值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">abs</span> <span class="operator">=</span> Math.abs(-<span class="number">9</span>);</span><br><span class="line">        System.out.println(abs);<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.pow 求幂</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">pow</span> <span class="operator">=</span> Math.pow(<span class="number">2</span>, <span class="number">4</span>);<span class="comment">//2 的 4 次方</span></span><br><span class="line">        System.out.println(pow);<span class="comment">//16</span></span><br><span class="line"><span class="comment">//3.ceil 向上取整,返回&gt;=该参数的最小整数(转成 double);</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">ceil</span> <span class="operator">=</span> Math.ceil(<span class="number">3.9</span>);</span><br><span class="line">        System.out.println(ceil);<span class="comment">//4.0</span></span><br><span class="line"><span class="comment">//4.floor 向下取整，返回&lt;=该参数的最大整数(转成 double)</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">floor</span> <span class="operator">=</span> Math.floor(<span class="number">4.001</span>);</span><br><span class="line">        System.out.println(floor);<span class="comment">//4.0</span></span><br><span class="line"><span class="comment">//5.round 四舍五入 Math.floor(该参数+0.5)</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">round</span> <span class="operator">=</span> Math.round(<span class="number">5.51</span>);</span><br><span class="line">        System.out.println(round);<span class="comment">//6</span></span><br><span class="line"><span class="comment">//6.sqrt 求开方</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">sqrt</span> <span class="operator">=</span> Math.sqrt(<span class="number">9.0</span>);</span><br><span class="line">        System.out.println(sqrt);<span class="comment">//3.0</span></span><br><span class="line"><span class="comment">//7.random 求随机数</span></span><br><span class="line"><span class="comment">// random 返回的是 0 &lt;= x &lt; 1 之间的一个随机小数</span></span><br><span class="line"><span class="comment">// 思考：请写出获取 a-b 之间的一个随机整数,a,b 均为整数 ，比如 a = 2, b=7</span></span><br><span class="line"><span class="comment">// 即返回一个数 x 2 &lt;= x &lt;= 7</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println((<span class="type">int</span>) (<span class="number">2</span> + Math.random() * (<span class="number">7</span> - <span class="number">2</span> + <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//max , min 返回最大值和最小值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(<span class="number">1</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Math.max(<span class="number">45</span>, <span class="number">90</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;min=&quot;</span> + min);</span><br><span class="line">        System.out.println(<span class="string">&quot;max=&quot;</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arrays01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.toString   遍历数组</span></span><br><span class="line">        Integer[] integers = &#123;<span class="number">1</span>, <span class="number">20</span>, <span class="number">90</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(integers));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 sort排序方法的使用</span></span><br><span class="line">        Integer arr[] = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">89</span>&#125;;</span><br><span class="line">        <span class="comment">//默认排序方法</span></span><br><span class="line">        <span class="comment">//从小到大</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制排序方法</span></span><br><span class="line">        <span class="comment">//实现从大到小</span></span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 binarySearch 通过二分搜索法查找，要求从小到大有序</span></span><br><span class="line">        <span class="comment">//如果数组中不存在该元素，就返回 return -(low +1);  //low 为该元素应该在的位置</span></span><br><span class="line">        Integer[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">90</span>, <span class="number">123</span>, <span class="number">567</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr2, <span class="number">88</span>);<span class="comment">//</span></span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 copyOf 数组元素的复制</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 从 arr 数组中，拷贝 arr.length 个元素到 newArr 数组中</span></span><br><span class="line">        <span class="comment">//2. 如果拷贝的长度 &gt; arr.length 就在新数组的后面 增加 null</span></span><br><span class="line">        <span class="comment">//3. 如果拷贝长度 &lt; 0 就抛出异常 NegativeArraySizeException</span></span><br><span class="line">        <span class="comment">//4. 该方法的底层使用的是 System.arraycopy()</span></span><br><span class="line">        Integer[] newArr = Arrays.copyOf(arr2, arr2.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;==拷贝执行完毕后==&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(newArr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5 fill 数组元素的填充</span></span><br><span class="line">        Integer[] num = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        <span class="comment">//使用 99 去填充 num 数组，可以理解成是替换原理的元素</span></span><br><span class="line">        Arrays.fill(num, <span class="number">99</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==num 数组填充后==&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(num));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6 equals 比较两个数组元素内容是否完全一致</span></span><br><span class="line">        Integer[] arr3 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">90</span>, <span class="number">123</span>&#125;;</span><br><span class="line">        <span class="comment">//1. 如果 arr 和 arr2 数组的元素一样，则方法 true;</span></span><br><span class="line">        <span class="comment">//2. 如果不是完全一样，就返回 false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">equals</span> <span class="operator">=</span> Arrays.equals(arr, arr3);</span><br><span class="line">        System.out.println(<span class="string">&quot;equals=&quot;</span> + equals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7 asList 将一组值，转换成 list</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. asList 方法，会将 (2,3,4,5,6,1)数据转成一个 List 集合</span></span><br><span class="line">        <span class="comment">//2. 返回的 asList 编译类型 List(接口)</span></span><br><span class="line">        <span class="comment">//3. asList 运行类型 java.util.Arrays#ArrayList, 是 Arrays 类的</span></span><br><span class="line">        <span class="comment">// 静态内部类 private static class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span></span><br><span class="line">        <span class="comment">// implements RandomAccess, java.io.Serializable</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">asList</span> <span class="operator">=</span> Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;asList=&quot;</span> + asList);</span><br><span class="line">        System.out.println(<span class="string">&quot;asList 的运行类型&quot;</span> + asList.getClass());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> commonClasses.arrays_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Book[] books = <span class="keyword">new</span> <span class="title class_">Book</span>[<span class="number">4</span>];</span><br><span class="line">        books[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;红楼梦&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        books[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;金瓶梅新&quot;</span>, <span class="number">90</span>);</span><br><span class="line">        books[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;青年文摘 20 年&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        books[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;java 从入门到放弃~&quot;</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按价格从低到高</span></span><br><span class="line"><span class="comment">//        Arrays.sort(books, new Comparator&lt;Book&gt;()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(Book o1, Book o2) &#123;</span></span><br><span class="line"><span class="comment">//                double priceCVal = o1.getPrice() -o2.getPrice();</span></span><br><span class="line"><span class="comment">//                if(priceCVal &gt;0)&#123;</span></span><br><span class="line"><span class="comment">//                    return 1;</span></span><br><span class="line"><span class="comment">//                &#125;else if(priceCVal &lt; 0)&#123;</span></span><br><span class="line"><span class="comment">//                    return -1;</span></span><br><span class="line"><span class="comment">//                &#125;else&#123;</span></span><br><span class="line"><span class="comment">//                    return 0;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"><span class="comment">//        System.out.println(Arrays.toString(books));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//按书名长度从长到短</span></span><br><span class="line">        Arrays.sort(books, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Book&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Book o1, Book o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2.getName().length() - o1.getName().length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(books));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;name = &quot;</span> + name + <span class="string">&quot;, price = &quot;</span> + price + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><p>1)exit 退出当前程序</p><p>2)arraycopy:复制数组元素，比较适合底层调用，一般使用Arrays.copyOf完成复制数组.<br>        int[] src={1,2,33};<br>        int[] dest = new int[3];<br>        System.arraycopy(src,0, dest, 0.3);</p><p>3)currentTimeMillens:返回当前时间距离1970-1-1的毫秒数</p><p>4)gc:运行垃圾回收机制System.gco;</p><h2 id="大数据类"><a href="#大数据类" class="headerlink" title="大数据类"></a>大数据类</h2><h3 id="BigInteger类"><a href="#BigInteger类" class="headerlink" title="BigInteger类"></a>BigInteger类</h3><p>Biglnteger适合保存比较大的整型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigInteger_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当我们编程中，需要处理很大的整数，long 不够用</span></span><br><span class="line">        <span class="comment">//可以使用BigInteger的类来搞定</span></span><br><span class="line"><span class="comment">//        long l = 23788888899999999999999999999l;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;l=&quot; + l);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;23788888899999999999999999999&quot;</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigInteger2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;10099999999999999999999999999999999999999999999999999999999999999999999999999999999&quot;</span>);</span><br><span class="line">        System.out.println(bigInteger);</span><br><span class="line">        <span class="comment">//1. 在对 BigInteger 进行加减乘除的时候，需要使用对应的方法，不能直接进行 + - * /</span></span><br><span class="line">        <span class="comment">//2. 可以创建一个 要操作的 BigInteger 然后进行相应操作</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">add</span> <span class="operator">=</span> bigInteger.add(bigInteger2);</span><br><span class="line">        System.out.println(add);<span class="comment">//加</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">subtract</span> <span class="operator">=</span> bigInteger.subtract(bigInteger2);</span><br><span class="line">        System.out.println(subtract);<span class="comment">//减</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">multiply</span> <span class="operator">=</span> bigInteger.multiply(bigInteger2);</span><br><span class="line">        System.out.println(multiply);<span class="comment">//乘</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">divide</span> <span class="operator">=</span> bigInteger.divide(bigInteger2);</span><br><span class="line">        System.out.println(divide);<span class="comment">//除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><p>BigDecimal适合保存精度更高的浮点型(小数)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimal_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//当我们需要保存一个精度很高的数时，double 不够用</span></span><br><span class="line">        <span class="comment">//可以是 BigDecimal</span></span><br><span class="line">        <span class="comment">// double d = 1999.11111111111999999999999977788d;</span></span><br><span class="line">        <span class="comment">// System.out.println(d);</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bigDecimal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1999.11&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bigDecimal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        System.out.println(bigDecimal);</span><br><span class="line">        <span class="comment">//1. 如果对 BigDecimal 进行运算，比如加减乘除，需要使用对应的方法</span></span><br><span class="line">        <span class="comment">//2. 创建一个需要操作的 BigDecimal 然后调用相应的方法即可</span></span><br><span class="line">        System.out.println(bigDecimal.add(bigDecimal2));</span><br><span class="line">        System.out.println(bigDecimal.subtract(bigDecimal2));</span><br><span class="line">        System.out.println(bigDecimal.multiply(bigDecimal2));</span><br><span class="line">        <span class="comment">//System.out.println(bigDecimal.divide(bigDecimal2));//可能抛出异常 ArithmeticException</span></span><br><span class="line">        <span class="comment">//在调用 divide 方法时，指定精度即可. BigDecimal.ROUND_CEILING</span></span><br><span class="line">        <span class="comment">//如果有无限循环小数，就会保留 分子 的精度</span></span><br><span class="line">        System.out.println(bigDecimal.divide(bigDecimal2, BigDecimal.ROUND_CEILING));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h2><h3 id="第一代日期类"><a href="#第一代日期类" class="headerlink" title="第一代日期类"></a>第一代日期类</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207151816780.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Date01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//1. 获取当前系统时间</span></span><br><span class="line">        <span class="comment">//2. 这里的Date 类是在java.util包</span></span><br><span class="line">        <span class="comment">//3. 默认输出的日期格式是国外的方式, 因此通常需要对格式进行转换</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//获取当前系统时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前日期=&quot;</span> + d1);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">9234567</span>); <span class="comment">//通过指定毫秒数得到时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d2=&quot;</span> + d2); <span class="comment">//获取某个时间对应的毫秒数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建 SimpleDateFormat对象，可以指定相应的格式</span></span><br><span class="line">        <span class="comment">//2. 这里的格式使用的字母是规定好，不能乱写</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 hh:mm:ss E&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(d1); <span class="comment">// format:将日期转换成指定格式的字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前日期=&quot;</span> + format);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 可以把一个格式化的String 转成对应的 Date</span></span><br><span class="line">        <span class="comment">//2. 得到Date 仍然在输出时，还是按照国外的形式，如果希望指定格式输出，需要转换</span></span><br><span class="line">        <span class="comment">//3. 在把String -&gt; Date ， 使用的 sdf 格式需要和你给的String的格式一样，否则会抛出转换异常</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1996年01月01日 10:20:30 星期一&quot;</span>;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sdf.parse(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;parse=&quot;</span> + sdf.format(parse));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二代日期类"><a href="#第二代日期类" class="headerlink" title="第二代日期类"></a>第二代日期类</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207151940303.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calender_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. Calendar 是一个抽象类， 并且构造器是 private</span></span><br><span class="line">        <span class="comment">//2. 可以通过 getInstance() 来获取实例</span></span><br><span class="line">        <span class="comment">//3. 提供大量的方法和字段提供给程序员</span></span><br><span class="line">        <span class="comment">//4. Calendar 没有提供对应的格式化的类，因此需要程序员自己组合来输出(灵活)</span></span><br><span class="line">        <span class="comment">//5. 如果我们需要按照 24 小时进制来获取时间， Calendar.HOUR ==改成=&gt; Calendar.HOUR_OF_DAY</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance(); <span class="comment">//创建日历类对象//比较简单，自由</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c=&quot;</span> + c);</span><br><span class="line">        <span class="comment">//2.获取日历对象的某个日历字段</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年：&quot;</span> + c.get(Calendar.YEAR));</span><br><span class="line">        <span class="comment">// 这里为什么要 + 1, 因为 Calendar 返回月时候，是按照 0 开始编号</span></span><br><span class="line">        System.out.println(<span class="string">&quot;月：&quot;</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;日：&quot;</span> + c.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">        System.out.println(<span class="string">&quot;小时：&quot;</span> + c.get(Calendar.HOUR));</span><br><span class="line">        System.out.println(<span class="string">&quot;分钟：&quot;</span> + c.get(Calendar.MINUTE));</span><br><span class="line">        System.out.println(<span class="string">&quot;秒：&quot;</span> + c.get(Calendar.SECOND));</span><br><span class="line">        <span class="comment">//Calender 没有专门的格式化方法，所以需要程序员自己来组合显示</span></span><br><span class="line">        System.out.println(c.get(Calendar.YEAR) + <span class="string">&quot;-&quot;</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">&quot;-&quot;</span> +</span><br><span class="line">                c.get(Calendar.DAY_OF_MONTH) +</span><br><span class="line">                <span class="string">&quot; &quot;</span> + c.get(Calendar.HOUR_OF_DAY) + <span class="string">&quot;:&quot;</span> + c.get(Calendar.MINUTE) + <span class="string">&quot;:&quot;</span> + c.get(Calendar.SECOND) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三代日期类"><a href="#第三代日期类" class="headerlink" title="第三代日期类"></a>第三代日期类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDate_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//第三代日期类</span></span><br><span class="line">        <span class="comment">//1. 使用 now() 返回表示当前日期时间的 对象</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now(); <span class="comment">//LocalDate.now();//LocalTime.now()</span></span><br><span class="line">        System.out.println(ldt);</span><br><span class="line">        <span class="comment">//2. 使用 DateTimeFormatter 对象来进行格式化</span></span><br><span class="line">        <span class="comment">// 创建 DateTimeFormatter 对象</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dateTimeFormatter.format(ldt);</span><br><span class="line">        System.out.println(<span class="string">&quot;格式化的日期=&quot;</span> + format);</span><br><span class="line">        System.out.println(<span class="string">&quot;年=&quot;</span> + ldt.getYear());</span><br><span class="line">        System.out.println(<span class="string">&quot;月=&quot;</span> + ldt.getMonth());</span><br><span class="line">        System.out.println(<span class="string">&quot;月=&quot;</span> + ldt.getMonthValue());</span><br><span class="line">        System.out.println(<span class="string">&quot;日=&quot;</span> + ldt.getDayOfMonth());</span><br><span class="line">        System.out.println(<span class="string">&quot;时=&quot;</span> + ldt.getHour());</span><br><span class="line">        System.out.println(<span class="string">&quot;分=&quot;</span> + ldt.getMinute());</span><br><span class="line">        System.out.println(<span class="string">&quot;秒=&quot;</span> + ldt.getSecond());</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now(); <span class="comment">//可以获取年月日</span></span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">now2</span> <span class="operator">=</span> LocalTime.now();<span class="comment">//获取到时分秒</span></span><br><span class="line">        <span class="comment">//提供 plus 和 minus 方法可以对当前时间进行加或者减</span></span><br><span class="line">        <span class="comment">//看看 890 天后，是什么时候 把 年月日-时分秒</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> ldt.plusDays(<span class="number">890</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;890 天后=&quot;</span> + dateTimeFormatter.format(localDateTime));</span><br><span class="line">        <span class="comment">//看看在 3456 分钟前是什么时候，把 年月日-时分秒输出</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> ldt.minusMinutes(<span class="number">3456</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3456 分钟前 日期=&quot;</span> + dateTimeFormatter.format(localDateTime2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> commonClasses.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework01</span> &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (1) 将字符串中指定部分进行反转。比如将&quot;abcdef&quot;反转为&quot;aedcbf&quot;</span></span><br><span class="line"><span class="comment">     * (2) 编写方法 public static String reverse(String  str, int start , int end)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;===交换前===&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            str = reverse(str, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===交换后===&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="comment">//对输入的参数做一个验证</span></span><br><span class="line">        <span class="comment">//(1) 写出正确的情况</span></span><br><span class="line">        <span class="comment">//(2) 然后取反即可</span></span><br><span class="line">        <span class="keyword">if</span> (!(str != <span class="literal">null</span> &amp;&amp; start &gt;= <span class="number">0</span> &amp;&amp; end &gt; start &amp;&amp; end &lt; str.length())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;参数不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] ch = str.toCharArray();</span><br><span class="line">        <span class="type">char</span> temp;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            temp = ch[start];</span><br><span class="line">            ch[start] = ch[end];</span><br><span class="line">            ch[end] = temp;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework02</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入用户名、密码、邮箱，如果信息录入正确，则提示注册成功，否则生成异常对象</span></span><br><span class="line"><span class="comment">     * 要求：</span></span><br><span class="line"><span class="comment">     * (1) 用户名长度为2或3或4</span></span><br><span class="line"><span class="comment">     * (2) 密码的长度为6，要求全是数字  isDigital</span></span><br><span class="line"><span class="comment">     * (3) 邮箱中包含@和.   并且@在.的前面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userRegister(<span class="string">&quot;fzy&quot;</span>, <span class="string">&quot;789565&quot;</span>, <span class="string">&quot;154@qq.com&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;注册失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">userRegister</span><span class="params">(String name, String pwd, String email)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length() &lt; <span class="number">2</span> || name.length() &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名长度必须为2-4&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(pwd.length() == <span class="number">6</span> &amp;&amp; isDigital(pwd))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;密码要求长度为6,且全为数字&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//判断是否全是数字</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(email.indexOf(<span class="string">&#x27;@&#x27;</span>) &gt; <span class="number">0</span> &amp;&amp; email.indexOf(<span class="string">&#x27;@&#x27;</span>) &lt; email.indexOf(<span class="string">&#x27;.&#x27;</span>))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;邮箱格式不正确，&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDigital</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ch = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ch.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch[i] &lt; <span class="string">&#x27;0&#x27;</span> || ch[i] &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编写方法: 完成输出格式要求的字符串</span></span><br><span class="line"><span class="comment">     * 编写java程序，输入形式为： Feng zhui Yu的人名，以Yu,Feng .Z的形式打印</span></span><br><span class="line"><span class="comment">     * 出来 。其中.S是中间单词的首字母</span></span><br><span class="line"><span class="comment">     * 思路分析</span></span><br><span class="line"><span class="comment">     * (1) 对输入的字符串进行 分割split(&quot; &quot;)</span></span><br><span class="line"><span class="comment">     * (2) 对得到的String[] 进行格式化String.format（）</span></span><br><span class="line"><span class="comment">     * (3) 对输入的字符串进行校验即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printName(<span class="string">&quot;Feng zhui Yu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;str is null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] strArray = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (strArray.length != <span class="number">3</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;格式不正确&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">infoStr</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s,%s .%c&quot;</span>, strArray[<span class="number">2</span>], strArray[<span class="number">0</span>], strArray[<span class="number">1</span>].toUpperCase().charAt(<span class="number">0</span>));</span><br><span class="line">        System.out.println(infoStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcHsp U 1234&quot;</span>;</span><br><span class="line">        countStr(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入字符串，判断里面有多少个大写字母，多少个小写字母，多少个数字</span></span><br><span class="line"><span class="comment">     * 思路分析</span></span><br><span class="line"><span class="comment">     * (1) 遍历字符串，如果 char 在 &#x27;0&#x27;~&#x27;9&#x27; 就是一个数字</span></span><br><span class="line"><span class="comment">     * (2) 如果 char 在 &#x27;a&#x27;~&#x27;z&#x27; 就是一个小写字母</span></span><br><span class="line"><span class="comment">     * (3) 如果 char 在 &#x27;A&#x27;~&#x27;Z&#x27; 就是一个大写字母</span></span><br><span class="line"><span class="comment">     * (4) 使用三个变量来记录 统计结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countStr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入不能为 null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">strLen</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">numCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lowerCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">upperCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">otherCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strLen; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                numCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(str.charAt(i) &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                lowerCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(str.charAt(i) &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">                upperCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                otherCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;数字有 &quot;</span> + numCount);</span><br><span class="line">        System.out.println(<span class="string">&quot;小写字母有 &quot;</span> + lowerCount);</span><br><span class="line">        System.out.println(<span class="string">&quot;大写字母有 &quot;</span> + upperCount);</span><br><span class="line">        System.out.println(<span class="string">&quot;其他字符有 &quot;</span> + otherCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>单列集合</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207161333516.png" alt=""></p><p>双列集合</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207161334617.png" alt=""></p><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><p>public interface Collection <E> extends lterable <E> </p><p>1)collection实现子类可以存放多个元素，每个元素可以是Object</p><p>2)有些Collection的实现类，可以存放重复的元素，有些不可以</p><p>3)有些Collection的实现类，有些是有序的(List)，有些不是有序(Set)</p><p>4)Collection接口没有直接的实现子类,是通过它的子接口Set 和 List来实现的</p><ul><li>常用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">//        add:添加单个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list.add(<span class="number">10</span>);<span class="comment">//list.add(new Integer(10))</span></span><br><span class="line">        list.add(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        remove:删除指定元素</span></span><br><span class="line">        <span class="comment">//list.remove(0);//删除第一个元素</span></span><br><span class="line">        list.remove(<span class="literal">true</span>);<span class="comment">//指定删除某个元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        contains:查找元素是否存在</span></span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;jack&quot;</span>));<span class="comment">//T</span></span><br><span class="line"><span class="comment">//        size:获取元素个数</span></span><br><span class="line">        System.out.println(list.size());<span class="comment">//2</span></span><br><span class="line"><span class="comment">//        isEmpty:判断是否为空</span></span><br><span class="line">        System.out.println(list.isEmpty());<span class="comment">//F</span></span><br><span class="line"><span class="comment">//        clear:清空</span></span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        addAll:添加多个元素</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        list.addAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        containsAll:查找多个元素是否都存在</span></span><br><span class="line">        System.out.println(list.containsAll(list2));<span class="comment">//T</span></span><br><span class="line"><span class="comment">//        removeAll：删除多个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;聊斋&quot;</span>);</span><br><span class="line">        list.removeAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);<span class="comment">//[聊斋]</span></span><br><span class="line"><span class="comment">//        说明：以ArrayList实现类来演示.</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>遍历元素方式</li></ul><p>1）Iterator迭代器</p><p>2）for循环增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小黑&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;大黄&quot;</span>, <span class="number">100</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;大壮&quot;</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Iterator&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用增强for&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Object dog : list) &#123;</span><br><span class="line">            System.out.println(dog);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 3 个 Dog &#123;name, age&#125; 对象，放入到 ArrayList 中，赋给 List 引用</span></span><br><span class="line"><span class="comment"> * 用迭代器和增强 for 循环两种方式来遍历</span></span><br><span class="line"><span class="comment"> * 重写 Dog 的 toString 方法， 输出 name 和 age</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><p>List 接口是 Collection接口的子接口<br>1) List集合类中元素有序(即添加顺序和取出顺序一致)、且可重复<br>2) List集合中的每个元素都有其对应的顺序索引，即支持索引。<br>1) List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根<br>据序号存取容器中的元素。</p><ul><li><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;贾宝玉&quot;</span>);</span><br><span class="line">        <span class="comment">// void add(int index, Object ele):在 index 位置插入 ele 元素</span></span><br><span class="line">        <span class="comment">//在 index = 1 的位置插入一个对象</span></span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        <span class="comment">// boolean addAll(int index, Collection eles):从 index 位置开始将 eles 中的所有元素添加进来</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.addAll(<span class="number">1</span>, list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        <span class="comment">// Object get(int index):获取指定 index 位置的元素</span></span><br><span class="line">        <span class="comment">// int indexOf(Object obj):返回 obj 在集合中首次出现的位置</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">&quot;tom&quot;</span>));<span class="comment">//2</span></span><br><span class="line">        <span class="comment">// int lastIndexOf(Object obj):返回 obj 在当前集合中末次出现的位置</span></span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        <span class="comment">// Object remove(int index):移除指定 index 位置的元素，并返回此元素</span></span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        <span class="comment">// Object set(int index, Object ele):设置指定 index 位置的元素为 ele , 相当于是替换. list.set(1, &quot;玛丽&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        <span class="comment">// List subList(int fromIndex, int toIndex):返回从 fromIndex 到 toIndex 位置的子集合</span></span><br><span class="line">        <span class="comment">// 注意返回的子集合 fromIndex &lt;= subList &lt; toIndex</span></span><br><span class="line">        <span class="comment">//subSet和subList都是返回元数据结构的一个视图.</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">returnlist</span> <span class="operator">=</span> list.subList(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;returnlist=&quot;</span> + returnlist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>1)ArrayList中维护了一个Object类型的数组elementData<br>transient Object[ elementData;//transient表示瞬间，短暂的，表示该属性不会被序列化。</p><p>2)当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第1次添加，则扩容elementData为10，如需要再次扩容，则扩容elementData为1.5倍。</p><p>3)如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容，<br>则直接扩容elementData为1.5倍。</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>1) Vector类的定义说明<br>public class vector<E>extends AbstractList<E><br>implements List<E>，RandomAccess,cloneable，Serializable<br>2) Vector底层也是一个对象数组，protected objectl[]elementData;<br>3) Vector是线程同步的，即线程安全，Vector类的操作方法带有synchronizedpublic synchronized E get(int index){<br>if (index &gt;= elementCount)<br>throw new ArraylndexOutOfBoundsException(index);return elementData(index);<br>}<br>4) 在开发中,需要线程同步安全时,考虑使用Vector</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207161509127.png" alt=""></p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>1)LinkedList底层实现了双向链表和双端队列特点</p><p>2)可以添加任意元素(元素可以重复)，包括null</p><p>3)线程不安全,没有实现同步</p><ul><li>LinkedList的底层操作机制</li></ul><p>1)LinkedList底层维护了一个双向链表.</p><p>2)LinkedList中维护了两个属性first和last分别指向首节点和尾节点</p><p>3)每个节点(Node对象)，里面又维护了prev、next、item三个属性，其中通过prev指向前一个,通过next指向后一个节点。最终实现双向链表</p><p>4)所以LinkedList的元素的添加和删除，不是通过数组完成的，相对来说效率较高。</p><h2 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h2><p>同Collection的遍历方式一样，因为Set接口是Collection接口的子接口。</p><p>1.可以使用迭代器</p><p>2.增强for</p><p>3.不能使用索引的方式来获取</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>1）HashSet实现了Set接口</p><p>2）HashSet实际上是HashMap</p><p>3）可以存放null值，但是只能有一个null</p><p>4）HashSet不保证元素是有序的,取决于hash后，再确定索引的结果.(即，不保证存放元素的顺序和取出顺序一致)</p><p>5)不能有重复元泰/对象</p><ul><li>分析HashSet的添加元素底层是如何实现(hash()+equals())</li></ul><ol><li>HashSet底层是 HashMap</li><li>添加一个元素时，先得到hash值-会转成-&gt;索引值</li><li>找到存储数据表table，看这个索引位置是否已经存放的有元素，如果没有，直接加入<br>。如果有，调用equals比较，如果相同，就放弃添加,如果不相同，则添加到最后</li><li>在Java8中，如果一条链表的元素个数到达TREEIFY_THRESHOLD(就认是8)，并且table的大小&gt;=MIN TREEIFY CAPACITY(默认64)。就会进行树化(红黑树)</li></ol><ul><li>扩容</li></ul><ol><li>HashSet底层是HashMap,第一次添加时,table数组扩容到16，临界值(threshold)是1加载因子(loadFactor)是0.75=12</li><li>如果table数组使用到了临界值12,就会扩容到16<em>2=32,新的临界值就是32\</em>0.75 =24,依次类推</li><li>在Java8中,如果一条链表的元素个数到达TREEIFY_THRESHOLD(默认是8).并且table的大小&gt;=MIN TREEIFY CAPACITY(默认64).就会进行树化(红黑树)，否则仍然采用数组扩容机制</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">12000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">12000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)));<span class="comment">//没有添加</span></span><br><span class="line"></span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">8000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)));<span class="comment">//没有添加</span></span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;bob&quot;</span>, <span class="number">12000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">12000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1999</span>, <span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(hs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个Employee类,该类包含:private成员属性name,sal,birthday(MyDate类型)，其中 birthday 为 MyDate类型(属性包括: year, month, day),要求;</span></span><br><span class="line"><span class="comment">1.创建Employee 放入HashSet中</span></span><br><span class="line"><span class="comment">2.当name和birthday的值相同时，认为是相同员工,不能添加到HashSet集合中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">    MyDate birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> salary, MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(name, employee.name) &amp;&amp; Objects.equals(birthday, employee.birthday);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, birthday);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyDate <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\nEmployee&#123;name = &quot;</span> + name + <span class="string">&quot;, salary = &quot;</span> + salary + <span class="string">&quot;, birthday = &quot;</span> + birthday + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDate</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MyDate</span> <span class="variable">myDate</span> <span class="operator">=</span> (MyDate) o;</span><br><span class="line">        <span class="type">return</span> <span class="variable">year</span> <span class="operator">=</span>= myDate.year &amp;&amp; month == myDate.month &amp;&amp; day == myDate.day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(year, month, day);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>1) LinkedHashSet是 HashSet的子类<br>2) LinkedHashSet底层是一个 LinkedHashMap，底层维护了一个数组+双向链表<br>3) LinkedHashSet根据元素的 hashCode值来决定元素的存储位置,同时使用链表维护元素的次序(图)，这使得元素看起来是以插入顺序保存的。<br>4) LinkedHashSet不允许添重复元素</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 当我们使用无参构造器，创建TreeSet时，仍然是无序的</span></span><br><span class="line">        <span class="comment">//2. 希望添加的元素，按照字符串大小来排序</span></span><br><span class="line">        <span class="comment">//3. 使用TreeSet 提供的一个构造器，可以传入一个比较器(匿名内部类)</span></span><br><span class="line">        <span class="comment">//   并指定排序规则</span></span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">//return ((String) o1).compareTo((String) o2);//(1)</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o1).length() - ((String) o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.add(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        t.add(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        t.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        <span class="comment">//t.add(&quot;Bob&quot;);//若内容相同，则不添加。//(1)</span></span><br><span class="line">        t.add(<span class="string">&quot;Mary&quot;</span>); <span class="comment">//若长度相同，则不添加。</span></span><br><span class="line"></span><br><span class="line">        System.out.println(t);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><ul><li>JDK8的Map接口特点</li></ul><ol><li>Map与Collection并列存在。用于保存具有映射关系的数据:Key-Value</li><li>Map 中的key和value可以是任何引用类型的数据，会封装到HashMap$Node对象中</li><li>Map中的key不允许重复，当有相同的k时，会替换v</li><li>Map 中的value可以重复</li><li>Map 的key 可以为null, value也可以为null，注意key 为null,只能有一个，value为null ,可以多个</li><li>常用String类作为Map的key</li><li>key 和value 之间存在单向一对一关系，即通过指定的key总能找到对应的value</li></ol><ul><li>常用方法</li></ul><p>put:添加对象</p><p>remove:根据键删除映射关系</p><p>get：根据键获取值</p><p>size:获取元素个数</p><p>isEmpty:判断个数是否为 </p><p>clear:清除 k-v</p><p>containsKey:查找键是否存在</p><ul><li>遍历方法</li></ul><p>1)containsKey:查找键是否存在</p><p>2)keySet:获取所有的键</p><p>3)entrySet:获取所有关系k-v</p><p>4)values:获取所有的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>, <span class="string">&quot;John&quot;</span>, <span class="number">20000</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">2</span>, <span class="string">&quot;Bob&quot;</span>, <span class="number">15000</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3</span>, <span class="string">&quot;Mary&quot;</span>, <span class="number">25000</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(person1.getId(), person1);</span><br><span class="line">        hashMap.put(person2.getId(), person2);</span><br><span class="line">        hashMap.put(person3.getId(), person3);</span><br><span class="line"><span class="comment">//      //遍历方法</span></span><br><span class="line">        <span class="comment">//第一组: 先取出 所有的 Key , 通过 Key 取出对应的 Value</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第一组&quot;</span>);</span><br><span class="line">        <span class="type">Set</span> <span class="variable">keySet</span> <span class="operator">=</span> hashMap.keySet();</span><br><span class="line">        <span class="comment">//增强for</span></span><br><span class="line">        <span class="keyword">for</span>(Object key : keySet) &#123;</span><br><span class="line">            <span class="keyword">if</span>(((Person)hashMap.get(key)).getSalary()&gt;<span class="number">18000</span>)&#123;</span><br><span class="line">                System.out.println(hashMap.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">            <span class="keyword">if</span>(((Person)hashMap.get(next)).getSalary()&gt;<span class="number">18000</span>)&#123;</span><br><span class="line">                System.out.println(hashMap.get(next));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二组: 把所有的 values 取出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第二组&quot;</span>);</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> hashMap.values();</span><br><span class="line">        <span class="comment">//for</span></span><br><span class="line">        <span class="keyword">for</span> (Object value : values)&#123;</span><br><span class="line">            <span class="keyword">if</span>(((Person)value).getSalary()&gt;<span class="number">18000</span>)&#123;</span><br><span class="line">                System.out.println(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span>  iterator2.next();</span><br><span class="line">            <span class="keyword">if</span>(((Person)next).getSalary()&gt;<span class="number">18000</span>)&#123;</span><br><span class="line">                System.out.println(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三组: 通过 EntrySet 来获取 k-v</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第三组&quot;</span>);</span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> hashMap.entrySet();</span><br><span class="line">        <span class="comment">//for</span></span><br><span class="line">        <span class="keyword">for</span>(Object entry : entrySet)&#123;</span><br><span class="line">            <span class="comment">//将 entry 转成 Map.Entry</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">            <span class="keyword">if</span>(((Person)m.getValue()).getSalary()&gt;<span class="number">18000</span>)&#123;</span><br><span class="line">                System.out.println(m.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator3</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator3.hasNext()) &#123;</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) iterator3.next();</span><br><span class="line">            <span class="keyword">if</span>(((Person)m.getValue()).getSalary()&gt;<span class="number">18000</span>)&#123;</span><br><span class="line">                System.out.println(m.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;id = &quot;</span> + id + <span class="string">&quot;, name = &quot;</span> + name + <span class="string">&quot;, salary = &quot;</span> + salary + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>1) Map接口的常用实现类:HashMap、Hashtable和Properties.<br>2) HashMap是 Map接口使用频率最高的实现类。<br>3) HashMap是以 key-val对的方式来存储数据(HashMap$Node类型)<br>4)  key不能重复，但是值可以重复,允许使用null键和null值。<br>5) 如果添加相同的key，则会覆盖原来的key-val ,等同于修改.(key不会替换，val会替换)<br>6) 与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的.(jdk8的hashMap底层数组+链表+红黑树)<br>7) HashMap没有实现同步，因此是线程不安全的,方法没有做同步互斥的操作,没有<br>synchronized<br>8) 扩容机制与HashSet一致</p><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><ul><li>HashTable的基本介绍</li></ul><ol><li>存放的元素是键值对:即K-V</li><li>hashtable的键和值都不能为null，否则会抛出NullPointerException</li><li>hashTable使用方法基本上和HashMap一样</li><li>hashTable是线程安全的(synchronized). hashMap是线程不安全的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. Properties 继承  Hashtable</span></span><br><span class="line">        <span class="comment">//2. 可以通过 k-v 存放数据，当然key 和 value 不能为 null</span></span><br><span class="line">        <span class="comment">//增加</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//properties.put(null, &quot;abc&quot;);//抛出 空指针异常</span></span><br><span class="line">        <span class="comment">//properties.put(&quot;abc&quot;, null); //抛出 空指针异常</span></span><br><span class="line">        properties.put(<span class="string">&quot;john&quot;</span>, <span class="number">100</span>);<span class="comment">//k-v</span></span><br><span class="line">        properties.put(<span class="string">&quot;lucy&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;lic&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;lic&quot;</span>, <span class="number">88</span>);<span class="comment">//如果有相同的key ， value被替换</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过k 获取对应值</span></span><br><span class="line">        System.out.println(properties.get(<span class="string">&quot;lic&quot;</span>));<span class="comment">//88</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        properties.remove(<span class="string">&quot;lic&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        properties.put(<span class="string">&quot;john&quot;</span>, <span class="string">&quot;约翰&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207182054271.png" alt=""></p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ol><li>Properties类继承自Hashtable类并且实现了Map接口，也是使用一种键值对的形<br>式来保存数据。</li><li>使用特点和Hashtable类似</li><li>Properties还可以用于从xxx.properties 文件中，加载数据到Properties类对象,<br>并进行读取和修改</li><li>xxx.properties文件通常作为配置文件</li></ol><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">//按照传入的 k(String) 的大小进行排序</span></span><br><span class="line">                <span class="comment">//按照K(String) 的长度大小排序</span></span><br><span class="line">                <span class="comment">//return ((String) o2).compareTo((String) o1);</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o2).length() - ((String) o1).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        treeMap.put(<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;杰克&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;kristina&quot;</span>, <span class="string">&quot;克瑞斯提诺&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;smith&quot;</span>, <span class="string">&quot;斯密斯&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;bob&quot;</span>, <span class="string">&quot;鲍勃&quot;</span>);<span class="comment">//加入不了，但&quot;鲍勃&quot;替换&quot;汤姆&quot;</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;treemap=&quot;</span> + treeMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><p>1) Collections是一个操作 Set、List 和 Map等集合的工具类<br>2) Collections中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>1) reverse(List):反转List中元素的顺序<br>2) shuffle(List):对List集合元素进行随机排序<br>3) sort(List):根据元素的自然顺序对指定List集合元素按升序排序<br>4) sort(List,Comparator):根据指定的Comparator产生的顺序对 List集合元素进行排序<br>5) swap(List,int i，int j):将指定 list集合中的i处元素和j处元素进行交换</p><h3 id="查找、替换"><a href="#查找、替换" class="headerlink" title="查找、替换"></a>查找、替换</h3><p>1) Object max(Collection):根据元素的自然顺序，返回给定集合中的最大元素<br>2) object max(Collection,Comparator):根据Comparator指定的顺序，返回给定集合中的最大元素<br>3) Object min(Collection)<br>4) Object min(Collection, Comparator)<br>5) int frequency(Collection，object):返回指定集合中指定元素的出现次数<br>5) void copy(List dest,List src):将src中的内容复制到dest中<br>7) boolean replaceAll(List list,Object oldval,Object newVal):使用新值替换List 对象的所有旧值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Collections_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList 集合，用于测试.</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;milan&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        reverse(List)：反转 List 中元素的顺序</span></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        shuffle(List)：对 List 集合元素进行随机排序</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 5; i++) &#123;</span></span><br><span class="line"><span class="comment">//            Collections.shuffle(list);</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;list=&quot; + list);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;自然排序后&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span><br><span class="line">        <span class="comment">//我们希望按照 字符串的长度大小排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">//可以加入校验代码.</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o2).length() - ((String) o1).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串长度大小排序=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//比如</span></span><br><span class="line">        Collections.swap(list, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后的情况&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;自然顺序最大元素=&quot;</span> + Collections.max(list));</span><br><span class="line">        <span class="comment">//Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class="line">        <span class="comment">//比如，我们要返回长度最大的元素</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">maxObject</span> <span class="operator">=</span> Collections.max(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ((String) o1).length() - ((String) o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;长度最大的元素=&quot;</span> + maxObject);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object min(Collection)</span></span><br><span class="line">        <span class="comment">//Object min(Collection，Comparator)</span></span><br><span class="line">        <span class="comment">//上面的两个方法，参考max即可</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tom出现的次数=&quot;</span> + Collections.frequency(list, <span class="string">&quot;tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void copy(List dest,List src)：将src中的内容复制到dest中</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//为了完成一个完整拷贝，我们需要先给dest 赋值，大小和list.size()一样</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            dest.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拷贝</span></span><br><span class="line">        Collections.copy(dest, list);</span><br><span class="line">        System.out.println(<span class="string">&quot;dest=&quot;</span> + dest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span><br><span class="line">        <span class="comment">//如果list中，有tom 就替换成 汤姆</span></span><br><span class="line">        Collections.replaceAll(list, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list替换后=&quot;</span> + list);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207191116718.png" alt=""></p><h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;新冠确诊病例超千万，数百万印度教信徒赴恒河“圣浴”引民众担忧&quot;</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;男子突然想起2个月前钓的鱼还在网兜里，捞起一看赶紧放生&quot;</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;樱花树下你和我&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arrayList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> ((News) (arrayList.get(i))).getTitle();</span><br><span class="line">            <span class="keyword">if</span> (title.length() &lt;= <span class="number">15</span>) &#123;</span><br><span class="line">                System.out.println(title);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                title = title.substring(<span class="number">0</span>, <span class="number">15</span>);</span><br><span class="line">                title += <span class="string">&quot;...&quot;</span>;</span><br><span class="line">                System.out.println(title);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按要求实现：</span></span><br><span class="line"><span class="comment"> * (1) 封装一个新闻类，包含标题和内容属性，提供get、set方法，重写toString方法，打印对象时只打印标题；</span></span><br><span class="line"><span class="comment"> * (2) 只提供一个带参数的构造器，实例化对象时，只初始化标题；并且实例化两个对象：</span></span><br><span class="line"><span class="comment"> * 新闻一：新冠确诊病例超千万，数百万印度教信徒赴恒河“圣浴”引民众担忧</span></span><br><span class="line"><span class="comment"> * 新闻二：男子突然想起2个月前钓的鱼还在网兜里，捞起一看赶紧放生</span></span><br><span class="line"><span class="comment"> * (3) 将新闻对象添加到ArrayList集合中，并且进行倒序遍历；</span></span><br><span class="line"><span class="comment"> * (4) 在遍历集合过程中，对新闻标题进行处理，超过15字的只保留前15个，然后在后边加“…”</span></span><br><span class="line"><span class="comment"> * (5) 在控制台打印遍历出经过处理的新闻标题；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">News</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;News&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;title=&#x27;&quot;</span> + title + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(<span class="string">&quot;jack&quot;</span>, <span class="number">650</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;tom&quot;</span>, <span class="number">1200</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;smith&quot;</span>, <span class="number">2900</span>);</span><br><span class="line">        System.out.println(hashMap);</span><br><span class="line"></span><br><span class="line">        hashMap.put(<span class="string">&quot;jack&quot;</span>, <span class="number">2600</span>);</span><br><span class="line">        System.out.println(hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object key : hashMap.keySet()) &#123;</span><br><span class="line">            hashMap.put(key, (Integer) hashMap.get(key) + <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============遍历=============&quot;</span>);</span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> hashMap.entrySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) iterator.next();</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;-&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====遍历所有的工资====&quot;</span>);</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> hashMap.values();</span><br><span class="line">        <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按要求完成下列任务</span></span><br><span class="line"><span class="comment"> * 1）使用HashMap类实例化一个Map类型的对象m，键（String）和值（int）分别用于存储员工的姓名和工资，</span></span><br><span class="line"><span class="comment"> * 存入数据如下： jack—650元；tom—1200元；smith——2900元；</span></span><br><span class="line"><span class="comment"> * 2）将jack的工资更改为2600元</span></span><br><span class="line"><span class="comment"> * 3）为所有员工工资加薪100元；</span></span><br><span class="line"><span class="comment"> * 4）遍历集合中所有的员工</span></span><br><span class="line"><span class="comment"> * 5）遍历集合中所有的工资</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();<span class="comment">//ok</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);<span class="comment">//ok</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>);<span class="comment">//ok</span></span><br><span class="line">        set.add(p1);<span class="comment">//ok</span></span><br><span class="line">        set.add(p2);<span class="comment">//ok</span></span><br><span class="line">        p1.name = <span class="string">&quot;CC&quot;</span>;</span><br><span class="line">        set.remove(p1);</span><br><span class="line">        System.out.println(set);<span class="comment">//2</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;CC&quot;</span>));</span><br><span class="line">        System.out.println(set);<span class="comment">//3</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        System.out.println(set);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="type">return</span> <span class="variable">id</span> <span class="operator">=</span>= person.id &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>1)泛型又称参数化类型，是Jdk5.0出现的新特性,解决数据类型的安全性问题</p><p>2)在类声明或实例化时只要指定好需要的具体的类型即可。</p><p>3)Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常。同时，代码更加简洁、健壮</p><p>4)泛型的作用是:可以在类声明时通过一个标识表示类中某个属性的类型，或者是某个方法的返回值的类型，或者是参数类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用泛型方式给 HashSet 放入 3 个学生对象</span></span><br><span class="line">        HashSet&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Student&gt;();</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">28</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;mary&quot;</span>, <span class="number">19</span>));</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用泛型方式给 HashMap 放入 3 个学生对象</span></span><br><span class="line">        <span class="comment">//K -&gt; String V-&gt;Student</span></span><br><span class="line">        HashMap&lt;String, Student&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Student&gt;();</span><br><span class="line">        hm.put(<span class="string">&quot;milan&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;milan&quot;</span>, <span class="number">38</span>));</span><br><span class="line">        hm.put(<span class="string">&quot;smith&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">48</span>));</span><br><span class="line">        hm.put(<span class="string">&quot;bob&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bob&quot;</span>, <span class="number">28</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Student&gt;&gt; entries = hm.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Student&gt;&gt; iterator = entries.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, Student&gt; next = iterator.next();</span><br><span class="line">            System.out.println(next.getKey() + <span class="string">&quot;-&quot;</span> + next.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>interface List\<T>{},public class HashSet\<E>{}..等等<br>说明:T,E只能是引用类型</p></li><li><p>在给泛型指定具体类型后，可以传入该类型或者其子类类型</p></li><li><p>.泛型使用形式<br>List\<lnteger> list1 = new ArrayList\<lnteger>{}:</p></li></ol><p>List\<lnteger> list2 = new ArrayList&lt;&gt;{};//推荐</p><p>如果我们这样写List list3 = new ArrayList();默认给它的泛型是[\<E> E就是Object ]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">20000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1980</span>, <span class="number">12</span>, <span class="number">11</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">12000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2001</span>, <span class="number">12</span>, <span class="number">12</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">50000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1980</span>, <span class="number">12</span>, <span class="number">10</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(employees);</span><br><span class="line"></span><br><span class="line">        employees.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Employee&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Employee emp1, Employee emp2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(emp1 <span class="keyword">instanceof</span> Employee &amp;&amp; emp2 <span class="keyword">instanceof</span> Employee)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;类型不正确&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//比较name</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> emp1.getName().compareTo(emp2.getName());</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//比较birthday</span></span><br><span class="line">                <span class="keyword">return</span> emp1.getBirthday().compareTo(emp2.getBirthday());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(employees);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义 Employee 类</span></span><br><span class="line"><span class="comment"> * 1) 该类包含：private 成员变量 name,sal,birthday，其中 birthday 为 MyDate 类的对象；</span></span><br><span class="line"><span class="comment"> * 2) 为每一个属性定义 getter, setter 方法；</span></span><br><span class="line"><span class="comment"> * 3) 重写 toString 方法输出 name, sal, birthday</span></span><br><span class="line"><span class="comment"> * 4) MyDate 类包含: private 成员变量 month,day,year；并为每一个属性定义 getter, setter 方法；</span></span><br><span class="line"><span class="comment"> * 5) 创建该类的 3 个对象，并把这些对象放入 ArrayList 集合中（ArrayList 需使用泛型来定义），对集合中的元素进</span></span><br><span class="line"><span class="comment"> * 行排序，并遍历输出：</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 排序方式： 调用 ArrayList 的 sort 方法 , * 传入 Comparator 对象[使用泛型]，</span></span><br><span class="line"><span class="comment"> * 先按照 name 排序，如果 name 相同，则按生日日期的先后排序。【即：定制排序】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDate</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyDate&#123;year = &quot;</span> + year + <span class="string">&quot;, month = &quot;</span> + month + <span class="string">&quot;, day = &quot;</span> + day + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(MyDate o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (year != o.year) &#123;</span><br><span class="line">            <span class="keyword">return</span> year - o.year;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (month != o.month) &#123;</span><br><span class="line">            <span class="keyword">return</span> month - o.month;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (day != o.day) &#123;</span><br><span class="line">            <span class="keyword">return</span> day - o.day;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> MyDate birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> salary, MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyDate <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\nEmployee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h2><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><ul><li>基本语法</li></ul><p>class类名<T, R.>{//…表示可以有多个泛型</p><p>成员</p><p>}</p><ul><li>注意细节</li></ul><p>1)普通成员可以使用泛型(属性、方法)</p><p>2)使用泛型的数组，不能初始化</p><p>3)静态方法中不能使用类的泛型</p><p>4)泛型类的类型，是在创建对象时确定的(因为创建对象时，需要指定确定类型)</p><p>5)如果在创建对象时，没有指定类型，默认为Object</p><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><ul><li>基本语法</li></ul><p>interface接口名<T,R...>{}</p><ul><li>注意细节</li></ul><p>1)接口中，静态成员也不能使用泛型(这个和泛型类规定一样)</p><p>2)泛型接口的类型,在继承接口或者实现接口时确定</p><p>3)没有指定类型，默认为Object</p><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><ul><li>基本语法</li></ul><p>修饰符<T,R.>返回类型方法名(参数列表){</p><p>}</p><ul><li>注意细节</li></ul><p>1.泛型方法,可以定义在普通类中,也可以定义在泛型类中</p><p>2.当泛型方法被调用时，类型会确定</p><p>3.public void eat(E e){},修饰符后没有<T,R..> eat方法不是泛型方法，而是使用了泛型</p><h2 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h2><ol><li>泛型不具备继承性</li><li>&lt;?&gt;:支持任意泛型类型</li><li>&lt;? extends A&gt;:支持A类以及A类的子类,规定了泛型的上限</li><li>&lt;? super A&gt;:支持A类以及A类的父类，不限于直接父类，规定了泛型的下限</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericExtends</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//泛型没有继承性</span></span><br><span class="line">        <span class="comment">//List&lt;Object&gt; list = new ArrayList&lt;String&gt;();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例说明下面三个方法的使用</span></span><br><span class="line">        List&lt;Object&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;AA&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;BB&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;CC&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是 List&lt;?&gt; c ，可以接受任意的泛型类型</span></span><br><span class="line">        printCollection1(list1);</span><br><span class="line">        printCollection1(list2);</span><br><span class="line">        printCollection1(list3);</span><br><span class="line">        printCollection1(list4);</span><br><span class="line">        printCollection1(list5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;? extends AA&gt; c： 表示 上限，可以接受 AA或者AA子类</span></span><br><span class="line"><span class="comment">//        printCollection2(list1);//×</span></span><br><span class="line"><span class="comment">//        printCollection2(list2);//×</span></span><br><span class="line">        printCollection2(list3);<span class="comment">//√</span></span><br><span class="line">        printCollection2(list4);<span class="comment">//√</span></span><br><span class="line">        printCollection2(list5);<span class="comment">//√</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;? super AA&gt; c: 支持AA类以及AA类的父类，不限于直接父类</span></span><br><span class="line">        printCollection3(list1);<span class="comment">//√</span></span><br><span class="line">        <span class="comment">//printCollection3(list2);//×</span></span><br><span class="line">        printCollection3(list3);<span class="comment">//√</span></span><br><span class="line">        <span class="comment">//printCollection3(list4);//×</span></span><br><span class="line">        <span class="comment">//printCollection3(list5);//×</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ? extends AA 表示 上限，可以接受 AA或者AA子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection2</span><span class="params">(List&lt;? extends AA&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//说明: List&lt;?&gt; 表示 任意的泛型类型都可以接受</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection1</span><span class="params">(List&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123; <span class="comment">// 通配符，取出时，就是Object</span></span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ? super 子类类名AA:支持AA类以及AA类的父类，不限于直接父类，</span></span><br><span class="line">    <span class="comment">//规定了泛型的下限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection3</span><span class="params">(List&lt;? <span class="built_in">super</span> AA&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span> <span class="keyword">extends</span> <span class="title class_">BB</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h2><p>1.一个类有很多功能代码需要测试，为了测试，就需要写入到main方法中</p><p>2.如果有多个功能代码测试，就需要来回注销，切换很麻烦</p><p>3.如果可以直接运行一个方法，就方便很多，并且可以给出相关信息，就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//这里我们给T 指定类型是User</span></span><br><span class="line">        DAO&lt;User&gt; dao = <span class="keyword">new</span> <span class="title class_">DAO</span>&lt;&gt;();</span><br><span class="line">        dao.save(<span class="string">&quot;001&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="string">&quot;jack&quot;</span>));</span><br><span class="line">        dao.save(<span class="string">&quot;002&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="number">18</span>, <span class="string">&quot;king&quot;</span>));</span><br><span class="line">        dao.save(<span class="string">&quot;003&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="number">38</span>, <span class="string">&quot;smith&quot;</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = dao.list();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        dao.update(<span class="string">&quot;003&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="number">58</span>, <span class="string">&quot;milan&quot;</span>));</span><br><span class="line">        dao.delete(<span class="string">&quot;001&quot;</span>);<span class="comment">//删除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===修改后====&quot;</span>);</span><br><span class="line">        list = dao.list();</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;id=003 &quot;</span> + dao.get(<span class="string">&quot;003&quot;</span>));<span class="comment">//milan</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义个泛型类 DAO&lt;T&gt;，在其中定义一个Map 成员变量，Map 的键为 String 类型，值为 T 类型。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 分别创建以下方法：</span></span><br><span class="line"><span class="comment"> * (1) public void save(String id,T entity)： 保存 T 类型的对象到 Map 成员变量中</span></span><br><span class="line"><span class="comment"> * (2) public T get(String id)：从 map 中获取 id 对应的对象</span></span><br><span class="line"><span class="comment"> * (3) public void update(String id,T entity)：替换 map 中key为id的内容,改为 entity 对象</span></span><br><span class="line"><span class="comment"> * (4) public List&lt;T&gt; list()：返回 map 中存放的所有 T 对象</span></span><br><span class="line"><span class="comment"> * (5) public void delete(String id)：删除指定 id 对象</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 定义一个 User 类：</span></span><br><span class="line"><span class="comment"> * 该类包含：private成员变量（int类型） id，age；（String 类型）name。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 创建 DAO 类的对象， 分别调用其 save、get、update、list、delete 方法来操作 User 对象，</span></span><br><span class="line"><span class="comment"> * 使用 Junit 单元测试类进行测试。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 思路分析</span></span><br><span class="line"><span class="comment"> * 1. 定义User类</span></span><br><span class="line"><span class="comment"> * 2. 定义Dao&lt;T&gt;泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;id = &quot;</span> + id + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, name = &quot;</span> + name + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DAO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String id, T entity)</span> &#123;</span><br><span class="line">        map.put(id, entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String id, T entity)</span> &#123;</span><br><span class="line">        map.put(id, entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            list.add(map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        map.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java绘图技术"><a href="#Java绘图技术" class="headerlink" title="Java绘图技术"></a>Java绘图技术</h1><ul><li>Component类提供了两个和绘图相关最重要的方法:</li></ul><ol><li>paint(Graphics g)绘制组件的外观</li><li>repaint()刷新组件的外观。</li></ol><ul><li>当组件第一次在屏幕显示的时候,程序会自动的调用paint(方法来绘制组件。</li><li>在以下情况paint()将会被调用:</li></ul><ol><li>窗口最小化.再最大化</li><li>窗口的大小发生变化</li><li>repaint方法被调用</li></ol><ul><li>Graphics类、可以理解就是画笔,为我们提供了各种绘制图形的方法</li></ul><ol><li>画直线drawLine(int x1,int y1,int x2,int y2)</li><li>画矩形边框drawRect(int x, int y, int width, int height)</li><li>画椭圆边框drawOval(int x, int y, int width, int height)</li><li>填充矩形fillRect(int x, int y. int width, int height)</li><li>填充椭圆fillOval(int x, int y. int width, int height)</li><li>画图片drawlmage(Image img, int x, int y, ..)</li><li>画字符串drawString(String str. int x, int y)</li><li>设置画笔的字体setFont(Font font)</li><li>设置画笔的颜色setColor(Color c)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawCircle</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123; <span class="comment">//JFrame对应窗口,可以理解成是一个画框</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个面板</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MyPanel</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DrawCircle</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;退出程序~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawCircle</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="comment">//初始化面板</span></span><br><span class="line">        mp = <span class="keyword">new</span> <span class="title class_">MyPanel</span>();</span><br><span class="line">        <span class="comment">//把面板放入到窗口(画框)</span></span><br><span class="line">        <span class="built_in">this</span>.add(mp);</span><br><span class="line">        <span class="comment">//设置窗口的大小</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="comment">//当点击窗口的小×，程序完全退出.</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);<span class="comment">//可以显示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.先定义一个MyPanel, 继承JPanel类， 画图形，就在面板上画</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPanel</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//说明:</span></span><br><span class="line">    <span class="comment">//1. MyPanel 对象就是一个画板</span></span><br><span class="line">    <span class="comment">//2. Graphics g 把 g 理解成一支画笔</span></span><br><span class="line">    <span class="comment">//3. Graphics 提供了很多绘图的方法</span></span><br><span class="line">    <span class="comment">//Graphics g</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;<span class="comment">//绘图方法</span></span><br><span class="line">        <span class="built_in">super</span>.paint(g);<span class="comment">//调用父类的方法完成初始化.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;paint 方法被调用了~&quot;</span>);</span><br><span class="line">        <span class="comment">//画出一个圆形.</span></span><br><span class="line">        <span class="comment">//g.drawOval(10, 10, 100, 100);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示绘制不同的图形..</span></span><br><span class="line">        <span class="comment">//画直线 drawLine(int x1,int y1,int x2,int y2)</span></span><br><span class="line">        <span class="comment">//g.drawLine(10, 10, 100, 100);</span></span><br><span class="line">        <span class="comment">//画矩形边框 drawRect(int x, int y, int width, int height)</span></span><br><span class="line">        <span class="comment">//g.drawRect(10, 10, 100, 100);</span></span><br><span class="line">        <span class="comment">//画椭圆边框 drawOval(int x, int y, int width, int height)</span></span><br><span class="line">        <span class="comment">//填充矩形 fillRect(int x, int y, int width, int height)</span></span><br><span class="line">        <span class="comment">//设置画笔的颜色</span></span><br><span class="line"><span class="comment">//        g.setColor(Color.blue);</span></span><br><span class="line"><span class="comment">//        g.fillRect(10, 10, 100, 100);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//填充椭圆 fillOval(int x, int y, int width, int height)</span></span><br><span class="line"><span class="comment">//        g.setColor(Color.red);</span></span><br><span class="line"><span class="comment">//        g.fillOval(10, 10, 100, 100);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//画图片 drawImage(Image img, int x, int y, ..)</span></span><br><span class="line">        <span class="comment">//1. 获取图片资源, /bg.png 表示在该项目的根目录去获取 bg.png 图片资源</span></span><br><span class="line"><span class="comment">//        Image image = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(&quot;/bg.png&quot;));</span></span><br><span class="line"><span class="comment">//        g.drawImage(image, 10, 10, 175, 221, this);</span></span><br><span class="line">        <span class="comment">//画字符串 drawString(String str, int x, int y)//写字</span></span><br><span class="line">        <span class="comment">//给画笔设置颜色和字体</span></span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;隶书&quot;</span>, Font.BOLD, <span class="number">50</span>));</span><br><span class="line">        <span class="comment">//这里设置的 100， 100， 是 &quot;北京你好&quot;左下角</span></span><br><span class="line">        g.drawString(<span class="string">&quot;北京你好&quot;</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="comment">//设置画笔的字体 setFont(Font font)</span></span><br><span class="line">        <span class="comment">//设置画笔的颜色 setColor(Color c)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事件处理机制"><a href="#事件处理机制" class="headerlink" title="事件处理机制"></a>事件处理机制</h1><p>java事件处理是采取”委派事件模型”。当事件发生时,产生事件的对象，会把此”信息”传递给”事件的监听者” 处理，这里所说的“信息”实际上就是java.awt.event事件类库里某个类所创建的对象,把它称为”事件的对象””。</p><p>事件源:事件源是一个产生事件的对象，比如按钮，窗口等。</p><p>事件:事件就是承载事件源状态改变时的对象，比如当键盘事件、鼠标事件、窗口事件等等，会生成一个事件对象，该对象保存着当前事件很多信息，比如KeyEvent对象有含有被按下键的Code值。java.awt.event包和javax.swing.event包中定义了各种事件类型</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207201537332.png" alt=""></p><p>事件监听器接口:</p><p>（1）当事件源产生一个事件，可以传送给事件监听者处理</p><p>（2）事件监听者实际上就是一个类,该类实现了某个事件监听器接口比如前面我们案例申的MyPanle就是一个类,它实现了KeyListener接口，它就可以作为一个事件监听者，对接受到的事件进行处理</p><p>（3）事件监听器接口有多种，不同的事件监听器接口可以监听不同的事件,一个类可以实现多个监听接口</p><p>（4）这些接口在java.awt.event包和javax.swing.event包中定义.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tankGame01.event_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示小球通过键盘控制上下左右的移动-&gt; 讲解Java的事件控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BallMove</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123; <span class="comment">//窗口</span></span><br><span class="line">    <span class="type">MyPanel</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BallMove</span> <span class="variable">ballMove</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BallMove</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BallMove</span><span class="params">()</span> &#123;</span><br><span class="line">        mp = <span class="keyword">new</span> <span class="title class_">MyPanel</span>();</span><br><span class="line">        <span class="built_in">this</span>.add(mp);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="comment">//窗口JFrame 对象可以监听键盘事件, 即可以监听到面板发生的键盘事件</span></span><br><span class="line">        <span class="built_in">this</span>.addKeyListener(mp);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//面板, 可以画出小球</span></span><br><span class="line"><span class="comment">//KeyListener 是监听器, 可以监听键盘事件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPanel</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> <span class="keyword">implements</span> <span class="title class_">KeyListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了让小球可以移动, 把他的左上角的坐标(x,y)设置变量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(g);</span><br><span class="line">        g.fillOval(x, y, <span class="number">20</span>, <span class="number">20</span>); <span class="comment">//默认黑色</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有字符输出时，该方法就会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyTyped</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当某个键按下，该方法会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println((char)e.getKeyCode() + &quot;被按下..&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据用户按下的不同键，来处理小球的移动 (上下左右的键)</span></span><br><span class="line">        <span class="comment">//在java中，会给每一个键，分配一个值(int)</span></span><br><span class="line">        <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_DOWN) &#123;<span class="comment">//KeyEvent.VK_DOWN就是向下的箭头对应的code</span></span><br><span class="line">            y++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_UP) &#123;</span><br><span class="line">            y--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_LEFT) &#123;</span><br><span class="line">            x--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_RIGHT) &#123;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让面板重绘</span></span><br><span class="line">        <span class="built_in">this</span>.repaint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当某个键释放(松开)，该方法会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h1><p>1.单线程:同一个时刻,只允许执行一个线程</p><p>2.多线程:同一个时刻，可以执行多个线程，比如:一个qq进程，可以同时打开多个聊天窗口，一个迅雷进程，可以同时下载多个文件</p><p>3.并发:同一个时刻，多个任务交替执行，造成一种“貌似同时”的错觉，简单的说，单核cpu实现的多任务就是并发。</p><p>4.并行:同一个时刻，多个任务同时执行。多核cpu可以实现并行。</p><h2 id="线程基本使用"><a href="#线程基本使用" class="headerlink" title="线程基本使用"></a>线程基本使用</h2><h3 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Cat对象，可以当做线程使用</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            (1)</span></span><br><span class="line"><span class="comment">            public synchronized void start() &#123;</span></span><br><span class="line"><span class="comment">                start0();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            (2)</span></span><br><span class="line"><span class="comment">            //start0() 是本地方法，是JVM调用, 底层是c/c++实现</span></span><br><span class="line"><span class="comment">            //真正实现多线程的效果， 是start0(), 而不是 run</span></span><br><span class="line"><span class="comment">            private native void start0();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        cat.start();<span class="comment">//启动线程-&gt; 最终会执行cat的run方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//cat.run();//run方法就是一个普通的方法, 没有真正的启动一个线程，就会把run方法执行完毕，才向下执行</span></span><br><span class="line">        <span class="comment">//说明: 当main线程启动一个子线程 Thread-0, 主线程不会阻塞, 会继续执行</span></span><br><span class="line">        <span class="comment">//这时 主线程和子线程是交替执行..</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程继续执行&quot;</span> + Thread.currentThread().getName());<span class="comment">//名字main</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 i=&quot;</span> + i);</span><br><span class="line">            <span class="comment">//让主线程休眠</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 当一个类继承了 Thread 类， 该类就可以当做线程使用</span></span><br><span class="line"><span class="comment">//2. 我们会重写 run方法，写上自己的业务代码</span></span><br><span class="line"><span class="comment">//3. run Thread 类 实现了 Runnable 接口的run方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment">        if (target != null) &#123;</span></span><br><span class="line"><span class="comment">            target.run();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//重写run方法，写上自己的业务逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//该线程每隔1秒。在控制台输出 “喵喵, 我是小猫咪”</span></span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵, 我是小猫咪&quot;</span> + (++times) + <span class="string">&quot; 线程名=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">//让该线程休眠1秒 ctrl+alt+t</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (times == <span class="number">80</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//当times 到80, 退出while, 这时线程也就退出..</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">//dog.start(); 这里不能调用start</span></span><br><span class="line">        <span class="comment">//创建了Thread对象，把 dog对象(实现Runnable),放入Thread</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Tiger tiger = new Tiger();//实现了 Runnable</span></span><br><span class="line"><span class="comment">//        ThreadProxy threadProxy = new ThreadProxy(tiger);</span></span><br><span class="line"><span class="comment">//        threadProxy.start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老虎嗷嗷叫....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程代理类 , 模拟了一个极简的Thread类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadProxy</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//你可以把Proxy类当做 ThreadProxy</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//属性，类型是 Runnable</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();<span class="comment">//动态绑定（运行类型Tiger）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadProxy</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        start0();<span class="comment">//这个方法时真正实现多线程方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//通过实现Runnable接口，开发线程</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">//普通方法</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小狗汪汪叫..hi&quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//休眠1秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多线程执行"><a href="#多线程执行" class="headerlink" title="多线程执行"></a>多线程执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">T1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T1</span>();</span><br><span class="line">        <span class="type">T2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T2</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t2);</span><br><span class="line">        thread1.start();<span class="comment">//启动第1个线程</span></span><br><span class="line">        thread2.start();<span class="comment">//启动第2个线程</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//每隔1秒输出 “hello,world”,输出10次</span></span><br><span class="line">            System.out.println(<span class="string">&quot;hello,world &quot;</span> + (++count));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">60</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//每隔1秒输出 “hi”,输出5次</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hi &quot;</span> + (++count));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">50</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h3><p>1.当线程完成任务后，会自动退出。</p><p>2.还可以通过使用变量来控制run方法退出的方式停止线程，即通知方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadExit_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果希望main线程去控制t1 线程的终止, 必须可以修改 loop</span></span><br><span class="line">        <span class="comment">//让t1 退出run方法，从而终止 t1线程 -&gt; 通知方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//让主线程休眠 10 秒，再通知 t1线程退出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main线程休眠10s...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        t1.setLoop(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//设置一个控制变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);<span class="comment">// 让当前线程休眠50ms</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T 运行中....&quot;</span> + (++count));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoop</span><span class="params">(<span class="type">boolean</span> loop)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207202201999.png" alt=""></p><p>注意事项和细节</p><p>1.start底层会创建新的线程，调用run,run就是一个简单的方法调用，不会启动新线程</p><p>2.线程优先级的范围</p><p>3.interrupt，中断线程，但并没有真正的结束线程。所以一般用于中断正在休眠线</p><p>4.sleep:线程的静态方法，使当前线程休眠</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//测试相关的方法</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line">        t.setPriority(Thread.MIN_PRIORITY);<span class="comment">//1</span></span><br><span class="line">        t.start();<span class="comment">//启动子线程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程打印5 hi ,然后我就中断 子线程的休眠</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;hi &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 线程的优先级 =&quot;</span> + t.getPriority());<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        t.interrupt();<span class="comment">//当执行到这里，就会中断 t线程的休眠.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123; <span class="comment">//自定义的线程类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//Thread.currentThread().getName() 获取当前线程的名称</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  吃包子~~~~&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 休眠中~~~&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">20000</span>);<span class="comment">//20秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">//当该线程执行到一个interrupt 方法时，就会catch 一个 异常, 可以加入自己的业务代码</span></span><br><span class="line">                <span class="comment">//InterruptedException 是捕获到一个中断异常.</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被 interrupt了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207202213258.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">T3</span>());<span class="comment">//创建子线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hi &quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>) &#123;<span class="comment">//说明主线程输出了5次 hi</span></span><br><span class="line">                t3.start();<span class="comment">//启动子线程 输出 hello...</span></span><br><span class="line">                t3.join();<span class="comment">//立即将t3子线程，插入到main线程，让t3先执行</span></span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);<span class="comment">//输出一次 hi, 让main线程也休眠1s</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T3</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello &quot;</span> + (++count));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h3><p>1.用户线程:也叫工作线程，当线程的任务执行完或通知方式结束</p><p>2.守护线程:一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束</p><p>3.常见的守护线程:垃圾回收机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">MyDaemonThread</span> <span class="variable">myDaemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDaemonThread</span>();</span><br><span class="line">        <span class="comment">//如果我们希望当main线程结束后，子线程自动结束</span></span><br><span class="line">        <span class="comment">//,只需将子线程设为守护线程即可</span></span><br><span class="line">        myDaemonThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        myDaemonThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;<span class="comment">//main线程</span></span><br><span class="line">            System.out.println(<span class="string">&quot;A在辛苦的工作...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDaemonThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;<span class="comment">//无限循环</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠1000毫秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;B和C快乐聊天，哈哈哈~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>NEW:尚未启动的线程处于此状态。</p><p>RUNNABLE:在Java虚拟机中执行的线程处于此状态。</p><p>BLOCKED:;被阻塞等待监视器锁定的线程处于此状态。</p><p>WAITING:正在等待另一个线程执行特定动作的线程处于此状态。</p><p>TIMED_WAITING:正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。</p><p>TERMINATED:已退出的线程处于此状态。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207252034559.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadState_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (Thread.State.TERMINATED != t.getState()) &#123;</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hi &quot;</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><p>1．在多线程编程，一些敏感数据不允许被多个线程同时访问，此时就使用同步访问技<br>术，保证数据在任何同一时刻，最多有一个线程访问，以保证数据的完整性。</p><p>2．也可以这里理解:线程同步，即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作.</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207211006770.png" alt=""></p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>1.Java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。</p><p>2.每个对象都对应于一个可称为“互斥锁”的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。</p><p>3.关键字synchronized来与对象的互斥锁联系。当某个对象用synchronized修饰时,表明该对象在任一时刻只能由一个线程访问</p><p>4.同步的局限性:导致程序的执行效率要降低</p><p>5.同步方法(非静态的)的锁可以是this,也可以是其他对象(要求是同一个对象)</p><p>6.同步方法(静态的)的锁为当前类本身。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207211044920.png" alt=""></p><h3 id="线程的死锁"><a href="#线程的死锁" class="headerlink" title="线程的死锁"></a>线程的死锁</h3><p>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁，在编程是一定要避免死锁的发生。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟死锁现象</span></span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">true</span>);</span><br><span class="line">        A.setName(<span class="string">&quot;A线程&quot;</span>);</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">false</span>);</span><br><span class="line">        B.setName(<span class="string">&quot;B线程&quot;</span>);</span><br><span class="line">        A.start();</span><br><span class="line">        B.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">// 保证多线程，共享一个对象,这里使用static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadLockDemo</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面业务逻辑的分析</span></span><br><span class="line">        <span class="comment">//1. 如果flag 为 T, 线程A 就会先得到/持有 o1 对象锁, 然后尝试去获取 o2 对象锁</span></span><br><span class="line">        <span class="comment">//2. 如果线程A 得不到 o2 对象锁，就会Blocked</span></span><br><span class="line">        <span class="comment">//3. 如果flag 为 F, 线程B 就会先得到/持有 o2 对象锁, 然后尝试去获取 o1 对象锁</span></span><br><span class="line">        <span class="comment">//4. 如果线程B 得不到 o1 对象锁，就会Blocked</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;<span class="comment">//对象互斥锁, 下面就是同步代码</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入3&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入4&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><ul><li>以下操作会释放锁</li></ul><p>1.当前线程的同步方法、同步代码块执行结束案例</p><p>2.当前线程在同步代码块、同步方法中遇到break、return.</p><p>3.当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束</p><p>4.当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁。</p><ul><li>以下操作不会释放锁</li></ul><p>1．线程执行同步代码块或同步方法时，程序调用Thread.sleep0、Thread.yield()方法暂停当前线程的执行,不会释放锁</p><p>2．线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁。提示：应尽量避免使用suspend()和resume()来控制线程，方法不再推荐使用</p><h2 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(a);<span class="comment">//一定要注意.</span></span><br><span class="line">        a.start();</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建A线程类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//输出1-100数字</span></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            System.out.println((<span class="type">int</span>)(Math.random() * <span class="number">100</span> + <span class="number">1</span>));</span><br><span class="line">            <span class="comment">//休眠</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;a线程退出...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoop</span><span class="params">(<span class="type">boolean</span> loop)</span> &#123;<span class="comment">//可以修改loop变量</span></span><br><span class="line">        <span class="built_in">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直到第2个线程从键盘读取了“Q”命令</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> A a;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(A a)</span> &#123;<span class="comment">//构造器中，直接传入A类对象</span></span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//接收到用户的输入</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你指令(Q)表示退出:&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> scanner.next().toUpperCase().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(key == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//以通知的方式结束a线程</span></span><br><span class="line">                a.setLoop(<span class="literal">false</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;b线程退出.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Money</span> <span class="variable">money</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Money</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(money).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(money).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Money</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">11000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (balance &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                balance -= <span class="number">1000</span>;</span><br><span class="line">                System.out.print(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(<span class="string">&quot;  balance=&quot;</span> + balance);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207212129556.png" alt=""></p><h3 id="常用的文件操作"><a href="#常用的文件操作" class="headerlink" title="常用的文件操作"></a>常用的文件操作</h3><ul><li><strong>创建文件对象相关构造器和方法</strong></li></ul><p>new File(String pathname)//根据路径构建一个File对象</p><p>new File(File parent,String child)//根据父目录文件+子路径构建</p><p>new File(String parent,String child)//根据父目录+子路径构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCreate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(1) new File(String pathname)//根据路径构建一个File对象</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\file_\\new1.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(2) new File(File parent,String child)//根据父目录文件+子路径构建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\file_\\&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;new2.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentFile, fileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(3) new File(String parent,String child) //根据父目录+子路径构建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create03</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\file_\\&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news3.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentPath, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功~&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInformation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//获取文件信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 先创建文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\file_\\news1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法得到信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件名字=&quot;</span>+file.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径=&quot;</span>+file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件父级目录=&quot;</span>+file.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小(字节)=&quot;</span>+file.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在=&quot;</span>+file.exists());</span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一文件=&quot;</span>+file.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个目录&quot;</span>+file.isDirectory());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>目录的操作和文件删除</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Directory_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断 d:\\news1.txt 是否存在，如果存在就删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\file_\\news2.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">                System.out.println(filePath + <span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(filePath + <span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该文件不存在...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断 D:\\demo02 是否存在，存在就删除，否则提示不存在</span></span><br><span class="line">    <span class="comment">//在java编程中，目录也被当做文件</span></span><br><span class="line">    <span class="comment">//目录下有文件会删除失败</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\file_\\demo02&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">                System.out.println(filePath + <span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(filePath + <span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该目录不存在...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断 D:\\demo\\a\\b\\c 目录是否存在，如果存在就提示已经存在，否则就创建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">directoryPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\file_\\demo01\\a\\b\\c&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(directoryPath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            System.out.println(directoryPath + <span class="string">&quot;存在..&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.mkdirs()) &#123; <span class="comment">//创建一级目录使用mkdir() ，创建多级目录使用mkdirs()</span></span><br><span class="line">                System.out.println(directoryPath + <span class="string">&quot;创建成功..&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(directoryPath + <span class="string">&quot;创建失败...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IO流分类"><a href="#IO流分类" class="headerlink" title="IO流分类"></a>IO流分类</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207221318752.png" alt=""></p><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><ul><li><p>InputStream：字节输入流</p></li><li><p>InputStream抽象类是所有类字节输入流的超类</p></li><li><p>InputStream常用的子类</p><p>1.FilelnputStream:文件输入流</p><p>2.BufferedInputStream:缓冲字节输入流</p><p>3.ObjectInputStream:对象字节输入流</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示读取文件...</span></span><br><span class="line"><span class="comment">     * 单个字节的读取，效率比较低</span></span><br><span class="line"><span class="comment">     * -&gt; 使用 read(byte[] b)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\inputstream_\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readData</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 FileInputStream 对象，用于读取 文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//从该输入流读取一个字节的数据。 如果没有输入可用，此方法将阻止。</span></span><br><span class="line">            <span class="comment">//如果返回-1 , 表示读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((readData = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) readData);<span class="comment">//转成char显示</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭文件流，释放资源.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 read(byte[] b) 读取文件，提高效率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\inputstream_\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>]; <span class="comment">//一次读取8个字节.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 FileInputStream 对象，用于读取 文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//从该输入流读取最多b.length字节的数据到字节数组。 此方法将阻塞，直到某些输入可用。</span></span><br><span class="line">            <span class="comment">//如果返回-1 , 表示读取完毕</span></span><br><span class="line">            <span class="comment">//如果读取正常, 返回实际读取的字节数</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));<span class="comment">//显示</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭文件流，释放资源.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStream01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\outputstream_\\a.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//1. new FileOutputStream(filePath) 创建方式，当写入内容是，会覆盖原来的内容</span></span><br><span class="line">        <span class="comment">//2. new FileOutputStream(filePath, true) 创建方式，当写入内容是，是追加到文件后面</span></span><br><span class="line">        out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath);</span><br><span class="line">        <span class="comment">//write(byte[] b, int off, int len) 将 len字节从位于偏移量 off的指定字节数组写入此文件输出流</span></span><br><span class="line">        out.write(<span class="string">&quot;hello,world!&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCopy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path1</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\inputstream_\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path2</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\outputstream_\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInput</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutput</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInput = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path1);</span><br><span class="line">            fileOutput = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path2);</span><br><span class="line">            <span class="comment">//定义一个字节数组,提高读取效果</span></span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileInput.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fileOutput.write(buf, <span class="number">0</span>, readLen);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileInput != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileInput.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fileOutput != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileOutput.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><p><strong>FileReader 相关方法：</strong></p><ol><li>new FileReader(File/String)</li><li>read:每次读取单个字符，返回该字符，如果到文件末尾返回-1</li><li>read(char[):批量读取多个字符到数组，返回读取到的字符数，如果到文件末尾返回-1</li></ol><p><em>相关API:</em></p><ol><li>new String(char):将char[]转换成String</li><li>new String(char[,off,len):将char的指定部分转换成String</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io_.reader_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\reader_\\story.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//按单个字符读取</span></span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            System.out.println(<span class="string">&quot;按单个字符读取&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((data = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="comment">//按字符数组读取</span></span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            System.out.println(<span class="string">&quot;按字符数组读取&quot;</span>);</span><br><span class="line">            <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileReader.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">0</span>, readLen));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h3><p><strong>FileWriter相关方法</strong></p><ol><li>new FileWriter(File/String):覆盖模式，相当于流的指针在首端</li><li>new FileWriter(File/String,true):追加模式，相当于流的指针在尾端</li><li>write(int):写入单个字符</li><li>write(char[]):写入指定数组</li><li>write(char[],off,len):写入指定数组的指定部分</li><li>write (string):写入整个字符串</li><li>write(string,off,len):写入字符串的指定部分</li></ol><p><em>相关API:</em> String类:toCharArray:将String转换成char</p><p><em>注意</em>:FileWriter使用后，必须要关闭(close)或刷新(flush)，否则写入不到指定的文件!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\writer_\\note.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath);</span><br><span class="line"><span class="comment">//          3) write(int):写入单个字符</span></span><br><span class="line">            fileWriter.write(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line"><span class="comment">//            4) write(char[]):写入指定数组</span></span><br><span class="line">            fileWriter.write(chars);</span><br><span class="line"><span class="comment">//            5) write(char[],off,len):写入指定数组的指定部分</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;学习学习&quot;</span>.toCharArray(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//            6) write（string）：写入整个字符串</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot; 你好北京~&quot;</span>);</span><br><span class="line">            fileWriter.write(<span class="string">&quot;风雨之后，定见彩虹&quot;</span>);</span><br><span class="line"><span class="comment">//            7) write(string,off,len):写入字符串的指定部分</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;上海天津&quot;</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="comment">//在数据量大的情况下，可以使用循环操作.</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h2><p><strong>节点流</strong>可以从一个特定的数据源读写数据，如FIleReader、FileWriter</p><p><strong>处理流</strong>(也叫包装流)是“连接”在已存在的流（节点流或处理流)之上，为程序提供更为强大的读写功能，也更加灵活,如BufferedReader、BufferedWriter</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207231727352.png" alt=""></p><p><strong>节点流和处理流的区别和联系</strong></p><ol><li>节点流是底层流/低级流,直接跟数据源相接。</li><li>处理流(包装流)包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出。</li><li>处理流(也叫包装流)对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连</li></ol><h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\reader_\\story.txt&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\writer_\\note.txt&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;goodbye world&quot;</span>);</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h3><p>BufferedInputStream是字节流在创建BufferedInputStream时，会创建一个内部缓冲区数组.</p><h3 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h3><p>BufferedOutputStream是字节流,实现缓冲的输出流,可以将多个字节写入底层输出流中,而不必对每次字节写入调用底层系统.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedCopy02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\inputstream_\\高山流水.mp3&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dstFilePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\outputstream_\\高山流水.mp3&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dstFilePath));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((readLen = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bytes, <span class="number">0</span>, readLen);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h3><p><strong>序列化和反序列化</strong></p><p>1.序列化就是在保存数据时，保存数据的值和数据类型</p><p>2.反序列化就是在恢复数据时,恢复数据的值和数据类型</p><p>3.需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一:<br>    Serializable //这是一个标记接口,没有方法<br>    Externalizable //该接口有方法需要实现，因此我们一般实现上面的Serializable接口</p><p>ObjectOutputStream 提供 序列化功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//序列化后，保存的文件格式，不是存文本，而是按照他的格式来保存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\outputstream_\\data.dat&quot;</span>;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line"><span class="comment">//序列化数据到 \data.dat</span></span><br><span class="line">        oos.writeInt(<span class="number">100</span>);<span class="comment">// int -&gt; Integer (实现了 Serializable)</span></span><br><span class="line">        oos.writeBoolean(<span class="literal">true</span>);<span class="comment">// boolean -&gt; Boolean (实现了 Serializable)</span></span><br><span class="line">        oos.writeChar(<span class="string">&#x27;a&#x27;</span>);<span class="comment">// char -&gt; Character (实现了 Serializable)</span></span><br><span class="line">        oos.writeDouble(<span class="number">9.5</span>);<span class="comment">// double -&gt; Double (实现了 Serializable)</span></span><br><span class="line">        oos.writeUTF(<span class="string">&quot;学习学习&quot;</span>);<span class="comment">//String</span></span><br><span class="line"><span class="comment">//保存一个 dog 对象</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">10</span>));</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;数据保存完毕(序列化形式)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\outputstream_\\data.dat&quot;</span>;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line">        <span class="comment">// 2.读取， 注意顺序</span></span><br><span class="line">        System.out.println(ois.readInt());</span><br><span class="line">        System.out.println(ois.readBoolean());</span><br><span class="line">        System.out.println(ois.readChar());</span><br><span class="line">        System.out.println(ois.readDouble());</span><br><span class="line">        System.out.println(ois.readUTF());</span><br><span class="line">        System.out.println(ois.readObject());</span><br><span class="line"><span class="comment">//        System.out.println(ois.readObject());</span></span><br><span class="line"><span class="comment">//        System.out.println(ois.readObject());</span></span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;以反序列化的方式读取(恢复)ok~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1)读写顺序要一致</p><p>2)要求序列化或反序列化对象,需要实现 Serializable</p><p>3)序列化的类中建议添加SerialVersionUID.为了提高版本的兼容性</p><p>4)序列化对象时，默认将里面所有属性都进行序列化，但<strong>除了static或transient修饰的成员</strong></p><p>5)序列化对象时，要求里面属性的类型也需要实现序列化接口</p><p>6)序列化具备可继承性,也就是如果某类已经实现了序列化，则它的所有子类也已经默认实现了序列化</p><h2 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207232041319.png" alt=""></p><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>1.InputStreamReader:Reader的子类，可以将InputStream(字节流)包装成(换)Reader(字符流)</p><p>2.OutputStreamWriter:Writer的子类，实现将OutputStream(字节流)包装成Writer(宁符流)</p><p>3.当处理纯文本数据时，如果使用字符流效率更高，并且可以有效解决中文问题，所以建议将字节流转换成字符流</p><p>4.可以在使用时指定编码格式(比如utf-8, gbk , gb2312, IS08859-1等)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\transformation_\\a.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//解读</span></span><br><span class="line">        <span class="comment">//1. 把 FileInputStream 转成 InputStreamReader</span></span><br><span class="line">        <span class="comment">//2. 指定编码 gbk</span></span><br><span class="line">        <span class="comment">//InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath), &quot;gbk&quot;);</span></span><br><span class="line">        <span class="comment">//3. 把 InputStreamReader 传入 BufferedReader</span></span><br><span class="line">        <span class="comment">//BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将2 和 3 合在一起</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath), <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 读取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容=&quot;</span> + s);</span><br><span class="line">        <span class="comment">//5. 关闭外层流</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\transformation_\\b.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath), <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">        osw.write(<span class="string">&quot;god,天&quot;</span>);</span><br><span class="line">        osw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><h3 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h3><p>PrintStream （字节打印流/输出流）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//在默认情况下，PrintStream 输出数据的位置是 标准输出，即显示器</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">        out.print(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">        out.write(<span class="string">&quot;Hello, 世界!&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//可以修改打印流输出的位置、设备</span></span><br><span class="line">        System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\printstream_\\p1.txt&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;goodbye, world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//PrintWriter printWriter = new PrintWriter(System.out);</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\Java_Project\\basicOfJava\\io_\\printstream_\\p2.txt&quot;</span>));</span><br><span class="line">        printWriter.print(<span class="string">&quot;hi, 北京你好~~~~&quot;</span>);</span><br><span class="line">        printWriter.close();<span class="comment">//flush + 关闭流, 才会将数据写入到文件..</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><p>1)专门用于读写配置文件的集合类</p><p>配置文件的格式:</p><p>键=值</p><p>键=值</p><p>2)注意:键值对不需要有空格，值不需要用引号一起来。默认类型是String</p><p>3)Properties的常见方法</p><ul><li><p>load:加载配置文件的键值对到Properties对象</p></li><li><p>list:将数据显示到指定设备</p></li><li><p>getProperty(key):根据键获取值</p></li><li><p>setProperty(key,value):设置键值对到Properties对象</p></li><li><p>store:将Properties中的键值对存储到配置文件,在idea中，保存信息到配置文件，如果含</p><p>有中文，会存储为unicode码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//使用 Properties 类来读取 mysql.properties 文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建 Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//2. 加载指定配置文件</span></span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//3. 把 k-v 显示控制台</span></span><br><span class="line">        properties.list(System.out);</span><br><span class="line">        <span class="comment">//4. 根据 key 获取对应的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名=&quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码是=&quot;</span> + pwd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用 Properties 类来创建 配置文件，修改配置文件内容</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//创建</span></span><br><span class="line">        <span class="comment">//1.如果该文件没有 key 就是创建</span></span><br><span class="line">        <span class="comment">//2.如果该文件有 key ,就是修</span></span><br><span class="line">        properties2.setProperty(<span class="string">&quot;charset&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">        properties2.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;汤姆&quot;</span>);<span class="comment">//注意保存时，是中文的 unicode 码值</span></span><br><span class="line">        properties2.setProperty(<span class="string">&quot;pwd&quot;</span>,<span class="string">&quot;888888&quot;</span>);</span><br><span class="line">        <span class="comment">//将 k-v 存储文件中即可</span></span><br><span class="line">        properties2.store(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;src\\mysql2.properties&quot;</span>), <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;保存配置文件成功~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;招财猫&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//public的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;&#125; <span class="comment">//无参构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123; <span class="comment">//常用方法</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;hi &quot; + name);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123; <span class="comment">//常用方法</span></span><br><span class="line">        System.out.println(name + <span class="string">&quot; 喵喵叫..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记01</title>
      <link href="/post/JAVA01/"/>
      <url>/post/JAVA01/</url>
      
        <content type="html"><![CDATA[<h1 id="java概述"><a href="#java概述" class="headerlink" title="java概述"></a>java概述</h1><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转义字符</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeChar</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// \t :一个制表位，实现对齐功能</span></span><br><span class="line">System.out.println(<span class="string">&quot;北京\t天津\t上海&quot;</span>);</span><br><span class="line"><span class="comment">// \n :换行符</span></span><br><span class="line">System.out.println(<span class="string">&quot;ab\ncd\nef&quot;</span>);</span><br><span class="line"><span class="comment">// \\ : 一个\</span></span><br><span class="line">System.out.println(<span class="string">&quot;北京\\天津\\\\上海&quot;</span>);</span><br><span class="line"><span class="comment">// \&quot; : 一个&quot;</span></span><br><span class="line">System.out.println(<span class="string">&quot;北京\&quot;天津\&quot;上海&quot;</span>);</span><br><span class="line"><span class="comment">// \&#x27; : 一个&#x27;</span></span><br><span class="line">System.out.println(<span class="string">&quot;北京\&#x27;天津\&#x27;上海&quot;</span>);</span><br><span class="line"><span class="comment">// \r : 一个回车</span></span><br><span class="line"><span class="comment">// 输出为  上海天津</span></span><br><span class="line">System.out.println(<span class="string">&quot;北京天津\r上海&quot;</span>);</span><br><span class="line"><span class="comment">// 输出为  北京天津</span></span><br><span class="line"><span class="comment">//   上海</span></span><br><span class="line">System.out.println(<span class="string">&quot;北京天津\r\n上海&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line">System.out.println(<span class="string">&quot;书名\t作者\t价格\t销量\n三国\t罗贯中\t120\t1000&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">北京    天津    上海</span></span><br><span class="line"><span class="comment">ab</span></span><br><span class="line"><span class="comment">cd</span></span><br><span class="line"><span class="comment">ef</span></span><br><span class="line"><span class="comment">北京\天津\\上海</span></span><br><span class="line"><span class="comment">北京&quot;天津&quot;上海</span></span><br><span class="line"><span class="comment">北京&#x27;天津&#x27;上海</span></span><br><span class="line"><span class="comment">上海天津</span></span><br><span class="line"><span class="comment">北京天津</span></span><br><span class="line"><span class="comment">上海</span></span><br><span class="line"><span class="comment">书名    作者    价格    销量</span></span><br><span class="line"><span class="comment">三国    罗贯中  120     1000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 麦子落</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Comment02</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在cmd中输入<code>javadoc -d d:\\temp -author -version Comment02.java</code>生成文档注释</p><h2 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h2><p><code>md d:\\test</code>创建目录/文件夹</p><p><code>rd d:\\test</code> 删除目录/文件夹</p><p>dir ：查看当前目录有什么内容</p><p>cd  : 切换到其他盘下  例：cd \D c:</p><p>..    : 切换到上一级目录 例： cd ..</p><p>cd \ :  切换到根目录</p><p>tree ：查看指定的目录下的所有的子级目录  例: tree d:</p><p>cls  : 清屏</p><p>exit ：退出DOS</p><p>echo ：输入内容到文件  例：echo hello &gt;  hello.txt</p><p>copy:  拷贝</p><p>del : 删除文件</p><p>move ：剪切</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plus</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="number">100</span>+<span class="number">98</span>);  <span class="comment">//198</span></span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span>+<span class="number">98</span>); <span class="comment">//10098</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="number">100</span>+<span class="number">3</span>+<span class="string">&quot;hello&quot;</span>); <span class="comment">//103hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>+<span class="number">100</span>+<span class="number">3</span>); <span class="comment">//hello1003</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206291445661.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206291446955.png" alt=""></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206291455904.png" alt=""></p><p>boolean类型不可以0或非0的整数替代false和true，这点和C语言不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToBasic</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型-&gt;String</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">4.5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> f1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> d1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(s1 + <span class="string">&quot; &quot;</span> + s2 + <span class="string">&quot; &quot;</span> + s3 + <span class="string">&quot; &quot;</span> + s4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String-&gt;对应的基本数据类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">//会在OOP 讲对象和方法的时候回详细</span></span><br><span class="line"><span class="comment">//解读 使用 基本数据类型对应的包装类，的相应方法，得到基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(s5);</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> Double.parseDouble(s5);</span><br><span class="line"><span class="type">float</span> <span class="variable">num3</span> <span class="operator">=</span> Float.parseFloat(s5);</span><br><span class="line"><span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> Long.parseLong(s5);</span><br><span class="line"><span class="type">byte</span> <span class="variable">num5</span> <span class="operator">=</span> Byte.parseByte(s5);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="type">short</span> <span class="variable">num6</span> <span class="operator">=</span> Short.parseShort(s5);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">System.out.println(num1);<span class="comment">//123</span></span><br><span class="line">System.out.println(num2);<span class="comment">//123.0</span></span><br><span class="line">System.out.println(num3);<span class="comment">//123.0</span></span><br><span class="line">System.out.println(num4);<span class="comment">//123</span></span><br><span class="line">System.out.println(num5);<span class="comment">//123</span></span><br><span class="line">System.out.println(num6);<span class="comment">//123</span></span><br><span class="line">System.out.println(b);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//怎么把字符串转成字符char -&gt; 含义是指 把字符串的第一个字符得到</span></span><br><span class="line"><span class="comment">//解读  s5.charAt(0) 得到 s5字符串的第一个字符 &#x27;1&#x27;</span></span><br><span class="line">System.out.println(s5.charAt(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperatorExercise</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//1.需求:</span></span><br><span class="line"><span class="comment">//假如还有 59 天放假，问：合 xx 个星期零 xx 天</span></span><br><span class="line"><span class="comment">//2.思路分析</span></span><br><span class="line"><span class="comment">//(1) 使用 int 变量 days 保存 天数</span></span><br><span class="line"><span class="comment">//(2) 一个星期是 7 天 星期数 weeks： days / 7 零 xx 天 leftDays days % 7</span></span><br><span class="line"><span class="comment">//(3) 输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.走代码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> <span class="number">505</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">weeks</span> <span class="operator">=</span> days / <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">leftDays</span> <span class="operator">=</span> days % <span class="number">7</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;还有&quot;</span>+days+<span class="string">&quot;天放假，合&quot;</span>+weeks+<span class="string">&quot;个星期零&quot;</span>+leftDays+<span class="string">&quot;天&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为</span></span><br><span class="line"><span class="comment">//：5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//2 思路分析</span></span><br><span class="line"><span class="comment">//(1) 先定义一个 double huaShi 变量保存 华氏温度</span></span><br><span class="line"><span class="comment">//(2) 根据给出的公式，进行计算即可 5/9*(华氏温度-100)</span></span><br><span class="line"><span class="comment">// 考虑数学公式和 java 语言的特性</span></span><br><span class="line"><span class="comment">//(3) 将得到的结果保存到 double sheShi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 走代码</span></span><br><span class="line"><span class="type">double</span> <span class="variable">huaShi</span> <span class="operator">=</span> <span class="number">234.5</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">sheShi</span> <span class="operator">=</span> <span class="number">5.0</span> / <span class="number">9</span> * (huaShi - <span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;华氏温度&quot;</span> + huaShi+ <span class="string">&quot; 对应的摄氏温度=&quot;</span> + sheShi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>也称比较运算符，结果都是boolean型。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206292003148.png" alt=""></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>结果都是boolean型</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206292004527.png" alt=""></p><p>&amp;&amp; 和 &amp; 使用区别 </p><p>1) &amp;&amp;短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为 false，效率高<br>2) &amp; 逻辑与：不管第一个条件是否为 false，第二个条件都要判断，效率</p><p>|| 和 | 使用区别 </p><ol><li>||短路或：如果第一个条件为 true，则第二个条件不会判断，最终结果为 true，效率高</li><li>| 逻辑或：不管第一个条件是否为 true，第二个条件都要判断，效率低</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicOperator</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>; </span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">6</span> &amp; ++y==<span class="number">6</span>)&#123;</span><br><span class="line">x = <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span> + x + <span class="string">&quot;y=&quot;</span> + y);</span><br><span class="line"><span class="comment">// 6 6 </span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">i</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">j</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">46</span>;</span><br><span class="line"><span class="keyword">if</span>((z++==<span class="number">46</span>)&amp;&amp;(j=<span class="literal">true</span>)) z++;</span><br><span class="line"><span class="keyword">if</span>((i=<span class="literal">false</span>)||(++z==<span class="number">49</span>)) z++;</span><br><span class="line">System.out.println(<span class="string">&quot;z=&quot;</span> + z);</span><br><span class="line"><span class="comment">// 50</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssignOperator</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">n1 += <span class="number">4</span>;<span class="comment">// n1 = n1 + 4;</span></span><br><span class="line">System.out.println(n1); <span class="comment">// 14</span></span><br><span class="line">n1 /= <span class="number">3</span>;<span class="comment">// n1 = n1 / 3;//4</span></span><br><span class="line">System.out.println(n1); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//！！！复合赋值运算符会进行类型转换！！！</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b += <span class="number">2</span>; <span class="comment">// 等价 b = (byte)(b + 2);</span></span><br><span class="line">b++; <span class="comment">// b = (byte)(b+1);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TernaryOperator</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"><span class="comment">// 解读</span></span><br><span class="line"><span class="comment">// 1. a &gt; b 为 false</span></span><br><span class="line"><span class="comment">// 2. 返回 b--, 先返回 b的值,然后在 b-1</span></span><br><span class="line"><span class="comment">// 3. 返回的结果是99 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ? a++ : b--;</span><br><span class="line">System.out.println(<span class="string">&quot;result=&quot;</span> + result);</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a);</span><br><span class="line">System.out.println(<span class="string">&quot;b=&quot;</span> + b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>上一行运算符总优先先下一行</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206292037981.png" alt=""></p><h2 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//表示把java.util下的Scanner类导入 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//演示接受用户的输入</span></span><br><span class="line"><span class="comment">//步骤</span></span><br><span class="line"><span class="comment">//Scanner类 表示 简单文本扫描器，在java.util 包</span></span><br><span class="line"><span class="comment">//1. 引入/导入 Scanner类所在的包</span></span><br><span class="line"><span class="comment">//2. 创建 Scanner 对象 , new 创建一个对象,体会</span></span><br><span class="line"><span class="comment">//   myScanner 就是 Scanner类的对象</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//3. 接收用户输入了， 使用 相关的方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当程序执行到 next 方法时，会等待用户输入~~~</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next(); <span class="comment">//接收用户输入字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt(); <span class="comment">//接收用户输入int</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入薪水&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> myScanner.nextDouble(); <span class="comment">//接收用户输入double</span></span><br><span class="line">System.out.println(<span class="string">&quot;人的信息如下:&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;名字=&quot;</span> + name </span><br><span class="line">+ <span class="string">&quot; 年龄=&quot;</span> + age + <span class="string">&quot; 薪水=&quot;</span> + sal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>二进制转换成八进制 </p><p>规则：从低位开始,将二进制数每三位一组，转成对应的八进制数即可。 </p><p>案例：请将 ob11010101 转成八进制 ob11(3)010(2)101(5) =&gt; 0325 </p><p> 二进制转换成十六进制 </p><p>规则：从低位开始，将二进制数每四位一组，转成对应的十六进制数即可。 </p><p>案例：请将 ob11010101 转成十六进制 ob1101(D)0101(5) = 0xD5</p><p>八进制转换成二进制 </p><p>规则：将八进制数每 1 位，转成对应的一个 3 位的二进制数即可。 案例：请将 0237 转成二进制 02(010)3(011)7(111) = 0b10011111 </p><p>十六进制转换成二进制 </p><p>规则：将十六进制数每 1 位，转成对应的 4 位的一个二进制数即可。 </p><p>案例：请将 0x23B 转成二进制 0x2(0010)3(0011)B(1011) = 0b001000111011</p><h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206292115544.png" alt=""></p><h1 id="程序控制结构"><a href="#程序控制结构" class="headerlink" title="程序控制结构"></a>程序控制结构</h1><h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">/* 根据淡旺季的月份和年龄 打印票价</span></span><br><span class="line"><span class="comment">4-10旺季：</span></span><br><span class="line"><span class="comment">成人（18-60）：60</span></span><br><span class="line"><span class="comment">儿童（&lt;18) :30</span></span><br><span class="line"><span class="comment">老人（&gt;60) :20</span></span><br><span class="line"><span class="comment">淡季：</span></span><br><span class="line"><span class="comment">成人：40</span></span><br><span class="line"><span class="comment">其他：20</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入月份&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(month &gt;= <span class="number">4</span> &amp;&amp; month &lt;= <span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;票价为60元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(age &lt; <span class="number">18</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;票价为30元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;票价为20元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;票价为40元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;票价为20元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Switch01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//编写一个 main 方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        案例：Switch01.java</span></span><br><span class="line"><span class="comment">        请编写一个程序，该程序可以接收一个字符，比如:a,b,c,d,e,f,g</span></span><br><span class="line"><span class="comment">        a 表示星期一，b 表示星期二 …</span></span><br><span class="line"><span class="comment">        根据用户的输入显示相应的信息.要求使用 switch 语句完成</span></span><br><span class="line"><span class="comment">        思路分析</span></span><br><span class="line"><span class="comment">        1. 接收一个字符 , 创建 Scanner 对象</span></span><br><span class="line"><span class="comment">        2. 使用 switch 来完成匹配,并输出对应信息</span></span><br><span class="line"><span class="comment">        代码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入a-g&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">switch</span> (c1) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: System.out.println(<span class="string">&quot;星期一&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>: System.out.println(<span class="string">&quot;星期二&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>: System.out.println(<span class="string">&quot;星期三&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: System.out.println(<span class="string">&quot;星期四&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: System.out.println(<span class="string">&quot;星期五&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>: System.out.println(<span class="string">&quot;星期六&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: System.out.println(<span class="string">&quot;星期七&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> : System.out.println(<span class="string">&quot;错误&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1) 使用 switch 把小写类型的 char 型转为大写(键盘输入)。</span></span><br><span class="line">        <span class="comment">// 只转换 a, b, c, d, e. 其它的输出 &quot;other&quot;。</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;other&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2) 对学生成绩大于 60 分的，输出&quot;合格&quot;。</span></span><br><span class="line">        <span class="comment">// 低于 60 分的，输出&quot;不合格&quot;。(注：输入的成绩不能大于 100)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> score / <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;不合格&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;分数错误&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3) 根据用于指定月份，打印该月份所属的季节。</span></span><br><span class="line">        <span class="comment">// 3,4,5 春季 6,7,8 夏季 9,10,11 秋季 12, 1, 2 冬季</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>switch 和 if 的比较 </p><p>1) 如果判断的具体数值不多，而且符合 byte、 short 、int、 char、enum[枚举]、String 这 6 种类型。虽然两个语句都可以使用，建议使用 swtich 语句。<br>2) 其他情况：对区间判断，对结果为 boolean 类型判断，使用 if，if 的使用范围更广。</p><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//打印 1~100 之间所有是 9 的倍数的整数，统计个数及总和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">9</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count++;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;count: &quot;</span> + count);</span><br><span class="line">        System.out.println(<span class="string">&quot;sum: &quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印算式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">5</span>; i &lt;= <span class="number">5</span> &amp;&amp; j &gt;= <span class="number">0</span>; i++, j--) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot; + &quot;</span> + j + <span class="string">&quot; = &quot;</span> + (i + j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot; + &quot;</span> + (n-i) + <span class="string">&quot; = &quot;</span> + n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 打印 1—100 之间所有能被 3 整除的数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(start % step == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(start);</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印 40—200 之间所有的偶数</span></span><br><span class="line">        start = <span class="number">40</span>;</span><br><span class="line">        end = <span class="number">200</span>;</span><br><span class="line">        step = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(start % step == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(start);</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//打印 1—100 [学生做]</span></span><br><span class="line">        <span class="comment">//计算 1—100 的和 [学生做]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(start);</span><br><span class="line">            sum += start;</span><br><span class="line">            start++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (start &lt;= end);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//统计 1---200 之间能被 5 整除但不能被 3 整除的个数</span></span><br><span class="line">        start = <span class="number">1</span>;</span><br><span class="line">        end = <span class="number">200</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (start % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; start % <span class="number">3</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(start);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (start &lt;= end);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果李三不还钱，则老韩将一直使出五连鞭，直到李三说还钱</span></span><br><span class="line">        <span class="comment">//[System.out.println(&quot;老韩问：还钱吗？y/n&quot;)</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;老韩问：还钱吗？y/n&quot;</span>);</span><br><span class="line">            c = scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">while</span> (c != <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多重循环控制"><a href="#多重循环控制" class="headerlink" title="多重循环控制"></a>多重循环控制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulForExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//统计 3 个班成绩情况，每个班有 5 名同学，</span></span><br><span class="line">        <span class="comment">//求出各个班的平均分和所有班级的平均分[学生的成绩从键盘输入]。</span></span><br><span class="line">        <span class="comment">//统计三个班及格人数，每个班有 5 名同学。</span></span><br><span class="line"><span class="comment">//        Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        double score ;</span></span><br><span class="line"><span class="comment">//        double avgScore=0.0 ;</span></span><br><span class="line"><span class="comment">//        double allAvgScore=0.0 ;</span></span><br><span class="line"><span class="comment">//        int count=0 ;</span></span><br><span class="line"><span class="comment">//        for(int i=0; i&lt;3 ;i++)&#123;</span></span><br><span class="line"><span class="comment">//            for(int j=0; j&lt;5; j++)&#123;</span></span><br><span class="line"><span class="comment">//                score = scanner.nextDouble();</span></span><br><span class="line"><span class="comment">//                avgScore+=score/5;</span></span><br><span class="line"><span class="comment">//                if(score&gt;=60)   count++;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;班级&quot;+(i+1)+&quot;的平均分为： &quot;+ avgScore);</span></span><br><span class="line"><span class="comment">//            allAvgScore+=avgScore/3;</span></span><br><span class="line"><span class="comment">//            avgScore=0.0;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;所有班级的平均分为： &quot;+ allAvgScore);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;总及格人数为： &quot; + count );</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//九九乘法表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(j + <span class="string">&quot; * &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (i * j) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stars</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 打印金字塔</span></span><br><span class="line"><span class="comment">//            *</span></span><br><span class="line"><span class="comment">//           ***</span></span><br><span class="line"><span class="comment">//          *****</span></span><br><span class="line"><span class="comment">//         *******</span></span><br><span class="line"><span class="comment">//        *********</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//i表示层数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//输出空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= <span class="number">5</span> - i; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出*号</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span> * i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印空心金字塔</span></span><br><span class="line"><span class="comment">//            *</span></span><br><span class="line"><span class="comment">//           * *</span></span><br><span class="line"><span class="comment">//          *   *</span></span><br><span class="line"><span class="comment">//         *     *</span></span><br><span class="line"><span class="comment">//        *********</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= level; i++) &#123;</span><br><span class="line">            <span class="comment">//打印两边空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= level - i; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出*号和中间空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span> * i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">1</span> || j == <span class="number">2</span> * i - <span class="number">1</span> || i == level) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BreakExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">chances</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= chances; i++) &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;输入用户名&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入密码&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="comment">//第二种比较写法更推荐，可以避免空指针</span></span><br><span class="line">            <span class="keyword">if</span> (username.equals(<span class="string">&quot;麦子落&quot;</span>) &amp;&amp; <span class="string">&quot;666&quot;</span>.equals(password)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;你还有&quot;</span> + (chances - i) + <span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControlTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//homework1</span></span><br><span class="line">        <span class="comment">//某人有100000元，每经过一次路口，需要交费</span></span><br><span class="line">        <span class="comment">// 1)当现金&gt;50000,每次交5%</span></span><br><span class="line">        <span class="comment">// 2)当&lt;=50000,每次交1000</span></span><br><span class="line">        <span class="comment">// 使用while break方式完成</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">cash</span> <span class="operator">=</span> <span class="number">100000.0</span>;</span><br><span class="line">        <span class="comment">//可通过次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cash &gt; <span class="number">50000</span>) &#123;</span><br><span class="line">                cash = <span class="number">0.95</span> * cash;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cash &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                cash -= <span class="number">1000</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;count:&quot;</span> + count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//homework2</span></span><br><span class="line">        <span class="comment">//判断一个整数是否是水仙花数  153 = 1*1*1 + 3*3*3 + 5*5*5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> i / <span class="number">100</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> i % <span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> i % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (i1 * i1 * i1 + i2 * i2 * i2 + i3 * i3 * i3 == i) &#123;</span><br><span class="line">                System.out.println(i + <span class="string">&quot;是水仙花数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//homework3</span></span><br><span class="line">        <span class="comment">//输出1-100之间不能被5整除的数，每5个一行</span></span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">5</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断一行5个是否完成</span></span><br><span class="line">                <span class="comment">//取余操作 不用每次让count从0开始计数</span></span><br><span class="line">                <span class="keyword">if</span> (count % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//homework4</span></span><br><span class="line">        <span class="comment">//输出小写的a-z和大写的Z-A</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; c1 &lt;= <span class="string">&#x27;z&#x27;</span>; c1++) &#123;</span><br><span class="line">            System.out.print(c1 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;Z&#x27;</span>; c2 &gt;= <span class="string">&#x27;A&#x27;</span>; c2--) &#123;</span><br><span class="line">            System.out.print(c2 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//homework5</span></span><br><span class="line">        <span class="comment">// 输出1-1/2+1/3-1/4....1/100</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//分子要写出1.0</span></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                sum -= <span class="number">1.0</span> / i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += <span class="number">1.0</span> / i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//homework6</span></span><br><span class="line">        <span class="comment">//求1+(1+2)+(1+2+3)+...+(1+2+3+...+100)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum6</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                sum6 += j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum6 = &quot;</span> + sum6);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组、排序和查找"><a href="#数组、排序和查找" class="headerlink" title="数组、排序和查找"></a>数组、排序和查找</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组使用注意事项和细节"><a href="#数组使用注意事项和细节" class="headerlink" title="数组使用注意事项和细节"></a>数组使用注意事项和细节</h3><p>1) 数组是多个相同类型数据的组合，实现对这些数据的统一管理<br>2)  数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。<br>3) 数组创建后，如果没有赋值，有默认值 int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null<br>4) 使用数组的步骤 1. 声明数组并开辟空间 2 给数组各个元素赋值 3 使用数组<br>5) 数组的下标是从 0 开始的。<br>6) 数组下标必须在指定范围内使用，否则报：下标越界异常，比如 韩顺平循序渐进学 Java 零基础 第 148页 int [] arr=new int[5]; 则有效下标为 0-4<br>7) 数组属引用类型，数组型数据是对象(object)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个 char 类型的 26 个元素的数组，分别放置&#x27;A&#x27;-&#x27;Z&#x27;。</span></span><br><span class="line">        <span class="comment">// 使用 for 循环访问所有元素并打印出来</span></span><br><span class="line">        <span class="type">char</span>[] array = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="comment">//放置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            array[i] = (<span class="type">char</span>) (<span class="string">&#x27;A&#x27;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求一个int[]的最大值，并得到对应的下标</span></span><br><span class="line">        <span class="comment">//求和和平均值</span></span><br><span class="line">        <span class="type">int</span>[] array2 = &#123;<span class="number">4</span>, -<span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">23</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array2[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> avg=<span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array2[i] &gt; max) &#123;</span><br><span class="line">                max = array2[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">            sum+=array2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        avg=(<span class="type">double</span>)sum/array2.length;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值为: &quot;</span> + max + <span class="string">&quot; 下标为: &quot;</span> + index);</span><br><span class="line">        System.out.println(<span class="string">&quot;和为: &quot;</span> + sum + <span class="string">&quot; 平均值为: &quot;</span> + avg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h3><p>1) 基本数据类型赋值，这个值就是具体的数据，而且相互不影响。 int n1 = 2; int n2 = n1;<br>2) 数组在默认情况下是引用传递，赋的值是地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayAssign</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型赋值, 赋值方式为值拷贝</span></span><br><span class="line"><span class="comment">//n2的变化，不会影响到n1的值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> n1;</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">80</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n1=&quot;</span> + n1);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;n2=&quot;</span> + n2);<span class="comment">//80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用赋值</span></span><br><span class="line"><span class="comment">//是一个地址 , arr2变化会影响到 arr1</span></span><br><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = arr1;<span class="comment">//把 arr1赋给 arr2</span></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//看看arr1的值</span></span><br><span class="line">System.out.println(<span class="string">&quot;====arr1的元素====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">System.out.println(arr1[i]);<span class="comment">//10, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;====arr2的元素====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">System.out.println(arr2[i]);<span class="comment">//10, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组翻转"><a href="#数组翻转" class="headerlink" title="数组翻转"></a>数组翻转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReverse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            arr[i] = arr[len - i - <span class="number">1</span>];</span><br><span class="line">            arr[len - <span class="number">1</span> - i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="type">int</span> []arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len-<span class="number">1</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">            arr2[len - <span class="number">1</span> - i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            System.out.print(arr2[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组缩减"><a href="#数组缩减" class="headerlink" title="数组缩减"></a>数组缩减</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReduce</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//初始化数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否进行缩减 y/n&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//如果输入 n ,就结束</span></span><br><span class="line">            <span class="keyword">if</span> (key == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr.length == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;只有一个元素，不再缩减&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//遍历 arr 数组，依次将 arr 的元素拷贝到 arrNew 数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                arrNew[i] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//让 arr 指向 arrNew,</span></span><br><span class="line">            arr = arrNew;</span><br><span class="line">            <span class="comment">//输出 arr 看看效果</span></span><br><span class="line">            System.out.println(<span class="string">&quot;====arr 缩减后元素情况====&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;结束...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>, <span class="number">84</span>, <span class="number">10</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> len; j &gt; <span class="number">1</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; j - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                    arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqSearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//顺序查找</span></span><br><span class="line">        String arr[] = &#123;<span class="string">&quot;白毛&quot;</span>, <span class="string">&quot;金毛&quot;</span>, <span class="string">&quot;紫毛&quot;</span>, <span class="string">&quot;青毛&quot;</span>, <span class="string">&quot;黑毛&quot;</span>&#125;;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i].equals(str)) &#123;</span><br><span class="line">                System.out.println(str + <span class="string">&quot;找到了,下标为：&quot;</span> + i);</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(str + <span class="string">&quot;未找到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoDimensionalArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//遍历二维数组，得到和</span></span><br><span class="line">        <span class="type">int</span> arr[][] = &#123;&#123;<span class="number">4</span>, <span class="number">6</span>&#125;, &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>&#125;, &#123;-<span class="number">2</span>&#125;&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个一维数组为：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">                System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                sum += arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;和为：&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//杨辉三角</span></span><br><span class="line"><span class="comment">//        1</span></span><br><span class="line"><span class="comment">//        1 1</span></span><br><span class="line"><span class="comment">//        1 2 1</span></span><br><span class="line"><span class="comment">//        1 3 3 1</span></span><br><span class="line"><span class="comment">//        1 4 6 4 1</span></span><br><span class="line"><span class="comment">//        1 5 10 10 5 1</span></span><br><span class="line">        <span class="comment">//设置行数n</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> yanghui[][] = <span class="keyword">new</span> <span class="title class_">int</span>[n][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            yanghui[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yanghui[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span> || j == yanghui[i].length - <span class="number">1</span>) &#123;</span><br><span class="line">                    yanghui[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    yanghui[i][j] = yanghui[i - <span class="number">1</span>][j - <span class="number">1</span>] + yanghui[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; yanghui.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yanghui[i].length; j++) &#123;</span><br><span class="line">                System.out.print(yanghui[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="本章小结-1"><a href="#本章小结-1" class="headerlink" title="本章小结"></a>本章小结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASFHomework</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//homework1</span></span><br><span class="line">        <span class="comment">// 将一个元素插入有序数组，要求插入后依然有序</span></span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">10</span>, <span class="number">12</span>, <span class="number">45</span>, <span class="number">90</span>&#125;;</span><br><span class="line">        <span class="comment">//寻找插入位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="comment">//要插入的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &lt; arr[i]) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据下标插入元素</span></span><br><span class="line">        <span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != index) &#123;</span><br><span class="line">                newArr[i] = arr[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newArr[i] = num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line">            System.out.print(newArr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//homework2</span></span><br><span class="line">        <span class="comment">//随机生成10个整数（1-100）保存到数组，并倒序打印，</span></span><br><span class="line">        <span class="comment">//求平均值，最大值和最大值的下标，并查找是否有8</span></span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">            arr2[i] = (<span class="type">int</span>) (Math.random() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">            sum2 += arr2[i];</span><br><span class="line">            <span class="keyword">if</span> (arr2[i] &gt; max2) &#123;</span><br><span class="line">                max2 = arr2[i];</span><br><span class="line">                index2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//倒序打印</span></span><br><span class="line">        <span class="comment">//查找是否有8</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ifHave8</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr2.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.print(arr2[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (arr2[i] == <span class="number">8</span>) &#123;</span><br><span class="line">                ifHave8 = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">if</span> (ifHave8 == <span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印平均值，最大值和最大值的下标</span></span><br><span class="line">        System.out.println(<span class="string">&quot;平均值为：&quot;</span> + (<span class="type">double</span>) sum2 / arr2.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值为: &quot;</span> + max2 + <span class="string">&quot; 下标为： &quot;</span> + index2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="面向对象编程（基础部分）"><a href="#面向对象编程（基础部分）" class="headerlink" title="面向对象编程（基础部分）"></a>面向对象编程（基础部分）</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="Java-内存的结构分析"><a href="#Java-内存的结构分析" class="headerlink" title="Java 内存的结构分析"></a>Java 内存的结构分析</h3><p>1) 栈：一般存放基本数据类型(局部变量)<br>2) 堆：存放对象(Cat cat , 数组等)<br>3) 方法区：常量池(常量，比如字符串)， 类加载信息</p><h3 id="Java-创建对象的流程简单分析"><a href="#Java-创建对象的流程简单分析" class="headerlink" title="Java 创建对象的流程简单分析"></a>Java 创建对象的流程简单分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(); </span><br><span class="line"></span><br><span class="line">p.name = “jack”; </span><br><span class="line"></span><br><span class="line">p.age = <span class="number">10</span> </span><br></pre></td></tr></table></figure><p>1) 先加载 Person 类信息(属性和方法信息, 只会加载一次)<br>2)  在堆中分配空间, 进行默认初始化(看规则)<br>3)  把地址赋给 p , p 就指向对象<br>4) 进行指定初始化， 比如 p.name =”jack” p.age = 1</p><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Method</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//编写类 AA ，有一个方法：</span></span><br><span class="line">        <span class="comment">// 判断一个数是奇数 odd 还是偶数, 返回 boolean</span></span><br><span class="line">        <span class="type">AA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">index</span> <span class="operator">=</span> a.isOdd(num);</span><br><span class="line">        <span class="keyword">if</span> (index) &#123;</span><br><span class="line">            System.out.println(num + <span class="string">&quot;是奇数&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(num + <span class="string">&quot;是偶数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据行，列，字符打印</span></span><br><span class="line">        a.print(<span class="number">4</span>, <span class="number">5</span>, <span class="string">&#x27;$&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOdd</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num % <span class="number">2</span> != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                System.out.print(c);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法传参机制"><a href="#方法传参机制" class="headerlink" title="方法传参机制"></a>方法传参机制</h3><p>1.基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodParameter01</span> &#123;</span><br><span class="line">    <span class="comment">//编写一个 main 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//创建 AA 对象 名字 obj</span></span><br><span class="line">        <span class="type">AA</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">        obj.swap(a, b); <span class="comment">//调用 swap</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main 方法 a=&quot;</span> + a + <span class="string">&quot; b=&quot;</span> + b);<span class="comment">//a=10 b=20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\na 和 b 交换前的值\na=&quot;</span> + a + <span class="string">&quot;\tb=&quot;</span> + b);<span class="comment">//a=10 b=20</span></span><br><span class="line"><span class="comment">//完成了 a 和 b 的交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp;</span><br><span class="line">        System.out.println(<span class="string">&quot;\na 和 b 交换后的值\na=&quot;</span> + a + <span class="string">&quot;\tb=&quot;</span> + b);<span class="comment">//a=20 b=10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.引用类型传递的是地址（传递也是值，但是值是地址），可以通过形参影响实参！</p><p>3.成员方法返回类型是引用类型应用实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodParameter01</span> &#123;</span><br><span class="line">    <span class="comment">//编写一个 main 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">18</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p2=p2.copyPerson(p1);</span><br><span class="line">        System.out.println(<span class="string">&quot;p1  &quot;</span>+p1.name+<span class="string">&quot; &quot;</span>+p1.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;p2  &quot;</span>+p2.name+<span class="string">&quot; &quot;</span>+p2.age);</span><br><span class="line">        <span class="comment">//比较看看是否为同一个对象</span></span><br><span class="line">        <span class="comment">//falas</span></span><br><span class="line">        System.out.println(p1 == p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">copyPerson</span><span class="params">(Person p1)</span> &#123;</span><br><span class="line">        Person p2= <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p2.name = p1.name;</span><br><span class="line">        p2.age = p1.age;</span><br><span class="line">        <span class="keyword">return</span> p2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用"></a>方法递归调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">recursion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t1.test(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(t1.factorial(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            test(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;n = &quot;</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//阶乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> factorial(n - <span class="number">1</span>) * n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ClassAndObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用递归的方式求出斐波那契数 1,1,2,3,5,8,13...</span></span><br><span class="line">        <span class="comment">// 给你一个整数 n，求出它的值是多少</span></span><br><span class="line">        <span class="type">TT</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TT</span>();</span><br><span class="line">        System.out.println(t1.fibonacci(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        猴子吃桃子问题：有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个！</span></span><br><span class="line"><span class="comment">        以后每天猴子都吃其中的一半，然后再多吃一个。当到第 10 天时，</span></span><br><span class="line"><span class="comment">        想再吃时（即还没吃），发现只有 1 个桃子了。问题：最初共多少个桃子？</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(t1.peach(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TT</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peach</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (day == <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day &gt;= <span class="number">1</span> &amp;&amp; day &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> peach(day + <span class="number">1</span>) * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;day 在 1-10&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ClassAndObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiGong</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建迷宫</span></span><br><span class="line">        <span class="type">int</span> map[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line">        <span class="comment">// 0表示可以走，1表示障碍物</span></span><br><span class="line">        <span class="comment">//将上下两行设置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将左右两列设置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//打印当前迷宫地图</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找路</span></span><br><span class="line">        <span class="type">TMiGong</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TMiGong</span>();</span><br><span class="line">        t1.findWay(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;找路后&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TMiGong</span> &#123;</span><br><span class="line">    <span class="comment">//findWay方法来找路劲</span></span><br><span class="line">    <span class="comment">//若找到，返回true</span></span><br><span class="line">    <span class="comment">//map是迷宫地图，i，j是当前位置</span></span><br><span class="line">    <span class="comment">//2表示可以走 3表示走过，但是走不通</span></span><br><span class="line">    <span class="comment">//当map[6][5]=2时，找到出路</span></span><br><span class="line">    <span class="comment">//找路策略：下 右 上 左</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findWay</span><span class="params">(<span class="type">int</span>[][] map, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                map[i][j] = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (findWay(map, i + <span class="number">1</span>, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (findWay(map, i, j + <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (findWay(map, i - <span class="number">1</span>, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (findWay(map, i, j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map[i][j] = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ClassAndObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HanoiTower</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//汉诺塔问题</span></span><br><span class="line">        <span class="type">Tower</span> <span class="variable">tower</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tower</span>();</span><br><span class="line">        tower.move(<span class="number">4</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tower</span> &#123;</span><br><span class="line">    <span class="comment">//num 表示要移动的个数, a, b, c 分别表示 A 塔，B 塔,C塔</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> num, <span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(a + <span class="string">&quot;-&gt;&quot;</span> + c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//先移动上面所有的盘到 b, 借助 c</span></span><br><span class="line">            move(num - <span class="number">1</span>, a, c, b);</span><br><span class="line">            <span class="comment">//(2)把最下面的这个盘，移动到 c</span></span><br><span class="line">            System.out.println(a + <span class="string">&quot;-&gt;&quot;</span> + c);</span><br><span class="line">            <span class="comment">//(3)再把 b 塔的所有盘，移动到 c ,借助a</span></span><br><span class="line">            move(num - <span class="number">1</span>, b, a, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ClassAndObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queen8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Queen8</span> <span class="variable">queen8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Queen8</span>();</span><br><span class="line">        queen8.check(<span class="number">0</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;一共有%d解法&quot;</span>, count);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.printf(<span class="string">&quot;一共判断冲突的次数%d次&quot;</span>, judgeCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">8</span>;<span class="comment">// 8个皇后摆放在8*8棋盘</span></span><br><span class="line">    <span class="comment">// 定义数组array, 保存皇后放置位置的结果,比如 arr = &#123;0 , 4, 7, 5, 2, 6, 1, 3&#125;</span></span><br><span class="line">    <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[max];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 记录共有多少中摆放方式</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">judgeCount</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 记录判断了多少次</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编写一个方法，放置第n个皇后 特别注意: check 是 每一次递归时， 进入到check中都有 for(int i = 0; i &lt; max;i++)</span></span><br><span class="line"><span class="comment">     * 因此会有回溯</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == max) &#123;<span class="comment">// n = 8: 第n+1=9个皇后, 说明前8个皇后就已经放好</span></span><br><span class="line">            print(); <span class="comment">// 输出该情况的摆法</span></span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">// 结束</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 依次放入皇后，并判断是否冲突</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="comment">// 先把当前这个皇后 n , 放到该行的第(i+1)列</span></span><br><span class="line">            array[n] = i;</span><br><span class="line">            <span class="comment">// 判断当放置第n个皇后到i列时，是否冲突</span></span><br><span class="line">            <span class="keyword">if</span> (judge(n)) &#123; <span class="comment">// 不冲突</span></span><br><span class="line">                <span class="comment">// 若不冲突，就接着放n+1个皇后,即开始递归</span></span><br><span class="line">                check(n + <span class="number">1</span>); <span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果冲突，就继续执行 array[n] = i; 即将第n个皇后，放置在本行得 后移的一个位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当我们放置第n个皇后, 就去检测该皇后是否和前面已经摆放的皇后冲突</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 表示第n个皇后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">judge</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        judgeCount++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 说明</span></span><br><span class="line">            <span class="comment">// 1. array[i] == array[n] 表示判断 第n个皇后是否和前面的n-1个皇后在同一列</span></span><br><span class="line">            <span class="comment">// 2. Math.abs(n-i) == Math.abs(array[n] - array[i]) 表示判断第n个皇后是否和第i皇后是否在同一斜线</span></span><br><span class="line">            <span class="comment">// n = 1 放置第 2列:1 &lt;---&gt; n = 1 array[1] = 1</span></span><br><span class="line">            <span class="comment">// Math.abs(1-0) == 1 同理 Math.abs(array[n] - array[i]) = Math.abs(1-0) = 1</span></span><br><span class="line">            <span class="comment">// 3. 判断是否在同一行, 没有必要，因为 n 每次都在递增</span></span><br><span class="line">            <span class="keyword">if</span> (array[i] == array[n] || Math.abs(n - i) == Math.abs(array[n] - array[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写一个方法，可以将皇后摆放的位置输出</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>1) 方法名：必须相同<br>2) 形参类型：必须不同（形参类型或个数或顺序，至少有一个不同，参数名无要求）<br>3) 返回类型：无要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverLoad00</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OverLoadExercise</span> <span class="variable">ole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OverLoadExercise</span>();</span><br><span class="line">        ole.m(<span class="number">5</span>);</span><br><span class="line">        ole.m(<span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">        ole.m(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ole.max(<span class="number">4</span>, <span class="number">10</span>));</span><br><span class="line">        System.out.println(ole.max(<span class="number">4.9</span>, -<span class="number">10.8</span>));</span><br><span class="line">        System.out.println(ole.max(<span class="number">2.5</span>, <span class="number">5.2</span>, <span class="number">1.7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OverLoadExercise</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    编写程序，类 OverLoadExercise 中定义三个重载方法并调用。方法名为 m。</span></span><br><span class="line"><span class="comment">    三个方法分别接收一个 int 参数、两个 int 参数、一个字符串参数。</span></span><br><span class="line"><span class="comment">    分别执行平方运算并输出结果，相乘并输出结果，输出字符串信息。</span></span><br><span class="line"><span class="comment">    在主类的 main ()方法中分别用参数区别调用三个方法。</span></span><br><span class="line"><span class="comment">    定义三个重载方法 max()，第一个方法，返回两个 int 值中的最大值，</span></span><br><span class="line"><span class="comment">    第二个方法，返回两个 double 值中的最大值，</span></span><br><span class="line"><span class="comment">    第三个方法，返回三个 double 值中的最大值，</span></span><br><span class="line"><span class="comment">    并分别调用三个方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(<span class="type">int</span> n1)</span> &#123;</span><br><span class="line">        System.out.println(n1 + <span class="string">&quot;的平方 = &quot;</span> + n1 * n1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">        System.out.println(n1 + <span class="string">&quot; * &quot;</span> + n2 + <span class="string">&quot; = &quot;</span> + n1 * n2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String s1)</span> &#123;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 &gt; n2 ? n1 : n2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> n1, <span class="type">double</span> n2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 &gt; n2 ? n1 : n2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> n1, <span class="type">double</span> n2, <span class="type">double</span> n3)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n1 &gt; n2) &#123;</span><br><span class="line">            <span class="keyword">return</span> n1 &gt; n3 ? n1 : n3;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n2 &gt; n3 ? n2 : n3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>java 允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。</p><ol><li>可变参数的实参可以为0个或任意多个。</li><li>可变参数的实参可以是数组。</li><li>可变参数的本质就是数组。</li><li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后。</li><li>一个形参列表中只能出现一个可变参数。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarParameter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">VarParameterEXercise</span> <span class="variable">vpe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VarParameterEXercise</span>();</span><br><span class="line">        <span class="comment">//可变参数的实参可以为0个或任意多个。</span></span><br><span class="line">        System.out.println(vpe.sum(<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="comment">//可变参数的实参可以是数组。</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(vpe.sum(arr));</span><br><span class="line"></span><br><span class="line">        System.out.println(vpe.showScore(<span class="string">&quot;Bob&quot;</span>,<span class="number">60.2</span>,<span class="number">87.1</span>,<span class="number">88.8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VarParameterEXercise</span> &#123;</span><br><span class="line">    <span class="comment">//计算 2 个数的和，3 个数的和 ， 4. 5， 。。</span></span><br><span class="line">    <span class="comment">//1. int... 表示接受的是可变参数，类型是 int ,即可以接收多个 int(0-多)</span></span><br><span class="line">    <span class="comment">//2. 使用可变参数时，可以当做数组来使用 即 nums 可以当做数组</span></span><br><span class="line">    <span class="comment">//3. 遍历 nums 求和即可</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收的参数个数=&quot;</span> + nums.length);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            res += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    有三个方法，分别实现返回姓名和两门课成绩(总分)，</span></span><br><span class="line"><span class="comment">    返回姓名和三门课成绩(总分)，返回姓名和五门课成绩（总分）。</span></span><br><span class="line"><span class="comment">    封装成一个可变参数的方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showScore</span><span class="params">(String name, <span class="type">double</span>... scores)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">totalScore</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">            totalScore += scores[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; 有 &quot;</span> + scores.length + <span class="string">&quot;门课的成绩总分为=&quot;</span> + totalScore;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207071110347.png" alt=""></p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>基本语法：</p><p> [修饰符] 方法名(形参列表){ 方法体; } </p><p>1) 构造器的修饰符可以默认， 也可以是 public protected private<br>2) 构造器没有返回值<br>3) 方法名和类名字必须一样<br>4) 参数列表和成员方法一样的规则<br>5) 构造器的调用，由系统完成</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207071122294.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConstructorExercise</span> <span class="variable">ce</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstructorExercise</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">ConstructorExercise</span> <span class="variable">ce2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstructorExercise</span>();</span><br><span class="line">        System.out.println(ce.name + ce.age);</span><br><span class="line">        System.out.println(ce2.name + ce2.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConstructorExercise</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConstructorExercise</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器被调用~~&quot;</span>);</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConstructorExercise</span><span class="params">(String pName, <span class="type">int</span> pAge)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器被调用~~&quot;</span>);</span><br><span class="line">        name = pName;</span><br><span class="line">        age = pAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConstructorExercise01</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207071424624.png" alt=""></p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>1) this 关键字可以用来访问本类的属性、方法、构造器<br>2) this 用于区分当前类的属性和局部变量<br>3) 访问成员方法的语法：this.方法名(参数列表);<br>4) 访问构造器语法：this(参数列表); 注意只能在构造器中使用(即只能在构造器中访问另外一个构造器, 必须放在第一 条语句)<br>5) this 不能在类定义的外部使用，只能在类定义的方法中使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">This</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThisPerson</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThisPerson</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">ThisPerson</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThisPerson</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(p1.compareTo(p2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThisPerson</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThisPerson</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareTo</span><span class="params">(ThisPerson other)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(other.name) &amp;&amp; other.age == <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="本章小结-2"><a href="#本章小结-2" class="headerlink" title="本章小结"></a>本章小结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ClassAndObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//homework01</span></span><br><span class="line">        <span class="type">double</span>[] dArr = &#123;<span class="number">2.0</span>, <span class="number">1.8</span>, <span class="number">5.4</span>, <span class="number">1.7</span>, <span class="number">0.2</span>&#125;;</span><br><span class="line">        <span class="type">A01</span> <span class="variable">a01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A01</span>();</span><br><span class="line">        System.out.println(a01.max(a01.max(dArr)));</span><br><span class="line">        <span class="comment">//homework02</span></span><br><span class="line">        String[] sArr = &#123;<span class="string">&quot;draw&quot;</span>, <span class="string">&quot;front&quot;</span>, <span class="string">&quot;back&quot;</span>, <span class="string">&quot;raise&quot;</span>&#125;;</span><br><span class="line">        System.out.println(a01.find(<span class="string">&quot;front&quot;</span>, sArr));</span><br><span class="line">        <span class="comment">//homework03</span></span><br><span class="line">        <span class="type">Book01</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book01</span>(<span class="string">&quot;笑傲江湖&quot;</span>, <span class="number">300</span>);</span><br><span class="line">        book.info();</span><br><span class="line">        book.updatePrice();<span class="comment">//更新价格</span></span><br><span class="line">        book.info();</span><br><span class="line">        <span class="comment">//homework04</span></span><br><span class="line">        <span class="type">int</span>[] iArr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] newArr = a01.copyArr(iArr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line">            System.out.print(newArr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//homework05</span></span><br><span class="line">        <span class="type">Circle01</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle01</span>(<span class="number">3.5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;半径为 &quot;</span> + circle.r + <span class="string">&quot; 周长为： &quot;</span></span><br><span class="line">                + circle.getGirth() + <span class="string">&quot; 面积为： &quot;</span> + circle.getArea());</span><br><span class="line">        <span class="comment">//homework06</span></span><br><span class="line">        <span class="type">Cale</span> <span class="variable">cale</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cale</span>(<span class="number">15</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;和&quot;</span> + cale.add() + <span class="string">&quot;\t差&quot;</span> + cale.sub()</span><br><span class="line">                + <span class="string">&quot;\t积&quot;</span> + cale.mul() + <span class="string">&quot;\t商&quot;</span> + cale.div());</span><br><span class="line">        <span class="comment">//homework07</span></span><br><span class="line">        <span class="type">PassObject</span> <span class="variable">po</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassObject</span>();</span><br><span class="line">        <span class="type">Circle01</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle01</span>(<span class="number">1</span>);</span><br><span class="line">        po.printAreas(c, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//homework08</span></span><br><span class="line">        <span class="type">Game01</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Game01</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第 &quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot; 局&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的选择：0-石头 1-剪刀 2-布&quot;</span>);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">int</span> <span class="variable">pSelect</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            game.person(pSelect);</span><br><span class="line">            game.print();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//homework01 编写类A01，定义方法max，实现求double数组的最大值，并返回。</span></span><br><span class="line"><span class="comment">//homework02 定义方法find，实现查找某字符串数组中的元素查找，并返回索引，如果找不到，返回-1。</span></span><br><span class="line"><span class="comment">//homework04 实现数组的复制功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span>... values)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (values.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> values[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (values[i] &gt; max) &#123;</span><br><span class="line">                    max = values[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(String s1, String... values)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (values[i].equals(s1)) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] copyArr(<span class="type">int</span>[] iArr) &#123;</span><br><span class="line">        <span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[iArr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iArr.length; i++) &#123;</span><br><span class="line">            newArr[i] = iArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//homework03</span></span><br><span class="line"><span class="comment">//编写类Book01，定义方法updatePrice，实现更改某本书的价格。</span></span><br><span class="line"><span class="comment">//若价格&gt;150，则改为150，&gt;100改为100，否则不变。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book01</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book01</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//如果方法中，没有 price 局部变量, this.price 等价 price</span></span><br><span class="line">        <span class="keyword">if</span> (price &gt; <span class="number">150</span>) &#123;</span><br><span class="line">            price = <span class="number">150</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (price &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            price = <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示书籍情况</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书名=&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot; 价格=&quot;</span> + <span class="built_in">this</span>.price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//homework05</span></span><br><span class="line"><span class="comment">//定义一个圆类，定义属性：半径，求周长方法，求面积方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle01</span> &#123;</span><br><span class="line">    <span class="type">double</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle01</span><span class="params">(<span class="type">double</span> r)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getGirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * <span class="number">2</span> * r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * r * r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//homework06</span></span><br><span class="line"><span class="comment">//定义一个Cale类，实现加减乘除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cale</span> &#123;</span><br><span class="line">    <span class="type">double</span> num1;</span><br><span class="line">    <span class="type">double</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cale</span><span class="params">(<span class="type">double</span> num1, <span class="type">double</span> num2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num1 = num1;</span><br><span class="line">        <span class="built_in">this</span>.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">sub</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">mul</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 * num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">div</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num2 == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num2 不能为0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> num1 / num2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//homework07</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目要求：</span></span><br><span class="line"><span class="comment">(1) 定义一个Circle类，包含一个double型的radius属性代表圆的半径，findArea()方法返回圆的面积。</span></span><br><span class="line"><span class="comment">(2) 定义一个类PassObject，在类中定义一个方法printAreas()，该方法的定义如下：</span></span><br><span class="line"><span class="comment">     public void printAreas(Circle c, int times) //方法签名/声明</span></span><br><span class="line"><span class="comment">(3) 在printAreas方法中打印输出1到times之间的每个整数半径值，以及对应的面积。</span></span><br><span class="line"><span class="comment">     例如，times为5，则输出半径1，2，3，4，5，以及对应的圆面积。</span></span><br><span class="line"><span class="comment">(4) 在main方法中调用printAreas()方法，调用完毕后输出当前半径值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PassObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAreas</span><span class="params">(Circle01 c, <span class="type">int</span> times)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= times; i++) &#123;</span><br><span class="line">            c.r = i;</span><br><span class="line">            System.out.println(<span class="string">&quot;半径为： &quot;</span> + (<span class="type">double</span>) i + <span class="string">&quot; 面积为：&quot;</span> + c.getArea());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(c.r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//homework08</span></span><br><span class="line"><span class="comment">//猜拳 0石头，1剪刀，2布</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game01</span> &#123;</span><br><span class="line">    <span class="comment">//玩家胜利次数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">win</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//玩家失败次数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lose</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//平局次数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">draw</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//选择出什么</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pSelect</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cSelect</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">person</span><span class="params">(<span class="type">int</span> pSelect)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pSelect = pSelect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电脑出什么</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">computer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="built_in">this</span>.cSelect = r.nextInt(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断本局结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">judge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((pSelect == <span class="number">0</span> &amp;&amp; cSelect == <span class="number">1</span>) || (pSelect == <span class="number">1</span> &amp;&amp; cSelect == <span class="number">2</span>) || (pSelect == <span class="number">2</span> &amp;&amp; cSelect == <span class="number">0</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你赢了&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.win++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pSelect == cSelect) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;平局&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.draw++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输了&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.lose++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印本局情况和当前战绩</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        computer();</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家出: &quot;</span> + pSelect + <span class="string">&quot; 电脑出：&quot;</span> + cSelect);</span><br><span class="line">        judge();</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家赢: &quot;</span> + win + <span class="string">&quot; 局\t玩家输: &quot;</span> + lose + <span class="string">&quot; 局\t平: &quot;</span> + draw + <span class="string">&quot; 局&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面向对象编程（中级部分）"><a href="#面向对象编程（中级部分）" class="headerlink" title="面向对象编程（中级部分）"></a>面向对象编程（中级部分）</h1><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>作用：</p><ol><li>区分相同名字的类</li><li>当类很多时，可以很好的管理类</li><li>控制访问范围</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package的作用是声明当前类所在的包，需要放在类(或者文件)的最上面，</span></span><br><span class="line"><span class="comment">// 一个类中最多只有一句package</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.pkg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import指令 位置放在package的下面，在类定义前面,可以有多句且没有顺序要求</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PkgDetail</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        Arrays.sort(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>java 提供四种访问控制修饰符号，用于控制方法和属性(成员变量)的访问权限（范围）:</p><p>1) 公开级别:用 public 修饰,对外公开 。<br>2) 受保护级别:用 protected 修饰,对子类和同一个包中的类公开。<br>3) 默认级别:没有修饰符号,向同一个包的类公开。<br>4) 私有级别:用 private 修饰,只有类本身可以访问,不对外公开。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207072019663.png" alt=""></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装（encapsulation）就是把抽象的数据【属性】和对数据的操作【方法】封装在一起，数据被保护在内部，程序的其他部分只有通过被授权的操作【方法】，才能对数据进行操作。</p><h3 id="封装的实现步骤"><a href="#封装的实现步骤" class="headerlink" title="封装的实现步骤"></a>封装的实现步骤</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207072031099.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> intermediate.encap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encap01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">300</span>);</span><br><span class="line">        person.setSalary(<span class="number">30000</span>);</span><br><span class="line">        System.out.println(person.info());</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Smith11111&quot;</span>,<span class="number">40</span>,<span class="number">20000</span>);</span><br><span class="line">        System.out.println(person2.info());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不能随便查看人的年龄,工资等隐私，并对设置的年龄进行合理的验证。年龄合理就设置，否则给默认年龄,</span></span><br><span class="line"><span class="comment">必须在 1-120, 年龄， 工资不能直接查看 ， name 的长度在 2-6 字符 之间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;<span class="comment">//工资</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//alt+insert生成set和get</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        setName(name);</span><br><span class="line">        setAge(age);</span><br><span class="line">        setSalary(salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length() &gt;= <span class="number">2</span>&amp;&amp;name.length()&lt;=<span class="number">6</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name length must be between 2 and 6&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">1</span> &amp;&amp; age &lt;= <span class="number">120</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error:Age must in 1 to 120&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//对当前对象的权限判断</span></span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回属性信息</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot; age=&quot;</span> + age + <span class="string">&quot; salary=&quot;</span> + salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> intermediate.encap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Account</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        account.setName(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        account.setBalance(<span class="number">60</span>);</span><br><span class="line">        account.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        account.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建程序,在其中定义两个类：Account 和 AccountTest 类体会 Java 的封装性。</span></span><br><span class="line"><span class="comment"> * Account 类要求具有属性：姓名（长度为 2 位 3 位或 4 位）、余额(必须&gt;20)、</span></span><br><span class="line"><span class="comment"> * 密码（必须是六位）, 如果不满足，则给出提示信息，并给默认值(程序员自己定)</span></span><br><span class="line"><span class="comment"> * 通过 setXxx 的方法给 Account 的属性赋值。</span></span><br><span class="line"><span class="comment"> * 在 AccountTest中测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String name, <span class="type">double</span> balance, String password)</span> &#123;</span><br><span class="line">        setName(name);</span><br><span class="line">        setBalance(balance);</span><br><span class="line">        setPassword(password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name.length()&gt;=<span class="number">2</span>&amp;&amp;name.length()&lt;=<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name must be between 2 and 4 characters&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.name =<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(balance&gt;=<span class="number">20</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.balance = balance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;balance must &gt;= 20&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.balance=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(password.length()==<span class="number">6</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.password = password;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;password must be 6 characters,Default password is 000000&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.password= String.valueOf(<span class="number">000000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;account information: \nname:&quot;</span> + name +</span><br><span class="line">                <span class="string">&quot; balance:&quot;</span> + balance + <span class="string">&quot; password:&quot;</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承可以解决代码复用,让我们的编程更加靠近人类思维.当多个类存在相同的属性(变量)和方法时,可以从这些类中抽象出父类,在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过 extends 来 声明继承父类即可。</p><p>基本语法：</p><p>class 子类 extends 父类{</p><p>}</p><p>（1）子类会自动拥有父类定义的属性和方法</p><p>（2）父类又叫超类，基类</p><p>（3）子类又叫派生类</p><p>细节：</p><p>1) 子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问, 但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问<br>2) 子类必须调用父类的构造器， 完成父类的初始化<br>3) 当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过。<br>4) 如果希望指定去调用父类的某个构造器，则显式的调用一下 : super(参数列表)<br>5) super 在使用时，必须放在构造器第一行(super 只能在构造器中使用)<br>6) super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器<br>7) java 所有类都是 Object 类的子类, Object 是所有类的基类.<br>8) 父类构造器的调用不限于直接父类！将一直往上追溯直到 Object 类(顶级父类)<br>9) 子类最多只能继承一个父类(指直接继承)，即 java 中是单继承机制。 思考：如何让 A 类继承 B 类和 C 类？ 【A 继承 B， B 继承 C】<br>10) 不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;<span class="comment">//A类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是A类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123; <span class="comment">//B类,继承A类//main方法中： C c =new C(); 输出么内容? 3min</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是B类的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;我是B类的有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span> &#123;   <span class="comment">//C类，继承 B类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是c类的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;hahah&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是c类的有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//run</span></span><br><span class="line">我是A类</span><br><span class="line">hahah我是B类的有参构造</span><br><span class="line">我是c类的有参构造</span><br><span class="line">我是c类的无参构造</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        编写 Computer 类，包含 CPU、内存、硬盘等属性，getDetails 方法用于返回 Computer 的详细信息</span></span><br><span class="line"><span class="comment">        编写 PC 子类，继承 Computer 类，添加特有属性【品牌 brand】</span></span><br><span class="line"><span class="comment">        编写 NotePad 子类，继承 Computer 类，添加特有属性【color】</span></span><br><span class="line"><span class="comment">        编写 Test 类，在 main 方法中创建 PC 和 NotePad 对象，分别给对象中特有的属性赋值，以及从 Computer 类继承的</span></span><br><span class="line"><span class="comment">        属性赋值，并使用方法并打印输出信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">PC</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PC</span>(<span class="string">&quot;intel&quot;</span>, <span class="number">16</span>, <span class="number">500</span>, <span class="string">&quot;IBM&quot;</span>);</span><br><span class="line">        pc.printInfo();</span><br><span class="line">        <span class="type">NotePad</span> <span class="variable">notePad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotePad</span>(<span class="string">&quot;intel&quot;</span>, <span class="number">8</span>, <span class="number">256</span>, <span class="string">&quot;RED&quot;</span>);</span><br><span class="line">        notePad.printInfo();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> disk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String cpu, <span class="type">int</span> memory, <span class="type">int</span> disk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">        <span class="built_in">this</span>.disk = disk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回Computer信息</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;cpu=&quot;</span> + cpu + <span class="string">&quot;, memory=&quot;</span> + memory + <span class="string">&quot;, disk=&quot;</span> + disk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(<span class="type">int</span> memory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDisk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> disk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDisk</span><span class="params">(<span class="type">int</span> disk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.disk = disk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PC</span> <span class="keyword">extends</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PC</span><span class="params">(String cpu, <span class="type">int</span> memory, <span class="type">int</span> disk, String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cpu, memory, disk);</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PC信息: &quot;</span>);</span><br><span class="line">        System.out.println(getDetails() + <span class="string">&quot;, brand=&quot;</span> + brand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotePad</span> <span class="keyword">extends</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NotePad</span><span class="params">(String cpu, <span class="type">int</span> memory, <span class="type">int</span> disk, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cpu, memory, disk);</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;NotePad信息: &quot;</span>);</span><br><span class="line">        System.out.println(getDetails() + <span class="string">&quot;, color=&quot;</span> + color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>super 代表父类的引用，用于访问父类的属性、方法、构造器。</p><p>1.访问父类的属性，但不能访问父类的private属性</p><p>​         super.属性名；</p><p>2.访问父类的方法，不能访问父类的private方法</p><p>​         super.方法名（参数列表）;</p><p>3.访问父类的构造器</p><p>​         super（参数列表）；</p><h3 id="super-和-this-的比较"><a href="#super-和-this-的比较" class="headerlink" title="super 和 this 的比较"></a>super 和 this 的比较</h3><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207091601893.png" alt=""></p><h2 id="方法重写-覆盖（override）"><a href="#方法重写-覆盖（override）" class="headerlink" title="方法重写/覆盖（override）"></a>方法重写/覆盖（override）</h2><p>方法覆盖（重写）就是子类有一个方法，和父类的某个方法的名称、返回类型、参数一样，那么我们就说子类的这个方法覆盖了父类的方法。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207091610481.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOverride</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1) 编写一个 Person 类，包括属性/private（name、age），构造器、方法 say(返回自我介绍的字符串）。</span></span><br><span class="line"><span class="comment">        2) 编写一个 Student 类，继承 Person 类，增加 id、score 属性/private，以及构造器，定义 say 方法(返回自我介绍的信息)。</span></span><br><span class="line"><span class="comment">        3) 在 main 中,分别创建 Person 和 Student 对象，调用 say 方法输出自我介绍</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;fzy&quot;</span>,<span class="number">16</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;mzl&quot;</span>,<span class="number">23</span>,<span class="string">&quot;0335&quot;</span>,<span class="number">99.9</span>);</span><br><span class="line">        System.out.println(p1.say());</span><br><span class="line">        System.out.println(p2.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot; age: &quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ID;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String ID, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.ID = ID;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setID</span><span class="params">(String ID)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.say() + <span class="string">&quot; ID: &quot;</span> + ID + <span class="string">&quot; score: &quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态（polymorphic):方法和对象具有多种形态。</p><p>1.方法的多态</p><p>重写和重载就体现了多态</p><p>2.对象的多态</p><p>（1）一个对象的编译类型和运行类型可以不一致</p><p>（2）编译类型在定义对象时，就确定了，不能改变</p><p>（3）运行类型是可以变化的．</p><p>（4）编译类型看定义时＝号的左边，运行类型看＝号的右边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animal animal＝<span class="keyword">new</span> <span class="title class_">Dog</span>（）：<span class="comment">//animal 编译类型是Animal，运行类型Dog </span></span><br><span class="line"></span><br><span class="line">animal ＝ <span class="keyword">new</span> <span class="title class_">Cat</span>（）；<span class="comment">//animal的运行类型变成了Cat，编译类型仍然是 Animal</span></span><br></pre></td></tr></table></figure><p>要点：</p><ul><li><p>多态的前提是：两个对象(类)存在继承关系 </p></li><li><p>多态的向上转型：</p></li></ul><p>1）本质：父类的引用指向了子类的对象</p><p>2）语法：父类类型 引用名 ＝ new 子类类型（）；</p><p>3）特点：编译类型看左边，运行类型看右边。</p><p>可以调用父类中的所有成员（需遵守访问权限），不能调用子类中特有成员；最终运行效果看子类的具体实现！</p><ul><li>多态的向下转型：</li></ul><p>1）语法：子类类型 引用名＝（子类类型）父类引用；</p><p>2）只能强转父类的引用，不能强转父类的对象</p><p>3）要求父类的引用必须指向的是当前目标类型的对象</p><p>4）当向下转型后，可以调用子类类型中所有的成员</p><ul><li>属性没有重写之说：属性的值看<code>编译类型</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//属性没有重写之说！属性的值看编译类型</span></span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();<span class="comment">//向上转型</span></span><br><span class="line">        System.out.println(base.count);<span class="comment">// ？ 看编译类型 10</span></span><br><span class="line">        <span class="type">Sub</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        System.out.println(sub.count);<span class="comment">//?  20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;<span class="comment">//属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>instanceOf 比较操作符，用于判断对象的<code>运行类型</code>是否为 XX 类型或 XX 类型的子类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BB</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">        System.out.println(bb <span class="keyword">instanceof</span>  BB);<span class="comment">// true</span></span><br><span class="line">        System.out.println(bb <span class="keyword">instanceof</span>  AA);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//aa 编译类型 AA, 运行类型是BB</span></span><br><span class="line">        <span class="comment">//BB是AA子类</span></span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">        System.out.println(aa <span class="keyword">instanceof</span> AA);<span class="comment">// true</span></span><br><span class="line">        System.out.println(aa <span class="keyword">instanceof</span> BB);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> AA);<span class="comment">//false</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">//System.out.println(str instanceof AA);</span></span><br><span class="line">        System.out.println(str <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;&#125; <span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;&#125;<span class="comment">//子类</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> intermediate.poly;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Sub</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        System.out.println(s.count);<span class="comment">//20</span></span><br><span class="line">        s.display();<span class="comment">//20</span></span><br><span class="line">        <span class="type">Base</span> <span class="variable">b</span> <span class="operator">=</span> s;</span><br><span class="line">        System.out.println(b == s);<span class="comment">//T</span></span><br><span class="line">        System.out.println(b.count);<span class="comment">//10</span></span><br><span class="line">        b.display();<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;<span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3><p>1.当调用对象方法时，该方法会和该对象的内存地址/运行类型绑定</p><p>2.当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//a 的编译类型 A, 运行类型 B</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();<span class="comment">//向上转型</span></span><br><span class="line">        System.out.println(a.sum());<span class="comment">//?40 -&gt; 30</span></span><br><span class="line">        System.out.println(a.sum1());<span class="comment">//?30-&gt; 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;<span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//动态绑定机制:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;<span class="comment">//父类sum()</span></span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;<span class="comment">//20 + 10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;<span class="comment">//父类sum1()</span></span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;<span class="comment">//10 + 10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;<span class="comment">//父类getI</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public int sum() &#123;</span></span><br><span class="line"><span class="comment">//        return i + 20;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;<span class="comment">//子类getI()</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public int sum1() &#123;</span></span><br><span class="line"><span class="comment">//        return i + 10;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PloyArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        现有一个继承结构如下：要求创建 1 个 Person 对象、2 个 Student 对象和</span></span><br><span class="line"><span class="comment">        2 个 Teacher 对象, 统一放在数组中，并调用每个对象say 方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Person[] persons = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">5</span>];</span><br><span class="line">        persons[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        persons[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;mary&quot;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">        persons[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">19</span>, <span class="number">30.1</span>);</span><br><span class="line">        persons[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;scott&quot;</span>, <span class="number">30</span>, <span class="number">20000</span>);</span><br><span class="line">        persons[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;king&quot;</span>, <span class="number">50</span>, <span class="number">25000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length; i++) &#123;</span><br><span class="line">            <span class="comment">// person[i]的编译类型为Person，运行类型为元素类型</span></span><br><span class="line">            System.out.println(persons[i].say());</span><br><span class="line">            <span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">                ((Student)persons[i]).study();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span> Teacher)&#123;</span><br><span class="line">                ((Teacher) persons[i]).teach();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不是学生或者老师&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot; age: &quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.say() + <span class="string">&quot; score: &quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student &quot;</span> + getName() + <span class="string">&quot; is studying...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.say() + <span class="string">&quot; salary: &quot;</span> + salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Teacher &quot;</span> + getName() + <span class="string">&quot; is teaching...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h3><p>方法定义的形参类型为父类类型，实参类型允许为子类类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> intermediate.poly.polyparameter_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PloyParameter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义员工类Employee，包含姓名和月工资（private），以及计算年工资getAnnual</span></span><br><span class="line"><span class="comment">        的方法。普通员工和经理继承了员工，经理类多了奖金bonus属性和管理manage方法，</span></span><br><span class="line"><span class="comment">        普通员工多了work方法，普通员工和经理类要求分别重写getAnnual方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        测试类中添加一个方法showEmpAnnual(Employee e),实现获取任何对象的</span></span><br><span class="line"><span class="comment">        年工资，并在main方法中调用该方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        测试类中添加一个方法，testWork,普通员工调用work方法，经理调用manage方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Worker</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">10000</span>, <span class="number">50000</span>);</span><br><span class="line">        <span class="type">PloyParameter</span> <span class="variable">ploy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PloyParameter</span>();</span><br><span class="line">        ploy.showEmpAnnual(tom);</span><br><span class="line">        ploy.showEmpAnnual(smith);</span><br><span class="line">        ploy.testWork(tom);</span><br><span class="line">        ploy.testWork(smith);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showEmpAnnual</span><span class="params">(Employee e)</span> &#123;</span><br><span class="line">        System.out.println(e.getAnnual());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWork</span><span class="params">(Employee e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Worker) &#123;</span><br><span class="line">            ((Worker) e).work();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Manager) &#123;</span><br><span class="line">            ((Manager) e).manage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnual</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Worker&quot;</span> + getName() + <span class="string">&quot;正在工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnual</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//普通员工没有额外收入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getAnnual();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bonus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, <span class="type">double</span> salary, <span class="type">double</span> bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, salary);</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnual</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bonus + <span class="built_in">super</span>.getAnnual();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">manage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Manager&quot;</span> + getName() + <span class="string">&quot;正在管理工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object类详解"><a href="#Object类详解" class="headerlink" title="Object类详解"></a>Object类详解</h2><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p>==与equals的对比</p><p>1.==：既可以判断基本类型，又可以判断引用类型</p><p>2.==：如果判断基本类型，判断的是值是否相等。示例：int i＝10；double d＝10.0；</p><p>3.==：如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象</p><p>4.equals：是Object类中的方法，只能判断引用类型</p><p>5.默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等。比如Integer，String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equals01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(x==y); <span class="comment">//false</span></span><br><span class="line">        System.out.println(x.equals(y)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(s1==s2); <span class="comment">//false</span></span><br><span class="line">        System.out.println(s1.equals(s2)); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h3><p>1) 提高具有哈希结构的容器的效率！<br>2) 两个引用，如果指向的是同一个对象，则哈希值肯定是一样的！<br>3) 两个引用，如果指向的是不同对象，则哈希值是不一样的<br>4)  哈希值主要根据地址号来的！但不能完全将哈希值等价于地址。<br>5)  在集合中 hashCode 如果需要的话，也会重写,。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> intermediate.Object_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashCode_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HC</span> <span class="variable">hc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HC</span>();</span><br><span class="line">        <span class="type">HC</span> <span class="variable">hc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HC</span>();</span><br><span class="line">        <span class="type">HC</span> <span class="variable">hc3</span> <span class="operator">=</span> hc;</span><br><span class="line">        System.out.println(hc.hashCode());</span><br><span class="line">        System.out.println(hc2.hashCode());</span><br><span class="line">        System.out.println(hc3.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HC</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//run</span></span><br><span class="line"><span class="number">1324119927</span></span><br><span class="line"><span class="number">990368553</span></span><br><span class="line"><span class="number">1324119927</span></span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>1) 基本介绍 默认返回：全类名+@+哈希值的十六进制，【查看 Object 的 toString 方法】 子类往往重写 toString 方法，用于返回对象的属性信息<br>2) 重写 toString 方法，打印对象或拼接对象时，都会自动调用该对象的 toString 形式.<br>3)  当直接输出一个对象时，toString 方法会被默认的调用, 比如 System.out.println(monster)； 就会默认调用 monster.toString()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToString_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="string">&quot;小妖怪&quot;</span>, <span class="string">&quot;巡山的&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        System.out.println(monster.toString() + <span class="string">&quot; hashcode=&quot;</span> + monster.hashCode());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==当直接输出一个对象时，toString 方法会被默认的调用==&quot;</span>);</span><br><span class="line">        System.out.println(monster); <span class="comment">//等价 monster.toString()</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">(String name, String job, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Monster&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\t&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\t&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sal=&quot;</span> + sal +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h3><p>1) 当对象被回收时，系统自动调用该对象的 finalize 方法。子类可以重写该方法，做一些释放资源的操作。<br>2) 什么时候被回收：当某个对象没有任何引用时，则 jvm 就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用 finalize 方法。<br>3) 垃圾回收机制的调用，是由系统来决定(即有自己的 GC 算法), 也可以通过 System.gc() 主动触发垃圾回收机制。</p><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组越界异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Debug01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">10</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//run</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ArrayIndexOutOfBoundsException: Index <span class="number">3</span> out of bounds <span class="keyword">for</span> length <span class="number">3</span></span><br><span class="line">at intermediate.debug_.Debug01.main(Debug01.java:<span class="number">7</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//debug对象创建的过程</span></span><br><span class="line"><span class="comment">//debug动态绑定</span></span><br></pre></td></tr></table></figure><h2 id="零钱通项目"><a href="#零钱通项目" class="headerlink" title="零钱通项目"></a>零钱通项目</h2><p>1.项目需求说明</p><p>使用 Java 开发 零钱通项目 , 可以完成收益入账，消费，查看明细，退出系统等功能。</p><p>2.项目的界面</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207111205079.png" alt=""></p><p>3.项目代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OOP_</span> &#123;</span><br><span class="line">    <span class="comment">//1. 先完成显示菜单，并可以选择菜单，给出对应提示</span></span><br><span class="line">    <span class="comment">//2. 完成零钱通明细</span></span><br><span class="line">    <span class="comment">//3. 完成收益入账</span></span><br><span class="line">    <span class="comment">//4. 消费</span></span><br><span class="line">    <span class="comment">//5. 退出</span></span><br><span class="line">    <span class="comment">//6. 用户输入4退出时，给出提示&quot;你确定要退出吗? y/n&quot;，必须输入正确的y/n ，否则循环输入指令，直到输入y 或者 n</span></span><br><span class="line">    <span class="comment">//7. 在收益入账和消费时，判断金额是否合理，并给出相应的提示</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 完成零钱通明细</span></span><br><span class="line">    <span class="comment">//(1) 可以把收益入账和消费，保存到数组 (2) 可以使用对象 (3) 简单的话可以使用String拼接</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">details</span> <span class="operator">=</span> <span class="string">&quot;-----------------零钱通明细------------------&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 完成收益入账</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// date 是 java.util.Date 类型，表示日期</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//日期格式化</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 消费</span></span><br><span class="line">    <span class="comment">//定义新变量，保存消费的原因</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">note</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n================零钱通菜单===============&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t1 零钱通明细&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t2 收益入账&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t3 消费&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t4 退     出&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">&quot;请选择(1-4): &quot;</span>);</span><br><span class="line">            key = scanner.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.detail();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.income();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.pay();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    <span class="comment">//用户输入4退出时，给出提示&quot;你确定要退出吗? y/n&quot;，必须输入正确的y/n</span></span><br><span class="line">                    <span class="built_in">this</span>.exit();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;选择有误，请重新选择&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">while</span> (loop);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----退出了零钱通项目-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成零钱通明细</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detail</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(details);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成收益入账</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">income</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;收益入账金额:&quot;</span>);</span><br><span class="line">        money = scanner.nextDouble();</span><br><span class="line">        <span class="comment">//找出不正确的金额条件，然后给出提示, 就直接return</span></span><br><span class="line">        <span class="keyword">if</span> (money &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收益入账金额 需要 大于 0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">//退出方法，不在执行后面的代码。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找出正确金额的条件</span></span><br><span class="line">        balance += money;</span><br><span class="line">        <span class="comment">//拼接收益入账信息到 details</span></span><br><span class="line">        date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//获取当前日期</span></span><br><span class="line">        details += <span class="string">&quot;\n收益入账\t+&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;消费金额:&quot;</span>);</span><br><span class="line">        money = scanner.nextDouble();</span><br><span class="line">        <span class="comment">//找出金额不正确的情况</span></span><br><span class="line">        <span class="keyword">if</span> (money &lt;= <span class="number">0</span> || money &gt; balance) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的消费金额 应该在 0-&quot;</span> + balance);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;消费说明:&quot;</span>);</span><br><span class="line">        note = scanner.next();</span><br><span class="line">        balance -= money;</span><br><span class="line">        <span class="comment">//拼接消费信息到 details</span></span><br><span class="line">        date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//获取当前日期</span></span><br><span class="line">        details += <span class="string">&quot;\n&quot;</span> + note + <span class="string">&quot;\t-&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//用户输入4退出时，给出提示&quot;你确定要退出吗? y/n&quot;，必须输入正确的y/n ，</span></span><br><span class="line">        <span class="comment">// 否则循环输入指令，直到输入y 或者 n</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">//要求用户必须输入y/n ,否则就一直循环</span></span><br><span class="line">            System.out.println(<span class="string">&quot;你确定要退出吗? y/n&quot;</span>);</span><br><span class="line">            choice = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;y&quot;</span>.equals(choice) || <span class="string">&quot;n&quot;</span>.equals(choice)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当用户退出while ,进行判断</span></span><br><span class="line">        <span class="keyword">if</span> (choice.equals(<span class="string">&quot;y&quot;</span>)) &#123;</span><br><span class="line">            loop = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmallChangeSys</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;\t\t\t\t欢迎使用&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">OOP_</span>().showMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本章小结-3"><a href="#本章小结-3" class="headerlink" title="本章小结"></a>本章小结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework07</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    （1）做一个Student类，Student类有名称（name），性别（sex），年龄 （age），学号（stu＿id），做合理封装，通过构造器在创建对象时将4个属性赋值。</span></span><br><span class="line"><span class="comment">    （2）写一个Teacher类，Teacher类有名称（name），性别（sex），年龄 （age），工龄（work age），做合理封装，通过构造器在创建对象时将4个属性赋值。</span></span><br><span class="line"><span class="comment">    （3）抽取一个父类Person类，将共同属性和方法放到Person类</span></span><br><span class="line"><span class="comment">    （4）学生需要有学习的方法（study），在方法里写生“我承诺，我会好好学习。”</span></span><br><span class="line"><span class="comment">    （5） 教师需要有教学的方法（teach），在方法里写上“我承诺，我会认真教学。”</span></span><br><span class="line"><span class="comment">    （6）学生和教师都有玩的方法（play），学生玩的是足球，老师玩的是象棋，此方法是返回字符串的，分别返回“xx爱玩足球”和“xx爱玩象棋”（其中xx分别代表学生和老师的姓名）。</span></span><br><span class="line"><span class="comment">    （7）定义多态数组，里面保存2个学生和2个教师，要求按年龄从高到低排序</span></span><br><span class="line"><span class="comment">    （8）定义方法，形参为Person类型，功能：调用学生的study或教师的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Person[] persons = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">4</span>];</span><br><span class="line">        persons[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&quot;00220711&quot;</span>);</span><br><span class="line">        persons[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&quot;00220712&quot;</span>);</span><br><span class="line">        persons[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;王五&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">40</span>, <span class="number">12</span>);</span><br><span class="line">        persons[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;刘六&quot;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">35</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按年龄从高到低排序</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; persons.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (persons[j].getAge() &lt; persons[j + <span class="number">1</span>].getAge()) &#123;</span><br><span class="line">                    tmp = persons[j];</span><br><span class="line">                    persons[j] = persons[j + <span class="number">1</span>];</span><br><span class="line">                    persons[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Homework07</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Homework07</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            h.test(persons[i]);</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line">            p.printInfo();</span><br><span class="line">            ((Student) p).study();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> Teacher) &#123;</span><br><span class="line">            p.printInfo();</span><br><span class="line">            ((Teacher) p).teach();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">char</span> sex, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名：&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;\n年龄：&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot;\n性别：&quot;</span> + <span class="built_in">this</span>.sex + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stu_id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">char</span> sex, <span class="type">int</span> age, String stu_id)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, sex, age);</span><br><span class="line">        <span class="built_in">this</span>.stu_id = stu_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.play() + <span class="string">&quot;爱玩足球&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我会好好学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStu_id</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stu_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStu_id</span><span class="params">(String stu_id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stu_id = stu_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的信息&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.printInfo();</span><br><span class="line">        System.out.println(<span class="string">&quot;学号：&quot;</span> + <span class="built_in">this</span>.stu_id);</span><br><span class="line">        <span class="comment">//this.study();</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.play());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Teacher类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> work_age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">char</span> sex, <span class="type">int</span> age, <span class="type">int</span> work_age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, sex, age);</span><br><span class="line">        <span class="built_in">this</span>.work_age = work_age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.play() + <span class="string">&quot;爱玩象棋&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我会认真教课&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWork_age</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> work_age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWork_age</span><span class="params">(<span class="type">int</span> work_age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.work_age = work_age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师的信息&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.printInfo();</span><br><span class="line">        System.out.println(<span class="string">&quot;工龄：&quot;</span> + <span class="built_in">this</span>.work_age);</span><br><span class="line">        <span class="comment">//this.teach();</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.play());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="房屋出租系统"><a href="#房屋出租系统" class="headerlink" title="房屋出租系统"></a>房屋出租系统</h1><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>1.主菜单</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207121029078.png" alt=""></p><p>2.新增房源</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207121038224.png" alt=""></p><p>3.查找房源</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207121039702.png" alt=""></p><p>4.删除房源</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207121041354.png" alt=""></p><p>5.修改房源</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207121039792.png" alt=""></p><p>6.房源列表</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207121037263.png" alt=""></p><p>7.退出</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207121041083.png" alt=""></p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202207111751492.png" alt=""></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HouseRentApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建HouseView对象,并且显示主菜单，是整个程序的入口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HouseView</span>().mainMenu();</span><br><span class="line">        System.out.println(<span class="string">&quot;===你退出房屋出租系统==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class House</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">House</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rent;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">House</span><span class="params">(<span class="type">int</span> id, String name, String phone, String address, <span class="type">int</span> rent, String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.rent = rent;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRent</span><span class="params">(<span class="type">int</span> rent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + name +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + phone +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + rent +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class HouseView</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 显示界面</span></span><br><span class="line"><span class="comment"> * 2. 接收用户的输入</span></span><br><span class="line"><span class="comment"> * 3. 调用HouseService完成对房屋信息的各种操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HouseView</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//控制显示菜单</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;<span class="comment">//接收用户选择</span></span><br><span class="line">    <span class="type">HouseService</span> <span class="variable">houseService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HouseService</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id修改房屋信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============修改房屋信息============&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请选择待修改房屋编号(-1表示退出)&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">updateId</span> <span class="operator">=</span> Utility.readInt();</span><br><span class="line">        <span class="keyword">if</span> (updateId == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============你放弃修改房屋信息============&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据输入得到updateId，查找对象</span></span><br><span class="line">        <span class="comment">//返回的是引用类型[即:就是数组的元素]</span></span><br><span class="line">        <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> houseService.findById(updateId);</span><br><span class="line">        <span class="keyword">if</span> (house == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============修改房屋信息编号不存在..============&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;姓名(&quot;</span> + house.getName() + <span class="string">&quot;): &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Utility.readString(<span class="number">8</span>, <span class="string">&quot;&quot;</span>);<span class="comment">//这里如果用户直接回车表示不修改该信息,默认&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(name)) &#123;<span class="comment">//修改</span></span><br><span class="line">            house.setName(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;电话(&quot;</span> + house.getPhone() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> Utility.readString(<span class="number">12</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(phone)) &#123;</span><br><span class="line">            house.setPhone(phone);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;地址(&quot;</span> + house.getAddress() + <span class="string">&quot;): &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> Utility.readString(<span class="number">18</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(address)) &#123;</span><br><span class="line">            house.setAddress(address);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;租金(&quot;</span> + house.getRent() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rent</span> <span class="operator">=</span> Utility.readInt(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (rent != -<span class="number">1</span>) &#123;</span><br><span class="line">            house.setRent(rent);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;状态(&quot;</span> + house.getState() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">state</span> <span class="operator">=</span> Utility.readString(<span class="number">3</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(state)) &#123;</span><br><span class="line">            house.setState(state);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============修改房屋信息成功============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查找房屋信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============查找房屋信息============&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要查找的id: &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">findId</span> <span class="operator">=</span> Utility.readInt();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> houseService.findById(findId);</span><br><span class="line">        <span class="keyword">if</span> (house != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(house);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============查找房屋信息id不存在============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成退出确认</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//这里我们使用Utility提供方法，完成确认</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> Utility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">            loop = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写delHouse() 接收输入的id,调用Service 的del方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============删除房屋信息============&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入待删除房屋的编号(-1退出):&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">delId</span> <span class="operator">=</span> Utility.readInt();</span><br><span class="line">        <span class="keyword">if</span> (delId == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============放弃删除房屋信息============&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注意该方法本身就有循环判断的逻辑,必须输出Y/N</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">choice</span> <span class="operator">=</span> Utility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="string">&#x27;Y&#x27;</span>) &#123;<span class="comment">//真的删除</span></span><br><span class="line">            <span class="keyword">if</span> (houseService.del(delId)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;=============删除房屋信息成功============&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;=============房屋编号不存在，删除失败============&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============放弃删除房屋信息============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写addHouse() 接收输入，创建House对象，调用add方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============添加房屋============&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Utility.readString(<span class="number">8</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;电话: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> Utility.readString(<span class="number">12</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;地址: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> Utility.readString(<span class="number">16</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;月租: &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rent</span> <span class="operator">=</span> Utility.readInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;状态: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">state</span> <span class="operator">=</span> Utility.readString(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//创建一个新的House对象, 注意id 是系统分配的，</span></span><br><span class="line">        <span class="type">House</span> <span class="variable">newHouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">House</span>(<span class="number">0</span>, name, phone, address, rent, state);</span><br><span class="line">        <span class="keyword">if</span> (houseService.add(newHouse)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============添加房屋成功============&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============添加房屋失败============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写listHouses()显示房屋列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listHouses</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============房屋列表============&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;编号\t\t房主\t\t电话\t\t地址\t\t月租\t\t状态(未出租/已出租)&quot;</span>);</span><br><span class="line">        House[] houses = houseService.list();<span class="comment">//得到所有房屋信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; houses.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (houses[i] == <span class="literal">null</span>) &#123;<span class="comment">//如果为null,就不用再显示了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(houses[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============房屋列表显示完毕============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示主菜单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mainMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n=============房屋出租系统菜单============&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t1 新 增 房 源&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t2 查 找 房 屋&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t3 删 除 房 屋 信 息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t4 修 改 房 屋 信 息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t5 房 屋 列 表&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t6 退      出&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入你的选择(1-6): &quot;</span>);</span><br><span class="line">            key = Utility.readChar();</span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    addHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    findHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    delHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    update();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                    listHouses();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">                    exit();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class HouseService</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HouseService.java&lt;=&gt;类 [业务层]</span></span><br><span class="line"><span class="comment"> * //定义House[] ,保存House对象</span></span><br><span class="line"><span class="comment"> * 1. 响应HouseView的调用</span></span><br><span class="line"><span class="comment"> * 2. 完成对房屋信息的各种操作(增删改查c[create]r[read]u[update]d[delete])</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HouseService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> House[] houses; <span class="comment">//保存House对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">houseNums</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//记录当前有多少个房屋信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">idCounter</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//记录当前的id增长到哪个值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HouseService</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        houses = <span class="keyword">new</span> <span class="title class_">House</span>[size];<span class="comment">//当创建HouseService对象，指定数组大小</span></span><br><span class="line">        houses[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">House</span>(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;112&quot;</span>, <span class="string">&quot;海淀区&quot;</span>, <span class="number">2000</span>, <span class="string">&quot;未出租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//findById方法,返回House对象或者null</span></span><br><span class="line">    <span class="keyword">public</span> House <span class="title function_">findById</span><span class="params">(<span class="type">int</span> findId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; houseNums; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (findId == houses[i].getId()) &#123;<span class="comment">//要删除的房屋(id),是数组下标为i的元素</span></span><br><span class="line">                <span class="keyword">return</span> houses[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> delId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//应当先找到要删除的房屋信息对应的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; houseNums; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (delId == houses[i].getId()) &#123;<span class="comment">//要删除的房屋(id),是数组下标为i的元素</span></span><br><span class="line">                index = i;<span class="comment">//就使用index记录i</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;<span class="comment">//说明delId在数组中不存在</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; houseNums - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            houses[i] = houses[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把当有存在的房屋信息的最后一个 设置null</span></span><br><span class="line">        houses[--houseNums] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add方法，添加新对象,返回boolean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(House newHouse)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否还可以继续添加(我们暂时不考虑数组扩容的问题)</span></span><br><span class="line">        <span class="keyword">if</span> (houseNums == houses.length) &#123;<span class="comment">//不能再添加</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数组已满，不能再添加了...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把newHouse对象加入到，新增加了一个房屋</span></span><br><span class="line">        houses[houseNums++] = newHouse;</span><br><span class="line">        <span class="comment">//需要设计一个id自增长的机制, 然后更新newHouse的id</span></span><br><span class="line">        newHouse.setId(++idCounter);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list方法，返回houses</span></span><br><span class="line">    <span class="keyword">public</span> House[] list() &#123;</span><br><span class="line">        <span class="keyword">return</span> houses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class Utility</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工具类的作用:</span></span><br><span class="line"><span class="comment"> * 处理各种情况的用户输入，并且能够按照程序员的需求，得到用户的控制台输入。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utility</span> &#123;</span><br><span class="line">    <span class="comment">//静态属性。。。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的一个菜单选项，值：1——5的范围</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1——5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readMenuSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>, <span class="literal">false</span>);<span class="comment">//包含一个字符的字符串</span></span><br><span class="line">            c = str.charAt(<span class="number">0</span>);<span class="comment">//将字符串转换成字符char类型</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp;</span><br><span class="line">                    c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span> &amp;&amp; c != <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的一个字符</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readChar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>, <span class="literal">false</span>);<span class="comment">//就是一个字符</span></span><br><span class="line">        <span class="keyword">return</span> str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的一个字符，如果直接按回车，则返回指定的默认值；否则返回输入的那个字符</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 默认值或输入的字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readChar</span><span class="params">(<span class="type">char</span> defaultValue)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>, <span class="literal">true</span>);<span class="comment">//要么是空字符串，要么是一个字符</span></span><br><span class="line">        <span class="keyword">return</span> (str.length() == <span class="number">0</span>) ? defaultValue : str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的整型，长度小于2位</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 整数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">readInt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">10</span>, <span class="literal">false</span>);<span class="comment">//一个整数，长度&lt;=10位</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);<span class="comment">//将字符串转换成整数</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的 整数或默认值，如果直接回车，则返回默认值，否则返回输入的整数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 整数或默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">readInt</span><span class="params">(<span class="type">int</span> defaultValue)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">10</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//异常处理...</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的指定长度的字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 限制的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定长度的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readString</span><span class="params">(<span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> readKeyBoard(limit, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的指定长度的字符串或默认值，如果直接回车，返回默认值，否则返回字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit        限制的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定长度的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readString</span><span class="params">(<span class="type">int</span> limit, String defaultValue)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(limit, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> str.equals(<span class="string">&quot;&quot;</span>) ? defaultValue : str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的确认选项，Y或N</span></span><br><span class="line"><span class="comment">     * 将小的功能，封装到一个方法中.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Y或N</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readConfirmSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的选择(Y/N): 请小心选择&quot;</span>);</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;<span class="comment">//无限循环</span></span><br><span class="line">            <span class="comment">//在这里，将接受到字符，转成了大写字母</span></span><br><span class="line">            <span class="comment">//y =&gt; Y n=&gt;N</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>, <span class="literal">false</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能： 读取一个字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit       读取的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blankReturn 如果为true ,表示 可以读空字符串。</span></span><br><span class="line"><span class="comment">     *                    如果为false表示 不能读空字符串。</span></span><br><span class="line"><span class="comment">     *                    &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *                    如果输入为空，或者输入大于limit的长度，就会提示重新输入。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">readKeyBoard</span><span class="params">(<span class="type">int</span> limit, <span class="type">boolean</span> blankReturn)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义了字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//scanner.hasNextLine() 判断有没有下一行</span></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            line = scanner.nextLine();<span class="comment">//读取这一行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span></span><br><span class="line">            <span class="keyword">if</span> (line.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blankReturn) &#123;</span><br><span class="line">                    <span class="keyword">return</span> line;<span class="comment">//如果blankReturn=true,可以返回空串</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">//如果blankReturn=false,不接受空串，必须输入内容</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果用户输入的内容大于了 limit，就提示重写输入</span></span><br><span class="line">            <span class="comment">//如果用户如的内容 &gt;0 &lt;= limit ,我就接受</span></span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不能大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云盘挂载到本地硬盘</title>
      <link href="/post/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%A1%AC%E7%9B%98/"/>
      <url>/post/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>​    这款开源的工具，支持的网盘特别多，有阿里、天翼、蓝奏、Onedrive、夸克、某大厂、123、迅雷云盘等等23种网盘之多。而这么多的网盘，操作方法基本相同，不同之处，可以查看作者官方网址：</p><p><a href="https://alist-doc.nn.ci/docs/driver/aliyundrive">https://alist-doc.nn.ci/docs/driver/aliyundrive</a></p><h2 id="安装Alist"><a href="#安装Alist" class="headerlink" title="安装Alist"></a>安装Alist</h2><p>打开<a href="https://github.com/Xhofe/alist/releases">AList Release</a>下载要部署的系统对应的文件。</p><p>直接解压获取到的 zip 压缩包，启动 alist-xxxx.exe 即可。</p><p>当看到输出<code>start server @ 0.0.0.0:5244</code>且之后没有报错后，就表示运行成功了，首次运行会输出初始密码，程序默认监听5244端口。<u><em>（移动程序目录，会改变初始密码）</em></u></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172121978.png" alt="image-20220617212115468"></p><h2 id="打开网址"><a href="#打开网址" class="headerlink" title="打开网址"></a>打开网址</h2><p>现在打开<code>http://127.0.0.1:5244</code>就可以看见登陆页面了，使用上图Your password的密码登录。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172122809.png" alt="image-20220617212250721"></p><p>登录成功后的界面。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172124374.png" alt="image-20220617212433256"></p><h2 id="添加账号"><a href="#添加账号" class="headerlink" title="添加账号"></a>添加账号</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172126137.png" alt="image-20220617212617024"></p><p>选择阿里云盘</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172136276.png" alt="image-20220617213649181"></p><h2 id="令牌获取"><a href="#令牌获取" class="headerlink" title="令牌获取"></a>令牌获取</h2><p>打开下面的网址</p><p><a href="https://alist-doc.nn.ci/docs/driver/aliyundrive">https://alist-doc.nn.ci/docs/driver/aliyundrive</a></p><p>然后点击【Get Token】。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172128444.png" alt="image-20220617212856347"></p><p>先点击上面的按钮，然后用手机端的阿里客户端扫描二维码，扫描以后，再点击上面的按钮。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172133628.png" alt="image-20220617213349569"></p><p>然后在二维码下面就有一串的口令，复制这段口令。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172132155.png" alt="image-20220617213209059"></p><h2 id="填写令牌"><a href="#填写令牌" class="headerlink" title="填写令牌"></a>填写令牌</h2><p>将令牌填入，点击保存。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172137573.png" alt="image-20220617213748488"></p><p>接着，我们进入到<a href="http://127.0.0.1:5244/页面，在这里，我们的网盘就加载进来了。">http://127.0.0.1:5244/页面，在这里，我们的网盘就加载进来了。</a></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172141564.png" alt="image-20220617214112491"></p><h2 id="安装RaiDrive"><a href="#安装RaiDrive" class="headerlink" title="安装RaiDrive"></a><strong>安装RaiDrive</strong></h2><p>可以从官网下载<a href="https://www.raidrive.com/">RaiDrive</a>，速度较慢。</p><p>也可以从这里下载</p><p><a href="https://wwb.lanzouj.com/b03j1mo1g">https://wwb.lanzouj.com/b03j1mo1g</a><br>密码:4xa3</p><p>下载完，直接安装即可。</p><h2 id="配置挂载参数"><a href="#配置挂载参数" class="headerlink" title="配置挂载参数"></a><strong>配置挂载参数</strong></h2><p>运行软件，点击Add。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172201830.png" alt="image-20220617220111734"></p><p>然后在这里依次选：NAS，WebDAV，去掉Address后面方框的勾，地址填：127.0.0.1，端口填：5244，路径填：dav。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172203843.png![image-20220617220927579](https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172209703.png" alt="图片"></p><p>上图中的7和8处，是用户名和密码，这里需要到Alist管理中(<a href="http://127.0.0.1:5244/@manage/settings/0)的“**设置-后端**”处，找到用户名和密码，复制粘贴到上图的7和8处，最后点“Connect”">http://127.0.0.1:5244/@manage/settings/0)的“**设置-后端**”处，找到用户名和密码，复制粘贴到上图的7和8处，最后点“Connect”</a></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172205825.png" alt="image-20220617220524666"></p><p>然后可以在电脑中看到已经成功挂载。</p><p><em>网盘的大小显示错误，但并不影响使用</em></p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206172211815.png" alt="image-20220617221119763"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>This request has been blocked； the content must be served over HTTPS.</title>
      <link href="/post/this-request-has-been-blocked-the-content-must-be-served-over-https/"/>
      <url>/post/this-request-has-been-blocked-the-content-must-be-served-over-https/</url>
      
        <content type="html"><![CDATA[<h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This request has been blocked; the <span class="attribute">content</span> must be served over HTTPS.</span><br></pre></td></tr></table></figure><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>1、Http与Https混合使用<br>        项目生产环境使用的是https协议，某页面嵌入第三方连接，通过ajax调用相关接口获取信息实现登陆第三方系统，第三方系统暂未升级使用https，故在页面点击链接时出现上述错误信息。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1、将所有系统的协议都升级为https协议；</p><p>2、在引入第三方url的页面添加如下信息：</p><p>通过在网页 head 中添加标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;<span class="attribute">Content</span>-Security-Policy&quot; <span class="attribute">content</span>=&quot;upgrade-insecure-requests&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+GitHub搭建个人博客</title>
      <link href="/post/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/post/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装相关工具"><a href="#安装相关工具" class="headerlink" title="安装相关工具"></a>安装相关工具</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>打开cmd命令行(win+r 输入cmd回车)分别执行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>如果都可以成功运行出现版本信息证明安装成功。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>必须按照步骤来，因为hexo需要使用node.js的npm命令。<br>在合适的地方新建一个文件夹，用来存放自己的博客文件，在目录下右键点击<code>Git Bash Here</code>，然后输入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure><p>等待安装hexo完成后，输入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>检查是否安装成功。</p><h3 id="在github上创建并设置远程库"><a href="#在github上创建并设置远程库" class="headerlink" title="在github上创建并设置远程库"></a>在github上创建并设置远程库</h3><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init C:/hexo </span><br><span class="line">cd C:/hexo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>依次输入上面三条语句</p><p>接着输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/，效果如下：">http://localhost:4000/，效果如下：</a></p><p><a href="https://imgtu.com/i/X0L9pD"><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071437977.png" alt="X0L9pD.png"></a></p><h2 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h2><p>回到你的git bash中，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p><a href="https://imgtu.com/i/X0X8YV"><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071437978.png" alt="X0X8YV.png"></a></p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p><a href="https://imgtu.com/i/X0jQje"><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071437979.png" alt="X0jQje.png"></a></p><p>在gitbash中，查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://yourname.github.io">http://yourname.github.io</a> 这个网站看到你的博客了！！</p><p><a href="https://imgtu.com/i/X0v12T"><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071437980.png" alt="X0v12T.png"></a></p><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><p>现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点解析进去，添加解析。</p><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。<br>解析线路选择默认。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071146026.png" alt="image-20220607114636904"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071148365.png" alt="image-20220607114800278"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071149229.png" alt="image-20220607114907178"></p><p>最后，在gitbash中，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>就可以看到更新了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 PicGo+GitHub 搭建免费图床</title>
      <link href="/post/%E4%BD%BF%E7%94%A8%20PicGo+GitHub%20%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>/post/%E4%BD%BF%E7%94%A8%20PicGo+GitHub%20%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="登录GitHub，创建一个新的仓库（public）；"><a href="#登录GitHub，创建一个新的仓库（public）；" class="headerlink" title="登录GitHub，创建一个新的仓库（public）；"></a>登录GitHub，创建一个新的仓库（public）；</h2><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071400466.png" alt="picgo01"></p><h2 id="安装开源图床工具-PicGo"><a href="#安装开源图床工具-PicGo" class="headerlink" title="安装开源图床工具 PicGo"></a>安装开源图床工具 <a href="https://molunerfinn.com/PicGo/">PicGo</a></h2><p>打开官网，点击免费下载，在Assets下面选择合适的版本下载安装。<br><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071401336.png" alt="picgo02"></p><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><h3 id="Github-创建一个-token"><a href="#Github-创建一个-token" class="headerlink" title="Github 创建一个 token"></a>Github 创建一个 token</h3><p>在GitHub头像处打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code>；</p><h3 id="填写及勾选相关信息"><a href="#填写及勾选相关信息" class="headerlink" title="填写及勾选相关信息"></a>填写及勾选相关信息</h3><p>然后点击 <code>Genetate token</code> 即可</p><p>==勾选repo==</p><h3 id="token生成后自行保存"><a href="#token生成后自行保存" class="headerlink" title="token生成后自行保存"></a>token生成后自行保存</h3><p>注意它只会显示一次</p><h3 id="配置PicGo-1"><a href="#配置PicGo-1" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p>依次打开 图床设置 -&gt; Github 图床；<br>填写相关信息，最后点击 <code>确定</code>即可，要将其作为默认图床的话，点击设为默认图床；<br><u><strong><em>分支名填master</em></strong></u>（若后续出现问题，可改成main试试）<br><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071401531.png" alt="picgo03"></p><h3 id="上传图片，通过上传区上传即可"><a href="#上传图片，通过上传区上传即可" class="headerlink" title="上传图片，通过上传区上传即可"></a>上传图片，通过上传区上传即可</h3><p>Ctrl V 或者将图片拖拽都可以，也可以通过快捷键的方式上传（默认上传键为 <code>Ctrl + Shift + P</code>）</p><h2 id="加速访问（貌似失效）"><a href="#加速访问（貌似失效）" class="headerlink" title="加速访问（貌似失效）"></a><del>加速访问</del>（貌似失效）</h2><p>用 <a href="https://www.jsdelivr.com/">jsDelivr</a> 进行免费加速，在我们 PicGo 图床配置中添加如下自定义域名即可；</p><hr><p>​          <a href="https://cdn.jsdelivr.net/gh/用户名/仓库名@master">https://cdn.jsdelivr.net/gh/用户名/仓库名@master</a></p><hr><h2 id="快捷键修改"><a href="#快捷键修改" class="headerlink" title="快捷键修改"></a>快捷键修改</h2><p>推荐改成 <code>Ctrl + shift +c</code>。</p><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071402109.png" alt="picgo快捷键"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPlusPlusThings-practical_exercises</title>
      <link href="/post/CPlusPlusThings/"/>
      <url>/post/CPlusPlusThings/</url>
      
        <content type="html"><![CDATA[<h2 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h2><h4 id="联合体union"><a href="#联合体union" class="headerlink" title="联合体union"></a>联合体union</h4><p>结构体和共用体的<code>区别</code>在于：结构体的各个成员会占用不同的内存，互相之间没有影响；而共用体的所有成员占用同一段内存，修改一个成员会影响其余所有成员。</p><h4 id="一种条件编译指令注释"><a href="#一种条件编译指令注释" class="headerlink" title="一种条件编译指令注释"></a>一种条件编译指令注释</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;world&quot;</span> &lt;&lt; endl; <span class="comment">// 该行代码被注释掉</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h2><h4 id="enum枚举"><a href="#enum枚举" class="headerlink" title="enum枚举"></a>enum枚举</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Roster</span> &#123;Tom, Sharon, Bill, Teresa, John&#125;;<span class="comment">//该语句将创建一个名为 Roster 的数据类型。</span></span><br></pre></td></tr></table></figure><p>默认情况下，编译器设置第一个枚举量为 0，下一个为 1，以此类推。在上述示例中，Tom 的值将是 0，Sharon 的值为 1，等等。最后一个枚举量 John 的值为 4。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Roster student;</span><br><span class="line">student = Sharon;</span><br><span class="line"><span class="keyword">if</span> (student == Sharon)  <span class="comment">//Sharon 周围没有引号。因为它是一个命名常量，而不是字符串常数。</span></span><br></pre></td></tr></table></figure><p>即使枚举数据类型中的值实际存储为整数，也不能总是将整数值替换为符号名称。例如，不能使用下面的语句将 Sharon 赋值给 student：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student = <span class="number">1</span>; <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><p>但是，可以使用整数值而不是符号名称来测试枚举变量。例如，以下两个 if 语句是等效的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (student == Bill)</span><br><span class="line"><span class="keyword">if</span> (student == <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>【示例 1】</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Colors</span> &#123; red, orange, yellow = <span class="number">9</span>, green, blue &#125;;</span><br></pre></td></tr></table></figure><p>在该示例中，命名常量 red 将被赋值为 0，orange 将为 1，yellow 将为 9，green 将为 10，blue 将为 11。</p><p>【示例 2】</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Rooms</span> &#123; livingroom = <span class="number">1</span>, den, bedroom, kitchen &#125;;</span><br></pre></td></tr></table></figure><p>在该示例中，livingroom 被赋值为 1，den 将为 2，bedroom 将为 3，kitchen 将为 4。</p><h2 id="day3"><a href="#day3" class="headerlink" title="day3"></a>day3</h2><h4 id="inline内联函数"><a href="#inline内联函数" class="headerlink" title="inline内联函数"></a>inline内联函数</h4><p>关键字inline 必须与函数定义体放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用。</p><p><strong>建议把inline函数的定义放到头文件中。在每个调用该inline函数的文件中包含该头文件。</strong></p><h4 id="前向引用声明"><a href="#前向引用声明" class="headerlink" title="前向引用声明"></a>前向引用声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用前向引用声明虽然可以解决一些问题，但它并不是万能的。需要注意的是，</span></span><br><span class="line"><span class="comment">尽管使用了前向引用声明，但是在提供一个完整的类声明之前，不能声明该类的对象，</span></span><br><span class="line"><span class="comment">也不能在内联成员函数中使用该类的对象。请看下面的程序段：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fred</span>;<span class="comment">//前向引用声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Barney</span> &#123;</span><br><span class="line">   Fred x;<span class="comment">//错误：类Fred的声明尚不完善</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fred</span> &#123;</span><br><span class="line">   Barney y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fred</span>;<span class="comment">//前向引用声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Barney</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">     x-&gt;<span class="built_in">yabbaDabbaDo</span>();<span class="comment">//错误：Fred类的对象在定义之前被使用</span></span><br><span class="line">   &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">   Fred* x;   <span class="comment">//正确，经过前向引用声明，可以声明Fred类的对象指针</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fred</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">yabbaDabbaDo</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">   Barney* y;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h4 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">学习知识：</span></span><br><span class="line"><span class="comment">静态数据成员</span></span><br><span class="line"><span class="comment">用关键字static声明</span></span><br><span class="line"><span class="comment">该类的所有对象维护该成员的同一个拷贝</span></span><br><span class="line"><span class="comment">必须在类外定义和初始化，用(::)来指明所属的类。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Point</span>(<span class="type">int</span> xx=<span class="number">0</span>, <span class="type">int</span> yy=<span class="number">0</span>) &#123;X=xx; Y=yy; countP++; &#125; </span><br><span class="line">    <span class="built_in">Point</span>(Point &amp;p);</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetX</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> X;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetY</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> Y;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetC</span><span class="params">()</span> </span>&#123;cout&lt;&lt;<span class="string">&quot; Object id=&quot;</span>&lt;&lt;countP&lt;&lt;endl;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> X,Y;</span><br><span class="line">    <span class="comment">//静态数据成员，必须在外部定义和初始化，内部不能直接初始化！</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> countP;</span><br><span class="line">&#125;;</span><br><span class="line">Point::<span class="built_in">Point</span>(Point &amp;p)</span><br><span class="line">&#123;X=p.X;</span><br><span class="line">Y=p.Y;</span><br><span class="line">countP++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//必须在类外定义和初始化，用(::)来指明所属的类。</span></span><br><span class="line"><span class="type">int</span> Point::countP=<span class="number">0</span>; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="function">Point <span class="title">A</span><span class="params">(<span class="number">4</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Point A,&quot;</span>&lt;&lt;A.<span class="built_in">GetX</span>()&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;A.<span class="built_in">GetY</span>();</span><br><span class="line">A.<span class="built_in">GetC</span>();</span><br><span class="line"><span class="function">Point <span class="title">B</span><span class="params">(A)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Point B,&quot;</span>&lt;&lt;B.<span class="built_in">GetX</span>()&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;B.<span class="built_in">GetY</span>();</span><br><span class="line">B.<span class="built_in">GetC</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">知识点：</span></span><br><span class="line"><span class="comment">静态成员函数</span></span><br><span class="line"><span class="comment">类外代码可以使用类名和作用域操作符来调用静态成员函数。</span></span><br><span class="line"><span class="comment">静态成员函数只能引用属于该类的静态数据成员或静态成员函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">f</span><span class="params">(A a)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> global;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//静态数据成员必须在类外定义和初始化，用(::)来指明所属的类。</span></span><br><span class="line"><span class="type">int</span> A::global = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::f</span><span class="params">(A a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态成员函数只能引用属于该类的静态数据成员或静态成员函数。</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;x; //对x的引用是错误的</span></span><br><span class="line">    cout &lt;&lt; a.x;  <span class="comment">//正确</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    global = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; global &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    a.<span class="built_in">g</span>();<span class="comment">//5</span></span><br><span class="line">    a.<span class="built_in">f</span>(<span class="built_in">A</span>());<span class="comment">//0</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数综合练习题"><a href="#函数综合练习题" class="headerlink" title="函数综合练习题"></a>函数综合练习题</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一圆型游泳池如图所示，现在需在其周围建一圆型过道，并在其四周围上栅栏。栅栏价格为35元/米，过道造价为20元/平方米。</span></span><br><span class="line"><span class="comment">过道宽度为3米，游泳池半径由键盘输入。要求编程计算并输出过道和栅栏的造价。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">图形描述：大圆嵌套小圆：</span></span><br><span class="line"><span class="comment">小圆在大圆中间，小圆为游泳池，大圆与小圆间隔为过道。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> PI = <span class="number">3.14159</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> FencePrice = <span class="number">35</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> ConcretePrice = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Price</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Price</span>(<span class="type">float</span> bj);</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">zhouchang</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">mianji</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">float</span> r;<span class="comment">//半径</span></span><br><span class="line">&#125;;</span><br><span class="line">Price::<span class="built_in">Price</span>(<span class="type">float</span> bj) &#123;</span><br><span class="line">    r = bj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Price::zhouchang</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * PI * r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Price::mianji</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PI * r * r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> bj;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入游泳池半径： &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; bj;</span><br><span class="line">    <span class="function">Price <span class="title">p1</span><span class="params">(bj)</span></span>;</span><br><span class="line">    <span class="function">Price <span class="title">p2</span><span class="params">(bj + <span class="number">3</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;过道造价为： &quot;</span> &lt;&lt; (ConcretePrice * (p2.<span class="built_in">mianji</span>() - p1.<span class="built_in">mianji</span>())) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栅栏造价为： &quot;</span> &lt;&lt; (FencePrice * p2.<span class="built_in">zhouchang</span>()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h2><h4 id="const用法"><a href="#const用法" class="headerlink" title="const用法"></a>const用法</h4><p>常类型的对象必须进行初始化，而且不能被更新。<br>常引用：被引用的对象不能被更新。<br>const  类型说明符  &amp;引用名<br>常对象：必须进行初始化,不能被更新。<br>类名  const  对象名<br>常数组：数组元素不能被更新。<br>类型说明符  const  数组名[大小]…<br>常指针：指向常量的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">R</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">R</span>(<span class="type">int</span> r1, <span class="type">int</span> r2) &#123; R1 = r1; R2 = r2; &#125;</span><br><span class="line">    <span class="comment">//const区分成员重载函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> R1, R2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">常成员函数说明格式：类型说明符  函数名（参数表）const;</span></span><br><span class="line"><span class="comment">这里，const是函数类型的一个组成部分，因此在实现部分也要带const关键字。</span></span><br><span class="line"><span class="comment">const关键字可以被用于参与对重载函数的区分</span></span><br><span class="line"><span class="comment">！！！通过常对象只能调用它的常成员函数！！！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R::print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;普通调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; R1 &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; R2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化也需要带上</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R::print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;常对象调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; R1 &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; R2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">a</span><span class="params">(<span class="number">5</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    a.<span class="built_in">print</span>();  <span class="comment">//调用void print()</span></span><br><span class="line">    <span class="comment">//!!!通过常对象只能调用它的常成员函数!!!</span></span><br><span class="line">    <span class="function"><span class="type">const</span> R <span class="title">b</span><span class="params">(<span class="number">20</span>, <span class="number">52</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">print</span>();  <span class="comment">//调用void print() const</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ifndef"><a href="#ifndef" class="headerlink" title="ifndef"></a>ifndef</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#ifndef   标识符</span></span><br><span class="line"><span class="comment">       程序段1</span></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"><span class="comment">       程序段2</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">如果“标识符”未被定义过，则编译程序段1，否则编译程序段2。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h2><h4 id="构造函数和析构函数的构造规则"><a href="#构造函数和析构函数的构造规则" class="headerlink" title="构造函数和析构函数的构造规则"></a>构造函数和析构函数的构造规则</h4><p>1、派生类可以不定义构造函数的情况<br>当具有下述情况之一时，派生类可以不定义构造函数。<br>基类没有定义任何构造函数。<br>基类具有缺省参数的构造函数。<br>基类具有无参构造函数。<br>2、派生类必须定义构造函数的情况<br>当基类或成员对象所属类只含有带参数的构造函数时，即使派生类本身没有数据成员要初始化，它也必须定义构造函数，并以构造函数初始化列表的方式向基类和成员对象的构造函数传递参数，以实现基类子对象和成员对象的初始化。<br>3、派生类的构造函数只负责直接基类的初始化 </p><h4 id="派生类对象的构造"><a href="#派生类对象的构造" class="headerlink" title="派生类对象的构造"></a>派生类对象的构造</h4><ul><li>先构造基类</li><li>再构造成员</li><li>最后构造自身（调用构造函数）</li></ul><p>基类构造顺序由派生层次决定：<strong>最远的基类最先构造</strong><br>成员构造顺序和定义顺序符合<br>析构函数的析构顺序与构造相反</p><h4 id="基类与派生类对象的关系"><a href="#基类与派生类对象的关系" class="headerlink" title="基类与派生类对象的关系"></a>基类与派生类对象的关系</h4><p>基类对象与派生类对象之间存在赋值相容性。包括以下几种情况：<br>把派生类对象赋值给基类对象。即用派生类对象中从基类继承来的数据成员逐个赋值给基类对象的数据成员。</p><p>把派生类对象的地址赋值给基类指针。</p><p>用派生类对象初始化基类对象的引用。</p><p>如果函数的形参是基类对象或基类对象的引用，在调用函数时可以用派生类对象作为实参。</p><p>反之则不行，即不能把基类对象赋值给派生类对象；不能把基类对象的地址赋值给派生类对象的指针；也不能把基类对象作为派生对象的引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setA</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; a = x; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> :<span class="keyword">public</span> A &#123;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setB</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; b = x; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> b; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(A a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a.<span class="built_in">setA</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">(A* pA, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pA-&gt;<span class="built_in">setA</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f3</span><span class="params">(A&amp; rA, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rA.<span class="built_in">setA</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1, * pA;</span><br><span class="line">    B b1, * pB;</span><br><span class="line">    a1.<span class="built_in">setA</span>(<span class="number">1</span>);</span><br><span class="line">    b1.<span class="built_in">setA</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//把派生类对象赋值给基类对象。</span></span><br><span class="line">    a1 = b1;</span><br><span class="line">    cout &lt;&lt; a1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//2</span></span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//2</span></span><br><span class="line">    a1.<span class="built_in">setA</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; a1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//10</span></span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//2</span></span><br><span class="line">    <span class="comment">//把派生类对象的地址赋值给基类指针。 </span></span><br><span class="line">    pA = &amp;b1;</span><br><span class="line">    pA-&gt;<span class="built_in">setA</span>(<span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; pA-&gt;<span class="built_in">getA</span>() &lt;&lt; endl; <span class="comment">//20</span></span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//20</span></span><br><span class="line">    <span class="comment">//用派生类对象初始化基类对象的引用。</span></span><br><span class="line">    A&amp; ra = b1;</span><br><span class="line">    ra.<span class="built_in">setA</span>(<span class="number">30</span>);</span><br><span class="line">    cout &lt;&lt; pA-&gt;<span class="built_in">getA</span>() &lt;&lt; endl; <span class="comment">//30</span></span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//30</span></span><br><span class="line">    b1.<span class="built_in">setA</span>(<span class="number">7</span>);</span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//7</span></span><br><span class="line">    <span class="built_in">f1</span>(b1, <span class="number">100</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1111111111&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;<span class="comment">//7    </span></span><br><span class="line">    <span class="built_in">f2</span>(&amp;b1, <span class="number">200</span>);</span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//200</span></span><br><span class="line">    <span class="built_in">f3</span>(b1, <span class="number">300</span>);</span><br><span class="line">    cout &lt;&lt; b1.<span class="built_in">getA</span>() &lt;&lt; endl;  <span class="comment">//300</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承访问权限"><a href="#继承访问权限" class="headerlink" title="继承访问权限"></a>继承访问权限</h4><p>一、公有继承<br>1.基类中protected的成员<br>类内部：可以访问<br>类的使用者：不能访问<br>类的派生类成员：可以访问<br>2.派生类不可访问基类的private成员<br>3.派生类可访问基类的protected成员<br>4.派生类可访问基类的public成员</p><p>二、私有继承<br>派生类不可访问基类的任何成员与函数</p><p>三、保护继承<br>派生方式为protected的继承称为保护继承，在这种继承方式下，<br>基类的public成员在派生类中会变成protected成员，<br>基类的protected和private成员在派生类中保持原来的访问权限<br><em>注意点：当采用保护继承的时候，由于public成员变为protected成员，因此类的使用者不可访问！而派生类可访问！</em></p><p>四、派生类对基类成员的访问形式<br>1.通过派生类对象直接访问基类成员<br>2.在派生类成员函数中直接访问基类成员<br>3.通过基类名字限定访问被重载的基类成员名  </p><h4 id="虚基类调用次序"><a href="#虚基类调用次序" class="headerlink" title="虚基类调用次序"></a>虚基类调用次序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;Constructing A&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;Constructing B&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>() &#123; cout &lt;&lt; <span class="string">&quot;Constructing C&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B1</span> : <span class="keyword">public</span> C ,<span class="keyword">virtual</span> <span class="keyword">public</span> B, <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B1</span>(<span class="type">int</span> i) &#123; cout &lt;&lt; <span class="string">&quot;Constructing B1&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B2</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> C ,<span class="keyword">public</span> A, <span class="keyword">virtual</span> <span class="keyword">public</span> B  &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B2</span>(<span class="type">int</span> j) &#123; cout &lt;&lt; <span class="string">&quot;Constructing B2&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B1, <span class="keyword">public</span> B2 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">D</span>(<span class="type">int</span> m, <span class="type">int</span> n) : <span class="built_in">B1</span>(m), <span class="built_in">B2</span>(n) &#123; cout &lt;&lt; <span class="string">&quot;Constructing D&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">D <span class="title">d</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Constructing B</span></span><br><span class="line"><span class="comment">Constructing A</span></span><br><span class="line"><span class="comment">Constructing C</span></span><br><span class="line"><span class="comment">Constructing C</span></span><br><span class="line"><span class="comment">Constructing B1</span></span><br><span class="line"><span class="comment">Constructing A</span></span><br><span class="line"><span class="comment">Constructing B2</span></span><br><span class="line"><span class="comment">Constructing A</span></span><br><span class="line"><span class="comment">Constructing D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//被虚拟继承的基类,在其所有的派生类中，仅出现一次//</span></span><br></pre></td></tr></table></figure><p>调用顺序的规定：</p><p>先调用虚基类的构造函数，再调用非虚基类的构造函数<br>若同一层次中包含多个虚基类,这些虚基类的构造函数按它们的说明的次序调用<br>若虚基类由非基类派生而来,则仍然先调用基类构造函数,再调用派生类构造函数</p><h2 id="day6"><a href="#day6" class="headerlink" title="day6"></a>day6</h2><h4 id="C-对抽象类具有以下限定"><a href="#C-对抽象类具有以下限定" class="headerlink" title="C++对抽象类具有以下限定"></a>C++对抽象类具有以下限定</h4><ul><li>抽象类中含有纯虚函数，由于纯虚函数没有实现代码，所以不能建立抽象类的对象。</li><li>抽象类只能作为其他类的基类，可以通过抽象类对象的指针或引用访问到它的派生类对象，实现运行时的多态性。</li><li>如果派生类只是简单地继承了抽象类的纯虚函数，而没有重新定义基类的纯虚函数，则派生类也是一个抽象类。</li></ul><h2 id="day7"><a href="#day7" class="headerlink" title="day7"></a>day7</h2><h4 id="重载二元运算符"><a href="#重载二元运算符" class="headerlink" title="重载二元运算符"></a>重载二元运算符</h4><p>（1）非静态成员运算符重载</p><p>以类成员形式重载的运算符参数比实际参数少一个，第1个参数是以this指针隐式传递的。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="type">double</span> real,image;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Complex <span class="keyword">operator</span>+(Complex b)&#123;……&#125;</span><br><span class="line">......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>（2） 友元运算符重载</p><p>如果将运算符函数作为类的友元重载，它需要的参数个数就与运算符实际需要的参数个数相同。比如，若用友元函数重载Complex类的加法运算符，则形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(Complex a,Complex b);<span class="comment">//声明</span></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex  <span class="keyword">operator</span>+(Complex a,Complex b)&#123;……&#125;     <span class="comment">//定义</span></span><br></pre></td></tr></table></figure><p><em>对于不要求左值且可以交换参数次序的运算符（如+、-、</em>、/ 等运算符），最好用非成员形式（包括友元和普通函数）的重载运算符函数实现。*</p><h4 id="重载一元运算符"><a href="#重载一元运算符" class="headerlink" title="重载一元运算符"></a>重载一元运算符</h4><p>一元运算符只需要一个运算参数，如取地址运算符（&amp;）、负数（?）、自增加（++）等。</p><p>前自增(减)与后自增(减)：C++编译器可以通过在运算符函数参数表中是否插入关键字int 来区分这两种方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前缀</span></span><br><span class="line"><span class="keyword">operator</span> -- ();</span><br><span class="line"><span class="keyword">operator</span> -- (X &amp; x);</span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line"><span class="keyword">operator</span> -- (<span class="type">int</span>);</span><br><span class="line"><span class="keyword">operator</span> -- (X &amp; x, <span class="type">int</span>);</span><br></pre></td></tr></table></figure><h4 id="重载赋值运算符"><a href="#重载赋值运算符" class="headerlink" title="重载赋值运算符="></a>重载赋值运算符=</h4><p>1、赋值运算符“=”的重载特殊性</p><p>赋值运算进行时将调用此运算符</p><p>只能用成员函数重载</p><p>如果需要而没有定义时，编译器自动生成，该版本进行bit-by-bit拷贝</p><h4 id="重载赋值运算符-1"><a href="#重载赋值运算符-1" class="headerlink" title="重载赋值运算符[]"></a>重载赋值运算符[]</h4><p>1、[ ]是一个二元运算符，其重载形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>&#123;</span><br><span class="line">……</span><br><span class="line">X&amp; <span class="keyword">operator</span>[](<span class="type">int</span> n);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、重载[]需要注意的问题</p><ul><li>[]是一个二元运算符，其第1个参数是通过对象的this指针传递的，第2个参数代表数组的下标</li><li>由于[]既可以出现在赋值符“=”的左边，也可以出现在赋值符“=”的右边，所以重载运算符[]时常返回引用。</li><li><strong>[]只能被重载为类的非静态成员函数，不能被重载为友元和普通函数</strong>。</li></ul><h4 id="重载"><a href="#重载" class="headerlink" title="重载( )"></a>重载( )</h4><p>1、运算符( )是函数调用运算符，也能被重载。且只能被重载为类的成员函数。</p><p>2、运算符( )的重载形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>&#123;</span><br><span class="line">……</span><br><span class="line"><span class="function">X&amp; <span class="title">operator</span><span class="params">( )</span><span class="params">(参数表)</span></span>;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>其中的参数表可以包括任意多个参数。</p><p>3、运算符( )的调用形式如下：</p><p>X Obj;                      //对象定义</p><p>Obj()(参数表);          //调用形式1</p><p>Obj(参数表);               //调用形式2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> i = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;X::operator(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl; <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;X::operator(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="keyword">operator</span>[] (<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;X::operator[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl; <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="keyword">operator</span>[] (<span class="type">char</span>* cp)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;X::operator[&quot;</span> &lt;&lt; cp &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">X obj;<span class="type">int</span> i = <span class="built_in">obj</span>(<span class="built_in">obj</span>(<span class="number">1</span>), <span class="number">2</span>);</span><br><span class="line"><span class="type">char</span>* c=<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"><span class="type">int</span> a = obj[i];<span class="type">int</span> b = obj[c];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">//设计一个字符串类String，通过运算符重载实现字符串的输入、输出以及+=、==、!=、&lt;、&gt;、&gt;=、[ ]等运算。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> length; <span class="comment">//字符串长度</span></span><br><span class="line">    <span class="type">char</span>* sPtr; <span class="comment">//存放字符串的指针</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setString</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s2)</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> String&amp; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; s.sPtr;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, String&amp; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> is &gt;&gt; s.sPtr;</span><br><span class="line">    &#125;; <span class="comment">//重载输入运算符</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* = <span class="string">&quot;&quot;</span>);</span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; R)</span><br><span class="line">    &#123;</span><br><span class="line">        length = R.length;</span><br><span class="line">        <span class="built_in">strcpy</span>(sPtr, R.sPtr);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;;                                         <span class="comment">//重载赋值运算符 =</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> String&amp; R);       <span class="comment">//字符串的连接 +=</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String&amp; R);          <span class="comment">//字符串的相等比较 ==</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> String&amp; R);          <span class="comment">//字符串的不等比较 !=</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!();                          <span class="comment">//判定字符串是否为空</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> String&amp; R) <span class="type">const</span>;     <span class="comment">//字符串的小于比较 &lt;</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> String&amp; R);           <span class="comment">//字符串的大于比较 &gt;</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> String&amp; R);          <span class="comment">//字符串的大于等于比较</span></span><br><span class="line">    <span class="type">char</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span>);                     <span class="comment">//字符串的下标运算</span></span><br><span class="line">    ~<span class="built_in">String</span>() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">String&amp; String::<span class="keyword">operator</span>+=(<span class="type">const</span> String&amp; R)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* temp = sPtr;</span><br><span class="line">    length += R.length;</span><br><span class="line">    sPtr = <span class="keyword">new</span> <span class="type">char</span>[length + <span class="number">2</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(sPtr, temp);</span><br><span class="line">    <span class="built_in">strcat</span>(sPtr, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(sPtr, R.sPtr);</span><br><span class="line">    <span class="keyword">delete</span>[] temp;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str)</span><br><span class="line">&#123;</span><br><span class="line">    sPtr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(sPtr, str);</span><br><span class="line">    length = <span class="built_in">strlen</span>(str);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>==(<span class="type">const</span> String&amp; R) &#123; <span class="keyword">return</span> <span class="built_in">strcmp</span>(sPtr, R.sPtr) == <span class="number">0</span>; &#125;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>!=(<span class="type">const</span> String&amp; R) &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == R); &#125;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>!() &#123; <span class="keyword">return</span> length == <span class="number">0</span>; &#125;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>&lt;(<span class="type">const</span> String&amp; R) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">strcmp</span>(sPtr, R.sPtr) &lt; <span class="number">0</span>; &#125;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>&gt;(<span class="type">const</span> String&amp; R) &#123; <span class="keyword">return</span> R &lt; *<span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="type">bool</span> String::<span class="keyword">operator</span>&gt;=(<span class="type">const</span> String&amp; R) &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; R); &#125;</span><br><span class="line"><span class="type">char</span>&amp; String::<span class="keyword">operator</span>[](<span class="type">int</span> subscript) &#123; <span class="keyword">return</span> sPtr[subscript]; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;happy&quot;</span>)</span>, <span class="title">s2</span><span class="params">(<span class="string">&quot;new year&quot;</span>)</span>, s3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 is &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&quot;\ns2 is &quot;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&quot;\ns3 is &quot;</span> &lt;&lt; s3</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\n比较s2和s1:&quot;</span></span><br><span class="line">        &lt;&lt; <span class="string">&quot;\ns2 ==s1结果是 &quot;</span> &lt;&lt; (s2 == s1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>)</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\ns2 != s1结果是 &quot;</span> &lt;&lt; (s2 != s1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>)</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\ns2 &gt;  s1结果是 &quot;</span> &lt;&lt; (s2 &gt; s1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>)</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\ns2 &lt;  s1结果是 &quot;</span> &lt;&lt; (s2 &lt; s1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>)</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\ns2 &gt;= s1结果是 &quot;</span> &lt;&lt; (s2 &gt;= s1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n测试s3是否为空: &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!s3)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s3是空串&quot;</span> &lt;&lt; endl; <span class="comment">//L3</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;把s1赋给s3的结果是：&quot;</span>;</span><br><span class="line">        s3 = s1;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s3=&quot;</span> &lt;&lt; s3 &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//L5</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 += s2 的结果是：s1=&quot;</span>; <span class="comment">//L6</span></span><br><span class="line">    s1 += s2;</span><br><span class="line">    cout &lt;&lt; s1; <span class="comment">//L7</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\ns1 += to you 的结果是：&quot;</span>; <span class="comment">//L8</span></span><br><span class="line">    s1 += <span class="string">&quot;to you&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl; <span class="comment">//L9</span></span><br><span class="line">    s1[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    s1[<span class="number">6</span>] = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">    s1[<span class="number">10</span>] = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//L10</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">s1 is happy</span></span><br><span class="line"><span class="comment">s2 is new year</span></span><br><span class="line"><span class="comment">s3 is</span></span><br><span class="line"><span class="comment">比较s2和s1:</span></span><br><span class="line"><span class="comment">s2 ==s1结果是 false</span></span><br><span class="line"><span class="comment">s2 != s1结果是 true</span></span><br><span class="line"><span class="comment">s2 &gt;  s1结果是 true</span></span><br><span class="line"><span class="comment">s2 &lt;  s1结果是 false</span></span><br><span class="line"><span class="comment">s2 &gt;= s1结果是 true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">测试s3是否为空: s3是空串</span></span><br><span class="line"><span class="comment">把s1赋给s3的结果是：s3=happy</span></span><br><span class="line"><span class="comment">s1 += s2 的结果是：s1=happy new year</span></span><br><span class="line"><span class="comment">s1 += to you 的结果是：s1 = happy new year to you</span></span><br><span class="line"><span class="comment">s1 = Happy New Year to you</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="day8"><a href="#day8" class="headerlink" title="day8"></a>day8</h2><h4 id="函数模板的特化"><a href="#函数模板的特化" class="headerlink" title="函数模板的特化"></a>函数模板的特化</h4><ul><li>特化的原因<br>但在某些情况下，模板描述的通用算法不适合特定的场合（数据类型等）<br>比如：如max函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * cp = <span class="built_in">max</span> (“abcd”, “<span class="number">1234</span>”);</span><br><span class="line">实例化为：<span class="function"><span class="type">char</span> * <span class="title">max</span> <span class="params">(<span class="type">char</span> * a, <span class="type">char</span> * b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</span><br></pre></td></tr></table></figure><p>这肯定是有问题的，因为字符串的比较为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> * <span class="title">max</span> <span class="params">(<span class="type">char</span> * a, <span class="type">char</span> * b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> <span class="built_in">strcmp</span>(a, b)&gt;<span class="number">0</span> ? a : b;   &#125;</span><br></pre></td></tr></table></figure><ul><li>特化<br>所谓特化，就是针对模板不能处理的特殊数据类型，编写与模板同名的特殊函数专门处理这些数据类型。<br>模板特化的定义形式：<br>template &lt;&gt; 返回类型 函数名&lt;特化的数据类型&gt;(参数表) {<pre><code>……                             </code></pre>}<br>说明：<br>① template &lt; &gt;是模板特化的关键字，&lt; &gt;中不需要任何内容；<br>② 函数名后的&lt; &gt;中是需要特化处理的数据类型。</li></ul><p>说明<br>① 当程序中同时存在模板和它的特化时，<strong>特化将被优先调用</strong>；<br>② 在同一个程序中，除了函数模板和它的特化外，还可以有同名的普通函数。其区别在于C++会对普通函数的调用实参进行隐式的类型转换，但不会对模板函数及特化函数的参数进行任何形式的类型转换。<br>调用顺序<br>当同一程序中具有模板与普通函数时，其匹配顺序如下：<br>完全匹配的非模板函数<br>完全匹配的模板函数<br>类型相容的非模板函数</p><h2 id="day9"><a href="#day9" class="headerlink" title="day9"></a>day9</h2><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>1.catch捕获异常时，不会进行数据类型的默认转换。<br>2.限制异常的方法</p><ul><li>当一个函数声明中不带任何异常描述时，它可以抛出任何异常。例如：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span>,<span class="type">char</span>)</span></span>;                 <span class="comment">//函数f可以抛出任何异常</span></span><br></pre></td></tr></table></figure><ul><li>在函数声明的后面添加一个throw参数表，在其中指定函数可以抛出的异常类型。例如：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">g</span><span class="params">(<span class="type">int</span>,<span class="type">char</span>)</span>  <span class="title">throw</span><span class="params">(<span class="type">int</span>,<span class="type">char</span>)</span></span>;  <span class="comment">//只允许抛出int和char异常。</span></span><br></pre></td></tr></table></figure><ul><li>指定throw限制表为不包括任何类型的空表，不允许函数抛出任何异常。如：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">h</span><span class="params">(<span class="type">int</span>,<span class="type">char</span>)</span> <span class="title">throw</span><span class="params">()</span></span>;<span class="comment">//不允许抛出任何异常</span></span><br></pre></td></tr></table></figure><p>3.捕获所有异常<br>在多数情况下，catch都只用于捕获某种特定类型的异常，但它也具有捕获全部异常的能力。其形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">catch</span>(…) &#123;</span><br><span class="line">    ……                        <span class="comment">//异常处理代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.再次抛出异常<br>如是catch块无法处理捕获的异常，它可以将该异常再次抛出，使异常能够在恰当的地方被处理。再次抛出的异常不会再被同一个catch块所捕获，它将被传递给外部的catch块处理。要在catch块中再次抛出同一异常，只需在该catch块中添加不带任何参数的throw语句即可。<br>5.异常的嵌套调用<br>try块可以嵌套，即一个try块中可以包括另一个try块，这种嵌套可能形成一个异常处理的调用链。</p><h4 id="异常类的捕获"><a href="#异常类的捕获" class="headerlink" title="异常类的捕获"></a>异常类的捕获</h4><p>派生异常类无法捕获基类异常，基类异常类可捕获派生类异常。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">string <span class="title">Where</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;BasicException...&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSysException</span>:<span class="keyword">public</span> BasicException&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">string <span class="title">Where</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;FileSysException...&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileNotFound</span>:<span class="keyword">public</span> FileSysException&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">string <span class="title">Where</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;FileNotFound...&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiskNotFound</span>:<span class="keyword">public</span> FileSysException&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">string <span class="title">Where</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;DiskNotFound...&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//       //派生异常类无法捕获基类异常</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="built_in">FileSysException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(DiskNotFound p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(FileNotFound p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(FileSysException p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(BasicException p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//        .....  //基类异常类可捕获派生类异常</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="built_in">DiskNotFound</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(BasicException p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(FileSysException p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(DiskNotFound p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">catch</span>(FileNotFound p)&#123;cout&lt;&lt;p.<span class="built_in">Where</span>()&lt;&lt;endl;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FileSysException...</span><br><span class="line">BasicException...</span><br></pre></td></tr></table></figure><h4 id="异常类多态"><a href="#异常类多态" class="headerlink" title="异常类多态"></a>异常类多态</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicException</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">Where</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;BasicException...&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSysException</span> : <span class="keyword">public</span> BasicException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">Where</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;FileSysException...&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileNotFound</span> : <span class="keyword">public</span> FileSysException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">Where</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;FileNotFound...&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiskNotFound</span> : <span class="keyword">public</span> FileSysException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">Where</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;DiskNotFound...&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DiskNotFound err;</span><br><span class="line">        <span class="keyword">throw</span> &amp;err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (BasicException *p)           <span class="comment">//可捕获派生类异常</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;<span class="built_in">Where</span>() &lt;&lt; endl;     <span class="comment">//多态调用异常类方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DiskNotFound...</span><br></pre></td></tr></table></figure><h4 id="调用异常类成员函数"><a href="#调用异常类成员函数" class="headerlink" title="调用异常类成员函数"></a>调用异常类成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Eg10-11.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Full</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Full</span>(<span class="type">int</span> i) :<span class="built_in">a</span>(i) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> s[MAX];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stack</span>() &#123; top = <span class="number">-1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top &gt;= MAX - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Full</span>(a);</span><br><span class="line">        s[++top] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Empty</span>();</span><br><span class="line">        <span class="keyword">return</span> s[top--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stack s;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (Full e) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Exception: Stack Full...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The value not push in stack:&quot;</span> &lt;&lt; e.<span class="built_in">getValue</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exception: Stack Full...</span><br><span class="line">The value <span class="keyword">not</span> push in stack:<span class="number">40</span></span><br></pre></td></tr></table></figure><h2 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h2><h4 id="get读取数据"><a href="#get读取数据" class="headerlink" title="get读取数据"></a>get读取数据</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> a, b, c, d;</span><br><span class="line">cin.<span class="built_in">get</span>(a);</span><br><span class="line">cin.<span class="built_in">get</span>(b);</span><br><span class="line">c = cin.<span class="built_in">get</span>();</span><br><span class="line">d = cin.<span class="built_in">get</span>();</span><br><span class="line">cout &lt;&lt; <span class="built_in">int</span>(a) &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="built_in">int</span>(b) &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="built_in">int</span>(c) &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="built_in">int</span>(d) &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用法：a = cin.get() ?或者 ?cin.get(a)</span></span><br><span class="line"><span class="comment">结束条件：输入字符足够后回车</span></span><br><span class="line"><span class="comment">说明：这个是单字符的输入，用途是输入一个字符，把它的ASCALL码存入到a中</span></span><br><span class="line"><span class="comment">处理方法：与cin不同，cin.get()在缓冲区遇到[enter]，[space]，[tab]不会作为舍弃，而是继续留在缓冲区中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cin.get(arrayname,size)  把字符输入到arrayname中，长度不超过size</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//get()两个参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.输入串长&lt;size，输入串长&gt;arraylength，会自动扩张arrayname大小，使能保存所有数据</span></span><br><span class="line"><span class="comment">// char a[10];</span></span><br><span class="line"><span class="comment">// cin.get(a,20);</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;sizeof(a)&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//输入：123456789012[enter]</span></span><br><span class="line"><span class="comment">//输出a数组：123456789012 可以发现，输入12个字符到a[10]中，系统自动扩充a[10]，此时实际数组长  为13（‘123456789012’\0’’）。但当计算sizeof(a)时，还是现实为10</span></span><br><span class="line">    <span class="comment">//2.输入串长&lt;size，输入串长&lt;arraylength，把串全部输入，后面补‘\0’</span></span><br><span class="line">    <span class="comment">// char b[10];</span></span><br><span class="line"><span class="comment">// cin.get(b,20);</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;b&lt;&lt;endl;//12345，此时数组内数据为‘12345&#x27;\0’</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;sizeof(b)&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//3.输入串长&gt;size，先截取size个字符，若还是大于arraylength，则输入前arraylength-1个字符，最后补充‘\0’</span></span><br><span class="line">    <span class="comment">// char c[5];</span></span><br><span class="line"><span class="comment">// cin.get(c,10);</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;c&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;sizeof(c)&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//4.输入串长&gt;size，先截取size个字符，若小于arraylength，则把截取串放入数组中，最后补充‘\0’</span></span><br><span class="line">    <span class="comment">// char d[10];</span></span><br><span class="line"><span class="comment">// cin.get(d,5);</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;d&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;sizeof(d)&lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get()三个参数</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        用法：cin.get(arrayname,size,s) ?把数据输入到arrayname字符数组中，当到达长度size时结束或者遇到字符s时结束</span></span><br><span class="line"><span class="comment">        注释：a必须是字符数组，即char a[]l类型，不可为string类型；size为最大的输入长度；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> e[<span class="number">10</span>];</span><br><span class="line">    cin.<span class="built_in">get</span>(e,<span class="number">8</span>,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    cout&lt;&lt;e;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getline"><a href="#getline" class="headerlink" title="getline"></a>getline</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">（1）cin.getline(arrayname,size)与cin.get(arrayname,size)的区别</span></span><br><span class="line"><span class="comment">cin.get(arrayname,size)当遇到[enter]时会结束目前输入，他不会删除缓冲区中的[enter]</span></span><br><span class="line"><span class="comment">cin.getline(arrayname,size)当遇到[enter]时会结束当前输入，但是会删除缓冲区中的[enter]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    char a[10];</span></span><br><span class="line"><span class="comment">    char b;</span></span><br><span class="line"><span class="comment">    cin.get(a,10);</span></span><br><span class="line"><span class="comment">    cin.get(b);</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;a&lt;&lt;endl&lt;&lt;int(b);//输入：12345[enter] 输出：12345 【换行】 10*/</span></span><br><span class="line">    <span class="comment">/*char c[10];</span></span><br><span class="line"><span class="comment">    char d;</span></span><br><span class="line"><span class="comment">    cin.getline(c,10);</span></span><br><span class="line"><span class="comment">    cin.get(d);</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;c&lt;&lt;endl&lt;&lt;int(d);//输入：12345[enter]a[enter] 输出：12345【换行】97*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//cin.getline(arrayname,size,s)与cin.gei(arrayname,size,s)的区别</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cin.getline(arrayname,size,s)当遇到s时会结束输入，并把s从缓冲区中删除</span></span><br><span class="line"><span class="comment">    cin.get（arrayname,size,s）当遇到s时会结束输入，但不会删除缓冲区中的s</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> e[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> f;</span><br><span class="line">    cin.<span class="built_in">get</span>(e, <span class="number">10</span>, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    cin.<span class="built_in">get</span>(f);</span><br><span class="line">    cout &lt;&lt; e &lt;&lt; endl &lt;&lt; f;<span class="comment">//输入：12345,[enter] 输出：12345【换行】，说明：cin,get不会删除缓冲区的，</span></span><br><span class="line">    <span class="type">char</span> e1[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> f1;</span><br><span class="line">    cin.<span class="built_in">getline</span>(e1, <span class="number">10</span>, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    cin.<span class="built_in">get</span>(f1);</span><br><span class="line">    cout &lt;&lt; e1 &lt;&lt; endl &lt;&lt; f1;<span class="comment">//输入：asd,wqe 输出：asd【换行】w</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="put-write"><a href="#put-write" class="headerlink" title="put write"></a>put write</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="comment">//put(char c)</span></span><br><span class="line"><span class="comment">//write(const char*c, int n)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">50</span>] = <span class="string">&quot;this is a string...&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;use get() input char:&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = cin.<span class="built_in">get</span>()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        cout.<span class="built_in">put</span>(c);</span><br><span class="line">        cout.<span class="built_in">put</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        cout.<span class="built_in">put</span>(<span class="string">&#x27;t&#x27;</span>).<span class="built_in">put</span>(<span class="string">&#x27;h&#x27;</span>).<span class="built_in">put</span>(<span class="string">&#x27;i&#x27;</span>).<span class="built_in">put</span>(<span class="string">&#x27;s&#x27;</span>).<span class="built_in">put</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        cout.<span class="built_in">write</span>(a, <span class="number">12</span>).<span class="built_in">put</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;look&quot;</span> &lt;&lt; <span class="string">&quot;\t here!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">use get() input char:good</span></span><br><span class="line"><span class="comment">g</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">this is a st</span></span><br><span class="line"><span class="comment">look     here!</span></span><br><span class="line"><span class="comment">o</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">this is a st</span></span><br><span class="line"><span class="comment">look     here!</span></span><br><span class="line"><span class="comment">o</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">this is a st</span></span><br><span class="line"><span class="comment">look     here!</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">this is a st</span></span><br><span class="line"><span class="comment">look     here!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p><strong>setf()的第一原型：</strong></p><p><img src="D:\Typora\图片\image-20220505194212664.png" alt="image-20220505194212664"></p><p><strong>setf()的第二原型：</strong><br>第二原型包含两个参数，第一个参数和第一原型里的参数一样，第二个参数指出要清除第一参数中的哪些位，也就是说，在第二原型中，第一个参数指出要设置哪些位，第二个参数指出要清除哪些位。</p><p><img src="D:\Typora\图片\image-20220505194144432.png" alt="image-20220505194144432"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">30</span>] = <span class="string">&quot;this is string&quot;</span>;</span><br><span class="line">    <span class="type">double</span> d = <span class="number">-1231.232</span>;</span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">    cout.<span class="built_in">fill</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::left);</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; <span class="string">&quot;----L1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">    cout.<span class="built_in">fill</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::right);</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; <span class="string">&quot;----L2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::dec | ios::showbase | ios::showpoint);</span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">    cout &lt;&lt; d &lt;&lt; <span class="string">&quot;----L3&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::showpoint);</span><br><span class="line">    cout.<span class="built_in">precision</span>(<span class="number">10</span>);<span class="comment">//有效数字？</span></span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">    cout &lt;&lt; d &lt;&lt; <span class="string">&quot;----L4&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::oct, ios::basefield);</span><br><span class="line">    cout &lt;&lt; <span class="number">100</span> &lt;&lt; <span class="string">&quot;----L5&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this is string****************----L1</span></span><br><span class="line"><span class="comment">----------------this is string----L2</span></span><br><span class="line"><span class="comment">-----------------------1231.23----L3</span></span><br><span class="line"><span class="comment">-------------------1231.232000----L4</span></span><br><span class="line"><span class="comment">--------------------------0144----L5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:\Typora\图片\image-20220505194539668.png" alt="image-20220505194539668"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Eg12-5.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">30</span>] = <span class="string">&quot;this is string&quot;</span>;</span><br><span class="line">    <span class="type">double</span> d = <span class="number">-1234.8976</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">30</span>) &lt;&lt; left &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;*&#x27;</span>) &lt;&lt; c &lt;&lt; <span class="string">&quot;----L1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">30</span>) &lt;&lt; right &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;*&#x27;</span>) &lt;&lt; c &lt;&lt; <span class="string">&quot;----L2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//showbase显示数值的基数前缀</span></span><br><span class="line">    cout &lt;&lt; dec &lt;&lt; showbase &lt;&lt; showpoint &lt;&lt; <span class="built_in">setw</span>(<span class="number">30</span>) &lt;&lt; d &lt;&lt; <span class="string">&quot;----L3&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">//showpoint显示小数点</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">30</span>) &lt;&lt; showpoint &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>) &lt;&lt; d &lt;&lt; <span class="string">&quot;----L4&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">//setbase(8)设置八进制</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">30</span>) &lt;&lt; <span class="built_in">setbase</span>(<span class="number">16</span>) &lt;&lt; <span class="number">100</span> &lt;&lt; <span class="string">&quot;----L5&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this is string****************----L1</span></span><br><span class="line"><span class="comment">****************this is string----L2</span></span><br><span class="line"><span class="comment">**********************-1234.90----L3</span></span><br><span class="line"><span class="comment">******************-1234.897600----L4</span></span><br><span class="line"><span class="comment">**************************0x64----L5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer(第15章 面向对象程序设计)</title>
      <link href="/post/c-primer-di-15-zhang/"/>
      <url>/post/c-primer-di-15-zhang/</url>
      
        <content type="html"><![CDATA[<h5 id="15-1"><a href="#15-1" class="headerlink" title="15.1"></a>15.1</h5><p><strong>什么是虚成员？</strong></p><p>对于某些函数，基类希望它的派生类各自定义适合自身的版本，此时基类就将这些函数声明成虚函数。</p><h5 id="15-2"><a href="#15-2" class="headerlink" title="15.2"></a>15.2</h5><p><strong>protected 访问说明符与 private 有何区别？</strong></p><ul><li>protected ： 基类和和其派生类还有友元可以访问。</li><li>private ： 只有基类本身和友元可以访问。</li></ul><h5 id="15-3"><a href="#15-3" class="headerlink" title="15.3"></a>15.3</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Quote</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Quote</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Quote</span>(<span class="type">const</span> std::string &amp;book,<span class="type">double</span> sales_price):<span class="built_in">bookNo</span>(book),<span class="built_in">price</span>(sales_price)&#123;&#125;</span><br><span class="line"><span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span> n)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n * price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Quote</span>() = <span class="keyword">default</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">debug</span><span class="params">()</span><span class="type">const</span></span>;<span class="comment">//15.11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string bookNo;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">double</span> price = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Quote.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">print_total</span><span class="params">(std::ostream&amp; os, <span class="type">const</span> Quote&amp; item, std::<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> ret = item.<span class="built_in">net_price</span>(n);</span><br><span class="line"></span><br><span class="line">    os &lt;&lt; <span class="string">&quot;ISBN: &quot;</span> &lt;&lt; item.<span class="built_in">isbn</span>()</span><br><span class="line">        &lt;&lt; <span class="string">&quot; # sold: &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; total due: &quot;</span> &lt;&lt; ret &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-5"><a href="#15-5" class="headerlink" title="15.5"></a>15.5</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bulk_quote</span> :<span class="keyword">public</span> Quote &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Bulk_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Bulk_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> sales_price,std::<span class="type">size_t</span> qty,<span class="type">double</span> disc)</span><br><span class="line">:<span class="built_in">Quote</span>(book,sales_price),<span class="built_in">min_qty</span>(qty),<span class="built_in">discount</span>(disc)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span><span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;<span class="comment">//15.11</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::<span class="type">size_t</span> min_qty = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> discount = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Bulk_quote::net_price</span><span class="params">(std::<span class="type">size_t</span> cnt)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt;= min_qty)    <span class="keyword">return</span> cnt * (<span class="number">1</span> - discount) * price;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> cnt * price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-6"><a href="#15-6" class="headerlink" title="15.6"></a>15.6</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Quote <span class="title">q</span><span class="params">(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Bulk_quote <span class="title">bq</span><span class="params">(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0.2</span>)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> t1 = <span class="built_in">print_total</span>(std::cout, q, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">auto</span> t2 = <span class="built_in">print_total</span>(std::cout, bq, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ISBN: 123 # sold: 4 total due: 40</span></span><br><span class="line"><span class="comment">//ISBN: 123 # sold: 8 total due: 80</span></span><br></pre></td></tr></table></figure><h5 id="15-7"><a href="#15-7" class="headerlink" title="15.7"></a>15.7</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Limit_quote</span> :<span class="keyword">public</span> Quote &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Limit_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Limit_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> sales_price, std::<span class="type">size_t</span> max, <span class="type">double</span> disc)</span><br><span class="line">:<span class="built_in">Quote</span>(book,sales_price),<span class="built_in">max_qty</span>(max),<span class="built_in">discount</span>(disc) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span><span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;<span class="comment">//15.11</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::<span class="type">size_t</span> max_qty = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> discount = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Limit_quote::net_price</span><span class="params">(std::<span class="type">size_t</span> cnt)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt;= max_qty)    <span class="keyword">return</span> cnt * (<span class="number">1</span> - discount) * price;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> max_qty * (<span class="number">1</span> - discount) * price + (cnt - max_qty) * price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Limit_quote <span class="title">lq</span><span class="params">(<span class="string">&quot;159&quot;</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0.2</span>)</span></span>;</span><br><span class="line">    <span class="comment">//ISBN: 159 # sold: 4 total due: 32 </span></span><br><span class="line">    <span class="built_in">print_total</span>(std::cout, lq, <span class="number">4</span>); </span><br><span class="line">    <span class="comment">//ISBN: 159 # sold: 10 total due: 90</span></span><br><span class="line">    <span class="built_in">print_total</span>(std::cout, lq, <span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-11"><a href="#15-11" class="headerlink" title="15.11"></a>15.11</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Quote::debug</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ISBN: &quot;</span> &lt;&lt; bookNo &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bulk_quote::debug</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Bulk_quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;min_qty: &quot;</span> &lt;&lt; min_qty &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;discount: &quot;</span> &lt;&lt; discount &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Limit_quote::debug</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Bulk_quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;max_qty: &quot;</span> &lt;&lt; max_qty &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;discount: &quot;</span> &lt;&lt; discount &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-12"><a href="#15-12" class="headerlink" title="15.12"></a>15.12</h5><blockquote><p>有必要将一个成员函数同时声明成 override 和 final 吗？为什么？</p></blockquote><p>有必要。override 的含义是重写基类中相同名称的虚函数，final 是阻止它的派生类重写当前虚函数。</p><h5 id="15-15-15-16"><a href="#15-15-15-16" class="headerlink" title="15.15-15.16"></a>15.15-15.16</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Quote</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> !=(<span class="type">const</span> Quote&amp; lhs, <span class="type">const</span> Quote&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Quote</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;default constructing Quote\n&quot;</span>; &#125;</span><br><span class="line">    <span class="built_in">Quote</span>(<span class="type">const</span> std::string&amp; b, <span class="type">double</span> p) :</span><br><span class="line">        <span class="built_in">bookNo</span>(b), <span class="built_in">price</span>(p) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Quote : constructor taking 2 parameters\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy constructor</span></span><br><span class="line">    <span class="built_in">Quote</span>(<span class="type">const</span> Quote&amp; q) : <span class="built_in">bookNo</span>(q.bookNo), <span class="built_in">price</span>(q.price)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Quote: copy constructing\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// move constructor</span></span><br><span class="line">    <span class="built_in">Quote</span>(Quote&amp;&amp; q) <span class="keyword">noexcept</span> : <span class="built_in">bookNo</span>(std::<span class="built_in">move</span>(q.bookNo)), <span class="built_in">price</span>(std::<span class="built_in">move</span>(q.price))</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Quote: move constructing\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy =</span></span><br><span class="line">    Quote&amp; <span class="keyword">operator</span> =(<span class="type">const</span> Quote&amp; rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*<span class="keyword">this</span> != rhs)</span><br><span class="line">        &#123;</span><br><span class="line">            bookNo = rhs.bookNo;</span><br><span class="line">            price = rhs.price;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Quote: copy =() \n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// move =</span></span><br><span class="line">    Quote&amp; <span class="keyword">operator</span> =(Quote&amp;&amp; rhs)  <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*<span class="keyword">this</span> != rhs)</span><br><span class="line">        &#123;</span><br><span class="line">            bookNo = std::<span class="built_in">move</span>(rhs.bookNo);</span><br><span class="line">            price = std::<span class="built_in">move</span>(rhs.price);</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Quote: move =!!!!!!!!! \n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string     <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span>  <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span> n)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> n * price; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span>    <span class="title">debug</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Quote</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;destructing Quote\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string bookNo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span>  price = <span class="number">10.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">inline</span></span><br><span class="line"><span class="keyword">operator</span> !=(<span class="type">const</span> Quote&amp; lhs, <span class="type">const</span> Quote&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.bookNo != rhs.bookNo</span><br><span class="line">        &amp;&amp;</span><br><span class="line">        lhs.price != rhs.price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Disc_quote</span>:<span class="keyword">public</span> Quote &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Disc_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Disc_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> sales_price, std::<span class="type">size_t</span> qty, <span class="type">double</span> disc)</span><br><span class="line">:<span class="built_in">Quote</span>(book,sales_price),<span class="built_in">quantity</span>(qty),<span class="built_in">discount</span>(disc) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">std::<span class="type">size_t</span> quantity = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> discount = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bulk_quote</span> : <span class="keyword">public</span> Disc_quote</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Bulk_quote</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;default constructing Bulk_quote\n&quot;</span>; &#125;</span><br><span class="line">    <span class="comment">//Bulk_quote(const std::string&amp; b, double p, std::size_t q, double disc) :</span></span><br><span class="line">    <span class="comment">//    Disc_quote(b, p, q, disc) &#123;</span></span><br><span class="line">    <span class="comment">//    std::cout &lt;&lt; &quot;Bulk_quote : constructor taking 4 parameters\n&quot;;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> Disc_quote::Disc_quote;<span class="comment">//15.27</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy constructor</span></span><br><span class="line">    <span class="built_in">Bulk_quote</span>(<span class="type">const</span> Bulk_quote&amp; bq) : <span class="built_in">Disc_quote</span>(bq)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bulk_quote : copy constructor\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// move constructor</span></span><br><span class="line">    <span class="comment">//page 535, &quot; In a constructor, noexcept appears between the parameter list and the : that begins the constructor initializer list&quot;</span></span><br><span class="line">    <span class="built_in">Bulk_quote</span>(Bulk_quote&amp;&amp; bq) <span class="keyword">noexcept</span> : <span class="built_in">Disc_quote</span>(std::<span class="built_in">move</span>(bq))</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bulk_quote : move constructor\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy =()</span></span><br><span class="line">    Bulk_quote&amp; <span class="keyword">operator</span> =(<span class="type">const</span> Bulk_quote&amp; rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        Disc_quote::<span class="keyword">operator</span> =(rhs);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bulk_quote : copy =()\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// move =()</span></span><br><span class="line">    Bulk_quote&amp; <span class="keyword">operator</span> =(Bulk_quote&amp;&amp; rhs) <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        Disc_quote::<span class="keyword">operator</span> =(std::<span class="built_in">move</span>(rhs));</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bulk_quote : move =()\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span> n)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span>  <span class="title">debug</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Bulk_quote</span>() <span class="keyword">override</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;destructing Bulk_quote\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Limit_quote</span> :<span class="keyword">public</span> Disc_quote &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Limit_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Limit_quote</span>(<span class="type">const</span> std::string&amp; book, <span class="type">double</span> sales_price, std::<span class="type">size_t</span> qty, <span class="type">double</span> disc)</span><br><span class="line">:<span class="built_in">Disc_quote</span>(book, sales_price, qty, disc) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">net_price</span><span class="params">(std::<span class="type">size_t</span>)</span><span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Bulk_quote::net_price</span><span class="params">(std::<span class="type">size_t</span> cnt)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt;= quantity)    <span class="keyword">return</span> cnt * (<span class="number">1</span> - discount) * price;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> cnt * price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Limit_quote::net_price</span><span class="params">(std::<span class="type">size_t</span> cnt)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt;= quantity)    <span class="keyword">return</span> cnt * (<span class="number">1</span> - discount) * price;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> quantity * (<span class="number">1</span> - discount) * price + (cnt - quantity) * price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Quote::debug</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ISBN: &quot;</span> &lt;&lt; bookNo &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bulk_quote::debug</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Bulk_quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;min_qty: &quot;</span> &lt;&lt; quantity &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;discount: &quot;</span> &lt;&lt; discount &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Limit_quote::debug</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;This is Bulk_quote Class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;max_qty: &quot;</span> &lt;&lt; quantity &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;discount: &quot;</span> &lt;&lt; discount &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Price: &quot;</span> &lt;&lt; price &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-17"><a href="#15-17" class="headerlink" title="15.17"></a>15.17</h5><p><img src="https://lmh-hexo-blog-img.oss-cn-hangzhou.aliyuncs.com/img/202206071358199.png" alt="image-20220327173806133"></p><h5 id="15-23"><a href="#15-23" class="headerlink" title="15.23"></a>15.23</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pub_mem</span><span class="params">()</span></span>;   <span class="comment">// public member</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> prot_mem;     <span class="comment">// protected member</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> priv_mem;    <span class="comment">// private member</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pub_Derv</span> : <span class="keyword">public</span>    Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">memfcn</span><span class="params">(Base&amp; b)</span> </span>&#123; b = *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Priv_Derv</span> : <span class="keyword">private</span>   Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">memfcn</span><span class="params">(Base&amp; b)</span> </span>&#123; b = *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Prot_Derv</span> : <span class="keyword">protected</span> Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">memfcn</span><span class="params">(Base&amp; b)</span> </span>&#123; b = *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived_from_Public</span> : <span class="keyword">public</span> Pub_Derv</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">memfcn</span><span class="params">(Base&amp; b)</span> </span>&#123; b = *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived_from_Private</span> : <span class="keyword">public</span> Priv_Derv</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//void memfcn(Base &amp;b) &#123; b = *this; &#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived_from_Protected</span> : <span class="keyword">public</span> Prot_Derv</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">memfcn</span><span class="params">(Base&amp; b)</span> </span>&#123; b = *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Pub_Derv d1;</span><br><span class="line">    Base* p = &amp;d1;</span><br><span class="line"></span><br><span class="line">    Priv_Derv d2;</span><br><span class="line">    <span class="comment">//p = &amp;d2;</span></span><br><span class="line"></span><br><span class="line">    Prot_Derv d3;</span><br><span class="line">    <span class="comment">//p = &amp;d3;</span></span><br><span class="line"></span><br><span class="line">    Derived_from_Public dd1;</span><br><span class="line">    p = &amp;dd1;</span><br><span class="line"></span><br><span class="line">    Derived_from_Private dd2;</span><br><span class="line">    <span class="comment">//p =&amp; dd2;</span></span><br><span class="line"></span><br><span class="line">    Derived_from_Protected dd3;</span><br><span class="line">    <span class="comment">//p = &amp;dd3;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-28"><a href="#12-28" class="headerlink" title="12.28"></a>12.28</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    vector&lt;Quote&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="built_in">Bulk_quote</span>(<span class="string">&quot;!23&quot;</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0.2</span>));</span><br><span class="line">    cout &lt;&lt; vec.<span class="built_in">back</span>().<span class="built_in">net_price</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//100</span></span><br></pre></td></tr></table></figure><h5 id="15-29"><a href="#15-29" class="headerlink" title="15.29"></a>15.29</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;shared_ptr&lt;Quote&gt;&gt; basket;</span><br><span class="line"></span><br><span class="line">    basket.<span class="built_in">push_back</span>(<span class="built_in">make_shared</span>&lt;Quote&gt;(<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>));<span class="comment">//100</span></span><br><span class="line">    basket.<span class="built_in">push_back</span>(<span class="built_in">make_shared</span>&lt;Bulk_quote&gt;(<span class="string">&quot;world&quot;</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">0.2</span>));<span class="comment">//160</span></span><br><span class="line">    basket.<span class="built_in">push_back</span>(<span class="built_in">make_shared</span>&lt;Limit_quote&gt;(<span class="string">&quot;good&quot;</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">0.2</span>));<span class="comment">//135</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> all = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="type">const</span>&amp; i : basket) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;<span class="built_in">net_price</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">        all += i-&gt;<span class="built_in">net_price</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; all &lt;&lt; endl;<span class="comment">//395</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-30"><a href="#15-30" class="headerlink" title="15.30"></a>15.30</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//***********h***********</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Basket</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//clone是一个虚函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_item</span><span class="params">(<span class="type">const</span> Quote&amp; sale)</span> </span>&#123;</span><br><span class="line">        items.<span class="built_in">insert</span>(<span class="built_in">shared_ptr</span>&lt;Quote&gt;(sale.<span class="built_in">clone</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_item</span><span class="params">(Quote&amp;&amp; sale)</span> </span>&#123;</span><br><span class="line">        items.<span class="built_in">insert</span>(<span class="built_in">shared_ptr</span>&lt;Quote&gt;(<span class="built_in">move</span>(sale).<span class="built_in">clone</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">total_receipt</span><span class="params">(ostream&amp;)</span><span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> shared_ptr &lt;Quote&gt;&amp; lhs, <span class="type">const</span> shared_ptr &lt;Quote&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lhs-&gt;<span class="built_in">isbn</span>() &lt; rhs-&gt;<span class="built_in">isbn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    multiset&lt;shared_ptr&lt;Quote&gt;, <span class="keyword">decltype</span>(compare)*&gt; items&#123; compare &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//***********cpp***********</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Basket::total_receipt</span><span class="params">(ostream&amp; os)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = items.<span class="built_in">cbegin</span>(); iter != items.<span class="built_in">cend</span>(); iter = items.<span class="built_in">upper_bound</span>(*iter)) &#123;</span><br><span class="line">sum += <span class="built_in">print_total</span>(os, **iter, items.<span class="built_in">count</span>(*iter));</span><br><span class="line">&#125;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;Total Sale: &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//***********main***********</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Basket basket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">        basket.<span class="built_in">add_item</span>(<span class="built_in">Bulk_quote</span>(<span class="string">&quot;Bible&quot;</span>, <span class="number">20.6</span>, <span class="number">20</span>, <span class="number">0.3</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">        basket.<span class="built_in">add_item</span>(<span class="built_in">Bulk_quote</span>(<span class="string">&quot;C++Primer&quot;</span>, <span class="number">30.9</span>, <span class="number">5</span>, <span class="number">0.4</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">        basket.<span class="built_in">add_item</span>(<span class="built_in">Quote</span>(<span class="string">&quot;CLRS&quot;</span>, <span class="number">40.1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function">ofstream <span class="title">log</span><span class="params">(<span class="string">&quot;log.txt&quot;</span>, std::ios_base::app | std::ios_base::out)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; basket.<span class="built_in">total_receipt</span>(log) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-32"><a href="#15-32" class="headerlink" title="15.32"></a>15.32</h5><blockquote><p>当一个 Query 类型的对象被拷贝、移动、赋值或销毁时，将分别发生什么？</p></blockquote><ul><li><strong>拷贝：</strong>当被拷贝时，合成的拷贝构造函数被调用。它将拷贝两个数据成员至新的对象。而在这种情况下，数据成员是一个智能指针，当拷贝时，相应的智能指针指向相同的地址，计数器增加1.</li><li><strong>移动：</strong>当移动时，合成的移动构造函数被调用。它将移动数据成员至新的对象。这时新对象的智能指针将会指向原对象的地址，而原对象的智能指针为 nullptr，新对象的智能指针的引用计数为 1.</li><li><strong>赋值：</strong>合成的赋值运算符被调用，结果和拷贝的相同的。</li><li><strong>销毁：</strong>合成的析构函数被调用。对象的智能指针的引用计数递减，当引用计数为 0 时，对象被销毁。</li></ul><h5 id="15-36"><a href="#15-36" class="headerlink" title="15.36"></a>15.36</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Query q = <span class="built_in">Query</span>(<span class="string">&quot;fiery&quot;</span>) &amp; <span class="built_in">Query</span>(<span class="string">&quot;bird&quot;</span>) | <span class="built_in">Query</span>(<span class="string">&quot;wind&quot;</span>);</span><br><span class="line"></span><br><span class="line">WordQuery::<span class="built_in">WordQuery</span>(wind)</span><br><span class="line">Query::<span class="built_in">Query</span>(<span class="type">const</span> std::string&amp; s) where s=wind</span><br><span class="line">WordQuery::<span class="built_in">WordQuery</span>(bird)</span><br><span class="line">Query::<span class="built_in">Query</span>(<span class="type">const</span> std::string&amp; s) where s=bird</span><br><span class="line">WordQuery::<span class="built_in">WordQuery</span>(fiery)</span><br><span class="line">Query::<span class="built_in">Query</span>(<span class="type">const</span> std::string&amp; s) where s=fiery</span><br><span class="line">BinaryQuery::<span class="built_in">BinaryQuery</span>()  where s=&amp;</span><br><span class="line">AndQuery::<span class="built_in">AndQuery</span>()</span><br><span class="line">Query::<span class="built_in">Query</span>(std::shared_ptr&lt;Query_base&gt; query)</span><br><span class="line">BinaryQuery::<span class="built_in">BinaryQuery</span>()  where s=|</span><br><span class="line">OrQuery::OrQuery</span><br><span class="line">Query::<span class="built_in">Query</span>(std::shared_ptr&lt;Query_base&gt; query)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; q &lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">Query::<span class="built_in">rep</span>()</span><br><span class="line">BinaryQuery::<span class="built_in">rep</span>()</span><br><span class="line">Query::<span class="built_in">rep</span>()</span><br><span class="line">WodQuery::<span class="built_in">rep</span>()</span><br><span class="line">Query::<span class="built_in">rep</span>()</span><br><span class="line">BinaryQuery::<span class="built_in">rep</span>()</span><br><span class="line">Query::<span class="built_in">rep</span>()</span><br><span class="line">WodQuery::<span class="built_in">rep</span>()</span><br><span class="line">Query::<span class="built_in">rep</span>()</span><br><span class="line">WodQuery::<span class="built_in">rep</span>()</span><br><span class="line">((fiery &amp; bird) | wind)</span><br></pre></td></tr></table></figure><h5 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">friend</span> QueryResult;</span><br><span class="line"><span class="keyword">using</span> line_no = vector&lt;string&gt;::size_type;</span><br><span class="line"><span class="built_in">TextQuery</span>(ifstream&amp;);</span><br><span class="line"><span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="type">const</span> string&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; file;</span><br><span class="line">map&lt;string, shared_ptr&lt;set&lt;line_no&gt;&gt;&gt;wm;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> ostream&amp; <span class="title">print</span><span class="params">(ostream&amp;, <span class="type">const</span> QueryResult&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">QueryResult</span>(string s, shared_ptr&lt;set&lt;TextQuery::line_no&gt;&gt;p, shared_ptr&lt;vector&lt;string&gt;&gt; f) :<span class="built_in">sought</span>(s), <span class="built_in">lines</span>(p), <span class="built_in">file</span>(f) &#123;&#125;</span><br><span class="line"><span class="keyword">using</span> line_no = TextQuery::line_no;</span><br><span class="line"><span class="keyword">using</span> Iter = std::set&lt;line_no&gt;::iterator;</span><br><span class="line"><span class="function">Iter <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> lines-&gt;<span class="built_in">begin</span>(); &#125;</span><br><span class="line"><span class="function">Iter <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> lines-&gt;<span class="built_in">end</span>(); &#125;</span><br><span class="line">shared_ptr&lt;std::vector&lt;std::string&gt;&gt; <span class="built_in">get_file</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> std::make_shared&lt;std::vector&lt;std::string&gt;&gt;(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string sought;</span><br><span class="line">shared_ptr&lt;set&lt;TextQuery::line_no&gt;&gt;lines;</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; file;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query_base</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">using</span> line_no = TextQuery::line_no;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Query_base</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//eval返回与当前Query匹配的QueryResult</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span><span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//rep 是表示查询的一个string</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">rep</span><span class="params">()</span><span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>~(<span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>|(<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>&amp;(<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Query</span>(<span class="type">const</span> string&amp;);</span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; t)</span> <span class="type">const</span></span>&#123; <span class="keyword">return</span> q-&gt;<span class="built_in">eval</span>(t); &#125;</span><br><span class="line"><span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span> </span>&#123; </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Query::rep() \n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> q-&gt;<span class="built_in">rep</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Query</span>(shared_ptr&lt;Query_base&gt;query):<span class="built_in">q</span>(query)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Query::Query(std::shared_ptr&lt;Query_base&gt; query)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&lt;Query_base&gt;q;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordQuery</span> :<span class="keyword">public</span> Query_base &#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="built_in">WordQuery</span>(<span class="type">const</span> string&amp; s) :<span class="built_in">query_word</span>(s)&#123;&#125;</span><br><span class="line"><span class="comment">//定义继承来的纯虚函数</span></span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; t)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> t.<span class="built_in">query</span>(query_word);&#125;</span><br><span class="line"><span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span> </span>&#123;<span class="keyword">return</span> query_word;&#125;</span><br><span class="line"></span><br><span class="line">string query_word;        <span class="comment">//要查找的单词</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NotQuery</span> :<span class="keyword">public</span> Query_base &#123;</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>~(<span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="built_in">NotQuery</span>(<span class="type">const</span> Query&amp;q):<span class="built_in">query</span>(q) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;~(&quot;</span> + query.<span class="built_in">rep</span>() + <span class="string">&quot;)&quot;</span>; &#125;</span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span><span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">Query query;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryQuery</span> :<span class="keyword">public</span> Query_base &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">BinaryQuery</span>(<span class="type">const</span> Query&amp;l,<span class="type">const</span> Query&amp;r,string s):<span class="built_in">lhs</span>(l),<span class="built_in">rhs</span>(r),<span class="built_in">opSym</span>(s)&#123;&#125;</span><br><span class="line"><span class="comment">// 不定义 eval</span></span><br><span class="line"><span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + lhs.<span class="built_in">rep</span>() + <span class="string">&quot; &quot;</span> + opSym + <span class="string">&quot; &quot;</span> + rhs.<span class="built_in">rep</span>() + <span class="string">&quot;)&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">Query lhs, rhs;  <span class="comment">//运算对象</span></span><br><span class="line">string opSym;     <span class="comment">//运算符的名字</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndQuery</span> :<span class="keyword">public</span> BinaryQuery &#123;</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>&amp;(<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="built_in">AndQuery</span>(<span class="type">const</span> Query&amp;left,<span class="type">const</span> Query&amp; right):<span class="built_in">BinaryQuery</span>(left,right,<span class="string">&quot;&amp;&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrQuery</span> :<span class="keyword">public</span> BinaryQuery &#123;</span><br><span class="line"><span class="keyword">friend</span> Query <span class="keyword">operator</span>|(<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="built_in">OrQuery</span>(<span class="type">const</span> Query&amp; left, <span class="type">const</span> Query&amp; right) :<span class="built_in">BinaryQuery</span>(left, right, <span class="string">&quot;|&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;TextQuery.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">TextQuery::<span class="built_in">TextQuery</span>(ifstream&amp; is) :<span class="built_in">file</span>(<span class="keyword">new</span> vector&lt;string&gt;) &#123;</span><br><span class="line">string text;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(is, text)) &#123;</span><br><span class="line">file-&gt;<span class="built_in">push_back</span>(text);</span><br><span class="line"><span class="type">int</span> n = file-&gt;<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"><span class="function">istringstream <span class="title">line</span><span class="params">(text)</span></span>;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (line &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; lines = wm[word];</span><br><span class="line"><span class="keyword">if</span> (!lines)</span><br><span class="line">lines.<span class="built_in">reset</span>(<span class="keyword">new</span> set&lt;line_no&gt;);</span><br><span class="line">lines-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">TextQuery::query</span><span class="params">(<span class="type">const</span> string&amp; sought)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="type">static</span> shared_ptr&lt;set&lt;line_no&gt;&gt; <span class="built_in">nodata</span>(<span class="keyword">new</span> set&lt;line_no &gt;);</span><br><span class="line"><span class="keyword">auto</span> loc = wm.<span class="built_in">find</span>(sought);</span><br><span class="line"><span class="keyword">if</span> (loc == wm.<span class="built_in">end</span>())</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, nodata, file);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, loc-&gt;second, file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream&amp; <span class="title">print</span><span class="params">(ostream&amp; os, <span class="type">const</span> QueryResult&amp; qr)</span> </span>&#123;</span><br><span class="line">os &lt;&lt; qr.sought &lt;&lt; <span class="string">&quot; occurs &quot;</span> &lt;&lt; qr.lines-&gt;<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> num : *qr.lines) &#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;\t(line &quot;</span> &lt;&lt; num + <span class="number">1</span> &lt;&lt; <span class="string">&quot;)&quot;</span></span><br><span class="line">&lt;&lt; *(qr.file-&gt;<span class="built_in">begin</span>() + num) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">runQueries</span><span class="params">(ifstream&amp; infile)</span> </span>&#123;</span><br><span class="line"><span class="function">TextQuery <span class="title">tq</span><span class="params">(infile)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;enter word to look for,or q to quit: &quot;</span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">if</span> (!(cin &gt;&gt; s) || s == <span class="string">&quot;q&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">print</span>(cout, tq.<span class="built_in">query</span>(s)) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">Query::Query</span><span class="params">(<span class="type">const</span> string&amp;s)</span>:q(new WordQuery(s)) &#123;</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Query::Query(const std::string&amp; s) where s=&quot;</span> + s + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Query <span class="keyword">operator</span>~(<span class="type">const</span> Query&amp; operand)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">NotQuery</span>(operand));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Query <span class="keyword">operator</span>&amp;(<span class="type">const</span> Query&amp;lhs, <span class="type">const</span> Query&amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">AndQuery</span>(lhs, rhs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Query <span class="keyword">operator</span>|(<span class="type">const</span> Query&amp;lhs, <span class="type">const</span> Query&amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">OrQuery</span>(lhs, rhs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> std::ostream&amp;</span><br><span class="line"><span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Query&amp; query)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// make a virtual call through its Query_base pointer to rep();</span></span><br><span class="line"><span class="keyword">return</span> os &lt;&lt; query.<span class="built_in">rep</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">OrQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; text)</span><span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> right = rhs.<span class="built_in">eval</span>(text), left = lhs.<span class="built_in">eval</span>(text);</span><br><span class="line"><span class="keyword">auto</span> ret_lines = make_shared&lt;set&lt;line_no&gt;&gt;(left.<span class="built_in">begin</span>(), left.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">ret_lines-&gt;<span class="built_in">insert</span>(right.<span class="built_in">begin</span>(), right.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, left.<span class="built_in">get_file</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">AndQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;text)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> right = rhs.<span class="built_in">eval</span>(text), left = lhs.<span class="built_in">eval</span>(text);</span><br><span class="line"><span class="keyword">auto</span> ret_lines = make_shared&lt;set&lt;line_no&gt;&gt;();</span><br><span class="line"><span class="built_in">set_intersection</span>(left.<span class="built_in">begin</span>(), left.<span class="built_in">end</span>(), right.<span class="built_in">begin</span>(), right.<span class="built_in">end</span>(), </span><br><span class="line"><span class="built_in">inserter</span>(*ret_lines, ret_lines-&gt;<span class="built_in">begin</span>()));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, left.<span class="built_in">get_file</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">NotQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; text)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> result = query.<span class="built_in">eval</span>(text);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> ret_lines= make_shared&lt;set&lt;line_no&gt;&gt;();</span><br><span class="line"><span class="keyword">auto</span> beg = result.<span class="built_in">begin</span>(), end = result.<span class="built_in">end</span>();</span><br><span class="line"><span class="keyword">auto</span> sz = result.<span class="built_in">get_file</span>()-&gt;<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> n = <span class="number">0</span>; n != sz; ++n) &#123;</span><br><span class="line"><span class="keyword">if</span> (beg == end || *beg != n) &#123;</span><br><span class="line">ret_lines-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (beg != end)</span><br><span class="line">++beg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, result.<span class="built_in">get_file</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer(第14章 重载运算与类型转换)</title>
      <link href="/post/c-primer-di-14-zhang/"/>
      <url>/post/c-primer-di-14-zhang/</url>
      
        <content type="html"><![CDATA[<h5 id="Sales-data"><a href="#Sales-data" class="headerlink" title="Sales_data"></a>Sales_data</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////****************h****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp;, Sales_data&amp;);</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;);</span><br><span class="line">    <span class="keyword">friend</span> Sales_data <span class="keyword">operator</span>+(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string&amp; s, <span class="type">unsigned</span> n, <span class="type">double</span> p) :<span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(n* p) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>() : <span class="built_in">Sales_data</span>(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0.0f</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string&amp; s) : <span class="built_in">Sales_data</span>(s, <span class="number">0</span>, <span class="number">0.0f</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream&amp; is);</span><br><span class="line"></span><br><span class="line">    Sales_data&amp; <span class="keyword">operator</span>=(<span class="type">const</span> std::string&amp;);</span><br><span class="line">    Sales_data&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> Sales_data&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">std::string</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">avg_price</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp;, Sales_data&amp;);</span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;);</span><br><span class="line">Sales_data <span class="keyword">operator</span>+(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Sales_data::avg_price</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> units_sold ? revenue / units_sold : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////****************cpp****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Sales_data.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Sales_data::<span class="built_in">Sales_data</span>(std::istream&amp; is) : <span class="built_in">Sales_data</span>()</span><br><span class="line">&#123;</span><br><span class="line">    is &gt;&gt; *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sales_data&amp; Sales_data::<span class="keyword">operator</span>+=(<span class="type">const</span> Sales_data&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    units_sold += rhs.units_sold;</span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp; is, Sales_data&amp; item)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> price = <span class="number">0.0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    <span class="keyword">if</span> (is)</span><br><span class="line">        item.revenue = price * item.units_sold;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        item = <span class="built_in">Sales_data</span>();</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Sales_data&amp; item)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; item.<span class="built_in">isbn</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.<span class="built_in">avg_price</span>();</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sales_data <span class="keyword">operator</span>+(<span class="type">const</span> Sales_data&amp; lhs, <span class="type">const</span> Sales_data&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum += rhs;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sales_data&amp; Sales_data::<span class="keyword">operator</span>=(<span class="type">const</span> std::string&amp; isbn)</span><br><span class="line">&#123;</span><br><span class="line">    *<span class="keyword">this</span> = <span class="built_in">Sales_data</span>(isbn);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//****************h****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT noexcept</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//===================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//|s|t|r|i|n|g|\0|-------------------|</span></span><br><span class="line"><span class="comment">// ^ ^  ^ first_free       ^</span></span><br><span class="line"><span class="comment">//elements last_elem   cap</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp;, String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>() : <span class="built_in">String</span>(<span class="string">&quot;&quot;</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>*);</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp;);</span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp;);</span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp;) NOEXCEPT;</span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp;)NOEXCEPT;</span><br><span class="line">    ~<span class="built_in">String</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> elements; &#125;</span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> last_elem; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> elements; &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> last_elem - elements; &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> cap - elements; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reserve</span><span class="params">(<span class="type">size_t</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span>, <span class="type">char</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> n) &#123; <span class="keyword">return</span> elements[n]; &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> n) <span class="type">const</span> &#123; <span class="keyword">return</span> elements[n]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">std::pair&lt;<span class="type">char</span>*, <span class="type">char</span>*&gt; <span class="title">alloc_n_copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*, <span class="type">const</span> <span class="type">char</span>*)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">range_initializer</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*, <span class="type">const</span> <span class="type">char</span>*)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reallocate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">chk_n_alloc</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span> (first_free == cap) <span class="built_in">reallocate</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* elements;</span><br><span class="line">    <span class="type">char</span>* last_elem;</span><br><span class="line">    <span class="type">char</span>* first_free;</span><br><span class="line">    <span class="type">char</span>* cap;</span><br><span class="line">    std::allocator&lt;<span class="type">char</span>&gt; alloc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp;, String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> String&amp;, <span class="type">const</span> String&amp;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//****************cpp****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//operator - friend</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> String&amp; lhs)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; lhs.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp; is, String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c; (c = is.<span class="built_in">get</span>()) != <span class="string">&#x27;\n&#x27;</span>;) &#123;</span><br><span class="line">        rhs.<span class="built_in">push_back</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> (lhs.<span class="built_in">size</span>() == rhs.<span class="built_in">size</span>() &amp;&amp; std::<span class="built_in">equal</span>(lhs.<span class="built_in">begin</span>(), lhs.<span class="built_in">end</span>(), rhs.<span class="built_in">begin</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt;(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">lexicographical_compare</span>(lhs.<span class="built_in">begin</span>(), lhs.<span class="built_in">end</span>(), rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> rhs &lt; lhs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(rhs &lt; lhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs &lt; rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Constructors</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* sl = <span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(s);</span><br><span class="line">    <span class="keyword">while</span> (*sl)</span><br><span class="line">        ++sl;</span><br><span class="line">    <span class="built_in">range_initializer</span>(s, ++sl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Big 5</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">range_initializer</span>(rhs.elements, rhs.first_free);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String&amp; String::<span class="keyword">operator</span> = (<span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> newstr = <span class="built_in">alloc_n_copy</span>(rhs.elements, rhs.first_free);</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">    elements = newstr.first;</span><br><span class="line">    first_free = cap = newstr.second;</span><br><span class="line">    last_elem = first_free - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(String&amp;&amp; s) NOEXCEPT : <span class="built_in">elements</span>(s.elements), <span class="built_in">last_elem</span>(s.last_elem), <span class="built_in">first_free</span>(s.first_free), <span class="built_in">cap</span>(s.cap)</span><br><span class="line">&#123;</span><br><span class="line">    s.elements = s.last_elem = s.first_free = s.cap = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String&amp; String::<span class="keyword">operator</span> = (String&amp;&amp; rhs) NOEXCEPT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;rhs) &#123;</span><br><span class="line">        <span class="built_in">free</span>();</span><br><span class="line">        elements = rhs.elements;</span><br><span class="line">        last_elem = rhs.last_elem;</span><br><span class="line">        first_free = rhs.first_free;</span><br><span class="line">        cap = rhs.cap;</span><br><span class="line">        rhs.elements = rhs.last_elem = rhs.first_free = rhs.cap = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::~<span class="built_in">String</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//members</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::push_back</span><span class="params">(<span class="type">const</span> <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">chk_n_alloc</span>();</span><br><span class="line">    *last_elem = c;</span><br><span class="line">    last_elem = first_free;</span><br><span class="line">    alloc.<span class="built_in">construct</span>(first_free++, <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::reallocate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//\0    |    -</span></span><br><span class="line">    <span class="comment">//  ^          ^</span></span><br><span class="line">    <span class="comment">// elements    first_free</span></span><br><span class="line">    <span class="comment">// last_elem   cap</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> newcapacity = <span class="built_in">size</span>() ? <span class="number">2</span> * (<span class="built_in">size</span>() + <span class="number">1</span>) : <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">alloc_n_move</span>(newcapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> newdata = alloc.<span class="built_in">allocate</span>(new_cap);</span><br><span class="line">    <span class="keyword">auto</span> dest = newdata;</span><br><span class="line">    <span class="keyword">auto</span> elem = elements;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="built_in">size</span>() + <span class="number">1</span>; ++i)</span><br><span class="line">        alloc.<span class="built_in">construct</span>(dest++, std::<span class="built_in">move</span>(*elem++));</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">    elements = newdata;</span><br><span class="line">    last_elem = dest - <span class="number">1</span>;</span><br><span class="line">    first_free = dest;</span><br><span class="line">    cap = elements + new_cap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::free</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elements) &#123;</span><br><span class="line">        std::for_each(elements, first_free, [<span class="keyword">this</span>](<span class="type">char</span>&amp; c) &#123; alloc.<span class="built_in">destroy</span>(&amp;c); &#125;);</span><br><span class="line">        alloc.<span class="built_in">deallocate</span>(elements, cap - elements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;<span class="type">char</span>*, <span class="type">char</span>*&gt;</span></span><br><span class="line"><span class="function"><span class="title">String::alloc_n_copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* b, <span class="type">const</span> <span class="type">char</span>* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> str = alloc.<span class="built_in">allocate</span>(e - b);</span><br><span class="line">    <span class="keyword">return</span>&#123; str, std::<span class="built_in">uninitialized_copy</span>(b, e, str) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::range_initializer</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* first, <span class="type">const</span> <span class="type">char</span>* last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> newstr = <span class="built_in">alloc_n_copy</span>(first, last);</span><br><span class="line">    elements = newstr.first;</span><br><span class="line">    first_free = cap = newstr.second;</span><br><span class="line">    last_elem = first_free - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (new_cap &lt;= <span class="built_in">capacity</span>()) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">alloc_n_move</span>(new_cap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::resize</span><span class="params">(<span class="type">size_t</span> count, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="built_in">capacity</span>()) <span class="built_in">reserve</span>(count * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="built_in">size</span>(); i != count; ++i) &#123;</span><br><span class="line">            *last_elem++ = c;</span><br><span class="line">            alloc.<span class="built_in">construct</span>(first_free++, <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (count &lt; <span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (last_elem != elements + count) &#123;</span><br><span class="line">            --last_elem;</span><br><span class="line">            alloc.<span class="built_in">destroy</span>(--first_free);</span><br><span class="line">        &#125;</span><br><span class="line">        *last_elem = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::resize</span><span class="params">(<span class="type">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">resize</span>(count, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="StrBlob-StrBlodPtr"><a href="#StrBlob-StrBlodPtr" class="headerlink" title="StrBlob  StrBlodPtr"></a>StrBlob  StrBlodPtr</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//****************h****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::initializer_list;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::make_shared; <span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT noexcept</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrBlobPtr</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConstStrBlobPtr</span>;</span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//StrBlob - custom vector&lt;string&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrBlob</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> size_type = vector&lt;string&gt;::size_type;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">ConstStrBlobPtr</span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">StrBlobPtr</span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StrBlob</span>() : <span class="built_in">data</span>(make_shared&lt;vector&lt;string&gt;&gt;()) &#123; &#125;</span><br><span class="line">    <span class="built_in">StrBlob</span>(initializer_list&lt;string&gt; il) : <span class="built_in">data</span>(make_shared&lt;vector&lt;string&gt;&gt;(il)) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StrBlob</span>(<span class="type">const</span> StrBlob&amp; sb) : <span class="built_in">data</span>(make_shared&lt;vector&lt;string&gt;&gt;(*sb.data)) &#123; &#125;</span><br><span class="line">    StrBlob&amp; <span class="keyword">operator</span>=(<span class="type">const</span> StrBlob&amp;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StrBlob</span>(StrBlob&amp;&amp; rhs) NOEXCEPT : <span class="built_in">data</span>(std::<span class="built_in">move</span>(rhs.data)) &#123; &#125;</span><br><span class="line">    StrBlob&amp; <span class="keyword">operator</span>=(StrBlob&amp;&amp;)NOEXCEPT;</span><br><span class="line"></span><br><span class="line">    <span class="function">StrBlobPtr <span class="title">begin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">StrBlobPtr <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ConstStrBlobPtr <span class="title">cbegin</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">ConstStrBlobPtr <span class="title">cend</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    string&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> n);</span><br><span class="line">    <span class="type">const</span> string&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;<span class="built_in">size</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;<span class="built_in">empty</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> string&amp; t)</span> </span>&#123; data-&gt;<span class="built_in">push_back</span>(t); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(string&amp;&amp; s)</span> </span>&#123; data-&gt;<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(s)); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">string&amp; <span class="title">front</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">string&amp; <span class="title">back</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> string&amp; <span class="title">front</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> string&amp; <span class="title">back</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(size_type, <span class="type">const</span> string&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    shared_ptr&lt;vector&lt;string&gt;&gt; data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlob&amp;, <span class="type">const</span> StrBlob&amp;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">StrBlob::pop_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;pop_back on empty StrBlob&quot;</span>);</span><br><span class="line">    data-&gt;<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> string&amp; <span class="title">StrBlob::front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;front on empty StrBlob&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> string&amp; <span class="title">StrBlob::back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;back on empty StrBlob&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> string&amp; <span class="title">StrBlob::front</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;front on empty StrBlob&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> string&amp; <span class="title">StrBlob::back</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;back on empty StrBlob&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">StrBlob::check</span><span class="params">(size_type i, <span class="type">const</span> string&amp; msg)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= data-&gt;<span class="built_in">size</span>()) <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> string&amp; StrBlob::<span class="keyword">operator</span>[](<span class="type">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">check</span>(n, <span class="string">&quot;out of range&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">at</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> string&amp; StrBlob::<span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">check</span>(n, <span class="string">&quot;out of range&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> data-&gt;<span class="built_in">at</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//StrBlobPtr - custom iterator of StrBlob</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrBlobPtr</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StrBlobPtr</span>() : <span class="built_in">curr</span>(<span class="number">0</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">StrBlobPtr</span>(StrBlob&amp; s, <span class="type">size_t</span> sz = <span class="number">0</span>) : <span class="built_in">wptr</span>(s.data), <span class="built_in">curr</span>(sz) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string&amp; <span class="title">deref</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">StrBlobPtr&amp; <span class="title">incr</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    string&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> n);</span><br><span class="line">    <span class="type">const</span> string&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    shared_ptr&lt;vector&lt;string&gt;&gt; <span class="built_in">check</span>(<span class="type">size_t</span>, <span class="type">const</span> string&amp;) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    std::weak_ptr&lt;vector&lt;string&gt;&gt; wptr;</span><br><span class="line">    <span class="type">size_t</span> curr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlobPtr&amp;, <span class="type">const</span> StrBlobPtr&amp;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> string&amp; <span class="title">StrBlobPtr::deref</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">check</span>(curr, <span class="string">&quot;dereference past end&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (*p)[curr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> StrBlobPtr&amp; <span class="title">StrBlobPtr::incr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(curr, <span class="string">&quot;increment past end of StrBlobPtr&quot;</span>);</span><br><span class="line">    ++curr;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> shared_ptr&lt;vector&lt;string&gt;&gt; StrBlobPtr::<span class="built_in">check</span>(<span class="type">size_t</span> i, <span class="type">const</span> string&amp; msg) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> ret = wptr.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (!ret) <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;unbound StrBlobPtr&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= ret-&gt;<span class="built_in">size</span>()) <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(msg);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> string&amp; StrBlobPtr::<span class="keyword">operator</span>[](<span class="type">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">check</span>(n, <span class="string">&quot;dereference out of range.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (*p)[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> string&amp; StrBlobPtr::<span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">check</span>(n, <span class="string">&quot;dereference out of range.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (*p)[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//ConstStrBlobPtr - custom const_iterator of StrBlob</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//=================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConstStrBlobPtr</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConstStrBlobPtr</span>() : <span class="built_in">curr</span>(<span class="number">0</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">ConstStrBlobPtr</span>(<span class="type">const</span> StrBlob&amp; s, <span class="type">size_t</span> sz = <span class="number">0</span>) : <span class="built_in">wptr</span>(s.data), <span class="built_in">curr</span>(sz) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> string&amp; <span class="title">deref</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">ConstStrBlobPtr&amp; <span class="title">incr</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> string&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;vector&lt;string&gt;&gt; <span class="built_in">check</span>(<span class="type">size_t</span>, <span class="type">const</span> string&amp;) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    std::weak_ptr&lt;vector&lt;string&gt;&gt; wptr;</span><br><span class="line">    <span class="type">size_t</span> curr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> ConstStrBlobPtr&amp;, <span class="type">const</span> ConstStrBlobPtr&amp;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> string&amp; <span class="title">ConstStrBlobPtr::deref</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">check</span>(curr, <span class="string">&quot;dereference past end&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (*p)[curr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ConstStrBlobPtr&amp; <span class="title">ConstStrBlobPtr::incr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">check</span>(curr, <span class="string">&quot;increment past end of StrBlobPtr&quot;</span>);</span><br><span class="line">    ++curr;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> std::shared_ptr&lt;vector&lt;string&gt;&gt; ConstStrBlobPtr::<span class="built_in">check</span>(<span class="type">size_t</span> i, <span class="type">const</span> string&amp; msg) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> ret = wptr.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (!ret) <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;unbound StrBlobPtr&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= ret-&gt;<span class="built_in">size</span>()) <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(msg);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> string&amp; ConstStrBlobPtr::<span class="keyword">operator</span>[](<span class="type">size_t</span> n) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">check</span>(n, <span class="string">&quot;dereference out of range.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (*p)[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//****************cpp****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;StrBlob StrBlodPtr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//StrBlob - operators</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *lhs.data == *rhs.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">lexicographical_compare</span>(lhs.data-&gt;<span class="built_in">begin</span>(), lhs.data-&gt;<span class="built_in">end</span>(), rhs.data-&gt;<span class="built_in">begin</span>(), rhs.data-&gt;<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> rhs &lt; lhs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(rhs &lt; lhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlob&amp; lhs, <span class="type">const</span> StrBlob&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs &lt; rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//StrBlobPtr - operators</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrBlobPtr&amp; lhs, <span class="type">const</span> StrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr == rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrBlobPtr&amp; lhs, <span class="type">const</span> StrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> StrBlobPtr&amp; x, <span class="type">const</span> StrBlobPtr&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.curr &lt; y.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> StrBlobPtr&amp; x, <span class="type">const</span> StrBlobPtr&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.curr &gt; y.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrBlobPtr&amp; x, <span class="type">const</span> StrBlobPtr&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.curr &lt;= y.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrBlobPtr&amp; x, <span class="type">const</span> StrBlobPtr&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.curr &gt;= y.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//ConstStrBlobPtr - operators</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr == rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr &lt; rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr &gt; rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr &lt;= rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> ConstStrBlobPtr&amp; lhs, <span class="type">const</span> ConstStrBlobPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.curr &gt;= rhs.curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//copy assignment operator and move assignment operator.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"></span><br><span class="line">StrBlob&amp; StrBlob::<span class="keyword">operator</span>=(<span class="type">const</span> StrBlob&amp; lhs)</span><br><span class="line">&#123;</span><br><span class="line">    data = make_shared&lt;vector&lt;string&gt;&gt;(*lhs.data);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrBlob&amp; StrBlob::<span class="keyword">operator</span>=(StrBlob&amp;&amp; rhs) NOEXCEPT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;rhs) &#123;</span><br><span class="line">        data = std::<span class="built_in">move</span>(rhs.data);</span><br><span class="line">        rhs.data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//members</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function">StrBlobPtr <span class="title">StrBlob::begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">StrBlobPtr</span>(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">StrBlobPtr <span class="title">StrBlob::end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">StrBlobPtr</span>(*<span class="keyword">this</span>, data-&gt;<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ConstStrBlobPtr <span class="title">StrBlob::cbegin</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ConstStrBlobPtr</span>(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ConstStrBlobPtr <span class="title">StrBlob::cend</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ConstStrBlobPtr</span>(*<span class="keyword">this</span>, data-&gt;<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="StrVec"><a href="#StrVec" class="headerlink" title="StrVec"></a>StrVec</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//****************h****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT noexcept</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOEXCEPT</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrVec</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StrVec</span>() : <span class="built_in">elements</span>(<span class="literal">nullptr</span>), <span class="built_in">first_free</span>(<span class="literal">nullptr</span>), <span class="built_in">cap</span>(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">StrVec</span>(std::initializer_list&lt;std::string&gt;);</span><br><span class="line">    <span class="built_in">StrVec</span>(<span class="type">const</span> StrVec&amp;);</span><br><span class="line">    StrVec&amp; <span class="keyword">operator</span>=(<span class="type">const</span> StrVec&amp;);</span><br><span class="line">    <span class="built_in">StrVec</span>(StrVec&amp;&amp;) NOEXCEPT;</span><br><span class="line">    StrVec&amp; <span class="keyword">operator</span>=(StrVec&amp;&amp;)NOEXCEPT;</span><br><span class="line">    ~<span class="built_in">StrVec</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> std::string&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> first_free - elements; &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> cap - elements; &#125;</span><br><span class="line">    <span class="function">std::string* <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> elements; &#125;</span><br><span class="line">    <span class="function">std::string* <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> first_free; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string&amp; <span class="title">at</span><span class="params">(<span class="type">size_t</span> pos)</span> </span>&#123; <span class="keyword">return</span> *(elements + pos); &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> std::string&amp; <span class="title">at</span><span class="params">(<span class="type">size_t</span> pos)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> *(elements + pos); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span> count)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span> count, <span class="type">const</span> std::string&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">    StrVec&amp; <span class="keyword">operator</span>=(std::initializer_list&lt;std::string&gt;);</span><br><span class="line">    std::string&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> n) &#123; <span class="keyword">return</span> elements[n]; &#125;</span><br><span class="line">    <span class="type">const</span> std::string&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> n) <span class="type">const</span> &#123; <span class="keyword">return</span> elements[n]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">std::pair&lt;std::string*, std::string*&gt; <span class="title">alloc_n_copy</span><span class="params">(<span class="type">const</span> std::string*, <span class="type">const</span> std::string*)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">chk_n_alloc</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span> (<span class="built_in">size</span>() == <span class="built_in">capacity</span>()) <span class="built_in">reallocate</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reallocate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">range_initialize</span><span class="params">(<span class="type">const</span> std::string*, <span class="type">const</span> std::string*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string* elements;</span><br><span class="line">    std::string* first_free;</span><br><span class="line">    std::string* cap;</span><br><span class="line">    std::allocator&lt;std::string&gt; alloc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrVec&amp;, <span class="type">const</span> StrVec&amp;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//****************cpp****************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;StrVec.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::push_back</span><span class="params">(<span class="type">const</span> std::string&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">chk_n_alloc</span>();</span><br><span class="line">    alloc.<span class="built_in">construct</span>(first_free++, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;std::string*, std::string*&gt;</span></span><br><span class="line"><span class="function"><span class="title">StrVec::alloc_n_copy</span><span class="params">(<span class="type">const</span> std::string* b, <span class="type">const</span> std::string* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> data = alloc.<span class="built_in">allocate</span>(e - b);</span><br><span class="line">    <span class="keyword">return</span>&#123; data, std::<span class="built_in">uninitialized_copy</span>(b, e, data) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::free</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elements) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = first_free; p != elements;)</span><br><span class="line">            alloc.<span class="built_in">destroy</span>(--p);</span><br><span class="line">        alloc.<span class="built_in">deallocate</span>(elements, cap - elements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec::<span class="built_in">StrVec</span>(<span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> newdata = <span class="built_in">alloc_n_copy</span>(rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line">    elements = newdata.first;</span><br><span class="line">    first_free = cap = newdata.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec::~<span class="built_in">StrVec</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec&amp; StrVec::<span class="keyword">operator</span> = (<span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> data = <span class="built_in">alloc_n_copy</span>(rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">    elements = data.first;</span><br><span class="line">    first_free = cap = data.second;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> newdata = alloc.<span class="built_in">allocate</span>(new_cap);</span><br><span class="line">    <span class="keyword">auto</span> dest = newdata;</span><br><span class="line">    <span class="keyword">auto</span> elem = elements;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="built_in">size</span>(); ++i)</span><br><span class="line">        alloc.<span class="built_in">construct</span>(dest++, std::<span class="built_in">move</span>(*elem++));</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">    elements = newdata;</span><br><span class="line">    first_free = dest;</span><br><span class="line">    cap = elements + new_cap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::reallocate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> newcapacity = <span class="built_in">size</span>() ? <span class="number">2</span> * <span class="built_in">size</span>() : <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">alloc_n_move</span>(newcapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (new_cap &lt;= <span class="built_in">capacity</span>()) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">alloc_n_move</span>(new_cap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::resize</span><span class="params">(<span class="type">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">resize</span>(count, std::<span class="built_in">string</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::resize</span><span class="params">(<span class="type">size_t</span> count, <span class="type">const</span> std::string&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="built_in">capacity</span>()) <span class="built_in">reserve</span>(count * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="built_in">size</span>(); i != count; ++i)</span><br><span class="line">            alloc.<span class="built_in">construct</span>(first_free++, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (count &lt; <span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (first_free != elements + count)</span><br><span class="line">            alloc.<span class="built_in">destroy</span>(--first_free);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec&amp; StrVec::<span class="keyword">operator</span>=(std::initializer_list&lt;std::string&gt;il)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> data = <span class="built_in">alloc_n_copy</span>(il.<span class="built_in">begin</span>(), il.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">    elements = data.first;</span><br><span class="line">    first_free = cap = data.second;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> StrVec&amp;lhs, <span class="type">const</span> StrVec&amp;rhs) &#123;</span><br><span class="line">    <span class="built_in">return</span> (lhs.<span class="built_in">size</span>() == rhs.<span class="built_in">size</span>()) &amp;&amp; (std::<span class="built_in">equal</span>(lhs.<span class="built_in">begin</span>(), lhs.<span class="built_in">end</span>(), rhs.<span class="built_in">begin</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> StrVec&amp; lhs, <span class="type">const</span> StrVec&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt;(<span class="type">const</span> StrVec&amp; lhs, <span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">lexicographical_compare</span>(lhs.<span class="built_in">begin</span>(), lhs.<span class="built_in">end</span>(), rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> StrVec&amp; lhs, <span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> rhs &lt; lhs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> StrVec&amp; lhs, <span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(rhs &lt; lhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> StrVec&amp; lhs, <span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs &lt; rhs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-34"><a href="#14-34" class="headerlink" title="14.34"></a>14.34</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ITE</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">bool</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a ? b : c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="13-36"><a href="#13-36" class="headerlink" title="13.36"></a>13.36</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GetInput</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GetInput</span>(std::istream&amp; i = std::cin) : <span class="built_in">is</span>(i) &#123; &#125;</span><br><span class="line"><span class="function">std::string <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">std::string str;</span><br><span class="line">std::<span class="built_in">getline</span>(is, str);</span><br><span class="line"><span class="keyword">return</span> is ? str : std::<span class="built_in">string</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::istream&amp; is;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">GetInput getInput;</span><br><span class="line">std::vector&lt;std::string&gt; vec;</span><br><span class="line"><span class="keyword">for</span> (std::string tmp; !(tmp = <span class="built_in">getInput</span>()).<span class="built_in">empty</span>(); ) vec.<span class="built_in">push_back</span>(tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; str : vec) std::cout &lt;&lt; str &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-37"><a href="#14-37" class="headerlink" title="14.37"></a>14.37</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IsEqual</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">IsEqual</span>(<span class="type">int</span> num):<span class="built_in">value</span>(num)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> elem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value == elem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec&#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="function">IsEqual <span class="title">ie</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">std::<span class="built_in">replace_if</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="built_in">IsEqual</span>(<span class="number">5</span>), <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : vec)</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-39"><a href="#14-39" class="headerlink" title="14.39"></a>14.39</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IsInRange</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">IsInRange</span>(<span class="type">int</span> lower,<span class="type">int</span> upper):_lower(lower),_upper(upper)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string str)</span><span class="type">const</span>  </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str.<span class="built_in">size</span>() &gt;= _lower &amp;&amp; str.<span class="built_in">size</span>() &lt;= _upper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _lower;</span><br><span class="line"><span class="type">int</span> _upper;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;14.39.txt&quot;</span>)</span></span>;</span><br><span class="line">string word;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count10 = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsInRange</span>(<span class="number">1</span>, <span class="number">9</span>)(word))</span><br><span class="line">++count;</span><br><span class="line"><span class="keyword">else</span> ++count10;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; count10 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-42"><a href="#14-42" class="headerlink" title="14.42"></a>14.42</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="built_in">count_if</span>(ivec.<span class="built_in">cbegin</span>(), ivec.<span class="built_in">cend</span>(), std::<span class="built_in">bind</span>(std::<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;(), _1, <span class="number">1024</span>));</span><br><span class="line">std::<span class="built_in">find_if</span>(svec.<span class="built_in">cbegin</span>(), svec.<span class="built_in">cend</span>(), std::<span class="built_in">bind</span>(std::<span class="built_in">not_equal_to</span>&lt;std::string&gt;(), _1, <span class="string">&quot;pooh&quot;</span>));</span><br><span class="line">std::<span class="built_in">transform</span>(ivec.<span class="built_in">begin</span>(), ivec.<span class="built_in">end</span>(), ivec.<span class="built_in">begin</span>(), std::<span class="built_in">bind</span>(std::<span class="built_in">multiplies</span>&lt;<span class="type">int</span>&gt;(), _1, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h5 id="14-43"><a href="#14-43" class="headerlink" title="14.43"></a>14.43</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> data = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    std::cin &gt;&gt; input;</span><br><span class="line">    std::modulus&lt;<span class="type">int</span>&gt; mod;</span><br><span class="line">    <span class="keyword">auto</span> predicator = [&amp;](<span class="type">int</span> i)&#123; <span class="keyword">return</span> <span class="number">0</span> == <span class="built_in">mod</span>(input, i); &#125;;</span><br><span class="line">    <span class="keyword">auto</span> is_divisible = std::<span class="built_in">any_of</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), predicator);</span><br><span class="line">    std::cout &lt;&lt; (is_divisible ? <span class="string">&quot;Yes!&quot;</span> : <span class="string">&quot;No!&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-44"><a href="#14-44" class="headerlink" title="14.44"></a>14.44</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123; <span class="keyword">return</span> i + j; &#125;</span><br><span class="line"><span class="keyword">auto</span> mod = [](<span class="type">int</span> i, <span class="type">int</span> j) &#123; <span class="keyword">return</span> i % j; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Div</span> &#123; <span class="function"><span class="type">int</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> i / j; &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> binops = std::map&lt;std::string, std::function&lt;<span class="built_in">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#123; <span class="string">&quot;+&quot;</span>, add &#125;,                               <span class="comment">// function pointer </span></span><br><span class="line">    &#123; <span class="string">&quot;-&quot;</span>, std::<span class="built_in">minus</span>&lt;<span class="type">int</span>&gt;() &#125;,                 <span class="comment">// library functor </span></span><br><span class="line">    &#123; <span class="string">&quot;/&quot;</span>, <span class="built_in">Div</span>() &#125;,                             <span class="comment">// user-defined functor </span></span><br><span class="line">    &#123; <span class="string">&quot;*&quot;</span>, [](<span class="type">int</span> i, <span class="type">int</span> j) &#123; <span class="keyword">return</span> i * j; &#125; &#125;,  <span class="comment">// unnamed lambda </span></span><br><span class="line">    &#123; <span class="string">&quot;%&quot;</span>, mod &#125;                                <span class="comment">// named lambda object </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer(第13章 拷贝控制)</title>
      <link href="/post/c-primer-di-13-zhang/"/>
      <url>/post/c-primer-di-13-zhang/</url>
      
        <content type="html"><![CDATA[<h5 id="13-5"><a href="#13-5" class="headerlink" title="13.5"></a>13.5</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HasPtr</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> string &amp;s=<span class="built_in">string</span>()):<span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>()),<span class="built_in">i</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> HasPtr&amp; hp): <span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps)),<span class="built_in">i</span>(hp.i)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string* ps;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="13-8"><a href="#13-8" class="headerlink" title="13.8"></a>13.8</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HasPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> HasPtr&amp; hp) &#123;</span><br><span class="line">string* temp_ps = <span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps);</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br><span class="line">ps = temp_ps;</span><br><span class="line">i = hp.i;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-17"><a href="#13-17" class="headerlink" title="13.17"></a>13.17</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">numbered</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">numbered</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;numbered()&quot;</span> &lt;&lt; endl;</span><br><span class="line">mysn = unique++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">numbered</span>(<span class="type">const</span> numbered&amp; n)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;numbered(const numbered&amp; n)&quot;</span> &lt;&lt; endl;</span><br><span class="line">mysn = unique++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mysn;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> unique;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> numbered::unique = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">const</span> numbered&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; s.mysn &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">numbered a, b = a, c = b;</span><br><span class="line"><span class="built_in">f</span>(a);</span><br><span class="line"><span class="built_in">f</span>(b);</span><br><span class="line"><span class="built_in">f</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-18"><a href="#13-18" class="headerlink" title="13.18"></a>13.18</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Employee</span>() &#123;</span><br><span class="line">m_Id = num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Employee</span>(string name) &#123;</span><br><span class="line">m_Name = name;</span><br><span class="line">m_Id = num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Employee</span>(<span class="type">const</span> Employee&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Employee <span class="keyword">operator</span>=(<span class="type">const</span> Employee&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">id</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_Id; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num;</span><br><span class="line">string m_Name;</span><br><span class="line"><span class="type">int</span> m_Id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Employee::num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="13-22"><a href="#13-22" class="headerlink" title="13.22"></a>13.22</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HasPtr</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HasPtr</span>(<span class="type">const</span> std::string &amp;s = std::<span class="built_in">string</span>()) : <span class="built_in">ps</span>(<span class="keyword">new</span> std::<span class="built_in">string</span>(s)), <span class="built_in">i</span>(<span class="number">0</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">HasPtr</span>(<span class="type">const</span> HasPtr &amp;hp) : <span class="built_in">ps</span>(<span class="keyword">new</span> std::<span class="built_in">string</span>(*hp.ps)), <span class="built_in">i</span>(hp.i) &#123; &#125;</span><br><span class="line">    HasPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> HasPtr &amp;hp) &#123;</span><br><span class="line">        <span class="keyword">auto</span> new_p = <span class="keyword">new</span> std::<span class="built_in">string</span>(*hp.ps);</span><br><span class="line">        <span class="keyword">delete</span> ps;</span><br><span class="line">        ps = new_p;</span><br><span class="line">        i = hp.i;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">HasPtr</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span> ps;</span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string *ps;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="13-27"><a href="#13-27" class="headerlink" title="13.27"></a>13.27</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HasPtr</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> string &amp;s=<span class="built_in">string</span>()):<span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>()),<span class="built_in">i</span>(<span class="number">0</span>),<span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">size_t</span>(<span class="number">1</span>)) &#123;&#125;</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> HasPtr&amp; hp) : <span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps)), <span class="built_in">i</span>(hp.i), <span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">size_t</span>(*hp.use)) &#123; ++* use; &#125;</span><br><span class="line">HasPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> HasPtr&amp; hp) &#123;</span><br><span class="line">++*hp.use;</span><br><span class="line"><span class="keyword">if</span> (-- * use == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br><span class="line"><span class="keyword">delete</span> use;</span><br><span class="line">&#125;</span><br><span class="line">ps = hp.ps;</span><br><span class="line">i = hp.i;</span><br><span class="line">use = hp.use;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">HasPtr</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (-- * use == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br><span class="line"><span class="keyword">delete</span> use;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string* ps;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">size_t</span>* use;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="13-28"><a href="#13-28" class="headerlink" title="13.28"></a>13.28</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TreeNode</span>():<span class="built_in">value</span>(<span class="built_in">string</span>()),<span class="built_in">count</span>(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>)),<span class="built_in">left</span>(<span class="literal">nullptr</span>),<span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">TreeNode</span>(<span class="type">const</span> TreeNode&amp; rhs) :<span class="built_in">value</span>(rhs.value), <span class="built_in">count</span>(<span class="keyword">new</span> <span class="built_in">int</span>(*rhs.count)),<span class="built_in">left</span>(rhs.left),<span class="built_in">right</span>(rhs.right) &#123; ++* count; &#125;</span><br><span class="line">TreeNode&amp; <span class="keyword">operator</span>=(<span class="type">const</span> TreeNode&amp; rhs);</span><br><span class="line">~<span class="built_in">TreeNode</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (-- * count == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> left;</span><br><span class="line"><span class="keyword">delete</span> right;</span><br><span class="line"><span class="keyword">delete</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string value;</span><br><span class="line"><span class="type">int</span>* count;</span><br><span class="line">TreeNode* left;</span><br><span class="line">TreeNode* right;</span><br><span class="line">&#125;;</span><br><span class="line">TreeNode&amp; TreeNode::<span class="keyword">operator</span>=(<span class="type">const</span> TreeNode&amp; rhs) &#123;</span><br><span class="line">++* rhs.count;</span><br><span class="line"><span class="keyword">if</span> (-- * count == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> left;</span><br><span class="line"><span class="keyword">delete</span> right;</span><br><span class="line"><span class="keyword">delete</span> count;</span><br><span class="line">&#125;</span><br><span class="line">value = rhs.value;</span><br><span class="line">count = rhs.count;</span><br><span class="line">left = rhs.left;</span><br><span class="line">right = rhs.right;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinStrTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BinStrTree</span>():<span class="built_in">root</span>(<span class="keyword">new</span> <span class="built_in">TreeNode</span>())&#123;&#125;</span><br><span class="line"><span class="built_in">BinStrTree</span>(<span class="type">const</span> BinStrTree&amp;bst):<span class="built_in">root</span>(<span class="keyword">new</span> <span class="built_in">TreeNode</span>(*bst.root))&#123;&#125;</span><br><span class="line">BinStrTree&amp; <span class="keyword">operator</span>=(<span class="type">const</span> BinStrTree&amp; bst);</span><br><span class="line">~<span class="built_in">BinStrTree</span>() &#123;</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TreeNode* root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BinStrTree&amp; BinStrTree::<span class="keyword">operator</span>=(<span class="type">const</span> BinStrTree&amp; bst) &#123;</span><br><span class="line">TreeNode* temp_r = bst.root;</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line">root = temp_r;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-30"><a href="#13-30" class="headerlink" title="13.30"></a>13.30</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HasPtr</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(HasPtr&amp;, HasPtr&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> string &amp;s=<span class="built_in">string</span>()):<span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>(s)),<span class="built_in">i</span>(<span class="number">0</span>),<span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">size_t</span>(<span class="number">1</span>)) &#123;&#125;</span><br><span class="line"><span class="built_in">HasPtr</span>(<span class="type">const</span> HasPtr&amp; hp) : <span class="built_in">ps</span>(<span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps)), <span class="built_in">i</span>(hp.i), <span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">size_t</span>(*hp.use)) &#123; ++* use; &#125;</span><br><span class="line">HasPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> HasPtr&amp; hp) &#123;</span><br><span class="line">++*hp.use;</span><br><span class="line"><span class="keyword">if</span> (-- * use == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br><span class="line"><span class="keyword">delete</span> use;</span><br><span class="line">&#125;</span><br><span class="line">ps = hp.ps;</span><br><span class="line">i = hp.i;</span><br><span class="line">use = hp.use;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">HasPtr</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (-- * use == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br><span class="line"><span class="keyword">delete</span> use;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; cout &lt;&lt; *ps &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string* ps;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">size_t</span>* use;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(HasPtr&amp;lhs, HasPtr&amp;rhs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> std::swap;</span><br><span class="line"><span class="built_in">swap</span>(lhs.ps, rhs.ps);</span><br><span class="line"><span class="built_in">swap</span>(lhs.i, lhs.i);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call swap(HasPtr&amp; lhs, HasPtr&amp; rhs)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">HasPtr <span class="title">a</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">HasPtr <span class="title">b</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">a.<span class="built_in">show</span>();</span><br><span class="line">b.<span class="built_in">show</span>();</span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line">a.<span class="built_in">show</span>();</span><br><span class="line">b.<span class="built_in">show</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-31"><a href="#10-31" class="headerlink" title="10.31"></a>10.31</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (HasPtr&amp;lhs, HasPtr&amp;rhs) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call operator &lt; (HasPtr&amp;lhs, HasPtr&amp;rhs) &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> lhs.ps &lt; rhs.ps;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">HasPtr s&#123; <span class="string">&quot;s&quot;</span> &#125;, a&#123; <span class="string">&quot;a&quot;</span> &#125;, c&#123; <span class="string">&quot;c&quot;</span> &#125;;</span><br><span class="line">vector&lt;HasPtr&gt; vec&#123; s, a, c &#125;;</span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : vec) &#123;</span><br><span class="line">v.<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-37"><a href="#13-37" class="headerlink" title="13.37"></a>13.37</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Folder</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(Message&amp;, Message&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(Folder&amp;, Folder&amp;)</span></span>;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Folder</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Message</span><span class="params">(<span class="type">const</span> std::string&amp; s = <span class="string">&quot;&quot;</span>)</span> :contents(s) &#123;</span>&#125;</span><br><span class="line"><span class="built_in">Message</span>(<span class="type">const</span> Message&amp;);</span><br><span class="line">Message&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Message&amp;);</span><br><span class="line">~<span class="built_in">Message</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(Folder&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(Folder&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_debug</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string contents;</span><br><span class="line">std::set&lt;Folder*&gt; folders;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_Folders</span><span class="params">(<span class="type">const</span> Message&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove_from_Folders</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addFldr</span><span class="params">(Folder* f)</span> </span>&#123; folders.<span class="built_in">insert</span>(f); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remFlddr</span><span class="params">(Folder* f)</span> </span>&#123; folders.<span class="built_in">erase</span>(f); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Message&amp;, Message&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Folder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(Message&amp;, Message&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(Folder&amp;, Folder&amp;)</span></span>;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Message</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Folder</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Folder</span>(<span class="type">const</span> Folder&amp;);</span><br><span class="line">Folder&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Folder&amp;);</span><br><span class="line">~<span class="built_in">Folder</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_debug</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::set&lt;Message*&gt; msgs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_Message</span><span class="params">(<span class="type">const</span> Folder&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove_from_Message</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addMsg</span><span class="params">(Message* m)</span> </span>&#123; msgs.<span class="built_in">insert</span>(m); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remMsg</span><span class="params">(Message* m)</span> </span>&#123; msgs.<span class="built_in">erase</span>(m); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Folder&amp;, Folder&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Message&amp; lhs, Message&amp; rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> std::swap;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : lhs.folders)</span><br><span class="line">f-&gt;<span class="built_in">remMsg</span>(&amp;lhs);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : rhs.folders)</span><br><span class="line">f-&gt;<span class="built_in">remMsg</span>(&amp;rhs);</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(lhs.folders, rhs.folders);</span><br><span class="line"><span class="built_in">swap</span>(lhs.contents, rhs.contents);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : lhs.folders)</span><br><span class="line">f-&gt;<span class="built_in">addMsg</span>(&amp;lhs);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : rhs.folders)</span><br><span class="line">f-&gt;<span class="built_in">addMsg</span>(&amp;rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Message::save</span><span class="params">(Folder&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">folders.<span class="built_in">insert</span>(&amp;f);</span><br><span class="line">f.<span class="built_in">addMsg</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Message::remove</span><span class="params">(Folder&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">folders.<span class="built_in">erase</span>(&amp;f);</span><br><span class="line">f.<span class="built_in">remMsg</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Message::add_to_Folders</span><span class="params">(<span class="type">const</span> Message&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : m.folders)</span><br><span class="line">f-&gt;<span class="built_in">addMsg</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Message::<span class="built_in">Message</span>(<span class="type">const</span> Message&amp; m) :<span class="built_in">contents</span>(m.contents), <span class="built_in">folders</span>(m.folders)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add_to_Folders</span>(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Message::remove_from_Folders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : folders)</span><br><span class="line">f-&gt;<span class="built_in">remMsg</span>(<span class="keyword">this</span>);</span><br><span class="line">folders.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Message::~<span class="built_in">Message</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">remove_from_Folders</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Message&amp; Message::<span class="keyword">operator</span>=(<span class="type">const</span> Message&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">remove_from_Folders</span>();</span><br><span class="line">contents = rhs.contents;</span><br><span class="line">folders = rhs.folders;</span><br><span class="line"><span class="built_in">add_to_Folders</span>(rhs);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Message::print_debug</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; contents &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Folder&amp; lhs, Folder&amp; rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> std::swap;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : lhs.msgs)</span><br><span class="line">m-&gt;<span class="built_in">remFlddr</span>(&amp;lhs);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : rhs.msgs)</span><br><span class="line">m-&gt;<span class="built_in">remFlddr</span>(&amp;rhs);</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(lhs.msgs, rhs.msgs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : lhs.msgs)</span><br><span class="line">m-&gt;<span class="built_in">addFldr</span>(&amp;lhs);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : rhs.msgs)</span><br><span class="line">m-&gt;<span class="built_in">addFldr</span>(&amp;rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Folder::add_to_Message</span><span class="params">(<span class="type">const</span> Folder&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : f.msgs)</span><br><span class="line">m-&gt;<span class="built_in">addFldr</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Folder::<span class="built_in">Folder</span>(<span class="type">const</span> Folder&amp; f) :<span class="built_in">msgs</span>(f.msgs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add_to_Message</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Folder::remove_from_Message</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : msgs)</span><br><span class="line">m-&gt;<span class="built_in">remFlddr</span>(<span class="keyword">this</span>);</span><br><span class="line">msgs.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Folder::~<span class="built_in">Folder</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">remove_from_Message</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Folder&amp; Folder::<span class="keyword">operator</span>=(<span class="type">const</span> Folder&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">remove_from_Message</span>();</span><br><span class="line">msgs = rhs.msgs;</span><br><span class="line"><span class="built_in">add_to_Message</span>(rhs);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Folder::print_debug</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : msgs)</span><br><span class="line">std::cout &lt;&lt; m-&gt;contents &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-39"><a href="#10-39" class="headerlink" title="10.39"></a>10.39</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StrVec</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">StrVec</span>() : <span class="built_in">elements</span>(<span class="literal">nullptr</span>), <span class="built_in">first_free</span>(<span class="literal">nullptr</span>), <span class="built_in">cap</span>(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line"><span class="built_in">StrVec</span>(<span class="type">const</span> StrVec&amp;);</span><br><span class="line">StrVec&amp; <span class="keyword">operator</span>=(<span class="type">const</span> StrVec&amp;);</span><br><span class="line">~<span class="built_in">StrVec</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> std::string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> first_free - elements; &#125;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> cap - elements; &#125;</span><br><span class="line"><span class="function">std::string* <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> elements; &#125;</span><br><span class="line"><span class="function">std::string* <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> first_free; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span> count, <span class="type">const</span> std::string&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function">std::pair&lt;std::string*, std::string*&gt; <span class="title">alloc_n_copy</span><span class="params">(<span class="type">const</span> std::string*, <span class="type">const</span> std::string*)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chk_n_alloc</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span> (<span class="built_in">size</span>() == <span class="built_in">capacity</span>()) <span class="built_in">reallocate</span>(); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reallocate</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string* elements;</span><br><span class="line">std::string* first_free;</span><br><span class="line">std::string* cap;</span><br><span class="line">std::allocator&lt;std::string&gt; alloc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::push_back</span><span class="params">(<span class="type">const</span> std::string&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">chk_n_alloc</span>();</span><br><span class="line">alloc.<span class="built_in">construct</span>(first_free++, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;std::string*, std::string*&gt;</span></span><br><span class="line"><span class="function"><span class="title">StrVec::alloc_n_copy</span><span class="params">(<span class="type">const</span> std::string* b, <span class="type">const</span> std::string* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> data = alloc.<span class="built_in">allocate</span>(e - b);</span><br><span class="line"><span class="keyword">return</span>&#123; data, std::<span class="built_in">uninitialized_copy</span>(b, e, data) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::free</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (elements) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = first_free; p != elements;)</span><br><span class="line">alloc.<span class="built_in">destroy</span>(--p);</span><br><span class="line">alloc.<span class="built_in">deallocate</span>(elements, cap - elements);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec::<span class="built_in">StrVec</span>(<span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> newdata = <span class="built_in">alloc_n_copy</span>(rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line">elements = newdata.first;</span><br><span class="line">first_free = cap = newdata.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec::~<span class="built_in">StrVec</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrVec&amp; StrVec::<span class="keyword">operator</span> = (<span class="type">const</span> StrVec&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> data = <span class="built_in">alloc_n_copy</span>(rhs.<span class="built_in">begin</span>(), rhs.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">elements = data.first;</span><br><span class="line">first_free = cap = data.second;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::alloc_n_move</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> newdata = alloc.<span class="built_in">allocate</span>(new_cap);</span><br><span class="line"><span class="keyword">auto</span> dest = newdata;</span><br><span class="line"><span class="keyword">auto</span> elem = elements;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i != <span class="built_in">size</span>(); ++i)</span><br><span class="line">alloc.<span class="built_in">construct</span>(dest++, std::<span class="built_in">move</span>(*elem++));</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">elements = newdata;</span><br><span class="line">first_free = dest;</span><br><span class="line">cap = elements + new_cap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::reallocate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> newcapacity = <span class="built_in">size</span>() ? <span class="number">2</span> * <span class="built_in">size</span>() : <span class="number">1</span>;</span><br><span class="line"><span class="built_in">alloc_n_move</span>(newcapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (new_cap &lt;= <span class="built_in">capacity</span>()) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">alloc_n_move</span>(new_cap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::resize</span><span class="params">(<span class="type">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">resize</span>(count, std::<span class="built_in">string</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::resize</span><span class="params">(<span class="type">size_t</span> count, <span class="type">const</span> std::string&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="built_in">capacity</span>()) <span class="built_in">reserve</span>(count * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="built_in">size</span>(); i != count; ++i)</span><br><span class="line">alloc.<span class="built_in">construct</span>(first_free++, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (count &lt; <span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">while</span> (first_free != elements + count)</span><br><span class="line">alloc.<span class="built_in">destroy</span>(--first_free);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-40"><a href="#13-40" class="headerlink" title="13.40"></a>13.40</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrVec::range_initialize</span><span class="params">(<span class="type">const</span> std::string* first, <span class="type">const</span> std::string* last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> newdata = <span class="built_in">alloc_n_copy</span>(first, last);</span><br><span class="line">elements = newdata.first;</span><br><span class="line">first_free = cap = newdata.second;</span><br><span class="line">&#125;</span><br><span class="line">StrVec::<span class="built_in">StrVec</span>(std::initializer_list&lt;std::string&gt; il)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">range_initialize</span>(il.<span class="built_in">begin</span>(), il.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-43"><a href="#13-43" class="headerlink" title="13.43"></a>13.43</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for_each(elements, first_free, [<span class="keyword">this</span>](string&amp; rhs) &#123;alloc.<span class="built_in">destroy</span>(&amp;rhs); &#125;);</span><br><span class="line">alloc.<span class="built_in">deallocate</span>(elements,cap-elements);</span><br></pre></td></tr></table></figure><h5 id="13-44"><a href="#13-44" class="headerlink" title="13.44"></a>13.44</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">String</span>()=<span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>*);</span><br><span class="line"><span class="built_in">String</span>(<span class="type">const</span> String&amp;);</span><br><span class="line">String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp;);</span><br><span class="line">~<span class="built_in">String</span>() &#123; <span class="built_in">free</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">allocator&lt;<span class="type">char</span>&gt;alloc;</span><br><span class="line"><span class="type">char</span>* elements;</span><br><span class="line"><span class="type">char</span>* end;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">char</span>*, <span class="type">char</span>*&gt; <span class="title">alloc_n_copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* b, <span class="type">const</span> <span class="type">char</span>* e)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">range_initializer</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* b, <span class="type">const</span> <span class="type">char</span>* e)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">char</span>*, <span class="type">char</span>*&gt; <span class="title">String::alloc_n_copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* b, <span class="type">const</span> <span class="type">char</span>* e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> data = alloc.<span class="built_in">allocate</span>(e - b);</span><br><span class="line"><span class="keyword">return</span> &#123; data,<span class="built_in">uninitialized_copy</span>(b,e,data) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::range_initializer</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* b, <span class="type">const</span> <span class="type">char</span>* e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> newdata = <span class="built_in">alloc_n_copy</span>(b, e);</span><br><span class="line">elements = newdata.first;</span><br><span class="line">end = newdata.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受c风格字符串参数的构造函数，s为指向字符串的指针(首位置)</span></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* s) &#123;</span><br><span class="line"><span class="keyword">auto</span> s1 = <span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(s);<span class="comment">//转化为非常量的指针</span></span><br><span class="line"><span class="keyword">while</span> (*s1) &#123;</span><br><span class="line">++s1;<span class="comment">//使其指向最后一个位置的尾部</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">alloc_n_copy</span>(s, s1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> String&amp; rhs) &#123;</span><br><span class="line"><span class="keyword">auto</span> newdata = <span class="built_in">alloc_n_copy</span>(rhs.elements, rhs.end);</span><br><span class="line">elements = newdata.first;</span><br><span class="line">end = newdata.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">String::free</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (elements) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = end; p != elements;) &#123;</span><br><span class="line">alloc.<span class="built_in">destroy</span>(--p);</span><br><span class="line">&#125;</span><br><span class="line">alloc.<span class="built_in">deallocate</span>(elements, end - elements);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>=(<span class="type">const</span> String&amp;rhs) &#123;</span><br><span class="line"><span class="keyword">auto</span> data = <span class="built_in">alloc_n_copy</span>(rhs.elements, rhs.end);</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">elements = data.first;</span><br><span class="line">end = data.second;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-48"><a href="#13-48" class="headerlink" title="13.48"></a>13.48</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> text[] = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String s0;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">s2</span><span class="params">(s0)</span></span>;<span class="comment">//1</span></span><br><span class="line">    String s3 = s1;<span class="comment">//2 拷贝构造</span></span><br><span class="line">    <span class="function">String <span class="title">s4</span><span class="params">(text)</span></span>;</span><br><span class="line">    s2 = s1;<span class="comment">//3 拷贝赋值运算符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    std::vector&lt;String&gt; svec;</span><br><span class="line">    svec.<span class="built_in">reserve</span>(<span class="number">5</span>);</span><br><span class="line">    svec.<span class="built_in">push_back</span>(s0);<span class="comment">//4  拷贝构造</span></span><br><span class="line">    svec.<span class="built_in">push_back</span>(s1);<span class="comment">//5  </span></span><br><span class="line">    svec.<span class="built_in">push_back</span>(s2);<span class="comment">//6</span></span><br><span class="line">    svec.<span class="built_in">push_back</span>(s3);<span class="comment">//7</span></span><br><span class="line">    svec.<span class="built_in">push_back</span>(s4);<span class="comment">//8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-49"><a href="#13-49" class="headerlink" title="13.49"></a>13.49</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">StrVec</span>(StrVec&amp;&amp; s) <span class="keyword">noexcept</span> :<span class="built_in">elements</span>(s.elements), <span class="built_in">first_free</span>(s.first_free), <span class="built_in">cap</span>(s.cap) &#123;</span><br><span class="line">s.elements = s.first_free = s.cap = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">StrVec&amp; <span class="keyword">operator</span>=(StrVec&amp;&amp; rhs)<span class="keyword">noexcept</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != &amp;rhs) &#123;</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">elements = rhs.elements;</span><br><span class="line">first_free = rhs.first_free;</span><br><span class="line">cap = rhs.cap;</span><br><span class="line">rhs.elements = rhs.first_free = rhs.cap = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(String&amp;&amp; s)<span class="keyword">noexcept</span> :<span class="built_in">elements</span>(s.elements), <span class="built_in">end</span>(s.end) &#123; s.elements = s.end = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">String&amp; <span class="keyword">operator</span>=(String&amp;&amp; rhs) <span class="keyword">noexcept</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != &amp;rhs) &#123;</span><br><span class="line"><span class="built_in">free</span>();</span><br><span class="line">elements = rhs.elements;</span><br><span class="line">end = rhs.end;</span><br><span class="line">rhs.elements = rhs.end = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-58"><a href="#13-58" class="headerlink" title="13.58"></a>13.58</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Foo <span class="title">sorted</span><span class="params">()</span>&amp;&amp;</span>;</span><br><span class="line">    <span class="function">Foo <span class="title">sorted</span><span class="params">()</span> <span class="type">const</span>&amp;</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Foo <span class="title">Foo::sorted</span><span class="params">()</span>&amp;&amp; </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>());</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&amp;&amp;&quot;</span> &lt;&lt; std::endl; <span class="comment">// debug</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Foo <span class="title">Foo::sorted</span><span class="params">()</span> <span class="type">const</span>&amp; </span>&#123;</span><br><span class="line">    <span class="comment">//    Foo ret(*this);</span></span><br><span class="line">    <span class="comment">//    sort(ret.data.begin(), ret.data.end());</span></span><br><span class="line">    <span class="comment">//    return ret;</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;const &amp;&quot;</span> &lt;&lt; std::endl; <span class="comment">// debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    Foo ret(*this);</span></span><br><span class="line"><span class="comment">//    ret.sorted();     // Exercise 13.56</span></span><br><span class="line"><span class="comment">//    return ret;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Foo</span>(*<span class="keyword">this</span>).<span class="built_in">sorted</span>(); <span class="comment">// Exercise 13.57</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Foo</span>().<span class="built_in">sorted</span>(); <span class="comment">// call &quot;&amp;&amp;&quot;</span></span><br><span class="line">    Foo f;</span><br><span class="line">    f.<span class="built_in">sorted</span>(); <span class="comment">// call &quot;const &amp;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer(第12章 动态内存)</title>
      <link href="/post/c-primer-di-12-zhang/"/>
      <url>/post/c-primer-di-12-zhang/</url>
      
        <content type="html"><![CDATA[<h5 id="12-2"><a href="#12-2" class="headerlink" title="12.2"></a>12.2</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrBlob</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> size_type = vector&lt;string&gt;::size_type;</span><br><span class="line"></span><br><span class="line"><span class="built_in">StrBlob</span>() :<span class="built_in">data</span>(make_shared&lt;vector&lt;string&gt;&gt;()) &#123;&#125;</span><br><span class="line"><span class="built_in">StrBlob</span>(initializer_list&lt;string&gt; il) : <span class="built_in">data</span>(make_shared&lt;vector&lt;string&gt;&gt;(il)) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> string&amp; s)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">data-&gt;<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;pop_back on empty StrBlob&quot;</span>);</span><br><span class="line">data-&gt;<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string&amp; <span class="title">front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;front on empty StrBlob&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string&amp; <span class="title">back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;back on empty StrBlob&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">front</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;front on empty StrBlob&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">back</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;back on empty StrBlob&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> data-&gt;<span class="built_in">back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(size_type i, <span class="type">const</span> string&amp; msg)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= data-&gt;<span class="built_in">size</span>())</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">out_of_range</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-6"><a href="#12-6" class="headerlink" title="12.6"></a>12.6</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt;* <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> vector&lt;<span class="type">int</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt;* <span class="title">func2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;* v_ptr)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; a) &#123;</span><br><span class="line">v_ptr-&gt;<span class="built_in">push_back</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v_ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(vector&lt;<span class="type">int</span>&gt;* v_ptr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : (*v_ptr)) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> p = <span class="built_in">func1</span>();</span><br><span class="line">p = <span class="built_in">func2</span>(p);</span><br><span class="line"><span class="built_in">func3</span>(p);</span><br><span class="line"><span class="built_in">delete</span>(p);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-7"><a href="#12-7" class="headerlink" title="12.7"></a>12.7</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">shared_ptr&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">func1</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> make_shared&lt;vector&lt;<span class="type">int</span>&gt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">func2</span>(shared_ptr&lt;vector&lt;<span class="type">int</span>&gt;&gt; p) &#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; a) &#123;</span><br><span class="line">p-&gt;<span class="built_in">push_back</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(shared_ptr&lt;vector&lt;<span class="type">int</span>&gt;&gt; p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : (*p)) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> p = <span class="built_in">func1</span>();</span><br><span class="line">p = <span class="built_in">func2</span>(p);</span><br><span class="line"><span class="built_in">func3</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="智能指针规范"><a href="#智能指针规范" class="headerlink" title="智能指针规范"></a>智能指针规范</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1：不使用相同的内置指针值初始化（或reset）多个智能指针</span><br><span class="line"></span><br><span class="line">2：不delete get()返回的指针</span><br><span class="line"></span><br><span class="line">3：不使用get()初始化或reset另一个只能指针</span><br><span class="line"></span><br><span class="line">4：当你使用的智能指针管理的资源不是new分配的内存，记住传递一个删除器</span><br></pre></td></tr></table></figure><h5 id="12-15"><a href="#12-15" class="headerlink" title="12.15"></a>12.15</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">destination</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">connection</span>;</span><br><span class="line"><span class="function">connection <span class="title">connect</span><span class="params">(destination*)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">disconnect</span><span class="params">(connection)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">end_connection</span><span class="params">(destination* p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">disconnect</span>(*p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(destination&amp; d)</span> </span>&#123;</span><br><span class="line">connection c = <span class="built_in">connect</span>(&amp;d);</span><br><span class="line">shared_ptr&lt;connection&gt;<span class="built_in">p</span>(&amp;c, [](connection* p)&#123;<span class="built_in">disconnect</span>(*p)&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-16"><a href="#12-16" class="headerlink" title="12.16"></a>12.16</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;pezy&quot;</span>))</span></span>;</span><br><span class="line"><span class="comment">// unique_ptr&lt;string&gt; p2(p1); // copy</span></span><br><span class="line"><span class="comment">//                      ^</span></span><br><span class="line"><span class="comment">// Error: Call to implicitly-deleted copy constructor of &#x27;unique_ptr&lt;string&gt;&#x27;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// unique_ptr&lt;string&gt; p3 = p1; // assign</span></span><br><span class="line"><span class="comment">//                      ^</span></span><br><span class="line"><span class="comment">// Error: Call to implicitly-deleted copy constructor of &#x27;unique_ptr&lt;string&gt;&#x27;</span></span><br><span class="line">std::cout &lt;&lt; *p1 &lt;&lt; std::endl;</span><br><span class="line">p1.<span class="built_in">reset</span>(<span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure><h5 id="12-17"><a href="#12-17" class="headerlink" title="12.17"></a>12.17</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(a) 不合法。在定义一个 unique_ptr 时，需要将其绑定到一个new 返回的指针上。</span><br><span class="line">(b) 合法。但是可能会有后续的程序错误。当 p1 被释放时，p1 所指向的对象也被释放，所以导致 pi 成为一个空悬指针。</span><br><span class="line">(c) 合法。但是也可能会使得 pi2 成为空悬指针。</span><br><span class="line">(d) 不合法。当 p3 被销毁时，它试图释放一个栈空间的对象。</span><br><span class="line">(e) 合法。</span><br><span class="line">(f) 不合法。p5 和 p2 指向同一个对象，当 p5 和 p2 被销毁时，会使得同一个指针被释放两次。</span><br></pre></td></tr></table></figure><h5 id="12-23"><a href="#12-23" class="headerlink" title="12.23"></a>12.23</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">char</span>* p = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(<span class="string">&quot;hello&quot;</span><span class="string">&quot;world&quot;</span>) + <span class="number">1</span>]();</span><br><span class="line"><span class="built_in">strcat</span>(p, <span class="string">&quot;hello &quot;</span>);</span><br><span class="line"><span class="built_in">strcat</span>(p, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">cout &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">string str1&#123; <span class="string">&quot;hello &quot;</span> &#125;, str2&#123; <span class="string">&quot;world&quot;</span> &#125;;</span><br><span class="line">cout &lt;&lt; str1 + str2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-24"><a href="#12-24" class="headerlink" title="12.24"></a>12.24</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">char</span>* input = <span class="keyword">new</span> <span class="type">char</span>[s.<span class="built_in">size</span>() + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(input, s.<span class="built_in">c_str</span>());</span><br><span class="line">cout &lt;&lt; input &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[]input;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-26"><a href="#12-26" class="headerlink" title="12.26"></a>12.26</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> n=<span class="number">100</span>;</span><br><span class="line">allocator&lt;string&gt;alloc;</span><br><span class="line"><span class="keyword">auto</span> p = alloc.<span class="built_in">allocate</span>(n);</span><br><span class="line"><span class="keyword">auto</span> q = p;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s &amp;&amp; q != p + n) &#123;</span><br><span class="line">alloc.<span class="built_in">construct</span>(q++, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> size = q - p;</span><br><span class="line">cout &lt;&lt; size &lt;&lt; endl;</span><br><span class="line"><span class="keyword">while</span> (q != p) &#123;</span><br><span class="line">cout &lt;&lt; *--q &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">alloc.<span class="built_in">destroy</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">alloc.<span class="built_in">deallocate</span>(p, n);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-28"><a href="#12-28" class="headerlink" title="12.28"></a>12.28</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> line_no = vector&lt;string&gt;::size_type;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;12.30.txt&quot;</span>)</span></span>;</span><br><span class="line">vector&lt;string&gt; file;</span><br><span class="line">map&lt;string, set&lt;line_no&gt;&gt;wm;</span><br><span class="line">string text;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(ifs, text)) &#123;</span><br><span class="line">file.<span class="built_in">push_back</span>(text);</span><br><span class="line"><span class="function">istringstream <span class="title">line</span><span class="params">(text)</span></span>;</span><br><span class="line">string word;</span><br><span class="line"><span class="type">int</span> n = file.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (line &gt;&gt; word) &#123;</span><br><span class="line">wm[word].<span class="built_in">insert</span>(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;enter word to look for,or q to quit: &quot;</span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">if</span> (!(cin &gt;&gt; s) || s == <span class="string">&quot;q&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">auto</span> loc = wm.<span class="built_in">find</span>(s);</span><br><span class="line"><span class="keyword">if</span> (loc == wm.<span class="built_in">end</span>())</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;don&#x27;t find&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; <span class="string">&quot; occur &quot;</span> &lt;&lt; wm[s].<span class="built_in">size</span>()  &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> num : wm[s]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t(line &quot;</span> &lt;&lt; num + <span class="number">1</span> &lt;&lt; <span class="string">&quot;)&quot;</span></span><br><span class="line">&lt;&lt; file[num] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-30"><a href="#12-30" class="headerlink" title="12.30"></a>12.30</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">friend</span> QueryResult;</span><br><span class="line"><span class="keyword">using</span> line_no = vector&lt;string&gt;::size_type;</span><br><span class="line"><span class="built_in">TextQuery</span>(ifstream&amp;);</span><br><span class="line"><span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="type">const</span> string&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; file;</span><br><span class="line">map&lt;string, shared_ptr&lt;set&lt;line_no&gt;&gt;&gt;wm;</span><br><span class="line">&#125;;</span><br><span class="line">TextQuery::<span class="built_in">TextQuery</span>(ifstream&amp; is):<span class="built_in">file</span>(<span class="keyword">new</span> vector&lt;string&gt;) &#123;</span><br><span class="line">string text;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(is, text)) &#123;</span><br><span class="line">file-&gt;<span class="built_in">push_back</span>(text);</span><br><span class="line"><span class="type">int</span> n = file-&gt;<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"><span class="function">istringstream <span class="title">line</span><span class="params">(text)</span></span>;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (line &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; lines = wm[word];</span><br><span class="line"><span class="keyword">if</span> (!lines)</span><br><span class="line">lines.<span class="built_in">reset</span>(<span class="keyword">new</span> set&lt;line_no&gt;);</span><br><span class="line">lines-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> ostream&amp; <span class="title">print</span><span class="params">(ostream&amp;, <span class="type">const</span> QueryResult&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">QueryResult</span>(string s,shared_ptr&lt;set&lt;TextQuery::line_no&gt;&gt;p,shared_ptr&lt;vector&lt;string&gt;&gt; f):<span class="built_in">sought</span>(s),<span class="built_in">lines</span>(p),<span class="built_in">file</span>(f)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string sought;</span><br><span class="line">shared_ptr&lt;set&lt;TextQuery::line_no&gt;&gt;lines;</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; file;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">QueryResult <span class="title">TextQuery::query</span><span class="params">(<span class="type">const</span> string&amp; sought)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="type">static</span> shared_ptr&lt;set&lt;line_no&gt;&gt; <span class="built_in">nodata</span>(<span class="keyword">new</span> set&lt;line_no &gt;);</span><br><span class="line"><span class="keyword">auto</span> loc = wm.<span class="built_in">find</span>(sought);</span><br><span class="line"><span class="keyword">if</span> (loc == wm.<span class="built_in">end</span>())</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, nodata, file);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, loc-&gt;second, file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream&amp; <span class="title">print</span><span class="params">(ostream&amp; os, <span class="type">const</span> QueryResult&amp; qr)</span> </span>&#123;</span><br><span class="line">os &lt;&lt; qr.sought &lt;&lt; <span class="string">&quot; occurs &quot;</span> &lt;&lt; qr.lines-&gt;<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> num : *qr.lines) &#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;\y(line &quot;</span> &lt;&lt; num + <span class="number">1</span> &lt;&lt; <span class="string">&quot;)&quot;</span></span><br><span class="line">&lt;&lt; *(qr.file-&gt;<span class="built_in">begin</span>() + num) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">runQueries</span><span class="params">(ifstream&amp; infile)</span> </span>&#123;</span><br><span class="line"><span class="function">TextQuery <span class="title">tq</span><span class="params">(infile)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;enter word to look for,or q to quit: &quot;</span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">if</span> (!(cin &gt;&gt; s) || s == <span class="string">&quot;q&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">print</span>(cout, tq.<span class="built_in">query</span>(s)) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;12.30.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">runQueries</span>(ifs);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer(第11章 关联容器)</title>
      <link href="/post/c-primer-di-11-zhang/"/>
      <url>/post/c-primer-di-11-zhang/</url>
      
        <content type="html"><![CDATA[<h5 id="11-3"><a href="#11-3" class="headerlink" title="11.3"></a>11.3</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">size_t</span>&gt;word_count;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word) &#123;</span><br><span class="line">++word_count[word];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; m : word_count) &#123;</span><br><span class="line">cout &lt;&lt; m.first &lt;&lt; <span class="string">&quot; 出现了 &quot;</span> &lt;&lt; m.second &lt;&lt; <span class="string">&quot; 次&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-4"><a href="#11-4" class="headerlink" title="11.4"></a>11.4</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">size_t</span>&gt;word_count;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : word) &#123;</span><br><span class="line">c = <span class="built_in">tolower</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">word.<span class="built_in">erase</span>(<span class="built_in">find_if</span>(word.<span class="built_in">begin</span>(), word.<span class="built_in">end</span>(), ispunct),word.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; word &lt;&lt; endl;</span><br><span class="line">++word_count[word];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; m : word_count) &#123;</span><br><span class="line">cout &lt;&lt; m.first &lt;&lt; <span class="string">&quot; 出现了 &quot;</span> &lt;&lt; m.second &lt;&lt; <span class="string">&quot; 次&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-7"><a href="#11-7" class="headerlink" title="11.7"></a>11.7</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">map&lt;string, vector&lt;string&gt;&gt;family;</span><br><span class="line">string s1;</span><br><span class="line">while (cin &gt;&gt; s1) &#123;</span><br><span class="line">if (family.count(s1)) &#123;</span><br><span class="line">cout &lt;&lt; &quot; 已存在家庭,添加孩子 &quot; &lt;&lt; endl;</span><br><span class="line">string s2;</span><br><span class="line">cin &gt;&gt; s2;</span><br><span class="line">family[s1].push_back(s2);</span><br><span class="line">&#125;</span><br><span class="line">family[s1];</span><br><span class="line">&#125;</span><br><span class="line">for (auto&amp; f : family) &#123;</span><br><span class="line">cout &lt;&lt; f.first &lt;&lt; endl;</span><br><span class="line">for (auto i : f.second) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; &quot;  &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-8"><a href="#11-8" class="headerlink" title="11.8"></a>11.8</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt;vec;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), word) == vec.<span class="built_in">end</span>()) &#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(word);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加成功：&quot;</span> &lt;&lt; word &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;已存在该单词&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : vec) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-12-11-13"><a href="#11-12-11-13" class="headerlink" title="11.12-11.13"></a>11.12-11.13</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;pair&lt;string, <span class="type">int</span>&gt;&gt;vec;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; s &gt;&gt; i) &#123;</span><br><span class="line"><span class="comment">//vec.push_back(make_pair(s, i));</span></span><br><span class="line"><span class="comment">//vec.push_back(&#123; s,i &#125;);</span></span><br><span class="line">vec.<span class="built_in">emplace_back</span>(s, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-14"><a href="#11-14" class="headerlink" title="11.14"></a>11.14</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, vector&lt;pair&lt;string,string&gt;&gt;&gt;family;</span><br><span class="line">string s1;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s1) &#123;</span><br><span class="line"><span class="keyword">if</span> (family.<span class="built_in">count</span>(s1)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; 已存在家庭,添加孩子 &quot;</span> &lt;&lt; endl;</span><br><span class="line">string s2, s3;</span><br><span class="line">cin &gt;&gt; s2 &gt;&gt; s3;</span><br><span class="line">family[s1].<span class="built_in">emplace_back</span>(s2,s3);</span><br><span class="line">&#125;</span><br><span class="line">family[s1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-16"><a href="#11-16" class="headerlink" title="11.16"></a>11.16</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>, string&gt;m&#123; &#123;<span class="number">5</span>,<span class="string">&quot;good&quot;</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">auto</span> vt = m.<span class="built_in">begin</span>();</span><br><span class="line">vt-&gt;second = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="11-22"><a href="#11-22" class="headerlink" title="11.22"></a>11.22</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;std::string, std::vector&lt;<span class="type">int</span>&gt;&gt;    <span class="comment">// argument</span></span><br><span class="line">std::pair&lt;std::map&lt;std::string, std::vector&lt;<span class="type">int</span>&gt;&gt;::iterator, <span class="type">bool</span>&gt; <span class="comment">// return</span></span><br></pre></td></tr></table></figure><h5 id="11-31"><a href="#11-31" class="headerlink" title="11.31"></a>11.31</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">multimap&lt;string, string&gt;authors&#123;</span><br><span class="line">&#123; <span class="string">&quot;alan&quot;</span>, <span class="string">&quot;DMA&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;pezy&quot;</span>, <span class="string">&quot;LeetCode&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;alan&quot;</span>, <span class="string">&quot;CLRS&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;FTP&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;pezy&quot;</span>, <span class="string">&quot;CP5&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;CPP-Concurrency&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> it = authors.<span class="built_in">find</span>(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line"><span class="keyword">auto</span> num = authors.<span class="built_in">count</span>(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line">string work = <span class="string">&quot;CP5&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (num) &#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second == work) &#123;</span><br><span class="line">authors.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">++it;</span><br><span class="line">--num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; author : authors)</span><br><span class="line">std::cout &lt;&lt; author.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; author.second &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-32"><a href="#11-32" class="headerlink" title="11.32"></a>11.32</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">multimap&lt;string, string&gt;authors&#123;</span><br><span class="line">&#123; <span class="string">&quot;alan&quot;</span>, <span class="string">&quot;DMA&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;pezy&quot;</span>, <span class="string">&quot;LeetCode&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;alan&quot;</span>, <span class="string">&quot;CLRS&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;FTP&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;pezy&quot;</span>, <span class="string">&quot;CP5&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;CPP-Concurrency&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">map&lt;string, multiset&lt;string&gt;&gt; order_authors;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; author : authors)</span><br><span class="line">order_authors[author.first].<span class="built_in">insert</span>(author.second);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; author : order_authors)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; author.first &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; work : author.second)</span><br><span class="line">cout &lt;&lt; work &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-33"><a href="#11-33" class="headerlink" title="11.33"></a>11.33</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">map&lt;string, string&gt; <span class="title">buildMap</span><span class="params">(ifstream&amp; map_file)</span> </span>&#123;</span><br><span class="line">map&lt;string, string&gt;trans_map;</span><br><span class="line">string key;<span class="comment">//转换前</span></span><br><span class="line">string value;<span class="comment">//替换后</span></span><br><span class="line"><span class="comment">// 第一个单词存入 key， 剩余存入value</span></span><br><span class="line"><span class="keyword">while</span> (map_file &gt;&gt; key &amp;&amp; <span class="built_in">getline</span>(map_file, value)) &#123;</span><br><span class="line"><span class="keyword">if</span> (value.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">trans_map[key] = value.<span class="built_in">substr</span>(<span class="number">1</span>); <span class="comment">//getline 读取了空格 要跳过前导空格</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;no rule for&quot;</span> + key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> trans_map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">transform</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">const</span> map&lt;string, string&gt;&amp; m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> map_it = m.<span class="built_in">find</span>(s);</span><br><span class="line"><span class="keyword">if</span> (map_it != m.<span class="built_in">end</span>())</span><br><span class="line"><span class="keyword">return</span> map_it-&gt;second;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">word_trans</span><span class="params">(ifstream&amp; map_file, ifstream&amp; input)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> trans_map = <span class="built_in">buildMap</span>(map_file);<span class="comment">// 保存转换规则</span></span><br><span class="line">string text;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(input, text)) &#123;</span><br><span class="line"><span class="function">istringstream <span class="title">stream</span><span class="params">(text)</span></span>;</span><br><span class="line">string word;</span><br><span class="line"><span class="type">bool</span> firstword = <span class="literal">true</span>;<span class="comment">//控制是否打印空格</span></span><br><span class="line"><span class="keyword">while</span> (stream &gt;&gt; word) &#123;</span><br><span class="line"><span class="keyword">if</span> (firstword)</span><br><span class="line">firstword = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">transform</span>(word, trans_map);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">ifs1</span><span class="params">(<span class="string">&quot;11.33-1.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs2</span><span class="params">(<span class="string">&quot;11.33-2.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">word_trans</span>(ifs1, ifs2);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer(第10章 泛型容器)</title>
      <link href="/post/c-primer-di-10-zhang/"/>
      <url>/post/c-primer-di-10-zhang/</url>
      
        <content type="html"><![CDATA[<h5 id="10-1"><a href="#10-1" class="headerlink" title="10.1"></a>10.1</h5><p>1：知识点：泛型算法：算法是因为其实现了一些经典算法的公共接口，排序和搜索。泛型是因为他们可以作用于不同类型的元素和多种容器类型甚至是内置数组。故称泛型算法</p><p>知识点2：基本上都定义在algorithm和numeric两个头文件中</p><p>知识点3：这些算法一般情况下只作用于迭代器之上，不对容器进行直接操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; i) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> val = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">res = <span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), val);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;val: &quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; 出现&quot;</span> &lt;&lt; res &lt;&lt; <span class="string">&quot;次&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-2"><a href="#10-2" class="headerlink" title="10.2"></a>10.2</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">list&lt;string&gt;li;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">li.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line">string val = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">res = <span class="built_in">count</span>(li.<span class="built_in">begin</span>(), li.<span class="built_in">end</span>(), val);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;val: &quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; 出现&quot;</span> &lt;&lt; res &lt;&lt; <span class="string">&quot;次&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-6"><a href="#10-6" class="headerlink" title="10.6"></a>10.6</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="built_in">fill_n</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">size</span>(),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-9"><a href="#10-9" class="headerlink" title="10.9"></a>10.9</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printV</span><span class="params">(vector&lt;string&gt;v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">elimDups</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printV</span>(words);</span><br><span class="line"><span class="keyword">auto</span> end_unique = <span class="built_in">unique</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printV</span>(words);</span><br><span class="line">words.<span class="built_in">erase</span>(end_unique,words.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printV</span>(words);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-12"><a href="#10-12" class="headerlink" title="10.12"></a>10.12</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string bn;</span><br><span class="line"><span class="built_in">Sales_data</span>(string s) :<span class="built_in">bn</span>(s) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">isbn</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compareIsbn</span><span class="params">(Sales_data s1, Sales_data s2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.<span class="built_in">isbn</span>() &lt; s2.<span class="built_in">isbn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_Sa</span><span class="params">(vector&lt;Sales_data&gt;v)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stable_sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), compareIsbn);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">cout &lt;&lt; i.<span class="built_in">isbn</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">vector&lt;Sales_data&gt;v;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">Sales_data</span>(s));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort_Sa</span>(v);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-13"><a href="#10-13" class="headerlink" title="10.13"></a>10.13</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func5</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt; <span class="number">5</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">vector&lt;string&gt;words;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">words.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> it = <span class="built_in">partition</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), func5);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = words.<span class="built_in">begin</span>(); i != it; ++i) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h5><p>知识点1：我们希望对算法进行更多参数的操作，衍生出lambda表达式，一个lambda表达式表示一个可调用代码单元，它可以定义在函数的内部。表达式的形式：f = <a href="参数列表">捕获列表</a>{函数体}，参数列表为空时，()可省略。<br>知识点2：如果未指定返回内容，则lambda返回void。</p><p>知识点3：lambda只有在捕获列表中捕获一个它所在函数的局部变量才能在函数体中使用该变量，lambda可以直接使用定义在函数之外的名字或者局部static变量</p><h5 id="10-14"><a href="#10-14" class="headerlink" title="10.14"></a>10.14</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> f = [](<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b) &#123;<span class="keyword">return</span>  a + b; &#125;;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">cout &lt;&lt; <span class="built_in">f</span>(a, b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-15"><a href="#10-15" class="headerlink" title="10.15"></a>10.15</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [a](<span class="type">int</span> b) &#123;<span class="keyword">return</span> a + b; &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">f</span>(<span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-17"><a href="#10-17" class="headerlink" title="10.17"></a>10.17</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stable_sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [](Sales_data s1, Sales_data s2) &#123;<span class="keyword">return</span> s1.<span class="built_in">isbn</span>() &lt; s2.<span class="built_in">isbn</span>(); &#125;);</span><br></pre></td></tr></table></figure><p>partition()返回的是最后一个使谓词为true的元素的后一个位置的迭代器</p><p>find_if()返回的是第一个使谓词返回非0值的元素，若不存在这样的元素，则返回尾迭代器</p><h5 id="10-20"><a href="#10-20" class="headerlink" title="10.20"></a>10.20</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt;v;</span><br><span class="line">string s;</span><br><span class="line">string::size_type sz=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> wc = <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [=](<span class="type">const</span> string&amp; a) &#123;<span class="keyword">return</span> a.<span class="built_in">size</span>() &gt; sz; &#125;);</span><br><span class="line">cout &lt;&lt; wc &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-21"><a href="#10-21" class="headerlink" title="10.21"></a>10.21</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [&amp;n]()-&gt;<span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123; --n; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">f</span>()) &#123;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-22"><a href="#10-22" class="headerlink" title="10.22"></a>10.22</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func6</span><span class="params">(<span class="type">const</span> string&amp; s, string::size_type sz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">size</span>() &lt;= sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt;v;</span><br><span class="line">string s;</span><br><span class="line">string::size_type sz=<span class="number">0</span> ;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> wc = <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">bind</span>(func6, _1, <span class="number">6</span>));</span><br><span class="line">cout &lt;&lt; wc &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-24"><a href="#10-24" class="headerlink" title="10.24"></a>10.24</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check_size</span><span class="params">(<span class="type">int</span> sz, string s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz &gt; s.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">string s&#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> wc = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">bind</span>(check_size, _1, s));</span><br><span class="line">cout &lt;&lt; *wc &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-27"><a href="#10-27" class="headerlink" title="10.27"></a>10.27</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>&#125;;</span><br><span class="line">list&lt;<span class="type">int</span>&gt;lst;</span><br><span class="line"><span class="built_in">unique_copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">back_inserter</span>(lst));</span><br></pre></td></tr></table></figure><h5 id="10-28"><a href="#10-28" class="headerlink" title="10.28"></a>10.28</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v3;</span><br><span class="line"><span class="built_in">copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">inserter</span>(v1,v1.<span class="built_in">begin</span>()));</span><br><span class="line"><span class="built_in">copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">back_inserter</span>(v2));</span><br><span class="line"><span class="built_in">copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">front_inserter</span>(v3));<span class="comment">//不支持</span></span><br></pre></td></tr></table></figure><h5 id="10-29"><a href="#10-29" class="headerlink" title="10.29"></a>10.29</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">&quot;10_29.txt&quot;</span>)</span></span>;</span><br><span class="line">vector&lt;string&gt;v;</span><br><span class="line"><span class="function">istream_iterator&lt;string&gt; <span class="title">it</span><span class="params">(in)</span>, end</span>;</span><br><span class="line"><span class="comment">//while (it != end) &#123;</span></span><br><span class="line"><span class="comment">//v.push_back(*it++);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="built_in">copy</span>(it, end, <span class="built_in">back_inserter</span>(v));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-30"><a href="#10-30" class="headerlink" title="10.30"></a>10.30</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">istream_iterator&lt;<span class="type">int</span>&gt;<span class="built_in">str</span>(cin), end;</span><br><span class="line"><span class="built_in">copy</span>(str, end, <span class="built_in">back_inserter</span>(v));</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-31"><a href="#10-31" class="headerlink" title="10.31"></a>10.31</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">istream_iterator&lt;<span class="type">int</span>&gt;<span class="built_in">str</span>(cin), end;</span><br><span class="line"><span class="built_in">copy</span>(str, end, <span class="built_in">back_inserter</span>(v));</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="built_in">unique_copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">back_inserter</span>(v1));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v1) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-33"><a href="#10-33" class="headerlink" title="10.33"></a>10.33</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">&quot;1.txt&quot;</span>)</span></span>;<span class="comment">//导入第一个参数，作为输入文件</span></span><br><span class="line"><span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">it1</span><span class="params">(in)</span>, end</span>;<span class="comment">//定义流迭代器，输入流，和输入流的尾迭代器</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec1;<span class="comment">//存储用vector</span></span><br><span class="line"><span class="comment">/*copy(it1,end,back_inserter(vec1));//将流中数据存入vector*/</span></span><br><span class="line"><span class="keyword">while</span> (it1 != end)</span><br><span class="line">&#123;</span><br><span class="line">vec1.<span class="built_in">push_back</span>(*it1);</span><br><span class="line">++it1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">&quot;even.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out2</span><span class="params">(<span class="string">&quot;odd.txt&quot;</span>)</span></span>;<span class="comment">//目标写文件</span></span><br><span class="line"><span class="function">ostream_iterator&lt;<span class="type">int</span>&gt; <span class="title">it2</span><span class="params">(out, <span class="string">&quot;\n&quot;</span>)</span></span>;<span class="comment">//定义流迭代器，输出流，每行结尾换行</span></span><br><span class="line"><span class="function">ostream_iterator&lt;<span class="type">int</span>&gt; <span class="title">it3</span><span class="params">(out2, <span class="string">&quot; &quot;</span>)</span></span>;<span class="comment">//定义流迭代器，输出流</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vec1.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vec1[i] % <span class="number">2</span> == <span class="number">0</span>)<span class="comment">//偶数</span></span><br><span class="line">&#123;</span><br><span class="line">*it2++ = vec1[i];<span class="comment">//偶数放在even.txt中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*it3++ = vec1[i];<span class="comment">//奇数放在odd.txt中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-34"><a href="#10-34" class="headerlink" title="10.34"></a>10.34</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> r_it = vec.<span class="built_in">rbegin</span>(); r_it != vec.<span class="built_in">rend</span>(); ++r_it) &#123;</span><br><span class="line">cout &lt;&lt; *r_it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-35"><a href="#10-35" class="headerlink" title="10.35"></a>10.35</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">end</span>(); it != vec.<span class="built_in">begin</span>(); --it) &#123;</span><br><span class="line">cout &lt;&lt; *(it - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-36"><a href="#10-36" class="headerlink" title="10.36"></a>10.36</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find(lst.begin(), lst.end(), 0);</span><br></pre></td></tr></table></figure><h5 id="10-37"><a href="#10-37" class="headerlink" title="10.37"></a>10.37</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">list&lt;<span class="type">int</span>&gt;lst;</span><br><span class="line"><span class="built_in">copy</span>( vec.<span class="built_in">rbegin</span>()+<span class="number">3</span>, vec.<span class="built_in">rend</span>() - <span class="number">2</span>, <span class="built_in">back_inserter</span>(lst));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : lst) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-42"><a href="#10-42" class="headerlink" title="10.42"></a>10.42</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1.<span class="built_in">sort</span>();<span class="comment">//使用其成员函数版本的算法，排序</span></span><br><span class="line">list1.<span class="built_in">unique</span>();<span class="comment">//删除相同元素</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer(第9章 顺序容器)</title>
      <link href="/post/c-primer-di-9-zhang/"/>
      <url>/post/c-primer-di-9-zhang/</url>
      
        <content type="html"><![CDATA[<h5 id="9-2"><a href="#9-2" class="headerlink" title="9.2"></a>9.2</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list&lt;deque&lt;<span class="type">int</span>&gt;&gt;;</span><br></pre></td></tr></table></figure><h5 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a>9.4</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;::iterator begin, vector&lt;<span class="type">int</span>&gt;::iterator end, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (begin != end) &#123;</span><br><span class="line"><span class="keyword">if</span> (*begin == n)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">++begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-7-9-8"><a href="#9-7-9-8" class="headerlink" title="9.7-9.8"></a>9.7-9.8</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::size_type <span class="comment">//size_type指的是无符号整数类型</span></span><br><span class="line">list&lt;string&gt;::iterator || list&lt;string&gt;::const_iterator <span class="comment">//读操作</span></span><br><span class="line">list&lt;string&gt;::iterator<span class="comment">//写操作</span></span><br></pre></td></tr></table></figure><h5 id="9-13"><a href="#9-13" class="headerlink" title="9.13"></a>9.13</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt;li;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec;</span><br><span class="line">vector&lt;<span class="type">double</span>&gt;<span class="built_in">vec1</span>(li.<span class="built_in">begin</span>(), li.<span class="built_in">end</span>());</span><br><span class="line">vector&lt;<span class="type">double</span>&gt;<span class="built_in">vec2</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//容器之间的拷贝，容器的类型和其中元素的类型都必须相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用迭代器进行拷贝，只需要其元素的范围，利用的是迭代器范围的对应元素进行初始化</span></span><br></pre></td></tr></table></figure><h5 id="9-15"><a href="#9-15" class="headerlink" title="9.15"></a>9.15</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func3</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;v1, vector&lt;<span class="type">int</span>&gt;&amp;v2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v1 == v2)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-16"><a href="#9-16" class="headerlink" title="9.16"></a>9.16</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func3</span><span class="params">(list&lt;<span class="type">int</span>&gt;&amp;v1, vector&lt;<span class="type">int</span>&gt;&amp;v2)</span> </span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">v3</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">if</span> (v3 == v2)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-18"><a href="#9-18" class="headerlink" title="9.18"></a>9.18</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;string&gt;dq;<span class="comment">//9.19 将deque改成list</span></span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">dq.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = dq.<span class="built_in">begin</span>(); it != dq.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-20"><a href="#9-20" class="headerlink" title="9.20"></a>9.20</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt;li&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;odd;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;even;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : li) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">odd.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">even.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-22"><a href="#9-22" class="headerlink" title="9.22"></a>9.22</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;iv&#123;<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span> some_val = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator iter = iv.<span class="built_in">begin</span>(), mid = iv.<span class="built_in">begin</span>() + iv.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (iter != mid) &#123;</span><br><span class="line"><span class="keyword">if</span> (*iter == some_val)</span><br><span class="line">&#123;</span><br><span class="line">iter = iv.<span class="built_in">insert</span>(iter, <span class="number">2</span> * some_val);</span><br><span class="line">mid = iv.<span class="built_in">begin</span>() + iv.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">iter++;</span><br><span class="line">&#125;</span><br><span class="line">iter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : iv) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;<span class="comment">//0 20 10 10 30 10</span></span><br></pre></td></tr></table></figure><h5 id="9-26"><a href="#9-26" class="headerlink" title="9.26"></a>9.26</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//erase()操作返回的是最后一个被删元素的后一个位置</span></span><br><span class="line"><span class="type">int</span> ia[] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">55</span>,<span class="number">89</span> &#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">vec</span>(ia, <span class="built_in">end</span>(ia));</span><br><span class="line">list&lt;<span class="type">int</span>&gt;<span class="built_in">li</span>(ia, <span class="built_in">end</span>(ia));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); ) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it % <span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">it = vec.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">++it;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>();) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it % <span class="number">2</span>)</span><br><span class="line">it = li.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">++it;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-27"><a href="#9-27" class="headerlink" title="9.27"></a>9.27</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ia[] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">55</span>,<span class="number">89</span> &#125;;</span><br><span class="line">forward_list&lt;<span class="type">int</span>&gt;<span class="built_in">fl</span>(ia, <span class="built_in">end</span>(ia));</span><br><span class="line"><span class="keyword">auto</span> prev = fl.<span class="built_in">before_begin</span>();</span><br><span class="line"><span class="keyword">auto</span> curr = fl.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (curr != fl.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (*curr % <span class="number">2</span>) &#123;</span><br><span class="line">curr = fl.<span class="built_in">erase_after</span>(prev);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">prev = curr;</span><br><span class="line">++curr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-28"><a href="#9-28" class="headerlink" title="9.28"></a>9.28</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">forward_list&lt;string&gt; <span class="title">func</span><span class="params">(forward_list&lt;string&gt;fl, string s1, string s2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> it2 = fl.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">auto</span> it1 = fl.<span class="built_in">before_begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it2 != fl.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it2 == s1) &#123;</span><br><span class="line">fl.<span class="built_in">insert_after</span>(it2, s2);</span><br><span class="line"><span class="keyword">return</span> fl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">it1 = it2;</span><br><span class="line">++it2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fl.<span class="built_in">insert_after</span>(it1,s2);</span><br><span class="line"><span class="keyword">return</span> fl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-31"><a href="#9-31" class="headerlink" title="9.31"></a>9.31</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">forward_list&lt;<span class="type">int</span>&gt;fl&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it2 = fl.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">auto</span> it1 = fl.<span class="built_in">before_begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it2 != fl.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it2 % <span class="number">2</span>) &#123;</span><br><span class="line">it2 = fl.<span class="built_in">insert_after</span>(it2, *it2);</span><br><span class="line">it1 = it2;</span><br><span class="line">++it2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">it2 = fl.<span class="built_in">erase_after</span>(it1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-41"><a href="#9-41" class="headerlink" title="9.41"></a>9.41</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">char</span>&gt; vc;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">vc.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(vc.begin(),vc.end())</span></span>;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h5 id="9-43"><a href="#9-43" class="headerlink" title="9.43"></a>9.43</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string &amp;s, string &amp;oldVal, string &amp;newVal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> iter = s.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (iter + oldVal.<span class="built_in">size</span>() != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (oldVal == <span class="built_in">string</span>(iter, iter+oldVal.<span class="built_in">size</span>())) &#123;</span><br><span class="line">iter = s.<span class="built_in">erase</span>(iter, iter + oldVal.<span class="built_in">size</span>());</span><br><span class="line">iter = s.<span class="built_in">insert</span>(iter, newVal.<span class="built_in">begin</span>(), newVal.<span class="built_in">end</span>());</span><br><span class="line">iter += newVal.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">++iter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;though,you don&#x27;t love me&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">oldVal</span><span class="params">(<span class="string">&quot;though&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">newVal</span><span class="params">(<span class="string">&quot;tho&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">func</span>(s, oldVal, newVal);</span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-44"><a href="#9-44" class="headerlink" title="9.44"></a>9.44</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string &amp;s, string &amp;oldVal, string &amp;newVal)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + oldVal.<span class="built_in">size</span>() &lt; s.<span class="built_in">size</span>();++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (oldVal == s.<span class="built_in">substr</span>(i,oldVal.<span class="built_in">size</span>())) &#123;</span><br><span class="line">s.<span class="built_in">replace</span>(i, oldVal.<span class="built_in">size</span>(), newVal);</span><br><span class="line">i += newVal.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-45"><a href="#7-45" class="headerlink" title="7.45"></a>7.45</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string&amp; name, string&amp; qz, string&amp; hz)</span> </span>&#123;</span><br><span class="line">name.<span class="built_in">insert</span>(name.<span class="built_in">begin</span>(), qz.<span class="built_in">begin</span>(), qz.<span class="built_in">end</span>());</span><br><span class="line">name.<span class="built_in">append</span>(hz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-46"><a href="#7-46" class="headerlink" title="7.46"></a>7.46</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string&amp; name, string&amp; qz, string&amp; hz)</span> </span>&#123;</span><br><span class="line">name.<span class="built_in">insert</span>(<span class="number">0</span>,qz);</span><br><span class="line">name.<span class="built_in">insert</span>(name.<span class="built_in">size</span>(), hz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-47"><a href="#7-47" class="headerlink" title="7.47"></a>7.47</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;ab2c3d7R4E6&quot;</span>)</span></span>;</span><br><span class="line">string numbers&#123; <span class="string">&quot;123456789&quot;</span> &#125;;</span><br><span class="line">string alphabet&#123; <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span> &#125;;</span><br><span class="line">string::size_type pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((pos = s.<span class="built_in">find_first_of</span>(numbers, pos)) != string::npos) &#123;</span><br><span class="line">cout &lt;&lt; s[pos] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((pos = s.<span class="built_in">find_first_of</span>(alphabet, pos)) != string::npos) &#123;</span><br><span class="line">cout &lt;&lt; s[pos] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find_first_not_of</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;ab2c3d7R4E6&quot;</span>)</span></span>;</span><br><span class="line">string numbers&#123; <span class="string">&quot;123456789&quot;</span> &#125;;</span><br><span class="line">string alphabet&#123; <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span> &#125;;</span><br><span class="line">string::size_type pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((pos = s.<span class="built_in">find_first_not_of</span>(alphabet, pos)) != string::npos) &#123;</span><br><span class="line">cout &lt;&lt; s[pos] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((pos = s.<span class="built_in">find_first_not_of</span>(numbers, pos)) != string::npos) &#123;</span><br><span class="line">cout &lt;&lt; s[pos] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-49"><a href="#9-49" class="headerlink" title="9.49"></a>9.49</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">cender</span><span class="params">(<span class="string">&quot;bdfhkltgjpqy&quot;</span>)</span></span>;</span><br><span class="line">string::size_type pos = <span class="number">0</span>, prepos = <span class="number">0</span>;</span><br><span class="line">string::size_type len = <span class="number">0</span>;</span><br><span class="line">string res;</span><br><span class="line"><span class="keyword">while</span> ((pos = str.<span class="built_in">find_first_of</span>(cender, pos)) != string::npos) &#123;</span><br><span class="line"><span class="keyword">if</span> (pos - prepos &gt; len) &#123;</span><br><span class="line">len = pos - prepos;</span><br><span class="line">res = str.<span class="built_in">substr</span>(prepos, len);</span><br><span class="line">&#125;</span><br><span class="line">prepos = pos+<span class="number">1</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; len &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; res;</span><br></pre></td></tr></table></figure><h5 id="9-50"><a href="#9-50" class="headerlink" title="9.50"></a>9.50</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt;vec&#123; <span class="string">&quot;3.14&quot;</span>,<span class="string">&quot;1.23&quot;</span>,<span class="string">&quot;4.89&quot;</span>,<span class="string">&quot;4.56&quot;</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> s : vec) &#123;</span><br><span class="line">i += <span class="built_in">stoi</span>(s);</span><br><span class="line">f += <span class="built_in">stof</span>(s);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; f &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h5 id="9-51"><a href="#9-51" class="headerlink" title="9.51"></a>9.51</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> string mm[<span class="number">12</span>] = &#123; <span class="string">&quot;Jan&quot;</span>,<span class="string">&quot;Feb&quot;</span>,<span class="string">&quot;Mar&quot;</span>,<span class="string">&quot;Apr&quot;</span>,<span class="string">&quot;May&quot;</span>,<span class="string">&quot;Jun&quot;</span>,<span class="string">&quot;Jul&quot;</span>,<span class="string">&quot;Aug&quot;</span>,<span class="string">&quot;Sept&quot;</span>,<span class="string">&quot;Oct&quot;</span>,<span class="string">&quot;Nov&quot;</span>,<span class="string">&quot;Dec&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findmonth</span><span class="params">(<span class="type">const</span> string&amp; mon)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> pos;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> ((pos = mon.<span class="built_in">find</span>(mm[i])) != string::npos) &#123;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Date</span>(<span class="type">const</span> string&amp; str) &#123;</span><br><span class="line">string data_str = str;</span><br><span class="line">string::size_type index1 = <span class="number">0</span>;</span><br><span class="line">string::size_type index2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (str.<span class="built_in">find</span>(<span class="string">&#x27;,&#x27;</span>) != string::npos) &#123;</span><br><span class="line">index1 = str.<span class="built_in">find</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">index2 = str.<span class="built_in">find</span>(<span class="string">&#x27;,&#x27;</span>, index1 + <span class="number">1</span>);</span><br><span class="line">string mon = str.<span class="built_in">substr</span>(<span class="number">0</span>, index1);</span><br><span class="line">month = <span class="built_in">findmonth</span>(mon);</span><br><span class="line">day = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index1 + <span class="number">1</span>, index2-index1<span class="number">-1</span>));</span><br><span class="line">year = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index2 + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str.<span class="built_in">find</span>(<span class="string">&#x27;/&#x27;</span>) != string::npos) &#123;</span><br><span class="line">index1 = str.<span class="built_in">find_first_of</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">index2 = str.<span class="built_in">find_first_of</span>(<span class="string">&#x27;/&#x27;</span>, index1 + <span class="number">1</span>);</span><br><span class="line">year = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index2 + <span class="number">1</span>));</span><br><span class="line">month = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index1 + <span class="number">1</span>, index2 - <span class="number">1</span> - index1));</span><br><span class="line">day = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(<span class="number">0</span>, index1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">index1 = str.<span class="built_in">find_first_of</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">index2 = str.<span class="built_in">find_first_of</span>(<span class="string">&#x27; &#x27;</span>, index1 + <span class="number">1</span>);</span><br><span class="line">string mon = str.<span class="built_in">substr</span>(<span class="number">0</span>, index1);</span><br><span class="line">month = <span class="built_in">findmonth</span>(mon);</span><br><span class="line">day = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index1 + <span class="number">1</span>, index2 - <span class="number">1</span> - index1));</span><br><span class="line">year = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(index2 + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Year:&quot;</span> &lt;&lt; year &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;Month:&quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;Day:&quot;</span> &lt;&lt; day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">unsigned</span> year, month, day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string d1 = <span class="string">&quot;May 5,2016&quot;</span>, d2 = <span class="string">&quot;9/9/1999&quot;</span>, d3 = <span class="string">&quot;Mar 11 2022&quot;</span>;</span><br><span class="line"><span class="function">Date <span class="title">a</span><span class="params">(d1)</span>, <span class="title">b</span><span class="params">(d2)</span>, <span class="title">c</span><span class="params">(d3)</span></span>;</span><br><span class="line">a.<span class="built_in">getdate</span>();</span><br><span class="line">b.<span class="built_in">getdate</span>();</span><br><span class="line">c.<span class="built_in">getdate</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-52"><a href="#9-52" class="headerlink" title="9.52"></a>9.52</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">func</span><span class="params">(string &amp;s)</span> </span>&#123;</span><br><span class="line"><span class="function">string <span class="title">suanshu</span><span class="params">(<span class="string">&quot;+-*/%&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (s.<span class="built_in">find_first_of</span>(suanshu) != string::npos) &#123;</span><br><span class="line"><span class="keyword">auto</span> pos1 = s.<span class="built_in">find_first_of</span>(suanshu);</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>, pos1));</span><br><span class="line"><span class="type">int</span> b = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(pos1 + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (s[pos1] == <span class="string">&#x27;+&#x27;</span>)s = <span class="built_in">to_string</span>(a + b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[pos1]==<span class="string">&#x27;-&#x27;</span>)s = <span class="built_in">to_string</span>(a - b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[pos1] == <span class="string">&#x27;*&#x27;</span>)s = <span class="built_in">to_string</span>(a * b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[pos1] == <span class="string">&#x27;/&#x27;</span>)s = <span class="built_in">to_string</span>(a / b);</span><br><span class="line"><span class="keyword">else</span>s = <span class="built_in">to_string</span>(a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;5+(1+2)+(4-3)*6/(11%3)&quot;</span>)</span></span>;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt;st;</span><br><span class="line">string::size_type pos1 = <span class="number">0</span>;</span><br><span class="line">string::size_type pos2 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = str.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">string temp;</span><br><span class="line"><span class="keyword">while</span> (!st.<span class="built_in">empty</span>()&amp;&amp;st.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">temp += st.<span class="built_in">top</span>();</span><br><span class="line"><span class="comment">//cout &lt;&lt; st.top() &lt;&lt; endl;</span></span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="built_in">reverse</span>(temp.<span class="built_in">begin</span>(),temp.<span class="built_in">end</span>());</span><br><span class="line">temp = <span class="built_in">func</span>(temp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> c : temp) &#123;</span><br><span class="line">st.<span class="built_in">push</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">st.<span class="built_in">push</span>(str[i]);</span><br><span class="line"><span class="comment">//cout &lt;&lt; st.top() &lt;&lt; endl;</span></span><br><span class="line">len = str.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line">str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">str += st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer(第8章 IO库)</title>
      <link href="/post/c-primer-di-8-zhang/"/>
      <url>/post/c-primer-di-8-zhang/</url>
      
        <content type="html"><![CDATA[<h5 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">istream&amp; <span class="title">iofunc</span><span class="params">(istream&amp; is)</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (is &gt;&gt; s) &#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">is.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">iofunc</span>(cin);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-4"><a href="#8-4" class="headerlink" title="8.4"></a>8.4</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt;v;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;ifile.txt&quot;</span>, ios::in);</span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="built_in">is_open</span>()) <span class="comment">//if(ifs&gt;&gt;s)逐个单词</span></span><br><span class="line">   &#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(ifs,s)) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(s);</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-10"><a href="#8-10" class="headerlink" title="8.10"></a>8.10</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string line, word;</span><br><span class="line">vector&lt;string&gt; vec;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(cin,line))</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(line);</span><br><span class="line">cout &lt;&lt; vec.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"><span class="function">istringstream <span class="title">record</span><span class="params">(vec.back())</span></span>;</span><br><span class="line"><span class="keyword">while</span> (record &gt;&gt; word) &#123;</span><br><span class="line">cout &lt;&lt; word &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="8-11"><a href="#8-11" class="headerlink" title="8.11"></a>8.11</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PersonInfo</span> &#123;</span><br><span class="line">string name;</span><br><span class="line">vector&lt;string&gt; phones;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string line, word;</span><br><span class="line">vector&lt;PersonInfo&gt; people;</span><br><span class="line">istringstream record;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(cin, line)) &#123;</span><br><span class="line">record.<span class="built_in">str</span>(line);</span><br><span class="line">PersonInfo info;</span><br><span class="line">record &gt;&gt; info.name;</span><br><span class="line"><span class="keyword">while</span> (record &gt;&gt; word) &#123;</span><br><span class="line">info.phones.<span class="built_in">push_back</span>(word);</span><br><span class="line">&#125;</span><br><span class="line">record.<span class="built_in">clear</span>();<span class="comment">//复位</span></span><br><span class="line">people.<span class="built_in">push_back</span>(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;entry : people) &#123;</span><br><span class="line">cout &lt;&lt; entry.name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;ph : entry.phones) &#123;</span><br><span class="line">cout &lt;&lt; ph &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer(第7章 类)</title>
      <link href="/post/c-primer-di-7-zhang/"/>
      <url>/post/c-primer-di-7-zhang/</url>
      
        <content type="html"><![CDATA[<h5 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string bookNo;</span><br><span class="line"><span class="type">unsigned</span> units_sold;</span><br><span class="line"><span class="type">double</span> revenue;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function">string <span class="title">isbn</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bookNo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp; rhs)</span> </span>&#123;</span><br><span class="line">units_sold += rhs.units_sold;</span><br><span class="line">revenue += rhs.revenue;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (units_sold) &#123;</span><br><span class="line"><span class="keyword">return</span> revenue / units_sold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="7-4"><a href="#7-4" class="headerlink" title="7.4"></a>7.4</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_Name;</span><br><span class="line">string m_Address;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(string name,string address) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Address = address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Show_info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;&#x27;s&quot;</span> &lt;&lt; <span class="string">&quot; address is &quot;</span> &lt;&lt;  <span class="keyword">this</span>-&gt;m_Address &lt;&lt; endl;</span><br><span class="line">&#125;<span class="comment">//类内定义函数</span></span><br><span class="line"></span><br><span class="line"><span class="function">string&amp; <span class="type">const</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string&amp; <span class="type">const</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="7-24"><a href="#7-24" class="headerlink" title="7.24"></a>7.24</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">using</span> pos = string::size_type;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Screen</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Screen</span>(pos hei, pos wid) :<span class="built_in">height</span>(hei),<span class="built_in">width</span>(wid) &#123;&#125;;</span><br><span class="line"><span class="built_in">Screen</span>(pos hei, pos wid, <span class="type">char</span> c) :<span class="built_in">height</span>(hei), <span class="built_in">width</span>(wid), <span class="built_in">contents</span>(hei*wid,c) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">pos  cursor = <span class="number">0</span>;</span><br><span class="line">pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">string contents;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="7-27"><a href="#7-27" class="headerlink" title="7.27"></a>7.27</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> pos = string::size_type;</span><br><span class="line"><span class="built_in">Screen</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Screen</span>(pos hei, pos wid) :<span class="built_in">height</span>(hei),<span class="built_in">width</span>(wid) &#123;&#125;;</span><br><span class="line"><span class="built_in">Screen</span>(pos hei, pos wid, <span class="type">char</span> c) :<span class="built_in">height</span>(hei), <span class="built_in">width</span>(wid), <span class="built_in">contents</span>(hei*wid,c) &#123;&#125;;</span><br><span class="line"><span class="function">Screen &amp;<span class="title">move</span><span class="params">(pos r, pos c)</span></span>;</span><br><span class="line"><span class="function">Screen &amp;<span class="title">set</span><span class="params">(<span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function">Screen &amp;<span class="title">set</span><span class="params">(pos, pos, <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function">Screen &amp;<span class="title">display</span><span class="params">(ostream&amp; os)</span> </span>&#123;</span><br><span class="line"><span class="built_in">do_dispaly</span>(os);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">const</span> Screen &amp;<span class="title">display</span><span class="params">(ostream&amp; os)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="built_in">do_dispaly</span>(os);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">pos  cursor = <span class="number">0</span>;</span><br><span class="line">pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">string contents;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_dispaly</span><span class="params">(ostream&amp; os)</span><span class="type">const</span> </span>&#123;</span><br><span class="line">os &lt;&lt; contents;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::move</span><span class="params">(pos r, pos c)</span> </span>&#123;</span><br><span class="line">pos row = r * width;</span><br><span class="line">cursor = row + c;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::set</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">contents[cursor] = c;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::set</span><span class="params">(pos r, pos col, <span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">contents[r * width + col] = ch;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-31"><a href="#7-31" class="headerlink" title="7.31"></a>7.31</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line">Y* p;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span> &#123;</span><br><span class="line">X x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="7-32"><a href="#7-32" class="headerlink" title="7.32"></a>7.32</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> ScreenIndex = std::vector&lt;Screen&gt;::size_type;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(ScreenIndex)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;Screen&gt; screens;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Window_mgr::clear</span><span class="params">(ScreenIndex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line"><span class="built_in">Screen</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">Screen</span>(pos ht, pos wd) :<span class="built_in">height</span>(ht), <span class="built_in">width</span>(wd) &#123;&#125;</span><br><span class="line"><span class="built_in">Screen</span>(pos ht, pos wd, <span class="type">char</span> c) :<span class="built_in">height</span>(ht), <span class="built_in">width</span>(wd), <span class="built_in">contents</span>(ht* wd, c) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Screen&amp; <span class="title">set</span><span class="params">(<span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function">Screen&amp; <span class="title">set</span><span class="params">(pos, pos, <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function">Screen&amp; <span class="title">move</span><span class="params">(pos, pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> contents[cursor]; &#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">get</span><span class="params">(pos r, pos c)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> contents[r * width + c]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Screen&amp; <span class="title">display</span><span class="params">(std::ostream&amp; os)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">do_display</span>(os);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> Screen&amp; <span class="title">display</span><span class="params">(std::ostream&amp; os)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">do_display</span>(os);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_display</span><span class="params">(std::ostream&amp; os)</span> <span class="type">const</span> </span>&#123; os &lt;&lt; contents; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">size_t</span> access_ctr;</span><br><span class="line">pos height, width, cursor;</span><br><span class="line">std::string contents;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Window_mgr::clear</span><span class="params">(ScreenIndex i)</span> </span>&#123;</span><br><span class="line">Screen&amp; s = screens[i];</span><br><span class="line">s.contents = <span class="built_in">string</span>(s.height * s.width, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-35"><a href="#7-35" class="headerlink" title="7.35"></a>7.35</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> string Type;</span><br><span class="line"><span class="function">Type <span class="title">initVal</span><span class="params">()</span></span>; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exercise</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">double</span> Type;</span><br><span class="line">    <span class="function">Type <span class="title">setVal</span><span class="params">(Type)</span></span>; <span class="comment">// double</span></span><br><span class="line">    <span class="function">Type <span class="title">initVal</span><span class="params">()</span></span>; <span class="comment">// double</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Type <span class="title">Exercise::setVal</span><span class="params">(Type parm)</span> </span>&#123;  <span class="comment">// first is `string`, second is `double`</span></span><br><span class="line">    val = parm + <span class="built_in">initVal</span>();    </span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-41"><a href="#7-41" class="headerlink" title="7.41"></a>7.41</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> std::istream &amp;<span class="title">read</span><span class="params">(std::istream &amp;is, Sales_data &amp;item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> std::ostream &amp;<span class="title">print</span><span class="params">(std::ostream &amp;os, <span class="type">const</span> Sales_data &amp;item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data &amp;lhs, <span class="type">const</span> Sales_data &amp;rhs)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p) : <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(p*n) </span><br><span class="line">&#123; </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Sales_data(const std::string &amp;s, unsigned n, double p)&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sales_data</span>() : <span class="built_in">Sales_data</span>(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>) </span><br><span class="line">&#123; </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Sales_data() : Sales_data(\&quot;\&quot;, 0, 0)&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s) : <span class="built_in">Sales_data</span>(s, <span class="number">0</span>, <span class="number">0</span>) </span><br><span class="line">&#123; </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Sales_data(const std::string &amp;s) : Sales_data&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sales_data</span>(std::istream &amp;is) : <span class="built_in">Sales_data</span>() </span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">read</span>(is, *<span class="keyword">this</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Sales_data(std::istream &amp;is) : Sales_data()&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line"><span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">std::string bookNo;</span><br><span class="line"><span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data&amp; <span class="title">Sales_data::combine</span><span class="params">(<span class="type">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">units_sold += rhs.units_sold;</span><br><span class="line">revenue += rhs.revenue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Sales_data::avg_price</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (units_sold)</span><br><span class="line"><span class="keyword">return</span> revenue / units_sold;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::istream &amp;<span class="title">read</span><span class="params">(std::istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> price = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">item.revenue = price * item.units_sold;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::ostream &amp;<span class="title">print</span><span class="params">(std::ostream &amp;os, <span class="type">const</span> Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">os &lt;&lt; item.<span class="built_in">isbn</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.<span class="built_in">avg_price</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data &amp;lhs, <span class="type">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Sales_data sum = lhs;</span><br><span class="line">sum.<span class="built_in">combine</span>(rhs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Sales_data <span class="title">a</span><span class="params">(<span class="string">&quot;0-1-999-9&quot;</span>, <span class="number">2</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Sales_data b;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">c</span><span class="params">(<span class="string">&quot;0-1-999-9&quot;</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">d</span><span class="params">(cin)</span></span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-43"><a href="#7-43" class="headerlink" title="7.43"></a>7.43</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NoDefault</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">NoDefault</span>(<span class="type">int</span> )&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NoDefault nd;</span><br><span class="line"><span class="built_in">C</span>():<span class="built_in">nd</span>(<span class="number">5</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer(第6章 函数)</title>
      <link href="/post/c-primer-di-6-zhang/"/>
      <url>/post/c-primer-di-6-zhang/</url>
      
        <content type="html"><![CDATA[<h5 id="6-10-6-12"><a href="#6-10-6-12" class="headerlink" title="6.10-6.12"></a>6.10-6.12</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset1</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span>* q)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> temp = *p;</span><br><span class="line">*p = *q;</span><br><span class="line">*q = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset2</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span>&amp; q)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> temp = p;</span><br><span class="line">p = q;</span><br><span class="line">q = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">42</span>, j = <span class="number">22</span>;</span><br><span class="line"><span class="built_in">reset1</span>(&amp;i, &amp;j);</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; j &lt;&lt; endl;<span class="comment">//22+42</span></span><br><span class="line"><span class="built_in">reset2</span>(i, j);</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; j &lt;&lt; endl;<span class="comment">//42+22</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-17"><a href="#6-17" class="headerlink" title="6.17"></a>6.17</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">test01</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isupper</span>(c))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">(string&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span>&amp; c : s) &#123;</span><br><span class="line">c = <span class="built_in">tolower</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s&#123; <span class="string">&quot;hello WorlD&quot;</span> &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">test01</span>(s);</span><br><span class="line"><span class="built_in">test02</span>(s);</span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-18"><a href="#6-18" class="headerlink" title="6.18"></a>6.18</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">matrix</span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(matrix&amp; i, matrix&amp; j)</span></span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::<span class="function">iterator <span class="title">change_val</span><span class="params">(<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;::iterator)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="6-21"><a href="#6-21" class="headerlink" title="6.21"></a>6.21</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">test01</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; i, <span class="type">const</span> <span class="type">int</span>* j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; *j)<span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> *j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i, t;</span><br><span class="line">cin &gt;&gt; i &gt;&gt; t;</span><br><span class="line"><span class="type">int</span>* j = &amp;t;</span><br><span class="line">cout &lt;&lt; <span class="built_in">test01</span>(i, j);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-22"><a href="#6-22" class="headerlink" title="6.22"></a>6.22</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">test01</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span>* q)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span>* temp = p;</span><br><span class="line">p = q;</span><br><span class="line">q = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-27"><a href="#6-27" class="headerlink" title="6.27"></a>6.27</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(initializer_list&lt;<span class="type">int</span>&gt;il)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; elem : il) &#123;</span><br><span class="line">res += elem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">initializer_list&lt;<span class="type">int</span>&gt;il&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func</span>(il);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="P-201-函数返回引用"><a href="#P-201-函数返回引用" class="headerlink" title="P 201 函数返回引用"></a>P 201 函数返回引用</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> temp;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">fn1</span><span class="params">(<span class="type">float</span> r)</span> </span>&#123;</span><br><span class="line">temp = r * r * <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span>&amp; <span class="title">fn2</span><span class="params">(<span class="type">float</span> r)</span> </span>&#123; <span class="comment">//&amp;说明返回的是temp的引用，换句话说就是返回temp本身</span></span><br><span class="line">    temp = r * r * <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> a = <span class="built_in">fn1</span>(<span class="number">5.0</span>); <span class="comment">//case 1：返回值</span></span><br><span class="line">    <span class="comment">//float &amp;b=fn1(5.0); //case 2:用函数的返回值作为引用的初始化值 [Error] invalid initialization of non-const reference of type &#x27;float&amp;&#x27; from an rvalue of type &#x27;float&#x27;</span></span><br><span class="line">                           <span class="comment">//（有些编译器可以成功编译该语句，但会给出一个warning） </span></span><br><span class="line">    <span class="type">float</span> c = <span class="built_in">fn2</span>(<span class="number">5.0</span>);<span class="comment">//case 3：返回引用</span></span><br><span class="line">    <span class="type">float</span>&amp; d = <span class="built_in">fn2</span>(<span class="number">5.0</span>);<span class="comment">//case 4：用函数返回的引用作为新引用的初始化值</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;<span class="comment">//78.5</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; b &lt;&lt; endl;//78.5</span></span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;<span class="comment">//78.5</span></span><br><span class="line">    cout &lt;&lt; d &lt;&lt; endl;<span class="comment">//78.5</span></span><br><span class="line">    temp = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; d &lt;&lt; endl;<span class="comment">//10</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-36-6-37"><a href="#6-36-6-37" class="headerlink" title="6.36-6.37"></a>6.36-6.37</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>(&amp;<span class="built_in">func</span>(<span class="built_in">string</span> (&amp; arrStr)[<span class="number">10</span>]))[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> arrT = string[<span class="number">10</span>];</span><br><span class="line"><span class="function">arrT&amp; <span class="title">func1</span><span class="params">(arrT&amp; arr)</span></span>;<span class="comment">//使用类型别名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func2</span><span class="params">(arrT&amp; arr)</span>-&gt;<span class="title">string</span><span class="params">(&amp;)</span>[10]</span>;<span class="comment">// 尾置返回</span></span><br><span class="line"></span><br><span class="line">string arrS[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">decltype</span> (arrS)&amp; <span class="built_in">func3</span>(arrT&amp; arr);<span class="comment">//decltype</span></span><br></pre></td></tr></table></figure><h5 id="6-38"><a href="#6-38" class="headerlink" title="6.38"></a>6.38</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(odd) &amp;<span class="built_in">arrPtr</span>(<span class="type">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> (i &amp; <span class="number">2</span>) ? odd : even;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-42"><a href="#6-42" class="headerlink" title="6.42"></a>6.42</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">make_plural</span><span class="params">(<span class="type">size_t</span> ctr, <span class="type">const</span> string&amp; word, <span class="type">const</span> string&amp; ending =<span class="string">&quot;s&quot;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (ctr &gt; <span class="number">1</span>) ? word + ending : word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">make_plural</span>(<span class="number">1</span>, <span class="string">&quot;success&quot;</span>, <span class="string">&quot;es&quot;</span>) &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; <span class="built_in">make_plural</span>(<span class="number">2</span>, <span class="string">&quot;success&quot;</span>, <span class="string">&quot;es&quot;</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">make_plural</span>(<span class="number">1</span>, <span class="string">&quot;failure&quot;</span>) &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; <span class="built_in">make_plural</span>(<span class="number">2</span>, <span class="string">&quot;failure&quot;</span>) &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-47"><a href="#6-47" class="headerlink" title="6.47"></a>6.47</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVec</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NDEBUG</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vector size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (!vec.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> tmp = vec.<span class="built_in">back</span>();</span><br><span class="line">vec.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">printVec</span>(vec);</span><br><span class="line">cout &lt;&lt; tmp &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;<span class="comment">//c++11特性</span></span><br><span class="line"><span class="built_in">printVec</span>(vec);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-55"><a href="#6-55" class="headerlink" title="6.55"></a>6.55</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span>  a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span> (*)(<span class="type">int</span>, <span class="type">int</span>)&gt;v&#123; add,sub,multi,divide &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> c : v)cout &lt;&lt; <span class="built_in">c</span>(<span class="number">4</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于博主</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到我的小站呀，很高兴遇见你！🤝"><a href="#欢迎来到我的小站呀，很高兴遇见你！🤝" class="headerlink" title="欢迎来到我的小站呀，很高兴遇见你！🤝"></a>欢迎来到我的小站呀，很高兴遇见你！🤝</h1><h2 id="🌟-相关网站"><a href="#🌟-相关网站" class="headerlink" title="🌟 相关网站"></a>🌟 <strong><em>相关网站</em></strong></h2><ul><li><strong>MzLmh主页：<a href="https://zy.mzlmh.top">https://zy.mzlmh.top</a></strong></li></ul><ul><li><strong>MzLmh导航：<a href="https://dh.mzlmh.top">https://dh.mzlmh.top</a></strong></li></ul><ul><li><strong>ChatGPT：<a href="https://ss.windcrain.top">https://ss.windcrain.top</a></strong></li></ul><ul><li><strong>网易云音乐播放器：<a href="https://music.windcrain.top">https://music.windcrain.top</a></strong></li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1393542028&auto=0&height=66"></iframe>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
